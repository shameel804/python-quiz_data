[
    {
        "q": "What does the deque object from the collections module provide?",
        "c": null,
        "o": [
            "A double-ended queue supporting fast appends and pops from both ends",
            "A dictionary with default values",
            "An unordered collection with no duplicates",
            "An immutable sequence"
        ]
    },
    {
        "q": "What will the following code output?",
        "c": "from collections import Counter\nprint(Counter('banana'))",
        "o": [
            "Counter({'a': 3, 'n': 2, 'b': 1})",
            "Counter({'b': 1, 'n': 2, 'a': 2})",
            "{'a': 3, 'n': 2, 'b': 1}",
            "[('a', 3), ('n', 2), ('b', 1)]"
        ]
    },
    {
        "q": "Which collections type automatically creates a default value for missing keys?",
        "c": null,
        "o": [
            "defaultdict",
            "Counter",
            "OrderedDict",
            "deque"
        ]
    },
    {
        "q": "How do you define a lightweight object type with named fields using the collections module?",
        "c": null,
        "o": [
            "namedtuple",
            "dataclass",
            "defaultdict",
            "tupledict"
        ]
    },
    {
        "q": "What does the heapq.heappush function do?",
        "c": null,
        "o": [
            "Pushes an item onto the heap while maintaining the heap property",
            "Sorts the heap in ascending order",
            "Removes the smallest item from the heap",
            "Reverses the heap"
        ]
    },
    {
        "q": "Which function returns the smallest item from the heap while maintaining the heap property?",
        "c": null,
        "o": [
            "heappop",
            "heapremove",
            "heapmin",
            "heapdel"
        ]
    },
    {
        "q": "What is the output of this code using heapq?",
        "c": "import heapq\nheap = [3, 1, 4]\nheapq.heapify(heap)\nheapq.heappush(heap, 2)\nprint(heap[0])",
        "o": [
            "1",
            "2",
            "3",
            "4"
        ]
    },
    {
        "q": "What does itertools.combinations('ABCD', 2) generate?",
        "c": null,
        "o": [
            "[('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'C'), ('B', 'D'), ('C', 'D')]",
            "[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D')]",
            "[('A', 'B'), ('B', 'C'), ('C', 'D')]",
            "[('A', 'B', 'C'), ('B', 'C', 'D')]"
        ]
    },
    {
        "q": "What is the output of the following code using itertools?",
        "c": "import itertools\nprint(list(itertools.permutations([1, 2], 2)))",
        "o": [
            "[(1, 2), (2, 1)]",
            "[(1, 2), (1, 2)]",
            "[(1, 1), (2, 2)]",
            "[[1, 2], [2, 1]]"
        ]
    },
    {
        "q": "What does the map() function do in Python?",
        "c": null,
        "o": [
            "Applies a function to all the items in an input iterable",
            "Filters elements from an iterable",
            "Reduces a sequence to a single value",
            "Creates a dictionary from two iterables"
        ]
    },
    {
        "q": "What is the output of this map() function?",
        "c": "print(list(map(str.upper, ['a', 'b', 'c'])))",
        "o": [
            "['A', 'B', 'C']",
            "['a', 'b', 'c']",
            "['A B C']",
            "['upper(a)', 'upper(b)', 'upper(c)']"
        ]
    },
    {
        "q": "What does the filter() function return?",
        "c": null,
        "o": [
            "An iterator yielding elements for which the function returns True",
            "All elements of the iterable",
            "A sorted list of elements",
            "Only unique values from the iterable"
        ]
    },
    {
        "q": "What is the output of the following code using filter()?",
        "c": "print(list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4])))",
        "o": [
            "[2, 4]",
            "[1, 3]",
            "[1, 2, 3, 4]",
            "[0]"
        ]
    },
    {
        "q": "What is the purpose of reduce() in Python?",
        "c": null,
        "o": [
            "To apply a function cumulatively to the items of an iterable, reducing it to a single value",
            "To filter values based on a condition",
            "To return the maximum of two values",
            "To sort a list"
        ]
    },
    {
        "q": "What is the result of this reduce() example?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [1, 2, 3, 4]))",
        "o": [
            "24",
            "10",
            "0",
            "None"
        ]
    },
    {
        "q": "Which of the following is a characteristic of collections.namedtuple?",
        "c": null,
        "o": [
            "It creates tuple subclasses with named fields accessible like attributes",
            "It returns a mutable dictionary",
            "It generates a list with named elements",
            "It sorts data automatically"
        ]
    },
    {
        "q": "What will the following code print?",
        "c": "from collections import defaultdict\nd = defaultdict(int)\nd['a'] += 1\nprint(d['a'])",
        "o": [
            "1",
            "0",
            "None",
            "Raises a KeyError"
        ]
    },
    {
        "q": "How do you initialize a deque with a maximum length of 3?",
        "c": null,
        "o": [
            "deque(maxlen=3)",
            "deque(size=3)",
            "deque(length=3)",
            "deque(limit=3)"
        ]
    },
    {
        "q": "What is the output of this deque operation?",
        "c": "from collections import deque\nd = deque([1, 2, 3])\nd.appendleft(0)\nprint(d)",
        "o": [
            "deque([0, 1, 2, 3])",
            "deque([1, 2, 3, 0])",
            "[0, 1, 2, 3]",
            "(0, 1, 2, 3)"
        ]
    },
    {
        "q": "Which heapq operation will return the n smallest elements from a dataset?",
        "c": null,
        "o": [
            "heapq.nsmallest",
            "heapq.heappop",
            "heapq.heapmin",
            "heapq.popn"
        ]
    },
    {
        "q": "What is the result of the following code?",
        "c": "import heapq\nnums = [5, 1, 3]\nprint(heapq.nlargest(2, nums))",
        "o": [
            "[5, 3]",
            "[1, 3]",
            "[5, 1]",
            "[3, 1]"
        ]
    },
    {
        "q": "What does itertools.product do?",
        "c": null,
        "o": [
            "Computes the Cartesian product of input iterables",
            "Generates permutations without repetition",
            "Filters elements based on a condition",
            "Computes the factorial of a number"
        ]
    },
    {
        "q": "What is the result of this itertools code?",
        "c": "import itertools\nprint(list(itertools.product([1, 2], ['a', 'b'])))",
        "o": [
            "[(1, 'a'), (1, 'b'), (2, 'a'), (2, 'b')]",
            "[('a', 1), ('b', 1), ('a', 2), ('b', 2)]",
            "[[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]",
            "[(1, 2, 'a', 'b')]"
        ]
    },
    {
        "q": "Which itertools function returns elements from the iterable as long as the predicate is true?",
        "c": null,
        "o": [
            "takewhile",
            "filterfalse",
            "accumulate",
            "dropwhile"
        ]
    },
    {
        "q": "What is the output of this code using map()?",
        "c": "def square(x): return x * x\nprint(list(map(square, [1, 2, 3])))",
        "o": [
            "[1, 4, 9]",
            "[1, 2, 3]",
            "[2, 3, 4]",
            "[1, 8, 27]"
        ]
    },
    {
        "q": "Which function can be used to reject elements based on a condition?",
        "c": null,
        "o": [
            "itertools.filterfalse",
            "filter",
            "map",
            "reduce"
        ]
    },
    {
        "q": "What will this filter() function return?",
        "c": "print(list(filter(None, [0, 1, '', 'hello', [], [1]])))",
        "o": [
            "[1, 'hello', [1]]",
            "[0, '', []]",
            "['hello', [1]]",
            "[None, 1, [1]]"
        ]
    },
    {
        "q": "Which function from functools is required to use reduce() in Python 3?",
        "c": null,
        "o": [
            "functools.reduce",
            "operator.reduce",
            "itertools.reduce",
            "reduce"
        ]
    },
    {
        "q": "What is the output of this reduce operation?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['a', 'b', 'c']))",
        "o": [
            "abc",
            "a b c",
            "['a', 'b', 'c']",
            "None"
        ]
    },
    {
        "q": "Which collections class can be used to implement a FIFO queue efficiently?",
        "c": null,
        "o": [
            "deque",
            "list",
            "tuple",
            "set"
        ]
    },
    {
        "q": "What is a key feature of collections.Counter?",
        "c": null,
        "o": [
            "It counts the frequency of elements in an iterable",
            "It creates a fixed-size list of integers",
            "It generates random values",
            "It creates a binary search tree"
        ]
    },
    {
        "q": "What is the output of the following code?",
        "c": "from collections import Counter\nprint(Counter(['x', 'y', 'x', 'z', 'x', 'y']))",
        "o": [
            "Counter({'x': 3, 'y': 2, 'z': 1})",
            "Counter({'x': 2, 'y': 3, 'z': 1})",
            "Counter({'z': 1, 'y': 1, 'x': 1})",
            "Counter({'x': 1, 'y': 1, 'z': 1})"
        ]
    },
    {
        "q": "Which method allows access to namedtuple fields using dot notation?",
        "c": null,
        "o": [
            "attribute access",
            "field index",
            "dict lookup",
            "list indexing"
        ]
    },
    {
        "q": "What is the result of this namedtuple example?",
        "c": "from collections import namedtuple\nPoint = namedtuple('Point', ['x', 'y'])\np = Point(2, 3)\nprint(p.x + p.y)",
        "o": [
            "5",
            "6",
            "2",
            "3"
        ]
    },
    {
        "q": "What does heapq.heapify() do to a list?",
        "c": null,
        "o": [
            "Transforms the list into a valid heap in-place",
            "Sorts the list in descending order",
            "Adds an element to the heap",
            "Deletes the largest element"
        ]
    },
    {
        "q": "What is the result after this heapq operation?",
        "c": "import heapq\nnums = [10, 20, 15]\nheapq.heapify(nums)\nheapq.heappush(nums, 5)\nprint(nums[0])",
        "o": [
            "5",
            "10",
            "15",
            "20"
        ]
    },
    {
        "q": "What is the output of this heap operation?",
        "c": "import heapq\nh = []\nheapq.heappush(h, 2)\nheapq.heappush(h, 1)\nprint(heapq.heappop(h))",
        "o": [
            "1",
            "2",
            "[1, 2]",
            "0"
        ]
    },
    {
        "q": "Which itertools function can be used to chain multiple iterables together?",
        "c": null,
        "o": [
            "itertools.chain",
            "itertools.product",
            "itertools.cycle",
            "itertools.zip_longest"
        ]
    },
    {
        "q": "What does the following itertools function return?",
        "c": "import itertools\nprint(list(itertools.chain([1, 2], [3, 4])))",
        "o": [
            "[1, 2, 3, 4]",
            "[[1, 2], [3, 4]]",
            "[(1, 2), (3, 4)]",
            "(1, 2, 3, 4)"
        ]
    },
    {
        "q": "Which itertools function repeats an element indefinitely?",
        "c": null,
        "o": [
            "cycle",
            "repeat",
            "permutations",
            "count"
        ]
    },
    {
        "q": "What will the following map code output?",
        "c": "print(list(map(lambda x: x + 1, [1, 2, 3])))",
        "o": [
            "[2, 3, 4]",
            "[1, 2, 3]",
            "[0, 1, 2]",
            "[3, 4, 5]"
        ]
    },
    {
        "q": "Which built-in function is best suited for removing elements that do not match a condition?",
        "c": null,
        "o": [
            "filter",
            "map",
            "reduce",
            "zip"
        ]
    },
    {
        "q": "What is the result of using filter with a lambda function?",
        "c": "print(list(filter(lambda x: x > 3, [1, 3, 4, 5])))",
        "o": [
            "[4, 5]",
            "[1, 3]",
            "[3, 4]",
            "[5]"
        ]
    },
    {
        "q": "What is the output of the following reduce() usage?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x - y, [10, 2, 1]))",
        "o": [
            "7",
            "9",
            "11",
            "-7"
        ]
    },
    {
        "q": "What does the following reduce code do?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['A', 'B', 'C']))",
        "o": [
            "ABC",
            "['A', 'B', 'C']",
            "A + B + C",
            "['ABC']"
        ]
    },
    {
        "q": "What is the output of the following Counter operation?",
        "c": "from collections import Counter\nc1 = Counter(a=3, b=1)\nc2 = Counter(a=1, b=2)\nprint(c1 + c2)",
        "o": [
            "Counter({'a': 4, 'b': 3})",
            "Counter({'a': 2, 'b': 1})",
            "Counter({'a': 3, 'b': 1})",
            "Counter({'a': 1, 'b': 2})"
        ]
    },
    {
        "q": "What happens when a missing key is accessed in a defaultdict with int as default factory?",
        "c": null,
        "o": [
            "It returns 0",
            "It raises a KeyError",
            "It returns None",
            "It returns an empty list"
        ]
    },
    {
        "q": "Which of the following is true about namedtuple?",
        "c": null,
        "o": [
            "Fields are accessible both by index and by name",
            "Fields can only be accessed by index",
            "Fields are mutable",
            "Fields must be unique integers"
        ]
    },
    {
        "q": "What is the output of this deque operation?",
        "c": "from collections import deque\nd = deque([1, 2, 3], maxlen=3)\nd.append(4)\nprint(d)",
        "o": [
            "deque([2, 3, 4])",
            "deque([1, 2, 3, 4])",
            "deque([1, 2, 3])",
            "deque([4, 2, 3])"
        ]
    },
    {
        "q": "What will be the output of this heapq example?",
        "c": "import heapq\nh = [20, 10, 30]\nheapq.heapify(h)\nheapq.heappop(h)\nprint(h)",
        "o": [
            "[20, 30]",
            "[10, 30]",
            "[10, 20]",
            "[30, 20]"
        ]
    },
    {
        "q": "Which of the following is true about heapq?",
        "c": null,
        "o": [
            "It uses a min-heap implementation by default",
            "It always keeps the largest element at the root",
            "It automatically sorts the entire list",
            "It only works with dictionaries"
        ]
    },
    {
        "q": "Which function will give all permutations of length 2 from [1, 2, 3]?",
        "c": null,
        "o": [
            "itertools.permutations([1, 2, 3], 2)",
            "itertools.combinations([1, 2, 3], 2)",
            "itertools.product([1, 2, 3], 2)",
            "itertools.cycle([1, 2, 3], 2)"
        ]
    },
    {
        "q": "What does itertools.accumulate do?",
        "c": null,
        "o": [
            "Generates accumulated sums (or results of a binary function)",
            "Chains multiple iterables into one",
            "Filters values based on a function",
            "Creates repeated permutations"
        ]
    },
    {
        "q": "What is the result of this itertools usage?",
        "c": "import itertools\nprint(list(itertools.accumulate([1, 2, 3])))",
        "o": [
            "[1, 3, 6]",
            "[1, 2, 3]",
            "[6]",
            "[1, 4, 9]"
        ]
    },
    {
        "q": "Which function is best to use when mapping two lists into a dictionary?",
        "c": null,
        "o": [
            "zip",
            "map",
            "filter",
            "reduce"
        ]
    },
    {
        "q": "What is the output of this zip+map combo?",
        "c": "keys = ['a', 'b']\nvalues = [1, 2]\nprint(dict(zip(keys, values)))",
        "o": [
            "{'a': 1, 'b': 2}",
            "[('a', 1), ('b', 2)]",
            "{1: 'a', 2: 'b'}",
            "{'a': 2, 'b': 1}"
        ]
    },
    {
        "q": "Which function from functools must be imported to use reduce()?",
        "c": null,
        "o": [
            "functools.reduce",
            "itertools.reduce",
            "operator.reduce",
            "math.reduce"
        ]
    },
    {
        "q": "What will the reduce function return?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x / y, [100, 10, 2]))",
        "o": [
            "5.0",
            "20.0",
            "0.2",
            "10.0"
        ]
    },
    {
        "q": "Which function keeps returning elements until a condition becomes false?",
        "c": null,
        "o": [
            "itertools.takewhile",
            "itertools.dropwhile",
            "itertools.filterfalse",
            "map"
        ]
    },
    {
        "q": "What is the result of this itertools.dropwhile example?",
        "c": "import itertools\nprint(list(itertools.dropwhile(lambda x: x < 3, [1, 2, 3, 4])))",
        "o": [
            "[3, 4]",
            "[1, 2]",
            "[1, 2, 3, 4]",
            "[2, 3, 4]"
        ]
    },
    {
        "q": "What is the correct way to access the 'y' attribute of a namedtuple?",
        "c": "from collections import namedtuple\nPoint = namedtuple('Point', ['x', 'y'])\np = Point(1, 4)",
        "o": [
            "p.y",
            "p['y']",
            "p.get('y')",
            "p[2]"
        ]
    },
    {
        "q": "What does the following code return?",
        "c": "from collections import defaultdict\nd = defaultdict(list)\nd['a'].append(1)\nprint(d['a'])",
        "o": [
            "[1]",
            "[]",
            "1",
            "None"
        ]
    },
    {
        "q": "What is a key difference between list and deque?",
        "c": null,
        "o": [
            "deque provides O(1) time complexity for append/pop operations from both ends",
            "list allows faster insertion at the beginning",
            "deque is immutable",
            "list is always more memory efficient"
        ]
    },
    {
        "q": "Which collections class allows you to count occurrences of elements and supports arithmetic?",
        "c": null,
        "o": [
            "Counter",
            "defaultdict",
            "deque",
            "OrderedDict"
        ]
    },
    {
        "q": "What happens if you call heappop() on an empty list?",
        "c": "import heapq\nheap = []\nheapq.heappop(heap)",
        "o": [
            "IndexError",
            "Returns None",
            "Returns 0",
            "TypeError"
        ]
    },
    {
        "q": "Which function retrieves the k largest elements from a dataset?",
        "c": null,
        "o": [
            "heapq.nlargest",
            "heapq.heapsort",
            "heapq.maxpop",
            "heapq.popmax"
        ]
    },
    {
        "q": "What does itertools.count(start=0, step=1) generate?",
        "c": null,
        "o": [
            "An infinite iterator starting from 0 and increasing by 1",
            "A finite range of numbers",
            "A repeated sequence",
            "A factorial generator"
        ]
    },
    {
        "q": "What is the output of this code using itertools.cycle?",
        "c": "import itertools\ncounter = 0\nfor item in itertools.cycle([1, 2]):\n    print(item)\n    counter += 1\n    if counter == 4:\n        break",
        "o": [
            "1 2 1 2",
            "1 2 3 4",
            "2 1 2 1",
            "1 1 2 2"
        ]
    },
    {
        "q": "Which function applies a binary function cumulatively to elements from left to right?",
        "c": null,
        "o": [
            "reduce",
            "map",
            "filter",
            "zip"
        ]
    },
    {
        "q": "What will this map call return?",
        "c": "print(list(map(int, ['1', '2', '3'])))",
        "o": [
            "[1, 2, 3]",
            "['1', '2', '3']",
            "[1, '2', 3]",
            "[1.0, 2.0, 3.0]"
        ]
    },
    {
        "q": "What is the result of this reduce operation?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, range(5)))",
        "o": [
            "10",
            "15",
            "5",
            "0"
        ]
    },
    {
        "q": "What does itertools.repeat(5, 3) return?",
        "c": null,
        "o": [
            "[5, 5, 5]",
            "[1, 2, 3]",
            "[0, 5, 10]",
            "[5, 6, 7]"
        ]
    },
    {
        "q": "Which function drops elements while the condition is true, and then yields the rest?",
        "c": null,
        "o": [
            "itertools.dropwhile",
            "itertools.takewhile",
            "itertools.filterfalse",
            "itertools.count"
        ]
    },
    {
        "q": "What does filterfalse() from itertools do?",
        "c": null,
        "o": [
            "Returns items for which the function returns False",
            "Filters out None values",
            "Returns only True values",
            "It behaves the same as map()"
        ]
    },
    {
        "q": "Which built-in function applies a transformation to each element of an iterable?",
        "c": null,
        "o": [
            "map",
            "filter",
            "reduce",
            "any"
        ]
    },
    {
        "q": "What is the purpose of the 'maxlen' parameter in deque?",
        "c": null,
        "o": [
            "It sets a maximum size after which items are discarded from the opposite end",
            "It sets the maximum number of operations allowed",
            "It sets the initial number of items",
            "It limits append operations to the right end only"
        ]
    },
    {
        "q": "What will be the result of the following deque operation?",
        "c": "from collections import deque\nd = deque([1, 2, 3], maxlen=2)\nd.append(4)\nprint(d)",
        "o": [
            "deque([2, 4])",
            "deque([1, 2])",
            "deque([3, 4])",
            "deque([1, 4])"
        ]
    },
    {
        "q": "Which attribute allows access to all field names in a namedtuple?",
        "c": null,
        "o": [
            "_fields",
            "_asdict",
            "_replace",
            "_make"
        ]
    },
    {
        "q": "What does the following namedtuple code output?",
        "c": "from collections import namedtuple\nPerson = namedtuple('Person', 'name age')\np = Person('Alice', 30)\nprint(p._asdict())",
        "o": [
            "{'name': 'Alice', 'age': 30}",
            "['Alice', 30]",
            "('Alice', 30)",
            "{'Person': ('Alice', 30)}"
        ]
    },
    {
        "q": "What happens when using heappushpop() in heapq?",
        "c": null,
        "o": [
            "Pushes and pops in a single atomic operation, returning the smallest element",
            "Pops then pushes in that order",
            "Pushes the item and keeps all old items",
            "Only pushes without popping"
        ]
    },
    {
        "q": "What will this heapq.heappushpop() return?",
        "c": "import heapq\nh = [2, 3, 4]\nheapq.heapify(h)\nprint(heapq.heappushpop(h, 1))",
        "o": [
            "1",
            "2",
            "3",
            "4"
        ]
    },
    {
        "q": "Which heapq function is most efficient for pushing and popping values together?",
        "c": null,
        "o": [
            "heappushpop",
            "heappop",
            "heapreplace",
            "heapcombine"
        ]
    },
    {
        "q": "What does itertools.zip_longest do?",
        "c": null,
        "o": [
            "Zips iterables, filling missing values with a specified fillvalue",
            "Zips only equal-length iterables",
            "Repeats elements indefinitely",
            "Returns all permutations"
        ]
    },
    {
        "q": "What will the following zip_longest code output?",
        "c": "from itertools import zip_longest\nprint(list(zip_longest([1, 2], ['a'], fillvalue='-'))",
        "o": [
            "[(1, 'a'), (2, '-')]", 
            "[(1, 'a')]", 
            "[(1, 2), ('a', '-')]", 
            "[('a', 1), ('-', 2)]"
        ]
    },
    {
        "q": "What will itertools.repeat(10, 4) produce?",
        "c": "import itertools\nprint(list(itertools.repeat(10, 4)))",
        "o": [
            "[10, 10, 10, 10]",
            "[10]",
            "[4, 10]",
            "[1, 2, 3, 4]"
        ]
    },
    {
        "q": "Which function applies a lambda to elements of two lists in parallel?",
        "c": null,
        "o": [
            "map with multiple iterables",
            "filter",
            "reduce",
            "zip"
        ]
    },
    {
        "q": "What is the result of the following map with multiple iterables?",
        "c": "print(list(map(lambda x, y: x + y, [1, 2], [3, 4])))",
        "o": [
            "[4, 6]",
            "[1, 2, 3, 4]",
            "[3, 4]",
            "[5, 6]"
        ]
    },
    {
        "q": "What will this filter return?",
        "c": "print(list(filter(lambda x: x != 'a', ['a', 'b', 'c'])))",
        "o": [
            "['b', 'c']",
            "['a', 'b', 'c']",
            "['a']",
            "['a', 'c']"
        ]
    },
    {
        "q": "What will this reduce example return?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['P', 'y', 't', 'h', 'o', 'n']))",
        "o": [
            "Python",
            "['Python']",
            "['P', 'y', 't', 'h', 'o', 'n']",
            "P + y + t + h + o + n"
        ]
    },
    {
        "q": "Which of the following tools returns a lazy iterator and avoids memory overload?",
        "c": null,
        "o": [
            "itertools",
            "map",
            "reduce",
            "list comprehension"
        ]
    },
    {
        "q": "What is the output of this Counter subtraction?",
        "c": "from collections import Counter\nc1 = Counter(a=4, b=2)\nc2 = Counter(a=1, b=3)\nprint(c1 - c2)",
        "o": [
            "Counter({'a': 3})",
            "Counter({'a': 3, 'b': -1})",
            "Counter({'b': -1})",
            "Counter({'a': 5, 'b': 5})"
        ]
    },
    {
        "q": "Which of the following collections classes supports arithmetic operations like addition and subtraction?",
        "c": null,
        "o": [
            "Counter",
            "deque",
            "defaultdict",
            "namedtuple"
        ]
    },
    {
        "q": "What does the 'heapreplace' function do?",
        "c": null,
        "o": [
            "Pops the smallest item and pushes a new one, all in one step",
            "Replaces the largest item in the heap",
            "Adds an item to the heap only if it's larger",
            "Clears the entire heap and adds a new item"
        ]
    },
    {
        "q": "What is the output of this heapq.heapreplace call?",
        "c": "import heapq\nh = [1, 3, 5]\nheapq.heapify(h)\nprint(heapq.heapreplace(h, 0))",
        "o": [
            "1",
            "0",
            "5",
            "3"
        ]
    },
    {
        "q": "Which function from itertools can be used to produce running totals?",
        "c": null,
        "o": [
            "accumulate",
            "product",
            "combinations",
            "repeat"
        ]
    },
    {
        "q": "What is the result of this itertools.accumulate call?",
        "c": "import itertools\nprint(list(itertools.accumulate([1, 2, 3, 4], lambda x, y: x * y)))",
        "o": [
            "[1, 2, 6, 24]",
            "[1, 3, 6, 10]",
            "[10]",
            "[24, 6, 2, 1]"
        ]
    },
    {
        "q": "What is the output of this zip_longest example?",
        "c": "from itertools import zip_longest\nprint(list(zip_longest('AB', [1], fillvalue=0)))",
        "o": [
            "[('A', 1), ('B', 0)]",
            "[('A', 1), ('B', None)]",
            "[('AB', 1), ('0', 0)]",
            "[('A', 0), ('B', 1)]"
        ]
    },
    {
        "q": "Which built-in function works best for applying an operation across two or more iterables?",
        "c": null,
        "o": [
            "map",
            "filter",
            "enumerate",
            "sum"
        ]
    },
    {
        "q": "Which built-in function allows you to pair elements from multiple iterables?",
        "c": null,
        "o": [
            "zip",
            "map",
            "filter",
            "reduce"
        ]
    },
    {
        "q": "What is the output of this zip call?",
        "c": "a = [1, 2]\nb = ['x', 'y']\nprint(list(zip(a, b)))",
        "o": [
            "[(1, 'x'), (2, 'y')]",
            "[('x', 1), ('y', 2)]",
            "[1, 2, 'x', 'y']",
            "[(1, 2), ('x', 'y')]"
        ]
    },
    {
        "q": "Which module contains the 'reduce' function in Python 3?",
        "c": null,
        "o": [
            "functools",
            "itertools",
            "operator",
            "collections"
        ]
    },
    {
        "q": "What will this code using reduce return?",
        "c": "from functools import reduce\nprint(reduce(lambda a, b: a + b, [5]))",
        "o": [
            "5",
            "TypeError",
            "0",
            "[5]"
        ]
    },
    {
        "q": "What will the result be from this itertools.chain() call?",
        "c": "from itertools import chain\nprint(list(chain('AB', 'CD')))",
        "o": [
            "['A', 'B', 'C', 'D']",
            "[('AB'), ('CD')]",
            "['ABCD']",
            "[['A', 'B'], ['C', 'D']]"
        ]
    },
    {
        "q": "Which itertools function can be used to iterate over data indefinitely?",
        "c": null,
        "o": [
            "cycle",
            "repeat",
            "permutations",
            "zip_longest"
        ]
    },
    {
        "q": "Which function will help you remove all falsey values from a list?",
        "c": null,
        "o": [
            "filter(None, iterable)",
            "map(None, iterable)",
            "reduce(None, iterable)",
            "zip(None, iterable)"
        ]
    },
    {
        "q": "Which method of deque removes and returns an element from the right end?",
        "c": null,
        "o": [
            "pop",
            "popleft",
            "remove",
            "popright"
        ]
    },
    {
        "q": "What will this code print?",
        "c": "from collections import deque\nd = deque([10, 20, 30])\nd.popleft()\nprint(d)",
        "o": [
            "deque([20, 30])",
            "deque([10, 20])",
            "deque([10, 30])",
            "deque([30, 10])"
        ]
    },
    {
        "q": "Which Counter method returns the n most common elements?",
        "c": null,
        "o": [
            "most_common",
            "top",
            "frequent",
            "counter_top"
        ]
    },
    {
        "q": "What will the output be?",
        "c": "from collections import Counter\nc = Counter('aabbbcccc')\nprint(c.most_common(2))",
        "o": [
            "[('c', 4), ('b', 3)]",
            "[('a', 2), ('b', 3)]",
            "[('b', 3), ('a', 2)]",
            "[('c', 4), ('a', 2)]"
        ]
    },
    {
        "q": "Which function returns all r-length permutations of elements?",
        "c": null,
        "o": [
            "itertools.permutations",
            "itertools.combinations",
            "itertools.repeat",
            "itertools.chain"
        ]
    },
    {
        "q": "What is the output of this itertools call?",
        "c": "import itertools\nprint(list(itertools.permutations('AB', 2)))",
        "o": [
            "[('A', 'B'), ('B', 'A')]",
            "[('A',), ('B',)]",
            "[('A', 'A'), ('B', 'B')]",
            "[('AB',)]"
        ]
    },
    {
        "q": "Which function in itertools returns r-length combinations in sorted order?",
        "c": null,
        "o": [
            "combinations",
            "permutations",
            "chain",
            "accumulate"
        ]
    },
    {
        "q": "What will the output be?",
        "c": "import itertools\nprint(list(itertools.combinations([1, 2, 3], 2)))",
        "o": [
            "[(1, 2), (1, 3), (2, 3)]",
            "[(1, 1), (2, 2), (3, 3)]",
            "[(2, 1), (3, 1), (3, 2)]",
            "[(1, 2, 3)]"
        ]
    },
    {
        "q": "Which tool would you use to perform a custom cumulative operation?",
        "c": null,
        "o": [
            "itertools.accumulate with a custom function",
            "reduce with default settings",
            "zip with a lambda",
            "filter with lambda"
        ]
    },
    {
        "q": "Which built-in function returns an iterator that filters elements based on a condition?",
        "c": null,
        "o": [
            "filter",
            "map",
            "reduce",
            "sum"
        ]
    },
    {
        "q": "What will this code output?",
        "c": "print(list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4])))",
        "o": [
            "[2, 4]",
            "[1, 3]",
            "[1, 2, 3, 4]",
            "[2]"
        ]
    },
    {
        "q": "Which tool performs a reduction from left to right with a binary function?",
        "c": null,
        "o": [
            "reduce",
            "filter",
            "map",
            "chain"
        ]
    },
    {
        "q": "Which function combines two or more iterables into tuples of matched elements?",
        "c": null,
        "o": [
            "zip",
            "map",
            "filter",
            "accumulate"
        ]
    },
    {
        "q": "What is the result of this code?",
        "c": "names = ['a', 'b']\nages = [10, 20]\nprint(list(zip(names, ages)))",
        "o": [
            "[('a', 10), ('b', 20)]",
            "[('a',), ('b',)]",
            "[('a', 20), ('b', 10)]",
            "[10, 20]"
        ]
    },
    {
        "q": "Which of the following is NOT a method of collections.Counter?",
        "c": null,
        "o": [
            "push",
            "subtract",
            "update",
            "most_common"
        ]
    },
    {
        "q": "What will be the result of this code using defaultdict?",
        "c": "from collections import defaultdict\nd = defaultdict(int)\nd['x'] += 5\nprint(d['x'])",
        "o": [
            "5",
            "0",
            "None",
            "Raises KeyError"
        ]
    },
    {
        "q": "Which collections class automatically initializes missing keys with a default factory?",
        "c": null,
        "o": [
            "defaultdict",
            "deque",
            "Counter",
            "namedtuple"
        ]
    },
    {
        "q": "Which of the following is NOT true about deque?",
        "c": null,
        "o": [
            "It does not support slicing like lists",
            "It supports appending elements to both ends",
            "It is optimized for fast fixed-length queue operations",
            "It is slower than a list for pop operations"
        ]
    },
    {
        "q": "What is the default value returned by defaultdict when accessing a missing key and no default factory is provided?",
        "c": null,
        "o": [
            "Raises TypeError at construction time",
            "0",
            "None",
            "Raises KeyError"
        ]
    },
    {
        "q": "What is the output of the following?",
        "c": "import heapq\nh = [3, 1, 4]\nheapq.heapify(h)\nheapq.heappush(h, 2)\nprint(h[0])",
        "o": [
            "1",
            "2",
            "3",
            "4"
        ]
    },
    {
        "q": "What is the difference between heappushpop() and heapreplace()?",
        "c": null,
        "o": [
            "heappushpop() may avoid growing the heap; heapreplace() always pops then pushes",
            "heappushpop() pushes first; heapreplace() pops first",
            "There is no difference",
            "heapreplace() only works on max-heaps"
        ]
    },
    {
        "q": "Which function would generate an infinite iterator producing values 0, 2, 4, ...?",
        "c": null,
        "o": [
            "itertools.count(start=0, step=2)",
            "range(0, 2)",
            "itertools.cycle([0, 2, 4])",
            "repeat(2)"
        ]
    },
    {
        "q": "What will the following code print?",
        "c": "import itertools\nfor i, val in zip(range(3), itertools.cycle('AB')):\n    print(val, end=' ')",
        "o": [
            "A B A ",
            "A B C ",
            "A A A ",
            "B A B "
        ]
    },
    {
        "q": "Which function is used to repeat a value a fixed number of times?",
        "c": null,
        "o": [
            "itertools.repeat",
            "itertools.cycle",
            "itertools.count",
            "itertools.chain"
        ]
    },
    {
        "q": "What will this print?",
        "c": "import itertools\nprint(list(itertools.repeat('X', 3)))",
        "o": [
            "['X', 'X', 'X']",
            "['X', 3]",
            "['X']",
            "['XXX']"
        ]
    },
    {
        "q": "What does the filter function return?",
        "c": null,
        "o": [
            "An iterator over elements where the function returns True",
            "A modified list directly",
            "Only the last element that passes the condition",
            "A sorted list"
        ]
    },
    {
        "q": "What will this map call return?",
        "c": "print(list(map(str.upper, ['a', 'b', 'c'])))",
        "o": [
            "['A', 'B', 'C']",
            "['a', 'b', 'c']",
            "['A', 'b', 'C']",
            "['UPPER']"
        ]
    },
    {
        "q": "What will reduce return here?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [2, 3, 4]))",
        "o": [
            "24",
            "20",
            "9",
            "None"
        ]
    },
    {
        "q": "Which tool is best to combine multiple lists into a single iterable?",
        "c": null,
        "o": [
            "itertools.chain",
            "zip",
            "map",
            "reduce"
        ]
    },
    {
        "q": "What will this code print?",
        "c": "from itertools import chain\nprint(list(chain([1, 2], [], [3])))",
        "o": [
            "[1, 2, 3]",
            "[[1, 2], [], [3]]",
            "[1, 2]",
            "[1, 2, [], 3]"
        ]
    },
    {
        "q": "Which of the following operations is NOT supported directly by a deque?",
        "c": null,
        "o": [
            "Sorting",
            "Appending to both ends",
            "Popping from both ends",
            "Rotating elements"
        ]
    },
    {
        "q": "What is the result of rotating this deque to the right?",
        "c": "from collections import deque\nd = deque([1, 2, 3, 4])\nd.rotate(1)\nprint(list(d))",
        "o": [
            "[4, 1, 2, 3]",
            "[2, 3, 4, 1]",
            "[1, 2, 3, 4]",
            "[3, 4, 1, 2]"
        ]
    },
    {
        "q": "Which argument must be passed to namedtuple to create a new class?",
        "c": null,
        "o": [
            "Class name and field names",
            "Only field names",
            "Only class name",
            "Base class and field values"
        ]
    },
    {
        "q": "What does namedtuple._make() do?",
        "c": null,
        "o": [
            "Creates a namedtuple from an iterable",
            "Returns the type name",
            "Replaces an existing field",
            "Deletes a field"
        ]
    },
    {
        "q": "Which heapq function efficiently returns the smallest 3 elements from a list?",
        "c": null,
        "o": [
            "heapq.nsmallest(3, list)",
            "heapq.topk(3, list)",
            "heapq.min(3, list)",
            "heapq.peek(3, list)"
        ]
    },
    {
        "q": "What is the result of this heapq.nsmallest call?",
        "c": "import heapq\nnums = [10, 5, 8, 3]\nprint(heapq.nsmallest(2, nums))",
        "o": [
            "[3, 5]",
            "[5, 3]",
            "[10, 8]",
            "[8, 5]"
        ]
    },
    {
        "q": "Which function from itertools produces the Cartesian product of input iterables?",
        "c": null,
        "o": [
            "product",
            "permutations",
            "combinations",
            "accumulate"
        ]
    },
    {
        "q": "What will this itertools.product call return?",
        "c": "import itertools\nprint(list(itertools.product([1, 2], ['a', 'b'])))",
        "o": [
            "[(1, 'a'), (1, 'b'), (2, 'a'), (2, 'b')]",
            "[(1, 2), ('a', 'b')]",
            "[('a', 1), ('b', 2)]",
            "[[1, 'a'], [2, 'b']]"
        ]
    },
    {
        "q": "Which function is best for eliminating duplicate keys and retaining the latest pair when combining two Counters?",
        "c": null,
        "o": [
            "c1 + c2",
            "c1 | c2",
            "c1 & c2",
            "c1 - c2"
        ]
    },
    {
        "q": "What does the following code return?",
        "c": "from collections import Counter\nc1 = Counter({'a': 3, 'b': 1})\nc2 = Counter({'a': 1, 'b': 2})\nprint(c1 | c2)",
        "o": [
            "Counter({'a': 3, 'b': 2})",
            "Counter({'a': 4, 'b': 3})",
            "Counter({'a': 1, 'b': 2})",
            "Counter({'a': 2, 'b': 1})"
        ]
    },
    {
        "q": "Which function in functools can convert a sequence of functions into a single cumulative function?",
        "c": null,
        "o": [
            "reduce",
            "partial",
            "cache",
            "lru_cache"
        ]
    },
    {
        "q": "Which of the following returns only values that fail a condition?",
        "c": null,
        "o": [
            "itertools.filterfalse",
            "filter",
            "map",
            "reduce"
        ]
    },
    {
        "q": "What does this code return?",
        "c": "from itertools import filterfalse\nprint(list(filterfalse(lambda x: x % 2 == 0, range(5))))",
        "o": [
            "[1, 3]",
            "[0, 2, 4]",
            "[2, 4]",
            "[1, 2, 3]"
        ]
    },
    {
        "q": "Which tool is most memory efficient for combining many large iterables?",
        "c": null,
        "o": [
            "itertools.chain",
            "list + list",
            "set.union",
            "zip"
        ]
    },
    {
        "q": "What is the output of this map call?",
        "c": "print(list(map(len, ['apple', 'banana'])))",
        "o": [
            "[5, 6]",
            "[6, 5]",
            "[5, 5]",
            "[6, 6]"
        ]
    },
    {
        "q": "What will be the result of this Counter intersection operation?",
        "c": "from collections import Counter\nc1 = Counter(a=3, b=1)\nc2 = Counter(a=1, b=2)\nprint(c1 & c2)",
        "o": [
            "Counter({'a': 1, 'b': 1})",
            "Counter({'a': 3, 'b': 2})",
            "Counter({'a': 1})",
            "Counter({'b': 2})"
        ]
    },
    {
        "q": "Which collections class provides fixed-size FIFO behavior using maxlen?",
        "c": null,
        "o": [
            "deque",
            "Counter",
            "defaultdict",
            "namedtuple"
        ]
    },
    {
        "q": "What is the purpose of using deque with maxlen?",
        "c": null,
        "o": [
            "Automatically discards oldest items when new ones are added beyond the limit",
            "Restricts the number of times elements can be appended",
            "Converts a list to a heap",
            "Disables rotation"
        ]
    },
    {
        "q": "What will the following defaultdict code print?",
        "c": "from collections import defaultdict\nd = defaultdict(str)\nprint(d['new'])",
        "o": [
            "''",
            "None",
            "0",
            "Raises KeyError"
        ]
    },
    {
        "q": "Which of the following is used to merge two heaps while maintaining heap property?",
        "c": null,
        "o": [
            "heapq.merge",
            "heapq.concat",
            "heapq.add",
            "heapq.combine"
        ]
    },
    {
        "q": "What is the output of this heapq.merge call?",
        "c": "import heapq\nh1 = [1, 3, 5]\nh2 = [2, 4, 6]\nprint(list(heapq.merge(h1, h2)))",
        "o": [
            "[1, 2, 3, 4, 5, 6]",
            "[1, 3, 5, 2, 4, 6]",
            "[6, 5, 4, 3, 2, 1]",
            "[2, 4, 6, 1, 3, 5]"
        ]
    },
    {
        "q": "Which itertools function is best for grouping consecutive identical elements?",
        "c": null,
        "o": [
            "groupby",
            "combinations",
            "repeat",
            "accumulate"
        ]
    },
    {
        "q": "What is the result of this itertools.groupby call?",
        "c": "import itertools\ndata = 'aaabbc'\nprint([(k, list(g)) for k, g in itertools.groupby(data)])",
        "o": [
            "[('a', ['a', 'a', 'a']), ('b', ['b', 'b']), ('c', ['c'])]",
            "[('a', ['a']), ('b', ['b']), ('c', ['c'])]",
            "[('a', ['a', 'a']), ('b', ['b', 'b']), ('c', ['c'])]",
            "[('a', ['a', 'a', 'a']), ('b', ['b']), ('c', ['c'])]"
        ]
    },
    {
        "q": "What is the behavior of itertools.tee?",
        "c": null,
        "o": [
            "Creates multiple independent iterators from a single iterable",
            "Duplicates each element in an iterable",
            "Reverses the iterable",
            "Filters elements based on a function"
        ]
    },
    {
        "q": "Which function can transform a list of tuples into a list of sums using map?",
        "c": null,
        "o": [
            "map(sum, list_of_tuples)",
            "reduce(sum, list_of_tuples)",
            "filter(sum, list_of_tuples)",
            "zip(*list_of_tuples)"
        ]
    },
    {
        "q": "What will be the result of this code using reduce?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x - y, [10, 2, 3]))",
        "o": [
            "5",
            "15",
            "-15",
            "1"
        ]
    },
    {
        "q": "What will filter return in this example?",
        "c": "print(list(filter(None, [0, 1, '', 'hello', [], [1]])))",
        "o": [
            "[1, 'hello', [1]]",
            "[0, 1, '', 'hello', [], [1]]",
            "[0, '', []]",
            "[1, '', [1]]"
        ]
    },
    {
        "q": "What will this code using map print?",
        "c": "print(list(map(lambda x: x * 2, [1, 2, 3])))",
        "o": [
            "[2, 4, 6]",
            "[1, 2, 3]",
            "[1, 4, 9]",
            "[2, 2, 2]"
        ]
    },
    {
        "q": "Which built-in function will pair up elements from multiple iterables into tuples?",
        "c": null,
        "o": [
            "zip",
            "map",
            "filter",
            "reduce"
        ]
    },
    {
        "q": "What will the following zip_longest output be?",
        "c": "from itertools import zip_longest\nprint(list(zip_longest([1], [2, 3], fillvalue=0)))",
        "o": [
            "[(1, 2), (0, 3)]",
            "[(1, 2), (None, 3)]",
            "[(1, 2), (1, 3)]",
            "[(1, 2)]"
        ]
    },
    {
        "q": "What will be the result of this Counter update operation?",
        "c": "from collections import Counter\nc = Counter({'a': 1})\nc.update({'a': 2, 'b': 3})\nprint(c)",
        "o": [
            "Counter({'a': 3, 'b': 3})",
            "Counter({'a': 2, 'b': 3})",
            "Counter({'a': 1, 'b': 3})",
            "Counter({'a': 2})"
        ]
    },
    {
        "q": "Which attribute in a namedtuple instance allows you to convert it to an OrderedDict?",
        "c": null,
        "o": [
            "_asdict",
            "_fields",
            "_make",
            "_replace"
        ]
    },
    {
        "q": "Which method in heapq replaces and returns the smallest element in a heap in one operation?",
        "c": null,
        "o": [
            "heapreplace",
            "heappop",
            "heappushpop",
            "heapmin"
        ]
    },
    {
        "q": "Which itertools function would you use to repeat a pattern like ['a', 'b'] forever?",
        "c": null,
        "o": [
            "cycle",
            "repeat",
            "count",
            "chain"
        ]
    },
    {
        "q": "What does this code print using itertools.count?",
        "c": "from itertools import count\nfor i in count(3, 2):\n    if i > 9:\n        break\n    print(i, end=' ')",
        "o": [
            "3 5 7 9 ",
            "3 4 5 6 7 8 9 ",
            "3 6 9 ",
            "2 4 6 8 10 "
        ]
    },
    {
        "q": "What will be the output of this zip function?",
        "c": "print(list(zip('abc', [1, 2])))",
        "o": [
            "[('a', 1), ('b', 2)]",
            "[('a', 1), ('b', 2), ('c', None)]",
            "[('a', 1), ('b', 2), ('c', 3)]",
            "[('a',), ('b',)]"
        ]
    },
    {
        "q": "Which of the following returns the longest possible output?",
        "c": null,
        "o": [
            "itertools.zip_longest",
            "zip",
            "map",
            "filter"
        ]
    },
    {
        "q": "What is the main difference between map and filter?",
        "c": null,
        "o": [
            "map transforms elements, filter selects elements",
            "map only works with strings",
            "filter requires two functions",
            "map always returns a list"
        ]
    },
    {
        "q": "Which function produces the result of applying a binary function cumulatively?",
        "c": null,
        "o": [
            "reduce",
            "accumulate",
            "map",
            "zip"
        ]
    },
    {
        "q": "What will be the output of this map call?",
        "c": "print(list(map(lambda x: x.upper(), ['a', 'b'])))",
        "o": [
            "['A', 'B']",
            "['a', 'b']",
            "['A', 'b']",
            "['UPPER']"
        ]
    },
    {
        "q": "What does this reduce call return?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['P', 'y', 't', 'h', 'o', 'n']))",
        "o": [
            "Python",
            "['P', 'y', 't', 'h', 'o', 'n']",
            "['Python']",
            "P + y + t + h + o + n"
        ]
    },
    {
        "q": "What does the itertools.islice function allow you to do?",
        "c": null,
        "o": [
            "Slice an iterator like a list",
            "Repeat a value",
            "Merge sorted iterables",
            "Sort an iterator"
        ]
    },
    {
        "q": "What will this itertools.islice example print?",
        "c": "from itertools import islice\nprint(list(islice(range(10), 2, 6)))",
        "o": [
            "[2, 3, 4, 5]",
            "[2, 3, 4, 5, 6]",
            "[0, 1, 2, 3, 4, 5]",
            "[3, 4, 5, 6]"
        ]
    },
    {
        "q": "Which itertools function allows you to flatten nested iterables?",
        "c": null,
        "o": [
            "chain.from_iterable",
            "accumulate",
            "product",
            "cycle"
        ]
    },
    {
        "q": "What will the result of this chain.from_iterable call be?",
        "c": "from itertools import chain\nnested = [[1, 2], [3], [4, 5]]\nprint(list(chain.from_iterable(nested)))",
        "o": [
            "[1, 2, 3, 4, 5]",
            "[[1, 2], [3], [4, 5]]",
            "[1, [2, 3], [4, 5]]",
            "[[1, 2, 3], [4, 5]]"
        ]
    },
    {
        "q": "Which of the following is true about namedtuple?",
        "c": null,
        "o": [
            "It creates immutable, tuple-like objects with named fields",
            "It is mutable and allows field assignment",
            "It can only be used with integers",
            "It is slower than regular classes in attribute access"
        ]
    },
    {
        "q": "What will this code output?",
        "c": "from collections import namedtuple\nPoint = namedtuple('Point', ['x', 'y'])\np = Point(1, 2)\nprint(p.x + p.y)",
        "o": [
            "3",
            "12",
            "(1, 2)",
            "TypeError"
        ]
    },
    {
        "q": "Which method is used to create a new namedtuple from an iterable?",
        "c": null,
        "o": [
            "_make",
            "_fields",
            "_asdict",
            "_replace"
        ]
    },
    {
        "q": "What will this code print using _replace()?",
        "c": "from collections import namedtuple\nPoint = namedtuple('Point', 'x y')\np = Point(1, 2)\np2 = p._replace(y=10)\nprint(p2)",
        "o": [
            "Point(x=1, y=10)",
            "Point(x=1, y=2)",
            "Point(x=10, y=1)",
            "(1, 10)"
        ]
    },
    {
        "q": "Which heapq function is used to remove and return the smallest element from the heap?",
        "c": null,
        "o": [
            "heappop",
            "heappush",
            "heapify",
            "heapreplace"
        ]
    },
    {
        "q": "What will be the result of this heap operation?",
        "c": "import heapq\nh = [9, 3, 5, 1]\nheapq.heapify(h)\nprint(heapq.heappop(h))",
        "o": [
            "1",
            "9",
            "3",
            "5"
        ]
    },
    {
        "q": "Which itertools function allows grouping data only if adjacent elements match?",
        "c": null,
        "o": [
            "groupby",
            "combinations",
            "accumulate",
            "chain"
        ]
    },
    {
        "q": "What will this itertools.groupby example output?",
        "c": "import itertools\nlst = [1, 1, 2, 2, 2, 3]\ngrouped = [(k, list(g)) for k, g in itertools.groupby(lst)]\nprint(grouped)",
        "o": [
            "[(1, [1, 1]), (2, [2, 2, 2]), (3, [3])]",
            "[(1, [1]), (2, [2]), (3, [3])]",
            "[[1, 1, 2, 2, 2, 3]]",
            "[(1, 1), (2, 2), (3, 3)]"
        ]
    },
    {
        "q": "What is the output of this filter example?",
        "c": "result = list(filter(lambda x: x > 0, [-2, 0, 3, 4]))\nprint(result)",
        "o": [
            "[3, 4]",
            "[-2, 0]",
            "[0, 3, 4]",
            "[4]"
        ]
    },
    {
        "q": "What will this reduce call return?",
        "c": "from functools import reduce\nprint(reduce(lambda a, b: a + b, [1, 2, 3, 4]))",
        "o": [
            "10",
            "24",
            "[1, 2, 3, 4]",
            "1"
        ]
    },
    {
        "q": "Which built-in function maps each item of an iterable through a function?",
        "c": null,
        "o": [
            "map",
            "zip",
            "filter",
            "reduce"
        ]
    },
    {
        "q": "Which itertools function would you use to generate combinations with replacement?",
        "c": null,
        "o": [
            "combinations_with_replacement",
            "combinations",
            "product",
            "permutations"
        ]
    },
    {
        "q": "What will this itertools call return?",
        "c": "import itertools\nprint(list(itertools.combinations_with_replacement('AB', 2)))",
        "o": [
            "[('A', 'A'), ('A', 'B'), ('B', 'B')]",
            "[('A', 'B'), ('B', 'A')]",
            "[('AB', 'AB')]",
            "[('A',), ('B',)]"
        ]
    },
    {
        "q": "Which function from functools allows you to fix arguments of a function?",
        "c": null,
        "o": [
            "partial",
            "reduce",
            "cache",
            "cmp_to_key"
        ]
    },
    {
        "q": "Which of the following is true about heapq.merge?",
        "c": null,
        "o": [
            "It merges multiple sorted inputs into a sorted output",
            "It sorts a list in-place",
            "It merges unsorted lists directly",
            "It is equivalent to extend()"
        ]
    },
    {
        "q": "Which statement is true about collections.deque?",
        "c": null,
        "o": [
            "It allows O(1) time complexity for append and pop operations from both ends",
            "It is optimized for random access",
            "It stores elements in a sorted order",
            "It only supports FIFO operations"
        ]
    },
    {
        "q": "What will this deque code print?",
        "c": "from collections import deque\nd = deque([1, 2, 3])\nd.appendleft(0)\nd.append(4)\nprint(list(d))",
        "o": [
            "[0, 1, 2, 3, 4]",
            "[4, 3, 2, 1, 0]",
            "[1, 2, 3, 0, 4]",
            "[0, 4, 1, 2, 3]"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a namedtuple?",
        "c": null,
        "o": [
            "Person = namedtuple('Person', ['name', 'age'])",
            "Person = namedtuple('Person', 'name age')",
            "Person = namedtuple('Person', ('name', 'age'))",
            "All of the above"
        ]
    },
    {
        "q": "Which method is used to create a copy of a namedtuple with some fields changed?",
        "c": null,
        "o": [
            "_replace",
            "_copy",
            "_asdict",
            "_update"
        ]
    },
    {
        "q": "Which heapq function pushes an item on the heap and then pops and returns the smallest item?",
        "c": null,
        "o": [
            "heappushpop",
            "heapreplace",
            "heappop",
            "heapmerge"
        ]
    },
    {
        "q": "What will this code output using heapq?",
        "c": "import heapq\nh = [5, 6, 8]\nheapq.heapify(h)\nheapq.heappushpop(h, 4)\nprint(h)",
        "o": [
            "[5, 6, 8]",
            "[4, 6, 8]",
            "[6, 5, 8]",
            "[4, 5, 6]"
        ]
    },
    {
        "q": "Which itertools function can be used to create a running total?",
        "c": null,
        "o": [
            "accumulate",
            "count",
            "chain",
            "repeat"
        ]
    },
    {
        "q": "What will this itertools.accumulate call return?",
        "c": "from itertools import accumulate\nprint(list(accumulate([1, 2, 3])))",
        "o": [
            "[1, 3, 6]",
            "[1, 2, 3]",
            "[6, 3, 1]",
            "[1, 2, 5]"
        ]
    },
    {
        "q": "Which of the following functions returns an infinite sequence?",
        "c": null,
        "o": [
            "count",
            "accumulate",
            "chain",
            "zip_longest"
        ]
    },
    {
        "q": "Which function converts an iterable into a dictionary of frequencies?",
        "c": null,
        "o": [
            "Counter",
            "defaultdict",
            "namedtuple",
            "deque"
        ]
    },
    {
        "q": "What is the output of this Counter subtraction?",
        "c": "from collections import Counter\nc1 = Counter(a=4, b=2)\nc2 = Counter(a=1, b=5)\nprint(c1 - c2)",
        "o": [
            "Counter({'a': 3})",
            "Counter({'b': -3, 'a': 3})",
            "Counter({'a': 3, 'b': -3})",
            "Counter({'b': 3, 'a': 1})"
        ]
    },
    {
        "q": "What is the main difference between combinations and permutations?",
        "c": null,
        "o": [
            "Combinations do not consider order; permutations do",
            "Permutations allow duplicates; combinations do not",
            "Permutations are faster than combinations",
            "Combinations always return 2-element tuples"
        ]
    },
    {
        "q": "Which function is best used for generating every possible ordered pair from an input list?",
        "c": null,
        "o": [
            "itertools.permutations",
            "itertools.combinations",
            "itertools.combinations_with_replacement",
            "itertools.accumulate"
        ]
    },
    {
        "q": "Which built-in function takes a function and iterable and returns a single result?",
        "c": null,
        "o": [
            "reduce",
            "map",
            "filter",
            "zip"
        ]
    },
    {
        "q": "Which of the following functions is lazy (returns iterators, not full lists)?",
        "c": null,
        "o": [
            "map",
            "list comprehension",
            "for loop",
            "all of the above"
        ]
    },
    {
        "q": "What is the time complexity of heappush() in heapq?",
        "c": null,
        "o": [
            "O(log n)",
            "O(1)",
            "O(n)",
            "O(n log n)"
        ]
    },
    {
        "q": "Which collections class is ideal for implementing a frequency counter?",
        "c": null,
        "o": [
            "Counter",
            "defaultdict",
            "deque",
            "namedtuple"
        ]
    },
    {
        "q": "What will this Counter subtraction return?",
        "c": "from collections import Counter\nc1 = Counter('aabbbcc')\nc2 = Counter('abc')\nprint(c1 - c2)",
        "o": [
            "Counter({'b': 2, 'c': 1, 'a': 1})",
            "Counter({'a': 2, 'b': 3, 'c': 2})",
            "Counter({'a': 1, 'b': 2})",
            "Counter({'a': 3, 'b': 4, 'c': 3})"
        ]
    },
    {
        "q": "What is the result of this default dictionary usage?",
        "c": "from collections import defaultdict\nd = defaultdict(lambda: 'N/A')\nd['name'] = 'Alice'\nprint(d['age'])",
        "o": [
            "'N/A'",
            "KeyError",
            "'None'",
            "0"
        ]
    },
    {
        "q": "What does this map example output?",
        "c": "print(list(map(lambda x: x * 2, range(3))))",
        "o": [
            "[0, 2, 4]",
            "[1, 2, 3]",
            "[0, 1, 2]",
            "[2, 4, 6]"
        ]
    },
    {
        "q": "What is the difference between heappop and heapreplace?",
        "c": null,
        "o": [
            "heapreplace pops and then pushes; heappop only pops",
            "heappop pushes and pops at once",
            "heapreplace maintains order; heappop doesn’t",
            "There is no difference"
        ]
    },
    {
        "q": "Which itertools function can produce all pairwise combinations from a list?",
        "c": null,
        "o": [
            "combinations",
            "product",
            "accumulate",
            "chain"
        ]
    },
    {
        "q": "What will this chain example return?",
        "c": "from itertools import chain\nprint(list(chain('AB', 'CD')))",
        "o": [
            "['A', 'B', 'C', 'D']",
            "[['A', 'B'], ['C', 'D']]",
            "['ABCD']",
            "['A', 'BC', 'D']"
        ]
    },
    {
        "q": "Which tool is best for infinite iteration with constant values?",
        "c": null,
        "o": [
            "itertools.repeat",
            "itertools.count",
            "itertools.cycle",
            "map"
        ]
    },
    {
        "q": "What does this filter function output?",
        "c": "print(list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4])))",
        "o": [
            "[2, 4]",
            "[1, 3]",
            "[1, 2, 3, 4]",
            "[0, 2]"
        ]
    },
    {
        "q": "Which function from functools improves performance by caching return values?",
        "c": null,
        "o": [
            "lru_cache",
            "reduce",
            "partial",
            "wraps"
        ]
    },
    {
        "q": "What will be the output of this partial application?",
        "c": "from functools import partial\ndef power(base, exponent): return base ** exponent\nsquare = partial(power, exponent=2)\nprint(square(4))",
        "o": [
            "16",
            "8",
            "2",
            "256"
        ]
    },
    {
        "q": "Which itertools function can create an iterator from several iterables in sequence?",
        "c": null,
        "o": [
            "chain",
            "groupby",
            "repeat",
            "zip"
        ]
    },
    {
        "q": "Which function is used to perform grouped aggregation in a single pass?",
        "c": null,
        "o": [
            "groupby",
            "accumulate",
            "reduce",
            "map"
        ]
    },
    {
        "q": "Which function will pair elements from multiple iterables until the longest iterable is exhausted?",
        "c": null,
        "o": [
            "zip_longest",
            "zip",
            "chain",
            "product"
        ]
    },
    {
        "q": "What does heapq.heapify() do?",
        "c": null,
        "o": [
            "Transforms a list into a valid heap in-place",
            "Sorts the list in descending order",
            "Creates a new max heap",
            "Adds a new element to the heap"
        ]
    },
    {
        "q": "What will be the output of this defaultdict example?",
        "c": "from collections import defaultdict\nd = defaultdict(list)\nd['x'].append(10)\nprint(d['x'])",
        "o": [
            "[10]",
            "10",
            "[]",
            "KeyError"
        ]
    },
    {
        "q": "Which operation will raise an error on a deque?",
        "c": null,
        "o": [
            "d[0] = 5",
            "d.appendleft(10)",
            "d.pop()",
            "d.rotate(2)"
        ]
    },
    {
        "q": "What does Counter.most_common(n) return?",
        "c": null,
        "o": [
            "A list of the n most common elements and their counts",
            "The total count of elements",
            "A set of the most common keys",
            "The element with the maximum ASCII value"
        ]
    },
    {
        "q": "What is the result of this combinations example?",
        "c": "from itertools import combinations\nprint(list(combinations('abc', 2)))",
        "o": [
            "[('a', 'b'), ('a', 'c'), ('b', 'c')]",
            "[('a', 'b'), ('b', 'a'), ('a', 'c')]",
            "[('ab',), ('ac',), ('bc',)]",
            "[('a', 'b', 'c')]"
        ]
    },
    {
        "q": "Which tool can generate all possible orderings of an iterable?",
        "c": null,
        "o": [
            "permutations",
            "combinations",
            "accumulate",
            "repeat"
        ]
    },
    {
        "q": "Which function will stop producing values once the iterable is exhausted?",
        "c": null,
        "o": [
            "map",
            "repeat",
            "count",
            "cycle"
        ]
    },
    {
        "q": "What is the result of this map and filter combination?",
        "c": "nums = [1, 2, 3, 4]\nresult = list(filter(lambda x: x > 2, map(lambda y: y * 2, nums)))\nprint(result)",
        "o": [
            "[4, 6, 8]",
            "[2, 4]",
            "[1, 2, 3, 4]",
            "[6, 8]"
        ]
    },
    {
        "q": "What will this chain.from_iterable print?",
        "c": "from itertools import chain\nnested = [(1, 2), (3, 4)]\nprint(list(chain.from_iterable(nested)))",
        "o": [
            "[1, 2, 3, 4]",
            "[(1, 2), (3, 4)]",
            "[1, 3, 2, 4]",
            "[[1, 2], [3, 4]]"
        ]
    },
    {
        "q": "Which module provides a dropwhile function to skip values while a condition is true?",
        "c": null,
        "o": [
            "itertools",
            "functools",
            "collections",
            "heapq"
        ]
    },
    {
        "q": "What will this itertools.dropwhile call output?",
        "c": "from itertools import dropwhile\nprint(list(dropwhile(lambda x: x < 3, [1, 2, 3, 4])))",
        "o": [
            "[3, 4]",
            "[1, 2, 3, 4]",
            "[1, 2]",
            "[4]"
        ]
    },
    {
        "q": "What will be printed by this lru_cache example?",
        "c": "from functools import lru_cache\n@lru_cache(maxsize=None)\ndef fib(n):\n    if n < 2: return n\n    return fib(n-1) + fib(n-2)\nprint(fib(5))",
        "o": [
            "5",
            "8",
            "3",
            "13"
        ]
    },
    {
        "q": "Which of these would best replace missing values while zipping iterables of unequal lengths?",
        "c": null,
        "o": [
            "zip_longest",
            "zip",
            "chain",
            "product"
        ]
    },
    {
        "q": "Which function will apply a cumulative addition on a list?",
        "c": null,
        "o": [
            "accumulate",
            "reduce",
            "product",
            "repeat"
        ]
    },
    {
        "q": "What will be the result of this permutations call?",
        "c": "from itertools import permutations\nprint(list(permutations('ab')))",
        "o": [
            "[('a', 'b'), ('b', 'a')]",
            "[('ab',)]",
            "[('a',), ('b',)]",
            "[('b', 'a')]"
        ]
    },
    {
        "q": "What does the `defaultdict` return when accessing a missing key?",
        "c": null,
        "o": [
            "A default value specified at creation",
            "None",
            "Raises KeyError",
            "An empty dictionary"
        ]
    },
    {
        "q": "What is the primary benefit of using heapq.heappushpop() instead of heappush() followed by heappop()?",
        "c": null,
        "o": [
            "It is more efficient (only one heap operation)",
            "It allows duplicate entries",
            "It returns the largest element",
            "It modifies the original list in place"
        ]
    },
    {
        "q": "What does the following code print?",
        "c": "from collections import Counter\nc = Counter('aabbbc')\nprint(c.most_common(2))",
        "o": [
            "[('b', 3), ('a', 2)]",
            "[('a', 2), ('b', 3)]",
            "[('c', 1), ('b', 3)]",
            "[('a', 2), ('c', 1)]"
        ]
    },
    {
        "q": "What will `itertools.product('AB', repeat=2)` generate?",
        "c": null,
        "o": [
            "[('A', 'A'), ('A', 'B'), ('B', 'A'), ('B', 'B')]",
            "[('A', 'B'), ('B', 'A')]",
            "[('AA',), ('AB',), ('BA',), ('BB',)]",
            "[('A',), ('B',)]"
        ]
    },
    {
        "q": "Which of the following will return True for all elements being even?",
        "c": "nums = [2, 4, 6]\nprint(all(map(lambda x: x % 2 == 0, nums)))",
        "o": [
            "True",
            "False",
            "[True, True, True]",
            "[False, False, False]"
        ]
    },
    {
        "q": "Which function from `functools` module can combine items using a binary function?",
        "c": null,
        "o": [
            "reduce",
            "partial",
            "wraps",
            "cmp_to_key"
        ]
    },
    {
        "q": "What will this heapq call do?",
        "c": "import heapq\nh = [5, 2, 8]\nheapq.heapify(h)\nheapq.heappush(h, 1)\nprint(h[0])",
        "o": [
            "1",
            "2",
            "5",
            "8"
        ]
    },
    {
        "q": "Which collections object supports indexing like a list and fast appends/pops from both ends?",
        "c": null,
        "o": [
            "deque",
            "Counter",
            "defaultdict",
            "OrderedDict"
        ]
    },
    {
        "q": "Which statement is true about `itertools.count(start, step)`?",
        "c": null,
        "o": [
            "It generates an infinite sequence starting from `start` and incrementing by `step`",
            "It generates a finite range of values",
            "It yields only even numbers",
            "It returns a list immediately"
        ]
    },
    {
        "q": "What is the output of this filter statement?",
        "c": "result = list(filter(None, [0, '', 'Hello', [], [1]]))\nprint(result)",
        "o": [
            "['Hello', [1]]",
            "[0, '', 'Hello', [], [1]]",
            "[0, '', [], [1]]",
            "['Hello']"
        ]
    },
    {
        "q": "Which namedtuple feature allows you to list all field names?",
        "c": null,
        "o": [
            "_fields",
            "_replace",
            "_asdict",
            "_make"
        ]
    },
    {
        "q": "What is the role of `itertools.starmap`?",
        "c": null,
        "o": [
            "It applies a function to unpacked arguments from tuples",
            "It repeats a function infinitely",
            "It maps a function over zipped items",
            "It filters values based on a predicate"
        ]
    },
    {
        "q": "Which function should you use to merge sorted iterables without sorting the result?",
        "c": null,
        "o": [
            "heapq.merge",
            "itertools.chain",
            "sorted() + merge",
            "zip"
        ]
    },
    {
        "q": "What is the result of this reduce call?",
        "c": "from functools import reduce\nnums = [2, 3, 4]\nprint(reduce(lambda x, y: x * y, nums))",
        "o": [
            "24",
            "9",
            "2",
            "None"
        ]
    },
    {
        "q": "Which function helps cache expensive function results automatically?",
        "c": null,
        "o": [
            "lru_cache",
            "partial",
            "map",
            "accumulate"
        ]
    },
    {
        "q": "What is the default factory of a defaultdict?",
        "c": "from collections import defaultdict\nd = defaultdict(int)\nprint(d['missing'])",
        "o": [
            "0",
            "None",
            "KeyError",
            "''"
        ]
    },
    {
        "q": "Which collections tool is best suited for building a histogram?",
        "c": null,
        "o": [
            "Counter",
            "deque",
            "namedtuple",
            "OrderedDict"
        ]
    },
    {
        "q": "What does heapq.nlargest(n, iterable) return?",
        "c": null,
        "o": [
            "A list of the n largest elements in descending order",
            "A heap with the n largest elements",
            "The single largest element",
            "A sorted list in ascending order"
        ]
    },
    {
        "q": "Which function in itertools generates the cartesian product of input iterables?",
        "c": null,
        "o": [
            "product",
            "permutations",
            "combinations",
            "chain"
        ]
    },
    {
        "q": "What is the output of this reduce example?",
        "c": "from functools import reduce\nnums = [1, 2, 3]\nprint(reduce(lambda x, y: x + y, nums, 10))",
        "o": [
            "16",
            "6",
            "10",
            "None"
        ]
    },
    {
        "q": "What will this itertools.permutations call return?",
        "c": "from itertools import permutations\nprint(list(permutations([1, 2], 1)))",
        "o": [
            "[(1,), (2,)]",
            "[(1, 2), (2, 1)]",
            "[1, 2]",
            "[[1], [2]]"
        ]
    },
    {
        "q": "What does this chain call produce?",
        "c": "from itertools import chain\nprint(list(chain('abc', [1, 2])))",
        "o": [
            "['a', 'b', 'c', 1, 2]",
            "[['a', 'b', 'c'], [1, 2]]",
            "['abc', 1, 2]",
            "[('a', 1), ('b', 2)]"
        ]
    },
    {
        "q": "Which operation is invalid for namedtuple?",
        "c": null,
        "o": [
            "p.x = 5",
            "p._asdict()",
            "p._fields",
            "p._replace(x=10)"
        ]
    },
    {
        "q": "Which function can create a running multiplication?",
        "c": null,
        "o": [
            "accumulate with operator.mul",
            "reduce with operator.mul",
            "map with operator.mul",
            "filter with operator.mul"
        ]
    },
    {
        "q": "Which of the following outputs all prefixes of a list?",
        "c": "from itertools import accumulate\nprint(list(accumulate([1, 2, 3])))",
        "o": [
            "[1, 3, 6]",
            "[1, 2, 3]",
            "[6]",
            "[[1], [1, 2], [1, 2, 3]]"
        ]
    },
    {
        "q": "What does this default dict example return?",
        "c": "from collections import defaultdict\nd = defaultdict(lambda: 'Not Found')\nprint(d['x'])",
        "o": [
            "'Not Found'",
            "KeyError",
            "''",
            "None"
        ]
    },
    {
        "q": "What will the filter function return?",
        "c": "print(list(filter(lambda x: x, [0, None, '', 'Python', 1])))",
        "o": [
            "['Python', 1]",
            "[0, None, '', 'Python', 1]",
            "[0, 1]",
            "['Python']"
        ]
    },
    {
        "q": "Which built-in function can apply a transformation over an iterable and return an iterator?",
        "c": null,
        "o": [
            "map",
            "reduce",
            "filter",
            "zip"
        ]
    },
    {
        "q": "Which module allows you to access cached results of a function?",
        "c": null,
        "o": [
            "functools",
            "collections",
            "heapq",
            "itertools"
        ]
    },
    {
        "q": "Which function from itertools returns the elements of the iterable that are grouped?",
        "c": null,
        "o": [
            "groupby",
            "accumulate",
            "zip_longest",
            "product"
        ]
    },
    {
        "q": "Which collections type can return elements in the order they were first inserted?",
        "c": null,
        "o": [
            "OrderedDict",
            "defaultdict",
            "Counter",
            "deque"
        ]
    },
    {
        "q": "What will this namedtuple print?",
        "c": "from collections import namedtuple\nPerson = namedtuple('Person', 'name age')\np = Person('Alice', 30)\nprint(p._asdict()['age'])",
        "o": [
            "30",
            "'30'",
            "'Alice'",
            "('Alice', 30)"
        ]
    },
    {
        "q": "What does heapq.heapreplace() do?",
        "c": null,
        "o": [
            "Pops and returns the smallest item, and then pushes the new item",
            "Pushes a new item and returns it",
            "Replaces the largest element in the heap",
            "Sorts the heap in reverse"
        ]
    },
    {
        "q": "Which function can zip multiple lists together and pad the shorter ones?",
        "c": null,
        "o": [
            "itertools.zip_longest",
            "zip",
            "chain",
            "product"
        ]
    },
    {
        "q": "What does this code using itertools.count do?",
        "c": "from itertools import count\nc = count(start=5, step=2)\nfor _ in range(3):\n    print(next(c))",
        "o": [
            "5\n7\n9",
            "5\n6\n7",
            "0\n1\n2",
            "2\n4\n6"
        ]
    },
    {
        "q": "Which statement is true about reduce?",
        "c": null,
        "o": [
            "It applies a function cumulatively to reduce a list to a single value",
            "It filters elements based on a predicate",
            "It maps a function over multiple arguments",
            "It is part of the itertools module"
        ]
    },
    {
        "q": "Which operation is valid on a deque?",
        "c": null,
        "o": [
            "rotate()",
            "sorted()",
            "join()",
            "index assignment"
        ]
    },
    {
        "q": "Which output will this map and filter combo produce?",
        "c": "nums = [1, 2, 3, 4, 5]\nresult = list(filter(lambda x: x % 2 == 0, map(lambda y: y + 1, nums)))\nprint(result)",
        "o": [
            "[2, 4, 6]",
            "[1, 3, 5]",
            "[2, 3, 4]",
            "[2, 4]"
        ]
    },
    {
        "q": "Which is a valid use of itertools.repeat?",
        "c": null,
        "o": [
            "repeat('A', 3) → ['A', 'A', 'A']",
            "repeat('A', 3) → ['AAA']",
            "repeat(['A']) → ['A']",
            "repeat('A', 3) → ['A', 'AA', 'AAA']"
        ]
    },
    {
        "q": "What is the purpose of `functools.partial()`?",
        "c": null,
        "o": [
            "Fixes a certain number of arguments to a function",
            "Caches values for faster execution",
            "Allows recursion",
            "Sorts data by keys"
        ]
    },
    {
        "q": "What is the output of this Counter arithmetic?",
        "c": "from collections import Counter\nc1 = Counter('abbccc')\nc2 = Counter('bcc')\nprint(c1 + c2)",
        "o": [
            "Counter({'c': 5, 'b': 3, 'a': 1})",
            "Counter({'a': 2, 'b': 1, 'c': 1})",
            "Counter({'a': 1, 'b': 2, 'c': 3})",
            "Counter({'a': 1, 'b': 1, 'c': 1})"
        ]
    },
    {
        "q": "Which built-in function filters values that satisfy a condition?",
        "c": null,
        "o": [
            "filter",
            "map",
            "reduce",
            "sum"
        ]
    },
    {
        "q": "What will this groupby output produce?",
        "c": "from itertools import groupby\nlst = [1, 1, 2, 2, 1]\nresult = [(k, list(g)) for k, g in groupby(lst)]\nprint(result)",
        "o": [
            "[(1, [1, 1]), (2, [2, 2]), (1, [1])]",
            "[(1, [1]), (2, [2]), (1, [1])]",
            "[(1, [1, 1]), (2, [2]), (2, [2, 1])]",
            "[1, 2, 1]"
        ]
    },
    {
        "q": "Which of the following can create a dictionary with default list values?",
        "c": null,
        "o": [
            "defaultdict(list)",
            "dict()",
            "OrderedDict()",
            "Counter()"
        ]
    },
    {
        "q": "What happens when `heappush` is used on a non-heap list?",
        "c": null,
        "o": [
            "The item is added, but heap property may be violated",
            "It raises an error",
            "It automatically sorts the list",
            "It removes the smallest item first"
        ]
    },
    {
        "q": "Which of the following is true about the `collections.deque` object?",
        "c": null,
        "o": [
            "It provides fast appends and pops from both ends",
            "It only supports operations from the right end",
            "It requires elements to be unique",
            "It stores elements in sorted order"
        ]
    },
    {
        "q": "What will be printed by this code using namedtuple?",
        "c": "from collections import namedtuple\nPoint = namedtuple('Point', 'x y')\np = Point(1, 2)\nprint(p.x, p.y)",
        "o": [
            "1 2",
            "(1, 2)",
            "x y",
            "2 1"
        ]
    },
    {
        "q": "Which function in `itertools` would you use to produce repeated permutations of elements?",
        "c": null,
        "o": [
            "product",
            "permutations",
            "combinations",
            "accumulate"
        ]
    },
    {
        "q": "Which method removes and returns the leftmost element of a deque?",
        "c": null,
        "o": [
            "popleft()",
            "pop()",
            "removeleft()",
            "shift()"
        ]
    },
    {
        "q": "What does this filter call return?",
        "c": "nums = [0, 1, 2, 3, 4]\nprint(list(filter(lambda x: x % 2, nums)))",
        "o": [
            "[1, 3]",
            "[0, 2, 4]",
            "[2, 4]",
            "[0, 1, 2, 3, 4]"
        ]
    },
    {
        "q": "What will be the output of this reduce operation?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x - y, [10, 1, 2]))",
        "o": [
            "7",
            "9",
            "11",
            "17"
        ]
    },
    {
        "q": "What does `itertools.cycle` do?",
        "c": null,
        "o": [
            "Repeats elements of an iterable indefinitely",
            "Generates unique permutations",
            "Chains multiple iterables into one",
            "Creates an infinite counter"
        ]
    },
    {
        "q": "Which heap function returns the smallest item without removing it?",
        "c": null,
        "o": [
            "heap[0]",
            "heappop",
            "heappeek",
            "heappushpop"
        ]
    },
    {
        "q": "Which function is used to group adjacent identical elements in an iterable?",
        "c": null,
        "o": [
            "groupby",
            "accumulate",
            "repeat",
            "cycle"
        ]
    },
    {
        "q": "Which function in heapq can merge multiple sorted inputs into a single sorted output?",
        "c": null,
        "o": [
            "merge",
            "heapify",
            "heappush",
            "nlargest"
        ]
    },
    {
        "q": "What is the effect of rotate(-1) on a deque?",
        "c": "from collections import deque\nd = deque([1, 2, 3])\nd.rotate(-1)\nprint(d)",
        "o": [
            "deque([2, 3, 1])",
            "deque([3, 1, 2])",
            "deque([1, 2, 3])",
            "deque([3, 2, 1])"
        ]
    },
    {
        "q": "Which function in functools lets you call a function with some arguments fixed?",
        "c": null,
        "o": [
            "partial",
            "reduce",
            "lru_cache",
            "update_wrapper"
        ]
    },
    {
        "q": "Which is a key feature of `collections.Counter`?",
        "c": null,
        "o": [
            "Automatically counts occurrences of elements",
            "Maintains sorted order",
            "Requires explicit key-value pair insertion",
            "Throws error on duplicate keys"
        ]
    },
    {
        "q": "Which function generates an iterator that yields elements from the iterable as long as the predicate is true?",
        "c": null,
        "o": [
            "takewhile",
            "dropwhile",
            "filterfalse",
            "accumulate"
        ]
    },
    {
        "q": "What does this itertools.repeat call output?",
        "c": "from itertools import repeat\nfor i in repeat('X', 3):\n    print(i, end=' ')",
        "o": [
            "X X X ",
            "XXX",
            "['X', 'X', 'X']",
            "3"
        ]
    },
    {
        "q": "What is the result of this map expression?",
        "c": "print(list(map(str.upper, ['a', 'b', 'c'])))",
        "o": [
            "['A', 'B', 'C']",
            "['a', 'b', 'c']",
            "['A', 'b', 'c']",
            "['A', 'B', 'c']"
        ]
    },
    {
        "q": "Which operation modifies a deque by reversing its elements?",
        "c": null,
        "o": [
            "reverse()",
            "flip()",
            "sort()",
            "invert()"
        ]
    },
    {
        "q": "Which of the following best describes `itertools.islice()`?",
        "c": null,
        "o": [
            "Returns selected elements from an iterator (like slicing)",
            "Groups elements by value",
            "Zips iterables together",
            "Sorts values in an iterable"
        ]
    },
    {
        "q": "Which `heapq` function would you use to push an item and then pop the smallest one efficiently?",
        "c": null,
        "o": [
            "heappushpop",
            "heapreplace",
            "heappop",
            "merge"
        ]
    },
    {
        "q": "What will be printed by the following groupby example?",
        "c": "from itertools import groupby\nlst = 'AABBBCCDAA'\ngrouped = [(k, len(list(g))) for k, g in groupby(lst)]\nprint(grouped)",
        "o": [
            "[('A', 2), ('B', 3), ('C', 2), ('D', 1), ('A', 2)]",
            "[('A', 3), ('B', 3), ('C', 2), ('D', 1), ('A', 1)]",
            "[('A', 2), ('B', 2), ('C', 2), ('D', 1), ('A', 3)]",
            "[('A', 1), ('B', 3), ('C', 2), ('D', 1), ('A', 2)]"
        ]
    },
    {
        "q": "Which of the following returns the k smallest elements from a list using heapq?",
        "c": null,
        "o": [
            "heapq.nsmallest(k, iterable)",
            "heapq.heapreplace(iterable, k)",
            "heapq.heappop(iterable, k)",
            "heapq.sort(iterable)[:k]"
        ]
    },
    {
        "q": "What will the reduce function output in this example?",
        "c": "from functools import reduce\nprint(reduce(lambda a, b: a + b, ['a', 'b', 'c']))",
        "o": [
            "'abc'",
            "'cba'",
            "'a b c'",
            "['a', 'b', 'c']"
        ]
    },
    {
        "q": "Which `itertools` function returns a tuple of items with all possible selections (order matters, no repetition)?",
        "c": null,
        "o": [
            "permutations",
            "combinations",
            "product",
            "accumulate"
        ]
    },
    {
        "q": "What will this code print using Counter?",
        "c": "from collections import Counter\nprint(Counter('banana') == Counter({'b':1, 'a':3, 'n':2}))",
        "o": [
            "True",
            "False",
            "Error",
            "'banana'"
        ]
    },
    {
        "q": "Which `itertools` function returns successive cumulative results?",
        "c": null,
        "o": [
            "accumulate",
            "groupby",
            "product",
            "starmap"
        ]
    },
    {
        "q": "Which of the following can turn an iterable of tuples into arguments for a function?",
        "c": null,
        "o": [
            "starmap",
            "map",
            "groupby",
            "accumulate"
        ]
    },
    {
        "q": "Which function in heapq is useful for combining sorted inputs?",
        "c": null,
        "o": [
            "merge",
            "heapify",
            "heapreplace",
            "heapzip"
        ]
    },
    {
        "q": "What will be printed by this chain example?",
        "c": "from itertools import chain\nprint(list(chain([1, 2], [3], [4, 5])))",
        "o": [
            "[1, 2, 3, 4, 5]",
            "[[1, 2], [3], [4, 5]]",
            "[1, 2, [3], [4, 5]]",
            "[[1], [2], [3], [4], [5]]"
        ]
    },
    {
        "q": "Which of these functions returns a fixed number of repeated values?",
        "c": null,
        "o": [
            "repeat",
            "cycle",
            "count",
            "product"
        ]
    },
    {
        "q": "Which function will generate an infinite sequence starting at 0?",
        "c": null,
        "o": [
            "count()",
            "repeat(0)",
            "cycle([0])",
            "accumulate([0])"
        ]
    },
    {
        "q": "What is the purpose of the `_replace()` method in a namedtuple?",
        "c": null,
        "o": [
            "To return a new namedtuple with one or more fields modified",
            "To replace an element in place",
            "To clear all fields in the namedtuple",
            "To rename the fields of the namedtuple"
        ]
    },
    {
        "q": "What will this code using `Counter` output?",
        "c": "from collections import Counter\nc = Counter(a=3, b=1)\nd = Counter(a=1, b=2)\nprint(c - d)",
        "o": [
            "Counter({'a': 2})",
            "Counter({'a': 4, 'b': -1})",
            "Counter({'b': -1})",
            "Counter({'a': 2, 'b': -1})"
        ]
    },
    {
        "q": "Which `heapq` function combines the push and pop in a single operation?",
        "c": null,
        "o": [
            "heappushpop",
            "heappop",
            "heapreplace",
            "heapmerge"
        ]
    },
    {
        "q": "What is the result of this map() function?",
        "c": "print(list(map(lambda x: x**2, [1, 2, 3])))",
        "o": [
            "[1, 4, 9]",
            "[2, 4, 6]",
            "[1, 2, 3]",
            "[1, 8, 27]"
        ]
    },
    {
        "q": "Which function from `itertools` returns combinations without replacement?",
        "c": null,
        "o": [
            "combinations",
            "permutations",
            "product",
            "cycle"
        ]
    },
    {
        "q": "What does this `defaultdict` example output?",
        "c": "from collections import defaultdict\nd = defaultdict(lambda: 'N/A')\nprint(d['missing'])",
        "o": [
            "'N/A'",
            "None",
            "KeyError",
            "0"
        ]
    },
    {
        "q": "Which tool generates all possible k-length permutations of elements from the iterable?",
        "c": null,
        "o": [
            "permutations",
            "combinations",
            "product",
            "groupby"
        ]
    },
    {
        "q": "Which function would produce a running sum of a list of numbers?",
        "c": null,
        "o": [
            "accumulate",
            "reduce",
            "map",
            "starmap"
        ]
    },
    {
        "q": "What is the purpose of `functools.lru_cache()`?",
        "c": null,
        "o": [
            "Caches the results of function calls to speed up repeated calls",
            "Limits the recursion depth",
            "Stores function call history for logging",
            "Forces lazy evaluation"
        ]
    },
    {
        "q": "What will be printed by this code using heapq?",
        "c": "import heapq\nh = [3, 1, 4]\nheapq.heapify(h)\nheapq.heappush(h, 2)\nprint([heapq.heappop(h) for _ in range(len(h))])",
        "o": [
            "[1, 2, 3, 4]",
            "[4, 3, 2, 1]",
            "[2, 3, 1, 4]",
            "[1, 3, 2, 4]"
        ]
    },
    {
        "q": "What does `filter(None, iterable)` do?",
        "c": null,
        "o": [
            "Removes all falsy values from the iterable",
            "Filters out None values only",
            "Returns None for each item",
            "Filters in only falsy values"
        ]
    },
    {
        "q": "Which function in `itertools` will cycle through an iterable indefinitely?",
        "c": null,
        "o": [
            "cycle",
            "repeat",
            "count",
            "chain"
        ]
    },
    {
        "q": "What will this chain call output?",
        "c": "from itertools import chain\nprint(list(chain('XY', [1, 2])))",
        "o": [
            "['X', 'Y', 1, 2]",
            "[['X', 'Y'], [1, 2]]",
            "['XY12']",
            "[1, 2, 'X', 'Y']"
        ]
    },
    {
        "q": "What is the correct way to create a deque with initial values?",
        "c": null,
        "o": [
            "deque([1, 2, 3])",
            "deque{1, 2, 3}",
            "deque(1, 2, 3)",
            "deque = [1, 2, 3]"
        ]
    },
    {
        "q": "Which of the following best describes `reduce()`?",
        "c": null,
        "o": [
            "It applies a function cumulatively to items in a sequence",
            "It reduces the memory usage of a function",
            "It removes items from a list based on a condition",
            "It sorts elements based on a key"
        ]
    },
    {
        "q": "Which of these is a correct usage of `collections.Counter`?",
        "c": "from collections import Counter\nprint(Counter('success'))",
        "o": [
            "Counter({'s': 3, 'u': 1, 'c': 2, 'e': 1})",
            "Counter({'s': 2, 'u': 1, 'c': 2, 'e': 1})",
            "Counter({'s': 3, 'u': 1, 'c': 2, 'e': 0})",
            "Counter({'s': 2, 'u': 2, 'c': 2, 'e': 1})"
        ]
    },
    {
        "q": "Which function is used to get the top N frequent elements using `Counter`?",
        "c": null,
        "o": [
            "most_common(n)",
            "top(n)",
            "largest(n)",
            "get_top(n)"
        ]
    },
    {
        "q": "What does `heapq.heapify()` do?",
        "c": null,
        "o": [
            "Transforms a list into a valid heap in-place",
            "Sorts the list in descending order",
            "Removes duplicate elements",
            "Creates a max-heap from a list"
        ]
    },
    {
        "q": "What is the output of this `map()` function?",
        "c": "print(list(map(lambda x: x * 2, range(3))))",
        "o": [
            "[0, 2, 4]",
            "[1, 2, 3]",
            "[2, 4, 6]",
            "[0, 1, 2]"
        ]
    },
    {
        "q": "Which of the following is true about `itertools.combinations()`?",
        "c": null,
        "o": [
            "It returns r-length tuples with elements in order and without replacement",
            "It returns all possible orderings including duplicates",
            "It allows repeated elements in a tuple",
            "It modifies the original iterable"
        ]
    },
    {
        "q": "Which of these statements about `defaultdict` is false?",
        "c": null,
        "o": [
            "It raises KeyError when a missing key is accessed",
            "It requires a default factory function",
            "It can be used to group items easily",
            "It inherits from dict"
        ]
    },
    {
        "q": "What does `accumulate()` return when applied to a list?",
        "c": "from itertools import accumulate\nprint(list(accumulate([1, 2, 3])))",
        "o": [
            "[1, 3, 6]",
            "[1, 2, 3]",
            "[6]",
            "[[1], [1,2], [1,2,3]]"
        ]
    },
    {
        "q": "Which `functools` function would be best to implement memoization?",
        "c": null,
        "o": [
            "lru_cache",
            "reduce",
            "partial",
            "wraps"
        ]
    },
    {
        "q": "What is the output of this `filter()` example?",
        "c": "print(list(filter(lambda x: x > 0, [-1, 0, 1, 2])))",
        "o": [
            "[1, 2]",
            "[0, 1, 2]",
            "[-1, 0]",
            "[-1, 0, 1, 2]"
        ]
    },
    {
        "q": "Which `itertools` function would you use to pair up elements from two iterables?",
        "c": null,
        "o": [
            "zip_longest",
            "chain",
            "product",
            "cycle"
        ]
    },
    {
        "q": "What will be the result of this heap operation?",
        "c": "import heapq\nheap = [4, 1, 7]\nheapq.heapify(heap)\nheapq.heappush(heap, 0)\nprint(heap[0])",
        "o": [
            "0",
            "1",
            "4",
            "7"
        ]
    },
    {
        "q": "Which method is used to remove an element from the right of a deque?",
        "c": null,
        "o": [
            "pop()",
            "popleft()",
            "remove()",
            "shift()"
        ]
    },
    {
        "q": "What does this namedtuple usage return?",
        "c": "from collections import namedtuple\nPoint = namedtuple('Point', ['x', 'y'])\np = Point(2, 5)\nprint(p._asdict())",
        "o": [
            "{'x': 2, 'y': 5}",
            "Point(x=2, y=5)",
            "['x', 'y']",
            "(2, 5)"
        ]
    },
    {
        "q": "Which of the following tools supports infinite iteration?",
        "c": null,
        "o": [
            "itertools.count",
            "itertools.zip_longest",
            "heapq.heapify",
            "collections.Counter"
        ]
    },
    {
        "q": "Which built-in function applies a function cumulatively and returns a single result?",
        "c": null,
        "o": [
            "reduce",
            "map",
            "filter",
            "sorted"
        ]
    },
    {
        "q": "Which method can be used to extend a deque on the left?",
        "c": null,
        "o": [
            "extendleft()",
            "extend()",
            "appendleft()",
            "insertleft()"
        ]
    },
    {
        "q": "What does this `heapq.nlargest` example return?",
        "c": "import heapq\nprint(heapq.nlargest(2, [1, 5, 3, 2]))",
        "o": [
            "[5, 3]",
            "[1, 2]",
            "[1, 3]",
            "[3, 2]"
        ]
    },
    {
        "q": "Which of the following statements is true about `itertools.permutations`?",
        "c": null,
        "o": [
            "It generates all possible orderings of elements without repetition",
            "It returns tuples of repeated elements",
            "It returns combinations without considering order",
            "It yields infinite values"
        ]
    },
    {
        "q": "What is the output of this reduce operation?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [1, 2, 3, 4]))",
        "o": [
            "24",
            "10",
            "9",
            "0"
        ]
    },
    {
        "q": "Which tool can be used to repeat a value indefinitely?",
        "c": null,
        "o": [
            "itertools.repeat",
            "itertools.count",
            "heapq.heapify",
            "collections.deque"
        ]
    },
    {
        "q": "What is the primary advantage of using `defaultdict`?",
        "c": null,
        "o": [
            "It avoids KeyErrors by initializing missing keys",
            "It sorts keys automatically",
            "It requires no imports",
            "It uses less memory than dict"
        ]
    },
    {
        "q": "What will be printed by this `map` and `filter` combo?",
        "c": "print(list(filter(lambda x: x > 3, map(lambda y: y + 1, [1, 2, 3, 4]))))",
        "o": [
            "[4, 5]",
            "[3, 4]",
            "[1, 2, 3]",
            "[5]"
        ]
    },
    {
        "q": "Which heap operation would you use to remove and return the smallest element?",
        "c": null,
        "o": [
            "heappop",
            "heappushpop",
            "heapreplace",
            "heapdel"
        ]
    },
    {
        "q": "Which function in `itertools` is used to eliminate false values?",
        "c": null,
        "o": [
            "compress",
            "filterfalse",
            "dropwhile",
            "groupby"
        ]
    },
    {
        "q": "What is the result of the following namedtuple usage?",
        "c": "from collections import namedtuple\nCar = namedtuple('Car', 'brand model')\nc = Car('Toyota', 'Camry')\nprint(c.brand)",
        "o": [
            "Toyota",
            "Camry",
            "brand",
            "('Toyota', 'Camry')"
        ]
    },
    {
        "q": "Which function will produce the cartesian product of input iterables?",
        "c": null,
        "o": [
            "itertools.product",
            "itertools.combinations",
            "itertools.chain",
            "heapq.merge"
        ]
    },
    {
        "q": "What happens if you pop from an empty deque?",
        "c": null,
        "o": [
            "IndexError",
            "None is returned",
            "Empty string is returned",
            "deque is reset"
        ]
    },
    {
        "q": "Which of the following is used to access field names of a namedtuple?",
        "c": null,
        "o": [
            "_fields",
            "keys()",
            "_names",
            "fieldnames()"
        ]
    },
    {
        "q": "Which built-in function applies a function to every item in an iterable and returns an iterator?",
        "c": null,
        "o": [
            "map",
            "filter",
            "reduce",
            "zip"
        ]
    },
    {
        "q": "What is the output of this code with accumulate and multiplication?",
        "c": "from itertools import accumulate\nimport operator\nprint(list(accumulate([1, 2, 3, 4], operator.mul)))",
        "o": [
            "[1, 2, 6, 24]",
            "[1, 3, 6, 10]",
            "[2, 4, 6, 8]",
            "[24]"
        ]
    },
    {
        "q": "What is the result of this `map()` call with multiple iterables?",
        "c": "a = [1, 2, 3]\nb = [4, 5, 6]\nprint(list(map(lambda x, y: x + y, a, b)))",
        "o": [
            "[5, 7, 9]",
            "[1, 2, 3, 4, 5, 6]",
            "[4, 5, 6]",
            "[1, 2, 3]"
        ]
    },
    {
        "q": "Which method is used to clear all elements from a deque?",
        "c": null,
        "o": [
            "clear()",
            "reset()",
            "removeAll()",
            "empty()"
        ]
    },
    {
        "q": "What is the result of using `zip_longest` with unequal lists?",
        "c": "from itertools import zip_longest\nprint(list(zip_longest([1, 2], ['a'], fillvalue='x')))",
        "o": [
            "[(1, 'a'), (2, 'x')]",
            "[(1, 'a'), (2, None)]",
            "[(1, 'a')]",
            "[(1, 'x'), (2, 'x')]"
        ]
    },
    {
        "q": "Which `heapq` function can replace the smallest item and return it?",
        "c": null,
        "o": [
            "heapreplace",
            "heappop",
            "heappushpop",
            "heapify"
        ]
    },
    {
        "q": "Which function is used to apply a function of two arguments cumulatively to the items of a sequence?",
        "c": null,
        "o": [
            "reduce",
            "map",
            "filter",
            "apply"
        ]
    },
    {
        "q": "What does `collections.OrderedDict` preserve?",
        "c": null,
        "o": [
            "Insertion order of keys",
            "Sorted order of keys",
            "Only numeric keys",
            "Reverse order of keys"
        ]
    },
    {
        "q": "Which statement is true about `itertools.chain`?",
        "c": null,
        "o": [
            "It flattens multiple iterables into a single iterable",
            "It creates a Cartesian product",
            "It groups items based on a function",
            "It slices an iterable"
        ]
    },
    {
        "q": "What is the result of this `filter()` example?",
        "c": "print(list(filter(None, [0, '', 5, False, 'Hi'])))",
        "o": [
            "[5, 'Hi']",
            "[0, '', 5, False, 'Hi']",
            "[0, 5]",
            "[0, False]"
        ]
    },
    {
        "q": "Which operation adds an element to the left side of a deque?",
        "c": null,
        "o": [
            "appendleft()",
            "insert(0)",
            "extendleft()",
            "pushleft()"
        ]
    },
    {
        "q": "Which tool can be used to group consecutive values based on a key function?",
        "c": null,
        "o": [
            "itertools.groupby",
            "itertools.accumulate",
            "heapq.group",
            "collections.cluster"
        ]
    },
    {
        "q": "What does the following code output?",
        "c": "from itertools import product\nprint(list(product([1, 2], ['a', 'b'])))",
        "o": [
            "[(1, 'a'), (1, 'b'), (2, 'a'), (2, 'b')]",
            "[(1, 2), ('a', 'b')]",
            "[('a', 1), ('b', 2)]",
            "[1, 2, 'a', 'b']"
        ]
    },
    {
        "q": "Which of the following is a valid use of `starmap`?",
        "c": "from itertools import starmap\nfrom operator import pow\nprint(list(starmap(pow, [(2, 3), (3, 2)])))",
        "o": [
            "[8, 9]",
            "[6, 5]",
            "[5, 6]",
            "[3, 2]"
        ]
    },
    {
        "q": "What does this `heapq.heappushpop()` operation return?",
        "c": "import heapq\nh = [2, 3, 5]\nheapq.heapify(h)\nprint(heapq.heappushpop(h, 1))",
        "o": [
            "1",
            "2",
            "3",
            "5"
        ]
    },
    {
        "q": "Which of the following describes how `Counter().elements()` works?",
        "c": null,
        "o": [
            "Returns elements repeating as many times as their count",
            "Returns the total count of all elements",
            "Removes duplicates from the counter",
            "Returns the most common element"
        ]
    },
    {
        "q": "Which function in `functools` preserves metadata when decorating functions?",
        "c": null,
        "o": [
            "wraps",
            "reduce",
            "partial",
            "lru_cache"
        ]
    },
    {
        "q": "What is the output of the following Counter subtraction?",
        "c": "from collections import Counter\nc1 = Counter({'a': 3, 'b': 1})\nc2 = Counter({'a': 1, 'b': 2})\nprint(c1 - c2)",
        "o": [
            "Counter({'a': 2})",
            "Counter({'a': 4, 'b': -1})",
            "Counter({'b': -1})",
            "Counter({'a': 2, 'b': -1})"
        ]
    },
    {
        "q": "Which method in `deque` adds multiple elements to the right?",
        "c": null,
        "o": [
            "extend()",
            "append()",
            "extendright()",
            "appendright()"
        ]
    },
    {
        "q": "Which function from `itertools` stops when the predicate becomes false?",
        "c": null,
        "o": [
            "takewhile",
            "dropwhile",
            "filterfalse",
            "islice"
        ]
    },
    {
        "q": "What will be the output of this reduce operation?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x / y, [100, 2, 5]))",
        "o": [
            "10.0",
            "2.0",
            "0.4",
            "25.0"
        ]
    },
    {
        "q": "What will `heapq.merge()` return?",
        "c": "import heapq\nprint(list(heapq.merge([1, 4], [2, 3])))",
        "o": [
            "[1, 2, 3, 4]",
            "[1, 4, 2, 3]",
            "[4, 3, 2, 1]",
            "[1, 3, 2, 4]"
        ]
    },
    {
        "q": "What does the `default_factory` parameter of defaultdict do?",
        "c": null,
        "o": [
            "Provides default values for missing keys",
            "Ensures unique keys only",
            "Sorts the dictionary",
            "Sets all values to None by default"
        ]
    },
    {
        "q": "Which function creates an iterator that returns items from an iterable only when the predicate is false?",
        "c": null,
        "o": [
            "dropwhile",
            "takewhile",
            "filterfalse",
            "compress"
        ]
    },
    {
        "q": "What will be printed by this namedtuple method?",
        "c": "from collections import namedtuple\nColor = namedtuple('Color', 'r g b')\nc = Color(255, 0, 127)\nprint(c._fields)",
        "o": [
            "('r', 'g', 'b')",
            "['r', 'g', 'b']",
            "{'r': 255, 'g': 0, 'b': 127}",
            "('Color')"
        ]
    },
    {
        "q": "Which method returns the top N elements with the highest frequency in a Counter?",
        "c": null,
        "o": [
            "most_common(n)",
            "max(n)",
            "top_n(n)",
            "get_largest(n)"
        ]
    },
    {
        "q": "What does this `filter()` call do?",
        "c": "print(list(filter(lambda x: x != 'a', ['a', 'b', 'a', 'c'])))",
        "o": [
            "['b', 'c']",
            "['a', 'a']",
            "['a', 'b', 'c']",
            "['b', 'a', 'c']"
        ]
    },
    {
        "q": "Which `itertools` function produces all r-length tuples of elements where individual elements can repeat?",
        "c": null,
        "o": [
            "product",
            "permutations",
            "combinations",
            "repeat"
        ]
    },
    {
        "q": "Which heapq method retrieves the k largest elements from a heap?",
        "c": null,
        "o": [
            "nlargest()",
            "nmax()",
            "topk()",
            "get_largest()"
        ]
    },
    {
        "q": "Which function generates a counter with default value of 0 for unseen elements?",
        "c": null,
        "o": [
            "collections.Counter",
            "collections.OrderedDict",
            "functools.lru_cache",
            "heapq.heapify"
        ]
    },
    {
        "q": "What is the output of this itertools `combinations` example?",
        "c": "from itertools import combinations\nprint(list(combinations('AB', 2)))",
        "o": [
            "[('A', 'B')]",
            "[('A', 'A'), ('A', 'B'), ('B', 'B')]",
            "[('A',), ('B',)]",
            "[('B', 'A')]"
        ]
    },
    {
        "q": "Which method adds a new element to the beginning of a deque?",
        "c": null,
        "o": [
            "appendleft()",
            "insert(0)",
            "pushleft()",
            "addfirst()"
        ]
    },
    {
        "q": "What will be the result of this itertools `cycle()` usage?",
        "c": "from itertools import cycle\nfrom itertools import islice\nprint(list(islice(cycle('AB'), 5)))",
        "o": [
            "['A', 'B', 'A', 'B', 'A']",
            "['A', 'A', 'B', 'B', 'A']",
            "['A', 'B', 'B', 'A', 'A']",
            "['A', 'B', 'C', 'D', 'E']"
        ]
    },
    {
        "q": "Which of the following best describes `heapq.heapreplace()`?",
        "c": null,
        "o": [
            "Pops and returns the smallest item, and pushes a new item",
            "Adds a new item and returns the largest one",
            "Replaces the largest item with the smallest",
            "Sorts the heap"
        ]
    },
    {
        "q": "Which function helps apply a binary operation across pairs in a sequence and return cumulative results?",
        "c": null,
        "o": [
            "itertools.accumulate",
            "functools.reduce",
            "map",
            "heapq.merge"
        ]
    },
    {
        "q": "What does `collections.namedtuple` return?",
        "c": null,
        "o": [
            "A tuple subclass with named fields",
            "A class with static methods",
            "A regular dictionary",
            "A list with named indices"
        ]
    },
    {
        "q": "What will the following code output using `filterfalse()`?",
        "c": "from itertools import filterfalse\nprint(list(filterfalse(lambda x: x % 2 == 0, [1, 2, 3, 4])))",
        "o": [
            "[2, 4]",
            "[1, 3]",
            "[1, 2, 3, 4]",
            "[1, 2]"
        ]
    },
    {
        "q": "Which of these functions can zip multiple sorted iterables into a single sorted iterator?",
        "c": null,
        "o": [
            "heapq.merge",
            "zip_longest",
            "map",
            "product"
        ]
    },
    {
        "q": "What will the `defaultdict(list)` produce for a missing key?",
        "c": null,
        "o": [
            "An empty list",
            "None",
            "0",
            "KeyError"
        ]
    },
    {
        "q": "Which function would you use to create a fixed-length slice of an iterator?",
        "c": null,
        "o": [
            "islice",
            "takewhile",
            "starmap",
            "filterfalse"
        ]
    },
    {
        "q": "Which of the following uses `map()` correctly with a lambda function?",
        "c": "print(list(map(lambda x: x*3, [1, 2, 3])))",
        "o": [
            "[3, 6, 9]",
            "[1, 2, 3]",
            "[1, 4, 9]",
            "[2, 3, 4]"
        ]
    },
    {
        "q": "What does `Counter().most_common(1)` return?",
        "c": "from collections import Counter\nc = Counter('hello')\nprint(c.most_common(1))",
        "o": [
            "[('l', 2)]",
            "[('h', 1)]",
            "[('e', 1)]",
            "[('o', 1)]"
        ]
    },
    {
        "q": "What will this namedtuple unpacking print?",
        "c": "from collections import namedtuple\nPoint = namedtuple('Point', 'x y')\np = Point(3, 4)\nx, y = p\nprint(x, y)",
        "o": [
            "3 4",
            "x y",
            "(3, 4)",
            "4 3"
        ]
    },
    {
        "q": "Which heapq function returns the smallest `n` elements from a dataset?",
        "c": null,
        "o": [
            "nsmallest",
            "nlargest",
            "heappop",
            "heapify"
        ]
    },
    {
        "q": "Which `itertools` function would you use to repeat a value a fixed number of times?",
        "c": "from itertools import repeat\nprint(list(repeat(7, 3)))",
        "o": [
            "[7, 7, 7]",
            "[3, 7, 7]",
            "[7, 3, 7]",
            "[7, 3]"
        ]
    },
    {
        "q": "What is the main use of `functools.partial()`?",
        "c": null,
        "o": [
            "To fix certain arguments of a function and generate a new function",
            "To partially run a function in background",
            "To skip optional arguments",
            "To add memoization"
        ]
    },
    {
        "q": "What does this `filter()` statement return?",
        "c": "print(list(filter(str.isalpha, ['a', '1', 'b', '@'])))",
        "o": [
            "['a', 'b']",
            "['a', '1', 'b', '@']",
            "['1', '@']",
            "['a', '1', 'b']"
        ]
    },
    {
        "q": "What is the output of this code using `product()`?",
        "c": "from itertools import product\nprint(list(product([0, 1], repeat=2)))",
        "o": [
            "[(0, 0), (0, 1), (1, 0), (1, 1)]",
            "[(0, 1), (1, 0)]",
            "[(0, 0), (1, 1)]",
            "[(1, 0), (1, 1)]"
        ]
    },
    {
        "q": "Which `collections` class helps maintain order and remember insertion?",
        "c": null,
        "o": [
            "OrderedDict",
            "Counter",
            "defaultdict",
            "namedtuple"
        ]
    },
    {
        "q": "Which of these functions requires importing from `functools`?",
        "c": null,
        "o": [
            "reduce",
            "map",
            "filter",
            "zip"
        ]
    },
    {
        "q": "What does `heapq.heappushpop()` do if the new element is smaller than the smallest?",
        "c": "import heapq\nh = [2, 3, 4]\nheapq.heapify(h)\nprint(heapq.heappushpop(h, 1))",
        "o": [
            "1",
            "2",
            "3",
            "4"
        ]
    },
    {
        "q": "Which function in `itertools` would you use to group elements by a key function?",
        "c": null,
        "o": [
            "groupby",
            "compress",
            "islice",
            "repeat"
        ]
    },
    {
        "q": "What is the result of this `map()` function?",
        "c": "print(list(map(str.upper, ['a', 'b', 'c'])))",
        "o": [
            "['A', 'B', 'C']",
            "['a', 'b', 'c']",
            "['upper(a)', 'upper(b)', 'upper(c)']",
            "[None, None, None]"
        ]
    },
    {
        "q": "What is the correct way to create a `namedtuple`?",
        "c": null,
        "o": [
            "namedtuple('Point', ['x', 'y'])",
            "namedtuple(['x', 'y'], 'Point')",
            "namedtuple(Point, x, y)",
            "namedtuple('Point', 'x:y')"
        ]
    },
    {
        "q": "Which of the following deque methods removes from the left?",
        "c": null,
        "o": [
            "popleft()",
            "pop()",
            "removeleft()",
            "shift()"
        ]
    },
    {
        "q": "Which method in Counter can help merge counts from another Counter?",
        "c": null,
        "o": [
            "update()",
            "merge()",
            "extend()",
            "combine()"
        ]
    },
    {
        "q": "Which built-in function applies a predicate and removes items that do not match?",
        "c": null,
        "o": [
            "filter",
            "map",
            "reduce",
            "zip"
        ]
    },
    {
        "q": "What does this `islice()` example output?",
        "c": "from itertools import islice\nprint(list(islice(range(10), 2, 7, 2)))",
        "o": [
            "[2, 4, 6]",
            "[2, 3, 4, 5, 6]",
            "[0, 2, 4, 6]",
            "[3, 5, 7]"
        ]
    },
    {
        "q": "Which `itertools` function would you use for a running total?",
        "c": null,
        "o": [
            "accumulate",
            "starmap",
            "product",
            "repeat"
        ]
    },
    {
        "q": "What will be the output of this `filter()` call?",
        "c": "print(list(filter(lambda x: x.islower(), 'AbCdE')))",
        "o": [
            "['b', 'd']",
            "['A', 'b', 'C', 'd', 'E']",
            "['A', 'C', 'E']",
            "['a', 'c', 'e']"
        ]
    },
    {
        "q": "Which argument of `product()` allows for Cartesian product with repeated elements?",
        "c": null,
        "o": [
            "repeat",
            "repeats",
            "times",
            "loop"
        ]
    },
    {
        "q": "What will `reduce(lambda x, y: x + y, ['a', 'b', 'c'])` return?",
        "c": null,
        "o": [
            "'abc'",
            "['a', 'b', 'c']",
            "'cba'",
            "'ab+c'"
        ]
    },
    {
        "q": "What is the result of the following `itertools.chain()` usage?",
        "c": "from itertools import chain\nprint(list(chain([1, 2], [3, 4])))",
        "o": [
            "[1, 2, 3, 4]",
            "[[1, 2], [3, 4]]",
            "[1, 2], [3, 4]",
            "[1, 2, [3, 4]]"
        ]
    },
    {
        "q": "Which method in deque removes the last item?",
        "c": null,
        "o": [
            "pop()",
            "popleft()",
            "remove()",
            "del()"
        ]
    },
    {
        "q": "Which of the following will generate an infinite sequence starting at 10?",
        "c": "from itertools import count\nfrom itertools import islice\nprint(list(islice(count(10), 5)))",
        "o": [
            "[10, 11, 12, 13, 14]",
            "[1, 2, 3, 4, 5]",
            "[0, 1, 2, 3, 4]",
            "[11, 12, 13, 14, 15]"
        ]
    },
    {
        "q": "Which function in `heapq` both pushes and pops in one atomic operation?",
        "c": null,
        "o": [
            "heappushpop",
            "heapreplace",
            "heappop",
            "heapify"
        ]
    },
    {
        "q": "What does `functools.reduce()` return when applied to an empty list without initializer?",
        "c": null,
        "o": [
            "Raises TypeError",
            "Returns 0",
            "Returns None",
            "Returns empty list"
        ]
    },
    {
        "q": "What is the output of this `Counter().update()` usage?",
        "c": "from collections import Counter\nc = Counter('aa')\nc.update('ab')\nprint(c)",
        "o": [
            "Counter({'a': 3, 'b': 1})",
            "Counter({'a': 2, 'b': 1})",
            "Counter({'a': 1, 'b': 1})",
            "Counter({'a': 4, 'b': 1})"
        ]
    },
    {
        "q": "Which function groups items in an iterable using a selector iterable?",
        "c": "from itertools import compress\nprint(list(compress('ABCDE', [1, 0, 1, 0, 1])))",
        "o": [
            "['A', 'C', 'E']",
            "['B', 'D']",
            "['A', 'B', 'C']",
            "['A', 'C', 'D']"
        ]
    },
    {
        "q": "Which of the following will create a defaultdict with default int values?",
        "c": null,
        "o": [
            "defaultdict(int)",
            "defaultdict()",
            "defaultdict(0)",
            "defaultdict(list)"
        ]
    },
    {
        "q": "Which operator is commonly used in reduce to calculate the sum?",
        "c": null,
        "o": [
            "operator.add",
            "operator.mul",
            "operator.sub",
            "operator.div"
        ]
    },
    {
        "q": "Which of the following iterators will produce: (1,2), (3,4)?",
        "c": "from itertools import starmap\nfrom operator import add\nprint(list(starmap(add, [(1, 2), (3, 4)])))",
        "o": [
            "[3, 7]",
            "[(1, 2), (3, 4)]",
            "[1, 2, 3, 4]",
            "[2, 3, 4, 5]"
        ]
    },
    {
        "q": "Which method returns an iterator yielding only truthy elements?",
        "c": "print(list(filter(None, [0, False, '', 'Hi', 3])))",
        "o": [
            "['Hi', 3]",
            "[0, False, '', 'Hi', 3]",
            "[0, 3]",
            "[False, 0]"
        ]
    },
    {
        "q": "Which `itertools` function will return values until a predicate fails?",
        "c": "from itertools import takewhile\nprint(list(takewhile(lambda x: x < 5, [1, 2, 3, 5, 4])))",
        "o": [
            "[1, 2, 3]",
            "[1, 2, 3, 5]",
            "[1, 2, 3, 4]",
            "[1, 2, 3, 5, 4]"
        ]
    },
    {
        "q": "What does `Counter('banana').most_common(2)` return?",
        "c": null,
        "o": [
            "[('a', 3), ('n', 2)]",
            "[('n', 2), ('a', 3)]",
            "[('b', 1), ('a', 3)]",
            "[('a', 2), ('n', 2)]"
        ]
    },
    {
        "q": "Which function applies a function cumulatively using a binary operator?",
        "c": null,
        "o": [
            "reduce",
            "map",
            "filter",
            "zip"
        ]
    },
    {
        "q": "What does `islice(range(10), 3)` return?",
        "c": "from itertools import islice\nprint(list(islice(range(10), 3)))",
        "o": [
            "[0, 1, 2]",
            "[1, 2, 3]",
            "[0, 1, 2, 3]",
            "[3, 4, 5]"
        ]
    },
    {
        "q": "What does the following code return?",
        "c": "from collections import deque\nq = deque([1, 2, 3])\nq.rotate(1)\nprint(q)",
        "o": [
            "deque([3, 1, 2])",
            "deque([2, 3, 1])",
            "deque([1, 2, 3])",
            "deque([1, 3, 2])"
        ]
    },
    {
        "q": "What is the default return type of `Counter().most_common()` if no argument is passed?",
        "c": null,
        "o": [
            "All items sorted by frequency (descending)",
            "Only the most frequent item",
            "Empty list",
            "None"
        ]
    },
    {
        "q": "Which of the following correctly creates a `namedtuple` with default values?",
        "c": "from collections import namedtuple\nPoint = namedtuple('Point', ['x', 'y'], defaults=[0, 0])\np = Point()\nprint(p)",
        "o": [
            "Point(x=0, y=0)",
            "Point(0, 0)",
            "Point(x=None, y=None)",
            "Point()"
        ]
    },
    {
        "q": "What is the behavior of `heapq.heapify()`?",
        "c": null,
        "o": [
            "Transforms a list into a heap in-place",
            "Sorts a list",
            "Returns a sorted copy of the list",
            "Creates a max-heap"
        ]
    },
    {
        "q": "Which function generates r-length tuples with replacement from iterable elements?",
        "c": null,
        "o": [
            "product()",
            "combinations()",
            "permutations()",
            "repeat()"
        ]
    },
    {
        "q": "What does this `map()` operation return?",
        "c": "print(list(map(int, ['1', '2', '3'])))",
        "o": [
            "[1, 2, 3]",
            "['1', '2', '3']",
            "[1.0, 2.0, 3.0]",
            "Error"
        ]
    },
    {
        "q": "What does `Counter().elements()` return?",
        "c": "from collections import Counter\nc = Counter(a=2, b=1)\nprint(list(c.elements()))",
        "o": [
            "['a', 'a', 'b']",
            "[('a', 2), ('b', 1)]",
            "['a', 'b']",
            "[2, 1]"
        ]
    },
    {
        "q": "What is the output of this `reduce()` operation?",
        "c": "from functools import reduce\nprint(reduce(lambda a, b: a + b, [1]))",
        "o": [
            "1",
            "0",
            "TypeError",
            "None"
        ]
    },
    {
        "q": "Which function in `heapq` pushes a new item and pops the smallest item efficiently?",
        "c": null,
        "o": [
            "heappushpop()",
            "heapreplace()",
            "heappop()",
            "heapappend()"
        ]
    },
    {
        "q": "What is the output of this code using `filter()`?",
        "c": "print(list(filter(lambda x: x > 5, [2, 4, 6, 8])))",
        "o": [
            "[6, 8]",
            "[2, 4]",
            "[4, 6, 8]",
            "[8]"
        ]
    },
    {
        "q": "Which of the following `collections` types automatically initializes a new entry with a default list?",
        "c": null,
        "o": [
            "defaultdict(list)",
            "Counter()",
            "dict()",
            "OrderedDict()"
        ]
    },
    {
        "q": "What does `compress('ABCDE', [1, 0, 0, 1, 1])` return?",
        "c": "from itertools import compress\nprint(list(compress('ABCDE', [1, 0, 0, 1, 1])))",
        "o": [
            "['A', 'D', 'E']",
            "['B', 'C']",
            "['A', 'B', 'D', 'E']",
            "['D', 'E']"
        ]
    },
    {
        "q": "Which statement is true about `itertools.repeat()`?",
        "c": null,
        "o": [
            "It can repeat a value infinitely or a fixed number of times",
            "It repeats a function call with different arguments",
            "It returns a shuffled iterator",
            "It creates random values"
        ]
    },
    {
        "q": "Which of the following operations will sort a heap while preserving the heap?",
        "c": null,
        "o": [
            "sorted(h)",
            "heapq.sort(h)",
            "heapq.heapify(h)",
            "heapq.heapsort(h)"
        ]
    },
    {
        "q": "What does `reduce(lambda x, y: x - y, [10, 2, 1])` return?",
        "c": null,
        "o": [
            "7",
            "9",
            "11",
            "3"
        ]
    },
    {
        "q": "What will be the output of this `namedtuple` conversion?",
        "c": "from collections import namedtuple\nPoint = namedtuple('Point', ['x', 'y'])\np = Point(10, 20)\nprint(p._asdict())",
        "o": [
            "{'x': 10, 'y': 20}",
            "['x', 10, 'y', 20]",
            "(10, 20)",
            "{10: 'x', 20: 'y'}"
        ]
    },
    {
        "q": "What happens if you pop from an empty deque?",
        "c": "from collections import deque\nd = deque()\nd.pop()",
        "o": [
            "IndexError",
            "None",
            "0",
            "Returns empty deque"
        ]
    },
    {
        "q": "Which function returns all r-length permutations of input elements?",
        "c": null,
        "o": [
            "itertools.permutations",
            "itertools.combinations",
            "itertools.product",
            "itertools.repeat"
        ]
    },
    {
        "q": "Which function produces the cartesian product of input iterables?",
        "c": null,
        "o": [
            "product",
            "permutations",
            "combinations",
            "zip"
        ]
    },
    {
        "q": "What does this code print?",
        "c": "from collections import defaultdict\nd = defaultdict(lambda: 'N/A')\nprint(d['missing'])",
        "o": [
            "'N/A'",
            "KeyError",
            "None",
            "0"
        ]
    },
    {
        "q": "What does `reduce(lambda x, y: x * y, [1, 2, 3, 4])` return?",
        "c": null,
        "o": [
            "24",
            "10",
            "0",
            "None"
        ]
    },
    {
        "q": "Which method efficiently removes and returns the smallest heap item?",
        "c": null,
        "o": [
            "heappop",
            "heapify",
            "pop",
            "heapmin"
        ]
    },
    {
        "q": "What will this `filter()` return?",
        "c": "print(list(filter(lambda x: x.isupper(), 'AbCdE')))",
        "o": [
            "['A', 'C', 'E']",
            "['A', 'b', 'C', 'd', 'E']",
            "['b', 'd']",
            "['A', 'B', 'C', 'D', 'E']"
        ]
    },
    {
        "q": "What is the result of using `Counter` with a string?",
        "c": "from collections import Counter\nprint(Counter('mississippi'))",
        "o": [
            "Counter({'i': 4, 's': 4, 'p': 2, 'm': 1})",
            "Counter({'m': 1, 'i': 4, 's': 4, 'p': 1})",
            "Counter({'s': 3, 'i': 4, 'p': 2, 'm': 1})",
            "{'i': 4, 's': 4, 'p': 2, 'm': 1}"
        ]
    },
    {
        "q": "Which statement about `heapq.heapreplace()` is true?",
        "c": null,
        "o": [
            "It pops and pushes in a single operation, even if the new item is smaller",
            "It only pushes if the item is larger",
            "It maintains a max-heap",
            "It only works on unsorted lists"
        ]
    },
    {
        "q": "What does `list(islice('abcdef', 1, 5, 2))` return?",
        "c": "from itertools import islice\nprint(list(islice('abcdef', 1, 5, 2)))",
        "o": [
            "['b', 'd']",
            "['a', 'c', 'e']",
            "['b', 'c', 'd', 'e']",
            "['c', 'e']"
        ]
    },
    {
        "q": "Which of the following best describes `filterfalse()` from itertools?",
        "c": null,
        "o": [
            "Returns elements where the predicate is false",
            "Filters only true values",
            "Returns only numeric items",
            "Acts like map() but for None values"
        ]
    },
    {
        "q": "Which operation does `accumulate()` from itertools perform by default?",
        "c": null,
        "o": [
            "Sum",
            "Multiplication",
            "Concatenation",
            "Subtraction"
        ]
    },
    {
        "q": "What does `zip_longest(['a', 'b'], [1], fillvalue=0)` return?",
        "c": "from itertools import zip_longest\nprint(list(zip_longest(['a', 'b'], [1], fillvalue=0)))",
        "o": [
            "[('a', 1), ('b', 0)]",
            "[('a', 1), ('b', None)]",
            "[('a', 1), ('a', 0)]",
            "[('b', 1), ('a', 0)]"
        ]
    },
    {
        "q": "What does this code using `chain.from_iterable()` output?",
        "c": "from itertools import chain\nprint(list(chain.from_iterable([[1, 2], [3, 4]])))",
        "o": [
            "[1, 2, 3, 4]",
            "[[1, 2], [3, 4]]",
            "[1, [2], 3, [4]]",
            "[1, 2], [3, 4]"
        ]
    },
    {
        "q": "What does this `deque` operation print?",
        "c": "from collections import deque\nd = deque([1, 2, 3])\nd.appendleft(0)\nprint(d)",
        "o": [
            "deque([0, 1, 2, 3])",
            "deque([1, 2, 3, 0])",
            "deque([1, 0, 2, 3])",
            "deque([0, 2, 1, 3])"
        ]
    },
    {
        "q": "Which function generates all r-length combinations without repetition?",
        "c": null,
        "o": [
            "itertools.combinations",
            "itertools.permutations",
            "itertools.product",
            "itertools.chain"
        ]
    },
    {
        "q": "Which of the following describes `heapq.nlargest(n, iterable)`?",
        "c": null,
        "o": [
            "Returns the n largest elements from the iterable",
            "Sorts the iterable in descending order",
            "Converts the iterable into a max-heap",
            "Returns the first n elements of a sorted list"
        ]
    },
    {
        "q": "What is the behavior of `map()` when given multiple iterables?",
        "c": "print(list(map(lambda x, y: x + y, [1, 2], [3, 4])))",
        "o": [
            "[4, 6]",
            "[1, 2, 3, 4]",
            "[13, 24]",
            "[4, 6, 7]"
        ]
    },
    {
        "q": "What does this `defaultdict` print?",
        "c": "from collections import defaultdict\nd = defaultdict(int)\nd['a'] += 1\nprint(d)",
        "o": [
            "defaultdict(<class 'int'>, {'a': 1})",
            "{'a': 1}",
            "defaultdict(int, {'a': 0})",
            "{'a': 0}"
        ]
    },
    {
        "q": "What does `itertools.count(start=2, step=3)` generate?",
        "c": "from itertools import islice, count\nprint(list(islice(count(2, 3), 4)))",
        "o": [
            "[2, 5, 8, 11]",
            "[3, 6, 9, 12]",
            "[2, 3, 4, 5]",
            "[2, 6, 10, 14]"
        ]
    },
    {
        "q": "What is the purpose of `functools.reduce()`?",
        "c": null,
        "o": [
            "Applies a rolling computation to sequential items of an iterable",
            "Filters elements of an iterable",
            "Maps one function to all items",
            "Accumulates function results without returning anything"
        ]
    },
    {
        "q": "Which `collections` class allows field access by attribute as well as index?",
        "c": null,
        "o": [
            "namedtuple",
            "defaultdict",
            "deque",
            "OrderedDict"
        ]
    },
    {
        "q": "Which `itertools` function is lazy and stops when the shortest input iterable is exhausted?",
        "c": null,
        "o": [
            "map",
            "zip",
            "starmap",
            "chain"
        ]
    },
    {
        "q": "What will `heapq.heapify()` do to `[9, 1, 3]`?",
        "c": "import heapq\nh = [9, 1, 3]\nheapq.heapify(h)\nprint(h)",
        "o": [
            "[1, 9, 3]",
            "[1, 3, 9]",
            "[9, 3, 1]",
            "[3, 1, 9]"
        ]
    },
    {
        "q": "Which of these built-in functions is a generator?",
        "c": null,
        "o": [
            "filter",
            "map",
            "zip",
            "all"
        ]
    },
    {
        "q": "What does `repeat(5, 3)` generate?",
        "c": "from itertools import repeat\nprint(list(repeat(5, 3)))",
        "o": [
            "[5, 5, 5]",
            "[3, 3, 3]",
            "[5, 3]",
            "[3, 5]"
        ]
    },
    {
        "q": "Which function allows you to add multiple values into a heap while maintaining heap order?",
        "c": null,
        "o": [
            "heapify",
            "heappush",
            "extend",
            "append"
        ]
    },
    {
        "q": "What does `takewhile()` do?",
        "c": null,
        "o": [
            "Takes items from an iterable while a predicate is true",
            "Skips the first item in an iterable",
            "Returns every second element",
            "Sorts the iterable"
        ]
    },
    {
        "q": "What is the result of `list(chain('ab', 'cd'))`?",
        "c": "from itertools import chain\nprint(list(chain('ab', 'cd')))",
        "o": [
            "['a', 'b', 'c', 'd']",
            "[['a', 'b'], ['c', 'd']]",
            "['ab', 'cd']",
            "['a', 'c', 'b', 'd']"
        ]
    },
    {
        "q": "What is the output of this code using `accumulate()`?",
        "c": "from itertools import accumulate\nprint(list(accumulate([1, 2, 3, 4])))",
        "o": [
            "[1, 3, 6, 10]",
            "[1, 2, 3, 4]",
            "[10, 9, 7, 4]",
            "[4, 3, 2, 1]"
        ]
    },
    {
        "q": "What does `heapq.heappush()` do?",
        "c": null,
        "o": [
            "Adds a new element to the heap while maintaining heap order",
            "Adds an element to the end of a list",
            "Replaces the smallest item in the heap",
            "Removes the smallest item from the heap"
        ]
    },
    {
        "q": "What is the purpose of `starmap()` from `itertools`?",
        "c": null,
        "o": [
            "Maps a function to argument tuples",
            "Maps a function to individual values",
            "Applies a function to keys in a dictionary",
            "Zips multiple iterables together"
        ]
    },
    {
        "q": "What is the output of this `Counter` subtraction?",
        "c": "from collections import Counter\nc1 = Counter(a=4, b=2)\nc2 = Counter(a=1, b=2)\nprint(c1 - c2)",
        "o": [
            "Counter({'a': 3})",
            "Counter({'a': 5, 'b': 0})",
            "Counter({'a': 3, 'b': 0})",
            "Counter({'a': 2, 'b': 1})"
        ]
    },
    {
        "q": "What happens if you pass `None` as the function to `map()`?",
        "c": "print(list(map(None, [1, 2, 3])))",
        "o": [
            "TypeError",
            "Returns the original list",
            "[None, None, None]",
            "SyntaxError"
        ]
    },
    {
        "q": "What is the output of this `zip_longest()` call?",
        "c": "from itertools import zip_longest\nprint(list(zip_longest('AB', [1], fillvalue='X')))",
        "o": [
            "[('A', 1), ('B', 'X')]",
            "[('A', 1), ('X', 'B')]",
            "[('AB', 1)]",
            "[('A', 1), ('B', None)]"
        ]
    },
    {
        "q": "Which of the following does `deque.extendleft()` do?",
        "c": "from collections import deque\nd = deque()\nd.extendleft('abc')\nprint(d)",
        "o": [
            "deque(['c', 'b', 'a'])",
            "deque(['a', 'b', 'c'])",
            "deque([['a'], ['b'], ['c']])",
            "deque(['abc'])"
        ]
    },
    {
        "q": "Which `heapq` function is best when you want to replace and retrieve the root in one go?",
        "c": null,
        "o": [
            "heapreplace",
            "heappush",
            "heappop",
            "heapify"
        ]
    },
    {
        "q": "What is the effect of this `filter()` call?",
        "c": "print(list(filter(None, [0, '', None, 1, 'a'])))",
        "o": [
            "[1, 'a']",
            "[0, '', None]",
            "['', 1, 'a']",
            "[None, 1, 'a']"
        ]
    },
    {
        "q": "Which class from `collections` maintains the order of keys as inserted?",
        "c": null,
        "o": [
            "OrderedDict",
            "defaultdict",
            "dict (Python 2.7)",
            "namedtuple"
        ]
    },
    {
        "q": "What is the default fillvalue for `zip_longest()` if not specified?",
        "c": null,
        "o": [
            "None",
            "0",
            "''",
            "False"
        ]
    },
    {
        "q": "Which `itertools` function generates all length-r combinations with replacement?",
        "c": null,
        "o": [
            "combinations_with_replacement",
            "combinations",
            "permutations",
            "product"
        ]
    },
    {
        "q": "Which of the following operations will remove and return an element from the left side of a deque?",
        "c": null,
        "o": [
            "popleft()",
            "pop()",
            "shift()",
            "removeleft()"
        ]
    },
    {
        "q": "What does this `reduce()` function do?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['a', 'b', 'c']))",
        "o": [
            "'abc'",
            "['a', 'b', 'c']",
            "'a b c'",
            "'a+b+c'"
        ]
    },
    {
        "q": "Which of these can result in a `KeyError` if not handled properly?",
        "c": "from collections import defaultdict\nd = defaultdict(int)\nprint(d['missing'])",
        "o": [
            "None of the above (it returns 0)",
            "Raises KeyError",
            "Returns None",
            "Raises TypeError"
        ]
    },
    {
        "q": "What will be the result of this code using `combinations()`?",
        "c": "from itertools import combinations\nprint(list(combinations('ABC', 2)))",
        "o": [
            "[('A', 'B'), ('A', 'C'), ('B', 'C')]",
            "[('A', 'A'), ('B', 'B'), ('C', 'C')]",
            "[('AB',), ('AC',), ('BC',)]",
            "[('A', 'B', 'C')]"
        ]
    },
    {
        "q": "Which built-in function is used to apply a function to every item of an iterable?",
        "c": null,
        "o": [
            "map",
            "reduce",
            "filter",
            "lambda"
        ]
    },
    {
        "q": "Which of the following statements is true about `heapq.nlargest()`?",
        "c": null,
        "o": [
            "It returns a list of the n largest elements from the iterable",
            "It modifies the iterable in-place",
            "It creates a max heap internally",
            "It only works with sorted lists"
        ]
    },
    {
        "q": "What does this `deque` code output?",
        "c": "from collections import deque\nd = deque([1, 2, 3, 4])\nd.pop()\nd.popleft()\nprint(d)",
        "o": [
            "deque([2, 3])",
            "deque([1, 2, 3])",
            "deque([2, 3, 4])",
            "deque([1, 2, 4])"
        ]
    },
    {
        "q": "Which function returns r-length tuples in all possible orders without repetition?",
        "c": null,
        "o": [
            "permutations",
            "combinations",
            "product",
            "repeat"
        ]
    },
    {
        "q": "What is the output of this `Counter().update()` usage?",
        "c": "from collections import Counter\nc = Counter('abc')\nc.update('aab')\nprint(c)",
        "o": [
            "Counter({'a': 3, 'b': 2, 'c': 1})",
            "Counter({'a': 2, 'b': 2, 'c': 1})",
            "Counter({'a': 2, 'b': 1, 'c': 1})",
            "Counter({'a': 1, 'b': 1, 'c': 1})"
        ]
    },
    {
        "q": "What does this `reduce()` operation compute?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [2, 3, 4]))",
        "o": [
            "24",
            "9",
            "6",
            "None"
        ]
    },
    {
        "q": "Which method is used to convert a namedtuple to a dictionary?",
        "c": null,
        "o": [
            "_asdict()",
            "dict()",
            "_todict()",
            "to_dict()"
        ]
    },
    {
        "q": "What does `chain(*iterables)` do?",
        "c": null,
        "o": [
            "Flattens the given iterables into a single sequence",
            "Creates pairs of elements",
            "Combines iterables element-wise",
            "Creates a Cartesian product"
        ]
    },
    {
        "q": "What does `filter()` return when no items match?",
        "c": "print(list(filter(lambda x: x > 10, [1, 2, 3])))",
        "o": [
            "[]",
            "None",
            "[0]",
            "[False]"
        ]
    },
    {
        "q": "Which `collections` object can represent a record with named fields?",
        "c": null,
        "o": [
            "namedtuple",
            "defaultdict",
            "Counter",
            "deque"
        ]
    },
    {
        "q": "Which of the following functions can generate an infinite sequence?",
        "c": null,
        "o": [
            "count",
            "repeat (without limit)",
            "cycle",
            "All of the above"
        ]
    },
    {
        "q": "What does `defaultdict(int)` return for missing keys?",
        "c": null,
        "o": [
            "0",
            "None",
            "Raises KeyError",
            "'int'"
        ]
    },
    {
        "q": "Which function returns the smallest item from a heap?",
        "c": null,
        "o": [
            "heappop",
            "heapmin",
            "heapfirst",
            "minheap"
        ]
    },
    {
        "q": "What does this `islice()` expression return?",
        "c": "from itertools import islice\nprint(list(islice(range(100), 10, 15)))",
        "o": [
            "[10, 11, 12, 13, 14]",
            "[0, 1, 2, 3, 4]",
            "[15, 16, 17, 18, 19]",
            "[5, 6, 7, 8, 9]"
        ]
    },
    {
        "q": "What does the following code print?",
        "c": "from collections import namedtuple\nPoint = namedtuple('Point', 'x y')\np1 = Point(1, 2)\nprint(p1.x + p1.y)",
        "o": [
            "3",
            "12",
            "(1, 2)",
            "Point(x=1, y=2)"
        ]
    },
    {
        "q": "Which function from itertools will cycle through an iterable indefinitely?",
        "c": null,
        "o": [
            "cycle",
            "repeat",
            "count",
            "infinite"
        ]
    },
    {
        "q": "What happens if you pass unequal-length inputs to `map()`?",
        "c": "print(list(map(lambda x, y: x + y, [1, 2], [10])))",
        "o": [
            "[11]",
            "[11, 2]",
            "Raises ValueError",
            "Raises TypeError"
        ]
    },
    {
        "q": "What is the purpose of `heapreplace()` in `heapq`?",
        "c": null,
        "o": [
            "Pop the smallest item and push a new item",
            "Sort the heap in descending order",
            "Push the largest item",
            "Insert a new item without reordering"
        ]
    },
    {
        "q": "Which function creates a heap in-place from a list?",
        "c": null,
        "o": [
            "heapify",
            "heappop",
            "heappush",
            "heapbuild"
        ]
    },
    {
        "q": "Which of these functions returns a cumulative product using reduce?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [2, 3, 5]))",
        "o": [
            "30",
            "10",
            "0",
            "None"
        ]
    },
    {
        "q": "What does `filter(str.isalpha, ['1', 'A', 'b', '%'])` return?",
        "c": "print(list(filter(str.isalpha, ['1', 'A', 'b', '%'])))",
        "o": [
            "['A', 'b']",
            "['1', '%']",
            "['1', 'A', 'b', '%']",
            "[]"
        ]
    },
    {
        "q": "What is the correct way to get the two most common elements using `Counter`?",
        "c": "from collections import Counter\nc = Counter('success')\nprint(c.most_common(2))",
        "o": [
            "[('s', 3), ('c', 2)]",
            "[('u', 1), ('e', 1)]",
            "[('s', 2), ('c', 2)]",
            "[('s', 3), ('u', 2)]"
        ]
    },
    {
        "q": "Which of the following methods reverses a deque in-place?",
        "c": null,
        "o": [
            "reverse()",
            "reversed()",
            "rotate(-1)",
            "flip()"
        ]
    },
    {
        "q": "What does this `zip()` expression return?",
        "c": "print(list(zip('abc', [1, 2])))",
        "o": [
            "[('a', 1), ('b', 2)]",
            "[('a', 1), ('b', 2), ('c', None)]",
            "[('a', 1), ('b', 2), ('c', 0)]",
            "[('a', 1), ('b', 2), ('c', '')]"
        ]
    },
    {
        "q": "What does `deque(maxlen=3)` do?",
        "c": "from collections import deque\nd = deque(maxlen=3)\nd.extend([1,2,3,4])\nprint(d)",
        "o": [
            "deque([2, 3, 4], maxlen=3)",
            "deque([1, 2, 3, 4])",
            "deque([1, 2, 3])",
            "deque([1, 2, 3], maxlen=4)"
        ]
    },
    {
        "q": "Which `itertools` function returns an iterator with r-length tuples from multiple iterables?",
        "c": null,
        "o": [
            "product",
            "zip",
            "chain",
            "cycle"
        ]
    },
    {
        "q": "What does `reduce()` require at minimum?",
        "c": null,
        "o": [
            "A function and an iterable",
            "A function, iterable, and initializer",
            "A lambda function",
            "A list and dictionary"
        ]
    },
    {
        "q": "Which method from `heapq` maintains the heap and limits results to top N?",
        "c": null,
        "o": [
            "nlargest",
            "nsmallest",
            "heapify",
            "sorted"
        ]
    },
    {
        "q": "What will `list(compress('12345', [0, 1, 0, 1, 1]))` return?",
        "c": "from itertools import compress\nprint(list(compress('12345', [0, 1, 0, 1, 1])))",
        "o": [
            "['2', '4', '5']",
            "['1', '3', '5']",
            "['1', '2', '3']",
            "['1', '2', '4']"
        ]
    },
    {
        "q": "Which statement about `itertools.chain()` is correct?",
        "c": null,
        "o": [
            "It combines multiple iterables into a single iterator.",
            "It performs element-wise pairing of iterables.",
            "It repeats the iterable elements indefinitely.",
            "It returns Cartesian product of two iterables."
        ]
    },
    {
        "q": "What is the effect of `heapq.heappushpop(heap, item)`?",
        "c": null,
        "o": [
            "Pushes the item and then pops and returns the smallest item.",
            "Pops and returns the largest item and then pushes the item.",
            "Replaces the smallest item if the new item is smaller.",
            "Creates a new heap with the item included."
        ]
    },
    {
        "q": "Which function from `itertools` returns elements from the iterable as long as the predicate is true?",
        "c": null,
        "o": [
            "takewhile",
            "dropwhile",
            "filter",
            "accumulate"
        ]
    },
    {
        "q": "What does this `Counter` subtraction result in?",
        "c": "from collections import Counter\nc1 = Counter(a=2, b=3)\nc2 = Counter(a=1, b=4)\nprint(c1 - c2)",
        "o": [
            "Counter({'a': 1})",
            "Counter({'b': -1})",
            "Counter({'a': 1, 'b': -1})",
            "Counter()"
        ]
    },
    {
        "q": "What does `filter(None, iterable)` return?",
        "c": "print(list(filter(None, [0, '', None, 1, 'abc'])))",
        "o": [
            "[1, 'abc']",
            "[0, '', None]",
            "[False, True]",
            "[1, abc]"
        ]
    },
    {
        "q": "Which is a valid way to create a `defaultdict` with integer default values?",
        "c": null,
        "o": [
            "defaultdict(int)",
            "defaultdict()",
            "defaultdict(str)",
            "defaultdict(list)"
        ]
    },
    {
        "q": "What is the behavior of `repeat(10, 3)` from `itertools`?",
        "c": "from itertools import repeat\nprint(list(repeat(10, 3)))",
        "o": [
            "[10, 10, 10]",
            "[10, 3]",
            "[3, 10, 3]",
            "[10, 3, 3]"
        ]
    },
    {
        "q": "Which built-in function filters an iterable using a predicate function?",
        "c": null,
        "o": [
            "filter",
            "map",
            "reduce",
            "zip"
        ]
    },
    {
        "q": "Which function from `heapq` can retrieve the 3 smallest elements from a list?",
        "c": null,
        "o": [
            "nsmallest(3, list)",
            "heapmin(3, list)",
            "minheap(3)",
            "sorted(list)[:3]"
        ]
    },
    {
        "q": "What does the following code return?",
        "c": "from collections import deque\nd = deque([1, 2, 3])\nd.rotate(-1)\nprint(d)",
        "o": [
            "deque([2, 3, 1])",
            "deque([3, 1, 2])",
            "deque([1, 2, 3])",
            "deque([1, 3, 2])"
        ]
    },
    {
        "q": "What does this `reduce()` function return?",
        "c": "from functools import reduce\nprint(reduce(lambda a, b: a + b, [], 10))",
        "o": [
            "10",
            "TypeError",
            "0",
            "None"
        ]
    },
    {
        "q": "Which statement about `namedtuple` is true?",
        "c": null,
        "o": [
            "Fields can be accessed both by name and index.",
            "Only index access is supported.",
            "It behaves like a regular class instance.",
            "It allows mutable fields."
        ]
    },
    {
        "q": "Which `itertools` function skips elements while the predicate is true?",
        "c": null,
        "o": [
            "dropwhile",
            "takewhile",
            "filterfalse",
            "accumulate"
        ]
    },
    {
        "q": "What will `Counter('aaabbc') == Counter('abcab')` return?",
        "c": "from collections import Counter\nprint(Counter('aaabbc') == Counter('abcab'))",
        "o": [
            "False",
            "True",
            "Error",
            "None"
        ]
    },
    {
        "q": "What will be the output of `chain.from_iterable([[1], [2, 3]])`?",
        "c": "from itertools import chain\nprint(list(chain.from_iterable([[1], [2, 3]])))",
        "o": [
            "[1, 2, 3]",
            "[[1], [2, 3]]",
            "[1, [2, 3]]",
            "[[1, 2], 3]"
        ]
    },
    {
        "q": "What does `Counter().elements()` return?",
        "c": "from collections import Counter\nc = Counter(a=2, b=1)\nprint(list(c.elements()))",
        "o": [
            "['a', 'a', 'b']",
            "['a', 'b', 'b']",
            "['a', 'b']",
            "['a', 'a']"
        ]
    },
    {
        "q": "Which of these is not a function in `heapq`?",
        "c": null,
        "o": [
            "heapmin",
            "heapify",
            "heappop",
            "heappush"
        ]
    },
    {
        "q": "What does `namedtuple._replace()` do?",
        "c": "from collections import namedtuple\nPoint = namedtuple('Point', 'x y')\np = Point(1, 2)\nprint(p._replace(y=10))",
        "o": [
            "Point(x=1, y=10)",
            "Point(x=1, y=2, z=10)",
            "TypeError",
            "Point(x=10, y=1)"
        ]
    },
    {
        "q": "What is the output of this `accumulate()` usage?",
        "c": "from itertools import accumulate\nfrom operator import mul\nprint(list(accumulate([1, 2, 3, 4], mul)))",
        "o": [
            "[1, 2, 6, 24]",
            "[10]",
            "[1, 3, 6, 10]",
            "[1, 4, 7, 11]"
        ]
    },
    {
        "q": "Which of these functions does not return an iterator?",
        "c": null,
        "o": [
            "reduce",
            "map",
            "filter",
            "zip"
        ]
    },
    {
        "q": "What does `deque.clear()` do?",
        "c": null,
        "o": [
            "Removes all elements from the deque",
            "Clears only left side",
            "Clears only right side",
            "Resets maxlen to None"
        ]
    },
    {
        "q": "What does this code print?",
        "c": "from collections import defaultdict\nd = defaultdict(list)\nd['a'].append(1)\nd['b'].append(2)\nprint(d['c'])",
        "o": [
            "[]",
            "None",
            "KeyError",
            "[0]"
        ]
    },
    {
        "q": "Which of these is true about `filterfalse()` from `itertools`?",
        "c": "from itertools import filterfalse\nprint(list(filterfalse(lambda x: x % 2 == 0, range(5))))",
        "o": [
            "[1, 3]",
            "[0, 2, 4]",
            "[1, 2, 3]",
            "[0, 1, 2, 3, 4]"
        ]
    },
    {
        "q": "Which `heapq` function combines heappop() and heappush() in one step?",
        "c": null,
        "o": [
            "heapreplace",
            "heappop",
            "heapify",
            "nlargest"
        ]
    },
    {
        "q": "What does this `map()` call return?",
        "c": "print(list(map(str.upper, ['a', 'b', 'c'])))",
        "o": [
            "['A', 'B', 'C']",
            "['a', 'b', 'c']",
            "[A, B, C]",
            "[upper('a'), upper('b'), upper('c')]"
        ]
    },
    {
        "q": "What is the purpose of `islice()` in `itertools`?",
        "c": null,
        "o": [
            "Returns selected elements from an iterable (by index range)",
            "Filters elements using a function",
            "Combines multiple iterables",
            "Shuffles an iterable"
        ]
    },
    {
        "q": "What is the result of `zip_longest('AB', '123', fillvalue='x')`?",
        "c": "from itertools import zip_longest\nprint(list(zip_longest('AB', '123', fillvalue='x')))",
        "o": [
            "[('A', '1'), ('B', '2')]",
            "[('A', '1'), ('B', '2'), ('x', '3')]",
            "[('A', '1'), ('B', '2'), ('x', 'x')]",
            "[('A', '1'), ('B', '2'), (None, '3')]"
        ]
    },
    {
        "q": "What happens when you push more than `maxlen` in a `deque`?",
        "c": "from collections import deque\nd = deque(maxlen=3)\nd.extend([1, 2, 3, 4])\nprint(d)",
        "o": [
            "deque([2, 3, 4], maxlen=3)",
            "deque([1, 2, 3], maxlen=3)",
            "deque([1, 2, 3, 4])",
            "deque([1, 2, 4], maxlen=3)"
        ]
    },
    {
        "q": "What is returned by `map(len, ['abc', 'de', ''])`?",
        "c": "print(list(map(len, ['abc', 'de', ''])))",
        "o": [
            "[3, 2, 0]",
            "[1, 2, 3]",
            "[0, 2, 3]",
            "[3, 2]"
        ]
    },
    {
        "q": "Which `collections` class allows automatic value creation for missing keys?",
        "c": null,
        "o": [
            "defaultdict",
            "Counter",
            "deque",
            "namedtuple"
        ]
    },
    {
        "q": "What will the following code output using `itertools.product`?",
        "c": "from itertools import product\nprint(list(product([1, 2], ['a', 'b'])))",
        "o": [
            "[(1, 'a'), (1, 'b'), (2, 'a'), (2, 'b')]",
            "[('a', 1), ('b', 1), ('a', 2), ('b', 2)]",
            "[(1, 2, 'a', 'b')]",
            "[[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]"
        ]
    },
    {
        "q": "What is the result of using `Counter.most_common()` without arguments?",
        "c": "from collections import Counter\nc = Counter('aabbccc')\nprint(c.most_common())",
        "o": [
            "[('c', 3), ('a', 2), ('b', 2)]",
            "[('a', 2), ('b', 2), ('c', 3)]",
            "[('a', 1), ('b', 1), ('c', 1)]",
            "[('a', 2), ('b', 2), ('c', 1)]"
        ]
    },
    {
        "q": "What does `reduce(lambda x, y: x * y, [1, 2, 3, 4])` return?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [1, 2, 3, 4]))",
        "o": [
            "24",
            "10",
            "0",
            "None"
        ]
    },
    {
        "q": "What is the output of this `dropwhile()` usage?",
        "c": "from itertools import dropwhile\nprint(list(dropwhile(lambda x: x < 3, [1, 2, 3, 4])))",
        "o": [
            "[3, 4]",
            "[1, 2, 3, 4]",
            "[4]",
            "[2, 3, 4]"
        ]
    },
    {
        "q": "Which of these built-in functions returns a generator object?",
        "c": null,
        "o": [
            "map",
            "sum",
            "list",
            "sorted"
        ]
    },
    {
        "q": "What does the following `heapq` code print?",
        "c": "import heapq\nh = [20, 10, 30]\nheapq.heapify(h)\nheapq.heappop(h)\nprint(h)",
        "o": [
            "[20, 30]",
            "[10, 30]",
            "[30, 20]",
            "[10, 20]"
        ]
    },
    {
        "q": "What will `list(filter(str.isdigit, 'a1b2c3'))` return?",
        "c": "print(list(filter(str.isdigit, 'a1b2c3')))",
        "o": [
            "['1', '2', '3']",
            "['a', 'b', 'c']",
            "['a1b2c3']",
            "['123']"
        ]
    },
    {
        "q": "Which method of `namedtuple` allows unpacking to dictionary?",
        "c": null,
        "o": [
            "_asdict()",
            "_todict()",
            "to_dict()",
            "asdict()"
        ]
    },
    {
        "q": "What does `deque.rotate(n)` do with a positive `n`?",
        "c": null,
        "o": [
            "Moves elements to the right by n steps",
            "Moves elements to the left by n steps",
            "Sorts the deque",
            "Clears the deque"
        ]
    },
    {
        "q": "Which `itertools` function yields an iterator that returns successive r-length permutations?",
        "c": null,
        "o": [
            "permutations",
            "combinations",
            "product",
            "chain"
        ]
    },
    {
        "q": "Which function will return True if at least one element of the iterable is true?",
        "c": null,
        "o": [
            "any",
            "all",
            "filter",
            "map"
        ]
    },
    {
        "q": "What will be the result of this `defaultdict` usage?",
        "c": "from collections import defaultdict\nd = defaultdict(str)\nprint(d['x'])",
        "o": [
            "''",
            "None",
            "KeyError",
            "0"
        ]
    },
    {
        "q": "What will `list(accumulate([1, 2, 3]))` return?",
        "c": "from itertools import accumulate\nprint(list(accumulate([1, 2, 3])))",
        "o": [
            "[1, 3, 6]",
            "[1, 2, 3]",
            "[6, 3, 1]",
            "[3, 3, 3]"
        ]
    },
    {
        "q": "Which operation will result in `heapq` maintaining the heap property?",
        "c": null,
        "o": [
            "heapq.heappush(heap, value)",
            "heap.append(value)",
            "heap.sort()",
            "heap.push(value)"
        ]
    },
    {
        "q": "Which of these iterators from `itertools` can produce an infinite sequence?",
        "c": null,
        "o": [
            "count",
            "zip",
            "map",
            "product"
        ]
    },
    {
        "q": "What does the following code print?",
        "c": "from collections import Counter\nc = Counter('mississippi')\nprint(c['s'])",
        "o": [
            "4",
            "3",
            "2",
            "5"
        ]
    },
    {
        "q": "Which method in `deque` removes an element from the right end?",
        "c": null,
        "o": [
            "pop()",
            "popleft()",
            "remove()",
            "shift()"
        ]
    },
    {
        "q": "What is the result of this `filter()` expression?",
        "c": "print(list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4])))",
        "o": [
            "[2, 4]",
            "[1, 3]",
            "[1, 2, 3, 4]",
            "[0, 2]"
        ]
    },
    {
        "q": "What is returned by `map(str.upper, 'abc')`?",
        "c": "print(list(map(str.upper, 'abc')))",
        "o": [
            "['A', 'B', 'C']",
            "['a', 'b', 'c']",
            "['upper(a)', 'upper(b)', 'upper(c)']",
            "['abc']"
        ]
    },
    {
        "q": "Which `heapq` function returns the n smallest elements in a heap?",
        "c": null,
        "o": [
            "nsmallest",
            "nlargest",
            "heappop",
            "heapmin"
        ]
    },
    {
        "q": "What is the output of this `namedtuple` usage?",
        "c": "from collections import namedtuple\nCar = namedtuple('Car', ['make', 'model'])\nc = Car('Toyota', 'Corolla')\nprint(c.model)",
        "o": [
            "Corolla",
            "Toyota",
            "['Toyota', 'Corolla']",
            "model"
        ]
    },
    {
        "q": "Which function in `itertools` groups consecutive elements with same value?",
        "c": null,
        "o": [
            "groupby",
            "accumulate",
            "combinations",
            "starmap"
        ]
    },
    {
        "q": "What will this `reduce()` expression return?",
        "c": "from functools import reduce\nprint(reduce(lambda a, b: a + b, ['a', 'b', 'c'], ''))",
        "o": [
            "'abc'",
            "['a', 'b', 'c']",
            "None",
            "TypeError"
        ]
    },
    {
        "q": "Which argument is required to initialize a `namedtuple`?",
        "c": null,
        "o": [
            "typename and field names",
            "only typename",
            "a list of values",
            "a dictionary of keys"
        ]
    },
    {
        "q": "What does this code do?",
        "c": "from collections import defaultdict\nd = defaultdict(lambda: 'N/A')\nprint(d['missing'])",
        "o": [
            "'N/A'",
            "KeyError",
            "None",
            "0"
        ]
    },
    {
        "q": "Which `itertools` function would you use to compute the Cartesian product?",
        "c": null,
        "o": [
            "product",
            "permutations",
            "combinations",
            "chain"
        ]
    },
    {
        "q": "What does this code return?",
        "c": "import heapq\nheap = [5, 1, 3]\nheapq.heapify(heap)\nheapq.heappush(heap, 0)\nprint(heap[0])",
        "o": [
            "0",
            "1",
            "5",
            "3"
        ]
    },
    {
        "q": "Which function from `itertools` repeats an object multiple times?",
        "c": null,
        "o": [
            "repeat",
            "cycle",
            "count",
            "accumulate"
        ]
    },
    {
        "q": "Which is the correct syntax to access fields in a `namedtuple`?",
        "c": "from collections import namedtuple\nPerson = namedtuple('Person', 'name age')\np = Person('Alice', 30)\nprint(p.name)",
        "o": [
            "Alice",
            "p['name']",
            "name",
            "('Alice', 30)"
        ]
    },
    {
        "q": "What is the result of `filter(lambda x: x, [0, None, False, True, 1])`?",
        "c": "print(list(filter(lambda x: x, [0, None, False, True, 1])))",
        "o": [
            "[True, 1]",
            "[0, None, False]",
            "[1]",
            "[]"
        ]
    },
    {
        "q": "What does `heapify()` do in the `heapq` module?",
        "c": null,
        "o": [
            "Transforms a list into a valid min-heap in-place",
            "Sorts a list in descending order",
            "Builds a max-heap from a list",
            "Clears all elements in the heap"
        ]
    },
    {
        "q": "Which of the following would correctly create a `namedtuple` called `Employee` with fields `name` and `id`?",
        "c": null,
        "o": [
            "namedtuple('Employee', ['name', 'id'])",
            "namedtuple(Employee, name, id)",
            "namedtuple('name', 'id')",
            "namedtuple('Employee', name id)"
        ]
    },
    {
        "q": "What does the following code output?",
        "c": "from itertools import count\nimport itertools\nc = itertools.count(10, 2)\nprint(next(c))\nprint(next(c))",
        "o": [
            "10\n12",
            "10\n11",
            "2\n4",
            "0\n2"
        ]
    },
    {
        "q": "Which function will remove and return the smallest element from a heap?",
        "c": null,
        "o": [
            "heappop",
            "heapmin",
            "heapremove",
            "heapextract"
        ]
    },
    {
        "q": "What does `list(map(int, ['1', '2', '3']))` return?",
        "c": "print(list(map(int, ['1', '2', '3'])))",
        "o": [
            "[1, 2, 3]",
            "['1', '2', '3']",
            "[1, '2', 3]",
            "[int, int, int]"
        ]
    },
    {
        "q": "What is the output of this `chain()` call?",
        "c": "from itertools import chain\nprint(list(chain('ab', 'cd')))",
        "o": [
            "['a', 'b', 'c', 'd']",
            "[['a', 'b'], ['c', 'd']]",
            "['ab', 'cd']",
            "['a', 'bcd']"
        ]
    },
    {
        "q": "Which `collections` type allows appending and popping from both ends?",
        "c": null,
        "o": [
            "deque",
            "Counter",
            "namedtuple",
            "defaultdict"
        ]
    },
    {
        "q": "What will `Counter([1, 2, 2, 3, 3, 3]).most_common(1)` return?",
        "c": "from collections import Counter\nprint(Counter([1, 2, 2, 3, 3, 3]).most_common(1))",
        "o": [
            "[(3, 3)]",
            "[(1, 1)]",
            "[(2, 2)]",
            "[(1, 3)]"
        ]
    },
    {
        "q": "What does the following `filter()` do?",
        "c": "print(list(filter(None, [0, '', 'Python', 5])))",
        "o": [
            "['Python', 5]",
            "[0, '', 'Python', 5]",
            "[0, '', 5]",
            "[None, 'Python']"
        ]
    },
    {
        "q": "Which function in `functools` is used for applying a function cumulatively?",
        "c": null,
        "o": [
            "reduce",
            "accumulate",
            "combine",
            "chain"
        ]
    },
    {
        "q": "What does `deque([1,2,3], maxlen=2)` return when printed?",
        "c": "from collections import deque\nd = deque([1,2,3], maxlen=2)\nprint(d)",
        "o": [
            "deque([2, 3], maxlen=2)",
            "deque([1, 2], maxlen=2)",
            "deque([3], maxlen=2)",
            "deque([1, 2, 3], maxlen=2)"
        ]
    },
    {
        "q": "Which function generates all possible combinations with replacement?",
        "c": null,
        "o": [
            "combinations_with_replacement",
            "product",
            "permutations",
            "repeat"
        ]
    },
    {
        "q": "What happens when `heappush()` is used on a non-heap list?",
        "c": null,
        "o": [
            "It still works, but the list must be heapified for correct behavior",
            "It raises a ValueError",
            "It converts it to a max-heap",
            "It sorts the list automatically"
        ]
    },
    {
        "q": "Which function creates an iterator from multiple iterable objects?",
        "c": null,
        "o": [
            "chain",
            "zip",
            "map",
            "combine"
        ]
    },
    {
        "q": "What does `reduce(lambda x, y: x + y, range(1, 5))` return?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, range(1, 5)))",
        "o": [
            "10",
            "15",
            "9",
            "None"
        ]
    },
    {
        "q": "What does the following code output?",
        "c": "from itertools import combinations\nprint(list(combinations('AB', 2)))",
        "o": [
            "[('A', 'B')]",
            "[('A', 'A'), ('A', 'B'), ('B', 'B')]",
            "[('B', 'A')]",
            "['AB']"
        ]
    },
    {
        "q": "Which method returns the top 2 largest elements in a list using `heapq`?",
        "c": "import heapq\nprint(heapq.nlargest(2, [5, 1, 3, 6, 4]))",
        "o": [
            "[6, 5]",
            "[5, 4]",
            "[1, 3]",
            "[6, 4]"
        ]
    },
    {
        "q": "Which function in `itertools` would be most appropriate to create an infinite loop over an iterable?",
        "c": null,
        "o": [
            "cycle",
            "repeat",
            "count",
            "chain"
        ]
    },
    {
        "q": "What does the following code print?",
        "c": "from collections import defaultdict\nd = defaultdict(int)\nd['a'] += 1\nprint(d['a'])",
        "o": [
            "1",
            "0",
            "None",
            "KeyError"
        ]
    },
    {
        "q": "Which operation removes the leftmost item from a `deque`?",
        "c": null,
        "o": [
            "popleft()",
            "pop()",
            "shift()",
            "remove()"
        ]
    },
    {
        "q": "What is the result of this `reduce()` call?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x - y, [10, 2, 1]))",
        "o": [
            "7",
            "9",
            "8",
            "11"
        ]
    },
    {
        "q": "Which function returns all r-length permutations of elements from the input iterable?",
        "c": null,
        "o": [
            "permutations",
            "combinations",
            "product",
            "repeat"
        ]
    },
    {
        "q": "What will `list(filter(lambda x: x > 2, [1, 2, 3, 4]))` return?",
        "c": "print(list(filter(lambda x: x > 2, [1, 2, 3, 4])))",
        "o": [
            "[3, 4]",
            "[1, 2]",
            "[2, 3, 4]",
            "[4]"
        ]
    },
    {
        "q": "What is the purpose of `starmap()` in `itertools`?",
        "c": null,
        "o": [
            "Applies a function to argument tuples from the iterable",
            "Applies a function to each individual item in the iterable",
            "Returns combinations of iterable values",
            "Repeats each element a number of times"
        ]
    },
    {
        "q": "What will this code output?",
        "c": "from collections import Counter\nc = Counter([1,2,2,3,3,3])\nc.update([2,3,4])\nprint(c)",
        "o": [
            "Counter({3: 4, 2: 3, 1: 1, 4: 1})",
            "Counter({1: 1, 2: 3, 3: 3, 4: 1})",
            "Counter({2: 3, 3: 3, 1: 1})",
            "Counter({4: 2, 3: 2, 2: 2, 1: 1})"
        ]
    },
    {
        "q": "What does `heapq.heappushpop()` do?",
        "c": null,
        "o": [
            "Pushes new item on the heap, then pops and returns the smallest item",
            "Removes and returns the largest item from the heap",
            "Pushes and returns the smallest item from the heap",
            "Replaces the top item without maintaining heap property"
        ]
    },
    {
        "q": "Which of the following can be used to flatten a list of lists?",
        "c": "from itertools import chain\nprint(list(chain.from_iterable([[1, 2], [3, 4]])))",
        "o": [
            "[1, 2, 3, 4]",
            "[[1, 2], [3, 4]]",
            "[1, [2, 3], 4]",
            "[1, 2, [3, 4]]"
        ]
    },
    {
        "q": "What is the result of `reduce(lambda x, y: x + y, [], 5)`?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, [], 5))",
        "o": [
            "5",
            "0",
            "TypeError",
            "None"
        ]
    },
    {
        "q": "Which `collections` type allows access to elements by attribute name and index?",
        "c": null,
        "o": [
            "namedtuple",
            "deque",
            "defaultdict",
            "Counter"
        ]
    },
    {
        "q": "What does the following code do?",
        "c": "from itertools import islice\nprint(list(islice(range(10), 2, 7)))",
        "o": [
            "[2, 3, 4, 5, 6]",
            "[0, 1, 2, 3, 4, 5, 6]",
            "[7, 8, 9]",
            "[2, 4, 6]"
        ]
    },
    {
        "q": "What is the output of this code using `combinations_with_replacement()`?",
        "c": "from itertools import combinations_with_replacement\nprint(list(combinations_with_replacement('AB', 2)))",
        "o": [
            "[('A', 'A'), ('A', 'B'), ('B', 'B')]",
            "[('A', 'B'), ('B', 'A')]",
            "[('A', 'B')]",
            "['AA', 'AB', 'BB']"
        ]
    },
    {
        "q": "Which of the following is TRUE about `heapq.nlargest(n, iterable)`?",
        "c": null,
        "o": [
            "Returns the n largest elements from the iterable in descending order",
            "Returns the n largest elements sorted in ascending order",
            "Modifies the original iterable",
            "Creates a max-heap in place"
        ]
    },
    {
        "q": "What is the result of the following code?",
        "c": "from collections import defaultdict\nd = defaultdict(lambda: 'default')\nd['x'] = 'value'\nprint(d['y'])",
        "o": [
            "default",
            "None",
            "KeyError",
            "''"
        ]
    },
    {
        "q": "What is the output of this `filter()` example?",
        "c": "print(list(filter(None, ['a', '', 'b', None, 'c'])))",
        "o": [
            "['a', 'b', 'c']",
            "['a', '', 'b', 'c']",
            "['a', 'b', None, 'c']",
            "['a', '', None, 'b', 'c']"
        ]
    },
    {
        "q": "Which of the following returns True only if all elements of iterable are True?",
        "c": null,
        "o": [
            "all",
            "any",
            "filter",
            "reduce"
        ]
    },
    {
        "q": "Which `collections` class keeps items in the order they were added?",
        "c": null,
        "o": [
            "OrderedDict",
            "defaultdict",
            "Counter",
            "deque"
        ]
    },
    {
        "q": "What is the effect of `heapq.heapreplace(heap, item)`?",
        "c": null,
        "o": [
            "Pops and returns the smallest item, then pushes the new item",
            "Pushes the new item without popping",
            "Removes all occurrences of the smallest item",
            "Raises an error if the heap is empty"
        ]
    },
    {
        "q": "Which method in `deque` adds an element to the left end?",
        "c": null,
        "o": [
            "appendleft",
            "append",
            "insertleft",
            "pushleft"
        ]
    },
    {
        "q": "What will be printed by this code?",
        "c": "from collections import namedtuple\nBook = namedtuple('Book', 'title author')\nb = Book('1984', 'Orwell')\nprint(b[1])",
        "o": [
            "Orwell",
            "1984",
            "author",
            "b[1]"
        ]
    },
    {
        "q": "Which of the following creates an infinite sequence starting from 5?",
        "c": null,
        "o": [
            "count(5)",
            "cycle(5)",
            "repeat(5)",
            "range(5, inf)"
        ]
    },
    {
        "q": "What will `map(str, [1, 2, 3])` produce when converted to a list?",
        "c": "print(list(map(str, [1, 2, 3])))",
        "o": [
            "['1', '2', '3']",
            "[1, 2, 3]",
            "['str(1)', 'str(2)', 'str(3)']",
            "['1', 2, 3]"
        ]
    },
    {
        "q": "What is the purpose of `itertools.zip_longest()`?",
        "c": null,
        "o": [
            "Zips two iterables filling missing values with a default",
            "Zips two iterables and ignores extra values",
            "Returns the Cartesian product of two iterables",
            "Creates combinations with replacement"
        ]
    },
    {
        "q": "Which function from `itertools` would you use to compute running totals?",
        "c": null,
        "o": [
            "accumulate",
            "count",
            "repeat",
            "cycle"
        ]
    },
    {
        "q": "What does this `Counter().update()` call do?",
        "c": "from collections import Counter\nc = Counter()\nc.update('abcab')\nprint(c)",
        "o": [
            "Counter({'a': 2, 'b': 2, 'c': 1})",
            "Counter({'a': 1, 'b': 1, 'c': 1})",
            "Counter({'abcab': 1})",
            "Counter({'a': 2, 'b': 1, 'c': 2})"
        ]
    },
    {
        "q": "Which of the following creates a list of pairs of numbers and their squares?",
        "c": "print(list(map(lambda x: (x, x**2), range(3))))",
        "o": [
            "[(0, 0), (1, 1), (2, 4)]",
            "[(1, 1), (2, 4), (3, 9)]",
            "[(0, 1), (1, 2), (2, 3)]",
            "[(1, 0), (4, 1), (9, 2)]"
        ]
    },
    {
        "q": "What will the following code output using `heapq`?",
        "c": "import heapq\nh = [3, 1, 4]\nheapq.heappush(h, 2)\nprint(h[0])",
        "o": [
            "1",
            "2",
            "3",
            "4"
        ]
    },
    {
        "q": "What is the result of this `reduce()` operation?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [1, 2, 3, 4]))",
        "o": [
            "24",
            "10",
            "6",
            "0"
        ]
    },
    {
        "q": "Which function from `itertools` groups items that are adjacent and equal?",
        "c": null,
        "o": [
            "groupby",
            "accumulate",
            "combinations",
            "chain"
        ]
    },
    {
        "q": "What is the output of this code using `map()`?",
        "c": "print(list(map(lambda x: x * 2, [1, 2, 3])))",
        "o": [
            "[2, 4, 6]",
            "[1, 4, 9]",
            "[2, 2, 2]",
            "[1, 2, 3, 1, 2, 3]"
        ]
    },
    {
        "q": "What does `deque(maxlen=3)` do when it exceeds the limit?",
        "c": "from collections import deque\nd = deque(maxlen=3)\nd.extend([1, 2, 3, 4])\nprint(list(d))",
        "o": [
            "[2, 3, 4]",
            "[1, 2, 3, 4]",
            "[4, 1, 2]",
            "[1, 2, 4]"
        ]
    },
    {
        "q": "Which `heapq` function is the most efficient for pushing and popping in a single call?",
        "c": null,
        "o": [
            "heappushpop",
            "heappop",
            "heapreplace",
            "nlargest"
        ]
    },
    {
        "q": "What will be printed by the following namedtuple code?",
        "c": "from collections import namedtuple\nPoint = namedtuple('Point', 'x y')\np = Point(2, 3)\nprint(p.x + p.y)",
        "o": [
            "5",
            "23",
            "2 3",
            "TypeError"
        ]
    },
    {
        "q": "Which function returns a list of all r-length combinations from an iterable?",
        "c": null,
        "o": [
            "combinations",
            "product",
            "permutations",
            "repeat"
        ]
    },
    {
        "q": "What is returned by `list(filter(lambda x: x != 'a', 'banana'))`?",
        "c": "print(list(filter(lambda x: x != 'a', 'banana')))",
        "o": [
            "['b', 'n', 'n']",
            "['a', 'a', 'a']",
            "['banana']",
            "['b', 'a', 'n', 'a', 'n', 'a']"
        ]
    },
    {
        "q": "Which `collections` type counts the frequency of elements?",
        "c": null,
        "o": [
            "Counter",
            "defaultdict",
            "deque",
            "namedtuple"
        ]
    },
    {
        "q": "Which `itertools` function is used to repeat a single value multiple times?",
        "c": null,
        "o": [
            "repeat",
            "cycle",
            "count",
            "accumulate"
        ]
    },
    {
        "q": "What does this `defaultdict` return for a missing key if initialized with `int`?",
        "c": "from collections import defaultdict\nd = defaultdict(int)\nprint(d['missing'])",
        "o": [
            "0",
            "None",
            "''",
            "KeyError"
        ]
    },
    {
        "q": "Which of the following is NOT a valid function in `heapq`?",
        "c": null,
        "o": [
            "heapdelete",
            "heappop",
            "heappush",
            "heapify"
        ]
    },
    {
        "q": "What is the output of this `accumulate()` call?",
        "c": "from itertools import accumulate\nprint(list(accumulate([2, 3, 5])))",
        "o": [
            "[2, 5, 10]",
            "[10, 5, 2]",
            "[2, 3, 5]",
            "[1, 2, 3, 4, 5]"
        ]
    },
    {
        "q": "Which of the following will convert a list of integers to their string equivalents?",
        "c": "print(list(map(str, [1, 2, 3])))",
        "o": [
            "['1', '2', '3']",
            "[1, 2, 3]",
            "['str1', 'str2', 'str3']",
            "['int1', 'int2', 'int3']"
        ]
    },
    {
        "q": "What does the following code return?",
        "c": "from collections import Counter\nc = Counter('hello')\nprint(c['l'])",
        "o": [
            "2",
            "1",
            "3",
            "0"
        ]
    },
    {
        "q": "Which method is used to get the fields of a namedtuple?",
        "c": null,
        "o": [
            "_fields",
            "_asdict()",
            "keys()",
            "fields()"
        ]
    },
    {
        "q": "What does this `reduce()` call output?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['P', 'y', 't', 'h', 'o', 'n']))",
        "o": [
            "Python",
            "P y t h o n",
            "['Python']",
            "['P', 'y', 't', 'h', 'o', 'n']"
        ]
    },
    {
        "q": "What does this `heapq.heappushpop()` call output?",
        "c": "import heapq\nh = [3, 1, 4]\nheapq.heapify(h)\nprint(heapq.heappushpop(h, 2))",
        "o": [
            "2",
            "1",
            "3",
            "4"
        ]
    },
    {
        "q": "Which itertools function creates an iterator that returns elements from the iterable as long as the predicate is true?",
        "c": null,
        "o": [
            "takewhile",
            "dropwhile",
            "filterfalse",
            "islice"
        ]
    },
    {
        "q": "What will this code return?",
        "c": "from collections import defaultdict\nd = defaultdict(list)\nd['a'].append(1)\nprint(d['a'])",
        "o": [
            "[1]",
            "1",
            "[]",
            "KeyError"
        ]
    },
    {
        "q": "Which function from `heapq` will return the 2 smallest items from a list?",
        "c": "import heapq\nprint(heapq.nsmallest(2, [8, 1, 5, 2]))",
        "o": [
            "[1, 2]",
            "[2, 5]",
            "[1, 8]",
            "[5, 2]"
        ]
    },
    {
        "q": "Which built-in Python function applies a function to each item of an iterable and returns the results?",
        "c": null,
        "o": [
            "map",
            "reduce",
            "filter",
            "zip"
        ]
    },
    {
        "q": "What is the purpose of `islice()` in itertools?",
        "c": null,
        "o": [
            "Slices an iterator like slicing a list",
            "Sorts an iterator",
            "Returns all permutations",
            "Removes duplicates"
        ]
    },
    {
        "q": "What will this code output?",
        "c": "from itertools import permutations\nprint(list(permutations('ab')))",
        "o": [
            "[('a', 'b'), ('b', 'a')]",
            "[('a', 'a'), ('b', 'b')]",
            "['ab', 'ba']",
            "[('ab',)]"
        ]
    },
    {
        "q": "Which function combines two lists into pairs element-wise?",
        "c": null,
        "o": [
            "zip",
            "map",
            "chain",
            "product"
        ]
    },
    {
        "q": "What will this `filter()` expression return?",
        "c": "print(list(filter(lambda x: x.isupper(), 'PyThOn')))",
        "o": [
            "['P', 'T', 'O']",
            "['p', 'y', 't', 'h', 'o', 'n']",
            "['Py', 'Th', 'On']",
            "['P', 'T', 'H']"
        ]
    },
    {
        "q": "Which `collections` type is ideal for implementing a FIFO queue?",
        "c": null,
        "o": [
            "deque",
            "Counter",
            "defaultdict",
            "namedtuple"
        ]
    },
    {
        "q": "Which function creates an iterator of all r-length product tuples?",
        "c": null,
        "o": [
            "product",
            "permutations",
            "combinations",
            "repeat"
        ]
    },
    {
        "q": "What will this code output?",
        "c": "from itertools import repeat\nprint(list(repeat('x', 3)))",
        "o": [
            "['x', 'x', 'x']",
            "['x3']",
            "['x']",
            "['x', 3]"
        ]
    },
    {
        "q": "What is the output of this code using `heapreplace()`?",
        "c": "import heapq\nheap = [1, 3, 5]\nheapq.heapify(heap)\nprint(heapq.heapreplace(heap, 2))",
        "o": [
            "1",
            "2",
            "3",
            "5"
        ]
    },
    {
        "q": "What does `defaultdict(int)` return when accessing a non-existent key?",
        "c": "from collections import defaultdict\nd = defaultdict(int)\nprint(d['z'])",
        "o": [
            "0",
            "None",
            "KeyError",
            "''"
        ]
    },
    {
        "q": "Which `itertools` function ignores elements as long as the predicate is true and then returns the rest?",
        "c": null,
        "o": [
            "dropwhile",
            "takewhile",
            "filterfalse",
            "islice"
        ]
    },
    {
        "q": "What is the result of this `reduce()` operation?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, [10]))",
        "o": [
            "10",
            "0",
            "TypeError",
            "[10]"
        ]
    },
    {
        "q": "What does `Counter('aabbccc').most_common(2)` return?",
        "c": "from collections import Counter\nprint(Counter('aabbccc').most_common(2))",
        "o": [
            "[('c', 3), ('a', 2)]",
            "[('a', 2), ('b', 2)]",
            "[('b', 2), ('c', 3)]",
            "[('c', 3), ('b', 2)]"
        ]
    },
    {
        "q": "Which `heapq` function inserts an item and then pops and returns the smallest?",
        "c": null,
        "o": [
            "heappushpop",
            "heapreplace",
            "heappop",
            "heappush"
        ]
    },
    {
        "q": "What does this `map()` call return?",
        "c": "print(list(map(len, ['hi', 'hello', 'hey'])))",
        "o": [
            "[2, 5, 3]",
            "[1, 2, 3]",
            "[3, 5, 3]",
            "[2, 4, 3]"
        ]
    },
    {
        "q": "What is the result of the following namedtuple access?",
        "c": "from collections import namedtuple\nColor = namedtuple('Color', ['r', 'g', 'b'])\nc = Color(255, 255, 0)\nprint(c[2])",
        "o": [
            "0",
            "255",
            "b",
            "IndexError"
        ]
    },
    {
        "q": "Which method on a `deque` removes the rightmost item?",
        "c": null,
        "o": [
            "pop",
            "popleft",
            "remove",
            "shift"
        ]
    },
    {
        "q": "Which `itertools` function would generate a Cartesian product of input iterables?",
        "c": null,
        "o": [
            "product",
            "combinations",
            "permutations",
            "repeat"
        ]
    },
    {
        "q": "What is returned by `filter(lambda x: x.isdigit(), 'a1b2c3')`?",
        "c": "print(list(filter(lambda x: x.isdigit(), 'a1b2c3')))",
        "o": [
            "['1', '2', '3']",
            "['a', 'b', 'c']",
            "['123']",
            "['a1', 'b2', 'c3']"
        ]
    },
    {
        "q": "Which function is used to combine multiple iterables into a single iterator?",
        "c": null,
        "o": [
            "chain",
            "zip",
            "product",
            "groupby"
        ]
    },
    {
        "q": "What is the output of `accumulate([1, 2, 3], func=lambda x, y: x * y)`?",
        "c": "from itertools import accumulate\nimport operator\nprint(list(accumulate([1, 2, 3], func=lambda x, y: x * y)))",
        "o": [
            "[1, 2, 6]",
            "[1, 3, 6]",
            "[6]",
            "[1, 3, 9]"
        ]
    },
    {
        "q": "Which data structure from `collections` is ideal for implementing a stack?",
        "c": null,
        "o": [
            "deque",
            "defaultdict",
            "namedtuple",
            "Counter"
        ]
    },
    {
        "q": "What is the result of this expression?",
        "c": "list(map(lambda x: x**2, filter(lambda x: x % 2 == 0, range(5))))",
        "o": [
            "[0, 4, 16]",
            "[1, 9]",
            "[0, 1, 4, 9, 16]",
            "[4, 16]"
        ]
    },
    {
        "q": "What does the following code output?",
        "c": "from collections import deque\nd = deque([1, 2, 3])\nd.rotate(1)\nprint(list(d))",
        "o": [
            "[3, 1, 2]",
            "[2, 3, 1]",
            "[1, 2, 3]",
            "[1, 3, 2]"
        ]
    },
    {
        "q": "What is the purpose of `heapq.heapify()`?",
        "c": null,
        "o": [
            "Transforms a list into a valid heap in-place",
            "Creates a max-heap from a list",
            "Sorts the list in ascending order",
            "Adds an element to the heap"
        ]
    },
    {
        "q": "What is the output of this code?",
        "c": "from itertools import chain\nprint(list(chain(['A', 'B'], ['C'])))",
        "o": [
            "['A', 'B', 'C']",
            "[['A', 'B'], ['C']]",
            "['ABC']",
            "['A', 'BC']"
        ]
    },
    {
        "q": "What does `filterfalse()` from `itertools` do?",
        "c": null,
        "o": [
            "Filters out elements where the function returns True",
            "Filters elements where the function returns True",
            "Applies a function to each element",
            "Stops at the first False element"
        ]
    },
    {
        "q": "Which function returns all permutations of length r?",
        "c": null,
        "o": [
            "permutations",
            "combinations",
            "product",
            "chain"
        ]
    },
    {
        "q": "What does this namedtuple code print?",
        "c": "from collections import namedtuple\nStudent = namedtuple('Student', 'name grade')\ns = Student('Alice', 'A')\nprint(s.grade)",
        "o": [
            "A",
            "grade",
            "Alice",
            "name"
        ]
    },
    {
        "q": "What will this `reduce()` call output?",
        "c": "from functools import reduce\nprint(reduce(lambda a, b: a if a > b else b, [3, 6, 2, 8, 4]))",
        "o": [
            "8",
            "3",
            "6",
            "4"
        ]
    },
    {
        "q": "What will be the result of this `map()` call?",
        "c": "print(list(map(str.upper, ['a', 'b', 'c'])))",
        "o": [
            "['A', 'B', 'C']",
            "['a', 'b', 'c']",
            "['A', 'b', 'C']",
            "['UPPER', 'UPPER', 'UPPER']"
        ]
    },
    {
        "q": "Which function would generate an iterator that yields elements from the first iterable until it is exhausted, then from the next?",
        "c": null,
        "o": [
            "chain",
            "zip",
            "product",
            "repeat"
        ]
    },
    {
        "q": "What does `deque([1,2,3]).appendleft(0)` do?",
        "c": "from collections import deque\nd = deque([1, 2, 3])\nd.appendleft(0)\nprint(list(d))",
        "o": [
            "[0, 1, 2, 3]",
            "[1, 2, 3, 0]",
            "[3, 2, 1, 0]",
            "[0, 3, 2, 1]"
        ]
    },
    {
        "q": "What is the output of `Counter('mississippi').most_common(1)`?",
        "c": "from collections import Counter\nprint(Counter('mississippi').most_common(1))",
        "o": [
            "[('i', 4)]",
            "[('s', 4)]",
            "[('p', 2)]",
            "[('m', 1)]"
        ]
    },
    {
        "q": "Which function from `heapq` returns the largest elements without modifying the original list?",
        "c": null,
        "o": [
            "nlargest",
            "heapreplace",
            "heappop",
            "heappushpop"
        ]
    },
    {
        "q": "What is the use of `starmap()` in `itertools`?",
        "c": null,
        "o": [
            "Applies a function to argument tuples",
            "Returns values grouped by function result",
            "Repeats values indefinitely",
            "Returns a filtered iterable"
        ]
    },
    {
        "q": "Which method removes all elements from a deque?",
        "c": null,
        "o": [
            "clear()",
            "removeall()",
            "popall()",
            "empty()"
        ]
    },
    {
        "q": "What does `accumulate([1, 2, 3, 4], lambda x, y: x + y)` return?",
        "c": "from itertools import accumulate\nprint(list(accumulate([1, 2, 3, 4], lambda x, y: x + y)))",
        "o": [
            "[1, 3, 6, 10]",
            "[10, 9, 7, 4]",
            "[1, 2, 3, 4]",
            "[1, 2, 5, 9]"
        ]
    },
    {
        "q": "What does the following code output?",
        "c": "from collections import Counter\nprint(Counter('banana')['a'])",
        "o": [
            "3",
            "2",
            "1",
            "0"
        ]
    },
    {
        "q": "Which method is used to remove and return the leftmost item from a deque?",
        "c": null,
        "o": [
            "popleft()",
            "pop()",
            "shift()",
            "removeleft()"
        ]
    },
    {
        "q": "What is the result of this code using `heapq`?",
        "c": "import heapq\nh = [10, 20, 5, 15]\nheapq.heapify(h)\nheapq.heappop(h)\nprint(h[0])",
        "o": [
            "10",
            "5",
            "15",
            "20"
        ]
    },
    {
        "q": "Which `itertools` function would produce an iterator that returns r-length tuples with repeated elements allowed?",
        "c": null,
        "o": [
            "combinations_with_replacement",
            "permutations",
            "product",
            "combinations"
        ]
    },
    {
        "q": "Which method in `Counter` returns an iterable over elements repeating as per their count?",
        "c": null,
        "o": [
            "elements()",
            "items()",
            "most_common()",
            "keys()"
        ]
    },
    {
        "q": "Which of the following functions is best for filtering out even numbers from a list?",
        "c": "print(list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4, 5])))",
        "o": [
            "[2, 4]",
            "[1, 3, 5]",
            "[2]",
            "[4, 5]"
        ]
    },
    {
        "q": "What does this code using `defaultdict` output?",
        "c": "from collections import defaultdict\nd = defaultdict(list)\nd['x'].append(100)\nprint(d['x'])",
        "o": [
            "[100]",
            "100",
            "[]",
            "KeyError"
        ]
    },
    {
        "q": "What is the use of `heapreplace()` in heapq?",
        "c": null,
        "o": [
            "Pops and returns the smallest item, and pushes the new item",
            "Pushes and pops the smallest item in reverse",
            "Replaces largest with smallest",
            "Sorts the list and returns the first element"
        ]
    },
    {
        "q": "What does `namedtuple` return when using `_asdict()`?",
        "c": null,
        "o": [
            "An `OrderedDict` of field names and values",
            "A dictionary with reversed keys and values",
            "A tuple with renamed fields",
            "A list of values"
        ]
    },
    {
        "q": "What is the output of this map expression?",
        "c": "print(list(map(str.lower, ['PYTHON', 'JAVA'])))",
        "o": [
            "['python', 'java']",
            "['PYTHON', 'JAVA']",
            "['Python', 'Java']",
            "['p', 'j']"
        ]
    },
    {
        "q": "What does `itertools.count(10, 2)` do?",
        "c": null,
        "o": [
            "Creates an infinite iterator starting at 10 and increasing by 2",
            "Counts the even numbers in a list",
            "Returns a finite list of even numbers starting at 10",
            "Repeats the number 10, two times"
        ]
    },
    {
        "q": "What will be printed by this code?",
        "c": "from itertools import product\nprint(list(product([1, 2], repeat=2)))",
        "o": [
            "[(1, 1), (1, 2), (2, 1), (2, 2)]",
            "[(1, 2), (2, 1)]",
            "[[1, 1], [2, 2]]",
            "[(1, 2, 1, 2)]"
        ]
    },
    {
        "q": "Which method clears all elements in a deque?",
        "c": null,
        "o": [
            "clear()",
            "empty()",
            "popall()",
            "deleteall()"
        ]
    },
    {
        "q": "What does `accumulate()` do by default if no function is passed?",
        "c": null,
        "o": [
            "Performs running addition",
            "Performs running multiplication",
            "Returns a list of pairs",
            "Sorts the values"
        ]
    },
    {
        "q": "Which built-in function returns True if any element in the iterable is True?",
        "c": null,
        "o": [
            "any",
            "all",
            "filter",
            "map"
        ]
    },
    {
        "q": "What does the following `Counter` expression return?",
        "c": "from collections import Counter\nprint(Counter(['a', 'b', 'a', 'c', 'b', 'b'])['b'])",
        "o": [
            "3",
            "2",
            "1",
            "0"
        ]
    },
    {
        "q": "What is the result of this `map()` call?",
        "c": "print(list(map(lambda x: x * 3, [1, 2, 3])))",
        "o": [
            "[3, 6, 9]",
            "[1, 2, 3, 1, 2, 3, 1, 2, 3]",
            "[1, 4, 9]",
            "[3, 3, 3]"
        ]
    },
    {
        "q": "Which `collections` object behaves like a dictionary but assigns default values?",
        "c": null,
        "o": [
            "defaultdict",
            "Counter",
            "deque",
            "namedtuple"
        ]
    },
    {
        "q": "What does `heapq.heappop()` do?",
        "c": null,
        "o": [
            "Removes and returns the smallest element from the heap",
            "Adds an element to the heap",
            "Replaces the smallest element",
            "Returns the largest element"
        ]
    },
    {
        "q": "Which `itertools` function can be used to combine multiple lists into one continuous iterator?",
        "c": null,
        "o": [
            "chain",
            "zip",
            "product",
            "groupby"
        ]
    },
    {
        "q": "What does `repeat('hi', 3)` return?",
        "c": "from itertools import repeat\nprint(list(repeat('hi', 3)))",
        "o": [
            "['hi', 'hi', 'hi']",
            "['hi']",
            "['h', 'i']",
            "['hi', 3]"
        ]
    },
    {
        "q": "Which `deque` method returns and removes the rightmost item?",
        "c": null,
        "o": [
            "pop()",
            "popleft()",
            "remove()",
            "cut()"
        ]
    },
    {
        "q": "What does `reduce(lambda x, y: x - y, [10, 5, 1])` return?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x - y, [10, 5, 1]))",
        "o": [
            "4",
            "6",
            "14",
            "5"
        ]
    },
    {
        "q": "Which of these is a correct use of `combinations`?",
        "c": "from itertools import combinations\nprint(list(combinations('abc', 2)))",
        "o": [
            "[('a', 'b'), ('a', 'c'), ('b', 'c')]",
            "[('a', 'a'), ('b', 'b'), ('c', 'c')]",
            "[('a',), ('b',), ('c',)]",
            "[('a', 'b'), ('b', 'a')]"
        ]
    },
    {
        "q": "What is the use of `namedtuple._replace()`?",
        "c": null,
        "o": [
            "Returns a new instance with specified fields updated",
            "Modifies the namedtuple in place",
            "Deletes a field",
            "Reverses the namedtuple fields"
        ]
    },
    {
        "q": "Which function from `itertools` produces all r-length permutations of items?",
        "c": null,
        "o": [
            "permutations",
            "combinations",
            "product",
            "repeat"
        ]
    },
    {
        "q": "Which function applies a function cumulatively to the items of an iterable?",
        "c": null,
        "o": [
            "reduce",
            "map",
            "filter",
            "zip"
        ]
    },
    {
        "q": "What will this filter return?",
        "c": "print(list(filter(None, [0, '', 'hello', [], [1], True])))",
        "o": [
            "['hello', [1], True]",
            "[0, '', [], True]",
            "[True, 0]",
            "[None]"
        ]
    },
    {
        "q": "Which of these functions creates a max heap using `heapq`?",
        "c": null,
        "o": [
            "heapify with negated values",
            "heappush",
            "heapreplace",
            "heappop"
        ]
    },
    {
        "q": "What does this namedtuple example print?",
        "c": "from collections import namedtuple\nCar = namedtuple('Car', ['make', 'year'])\nc = Car('Toyota', 2020)\nprint(c.make)",
        "o": [
            "Toyota",
            "2020",
            "make",
            "Car"
        ]
    },
    {
        "q": "What will be the output of this code using `filter()`?",
        "c": "print(list(filter(lambda x: x > 2, [1, 2, 3, 4])))",
        "o": [
            "[3, 4]",
            "[1, 2]",
            "[2, 3, 4]",
            "[1, 2, 3, 4]"
        ]
    },
    {
        "q": "Which statement about `Counter` is true?",
        "c": null,
        "o": [
            "It returns a dictionary subclass that counts hashable objects.",
            "It is used to maintain insertion order.",
            "It creates immutable dictionaries.",
            "It is only used for string data."
        ]
    },
    {
        "q": "Which function in `heapq` can return the k largest elements from a list?",
        "c": null,
        "o": [
            "nlargest",
            "heappop",
            "heapreplace",
            "heappush"
        ]
    },
    {
        "q": "What does this `itertools.cycle()` call do?",
        "c": "from itertools import cycle\nimport itertools\nc = cycle(['on', 'off'])\nfor i, val in zip(range(4), c): print(val)",
        "o": [
            "on\noff\non\noff",
            "on\noff",
            "off\noff\noff\noff",
            "on\non\non\non"
        ]
    },
    {
        "q": "Which `collections` object is best suited for implementing both stack and queue operations efficiently?",
        "c": null,
        "o": [
            "deque",
            "Counter",
            "namedtuple",
            "defaultdict"
        ]
    },
    {
        "q": "What is the result of this reduce function?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['a', 'b', 'c']))",
        "o": [
            "'abc'",
            "['a', 'b', 'c']",
            "['ab', 'c']",
            "'a b c'"
        ]
    },
    {
        "q": "Which statement correctly describes `itertools.groupby()`?",
        "c": null,
        "o": [
            "Groups consecutive items that have the same key.",
            "Sorts the iterable and returns keys.",
            "Returns unique items in sorted order.",
            "Splits the iterable into chunks."
        ]
    },
    {
        "q": "What is the output of the following `map()` call?",
        "c": "print(list(map(lambda x: x + 1, [0, 1, 2])))",
        "o": [
            "[1, 2, 3]",
            "[0, 1, 2]",
            "[1, 1, 1]",
            "[1, 3, 5]"
        ]
    },
    {
        "q": "What does this call to `defaultdict(set)` allow?",
        "c": "from collections import defaultdict\nd = defaultdict(set)\nd['key'].add(1)\nprint(d['key'])",
        "o": [
            "{1}",
            "[1]",
            "1",
            "KeyError"
        ]
    },
    {
        "q": "What does `islice()` do in `itertools`?",
        "c": null,
        "o": [
            "Slicing an iterator without converting to a list",
            "Skipping duplicates in an iterable",
            "Joining two iterators",
            "Filtering values based on a condition"
        ]
    },
    {
        "q": "Which of the following is a characteristic of namedtuple?",
        "c": null,
        "o": [
            "Fields can be accessed by name and index.",
            "It is mutable like dictionaries.",
            "It allows duplicate field names.",
            "It doesn't support unpacking."
        ]
    },
    {
        "q": "Which function returns all elements that do NOT match a condition?",
        "c": "from itertools import filterfalse\nprint(list(filterfalse(lambda x: x % 2, range(5))))",
        "o": [
            "[0, 2, 4]",
            "[1, 3]",
            "[0, 1, 2, 3, 4]",
            "[2, 4]"
        ]
    },
    {
        "q": "How is a max-heap simulated using `heapq`?",
        "c": null,
        "o": [
            "Negate the values before insertion",
            "Use heapify in reverse",
            "Reverse the list before pushing",
            "It’s not possible"
        ]
    },
    {
        "q": "What is the output of this deque operation?",
        "c": "from collections import deque\nd = deque([1, 2, 3])\nd.extendleft([0])\nprint(list(d))",
        "o": [
            "[0, 1, 2, 3]",
            "[1, 2, 3, 0]",
            "[3, 2, 1, 0]",
            "[1, 2, 3]"
        ]
    },
    {
        "q": "What does `map(str, [1, 2, 3])` return?",
        "c": "print(list(map(str, [1, 2, 3])))",
        "o": [
            "['1', '2', '3']",
            "[1, 2, 3]",
            "['str1', 'str2', 'str3']",
            "['one', 'two', 'three']"
        ]
    },
    {
        "q": "What will this code using `heapq` output?",
        "c": "import heapq\nh = []\nheapq.heappush(h, 4)\nheapq.heappush(h, 1)\nprint(heapq.heappop(h))",
        "o": [
            "1",
            "4",
            "[1, 4]",
            "[4, 1]"
        ]
    },
    {
        "q": "Which `collections` class would you use to count unique words in a list?",
        "c": null,
        "o": [
            "Counter",
            "deque",
            "defaultdict",
            "namedtuple"
        ]
    },
    {
        "q": "What does `itertools.permutations('ab', 2)` return?",
        "c": "from itertools import permutations\nprint(list(permutations('ab', 2)))",
        "o": [
            "[('a', 'b'), ('b', 'a')]",
            "[('a', 'a'), ('b', 'b')]",
            "[('ab',)]",
            "['ab', 'ba']"
        ]
    },
    {
        "q": "What is the use of `map()` in Python?",
        "c": null,
        "o": [
            "Applies a function to every element of an iterable",
            "Filters elements of an iterable",
            "Reduces values into a single result",
            "Combines multiple iterables"
        ]
    },
    {
        "q": "What is the default return type of `namedtuple()`?",
        "c": null,
        "o": [
            "A class factory that creates tuple subclasses with named fields",
            "A mutable dictionary",
            "An unordered tuple",
            "A frozen set of fields"
        ]
    },
    {
        "q": "What is the result of `reduce(lambda x, y: x * y, [2, 3, 4])`?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [2, 3, 4]))",
        "o": [
            "24",
            "9",
            "6",
            "2"
        ]
    },
    {
        "q": "Which function will skip items from iterable while predicate is true, then return the rest?",
        "c": null,
        "o": [
            "dropwhile",
            "takewhile",
            "filter",
            "map"
        ]
    },
    {
        "q": "Which method will insert an element at the left end of a deque?",
        "c": null,
        "o": [
            "appendleft",
            "append",
            "insertleft",
            "addleft"
        ]
    },
    {
        "q": "Which `heapq` function returns the k smallest items from a dataset?",
        "c": null,
        "o": [
            "nsmallest",
            "nlargest",
            "heappop",
            "heapreplace"
        ]
    },
    {
        "q": "What does `chain.from_iterable()` do?",
        "c": "from itertools import chain\nprint(list(chain.from_iterable([[1, 2], [3, 4]])))",
        "o": [
            "[1, 2, 3, 4]",
            "[[1, 2], [3, 4]]",
            "[[1], [2], [3], [4]]",
            "[1, [2], 3, [4]]"
        ]
    },
    {
        "q": "Which of these is an advantage of using `defaultdict` over a normal dict?",
        "c": null,
        "o": [
            "You don’t have to check if a key exists before assigning to it.",
            "It sorts keys by default.",
            "It is faster in all use-cases.",
            "It uses less memory."
        ]
    },
    {
        "q": "Which built-in function is used to reduce an iterable to a single cumulative value?",
        "c": null,
        "o": [
            "reduce",
            "map",
            "filter",
            "zip"
        ]
    },
    {
        "q": "What does this deque code do?",
        "c": "from collections import deque\nd = deque(maxlen=3)\nd.extend([1, 2, 3, 4])\nprint(list(d))",
        "o": [
            "[2, 3, 4]",
            "[1, 2, 3]",
            "[4]",
            "[1, 2, 3, 4]"
        ]
    },
    {
        "q": "Which of these is a correct use of `groupby()`?",
        "c": "from itertools import groupby\nfor key, group in groupby('aaabbc'):\n    print(key, list(group))",
        "o": [
            "a ['a', 'a', 'a']\nb ['b', 'b']\nc ['c']",
            "a ['a', 'b', 'c']\nb []\nc []",
            "['a', 'b', 'c']",
            "a ['a']\nb ['b']\nc ['c']"
        ]
    },
    {
        "q": "What happens if you access a missing key in a standard dictionary?",
        "c": "d = {'x': 1}\nprint(d['y'])",
        "o": [
            "KeyError",
            "None",
            "0",
            "[]"
        ]
    },
    {
        "q": "What does this code using `heapq.heappushpop()` return?",
        "c": "import heapq\nh = [3, 1, 5]\nheapq.heapify(h)\nprint(heapq.heappushpop(h, 2))",
        "o": [
            "1",
            "2",
            "3",
            "5"
        ]
    },
    {
        "q": "Which `itertools` function returns a specified number of items from the start of an iterable?",
        "c": null,
        "o": [
            "islice",
            "takewhile",
            "dropwhile",
            "filter"
        ]
    },
    {
        "q": "Which of the following `collections` types is immutable?",
        "c": null,
        "o": [
            "namedtuple",
            "deque",
            "Counter",
            "defaultdict"
        ]
    },
    {
        "q": "What will be the output of this `reduce()` expression?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, range(1, 5)))",
        "o": [
            "10",
            "15",
            "9",
            "20"
        ]
    },
    {
        "q": "Which of these will raise a `KeyError`?",
        "c": "from collections import defaultdict\nd = defaultdict(int)\nprint(d['missing'])",
        "o": [
            "None of the above",
            "It raises KeyError",
            "It returns None",
            "It returns an empty list"
        ]
    },
    {
        "q": "What is the result of `chain('AB', 'CD')`?",
        "c": "from itertools import chain\nprint(list(chain('AB', 'CD')))",
        "o": [
            "['A', 'B', 'C', 'D']",
            "['AB', 'CD']",
            "[('A', 'B'), ('C', 'D')]",
            "[['A'], ['B'], ['C'], ['D']]"
        ]
    },
    {
        "q": "What does `Counter(['a', 'b', 'a', 'c']).update(['b', 'b'])` result in?",
        "c": "from collections import Counter\nc = Counter(['a', 'b', 'a', 'c'])\nc.update(['b', 'b'])\nprint(c)",
        "o": [
            "Counter({'b': 3, 'a': 2, 'c': 1})",
            "Counter({'a': 2, 'b': 2, 'c': 1})",
            "Counter({'a': 2, 'b': 1, 'c': 1})",
            "Counter({'a': 2, 'c': 1})"
        ]
    },
    {
        "q": "Which `deque` method returns the number of items?",
        "c": "from collections import deque\nd = deque([1,2,3])\nprint(len(d))",
        "o": [
            "3",
            "2",
            "None",
            "Error"
        ]
    },
    {
        "q": "What is the effect of this `filter()` usage?",
        "c": "print(list(filter(None, [0, False, '', 5, 'Hello'])))",
        "o": [
            "[5, 'Hello']",
            "[0, False, '', 5, 'Hello']",
            "[0, False, '']",
            "['Hello']"
        ]
    },
    {
        "q": "What does `accumulate()` from `itertools` return by default?",
        "c": "from itertools import accumulate\nprint(list(accumulate([1, 2, 3, 4])))",
        "o": [
            "[1, 3, 6, 10]",
            "[10]",
            "[1, 2, 3, 4]",
            "[1, 2, 5, 9]"
        ]
    },
    {
        "q": "Which of the following best describes `defaultdict(list)`?",
        "c": null,
        "o": [
            "It creates a dictionary where each new key has a default empty list value.",
            "It throws a KeyError on accessing missing keys.",
            "It appends keys to a list by default.",
            "It sorts keys based on insertion order."
        ]
    },
    {
        "q": "What is the result of this namedtuple code?",
        "c": "from collections import namedtuple\nPoint = namedtuple('Point', 'x y')\np = Point(2, 3)\nprint(p._fields)",
        "o": [
            "('x', 'y')",
            "['x', 'y']",
            "('y', 'x')",
            "[x, y]"
        ]
    },
    {
        "q": "Which function combines two iterables element-wise into tuples?",
        "c": null,
        "o": [
            "zip",
            "map",
            "reduce",
            "filter"
        ]
    },
    {
        "q": "What is the use of `heapq.merge()`?",
        "c": null,
        "o": [
            "Merge multiple sorted inputs into a single sorted output.",
            "Merge two heaps into one in place.",
            "Combine two lists and sort.",
            "Returns the heapified merged list."
        ]
    },
    {
        "q": "Which function generates values by applying a function to items from multiple iterables?",
        "c": "print(list(map(lambda x, y: x + y, [1, 2], [3, 4])))",
        "o": [
            "[4, 6]",
            "[1, 2, 3, 4]",
            "[3, 6]",
            "[4, 6, 5]"
        ]
    },
    {
        "q": "What is the output of the following code?",
        "c": "from collections import deque\nd = deque([1, 2, 3])\nd.rotate(-1)\nprint(list(d))",
        "o": [
            "[2, 3, 1]",
            "[1, 2, 3]",
            "[3, 1, 2]",
            "[3, 2, 1]"
        ]
    },
    {
        "q": "What happens when you call `most_common()` without arguments on a `Counter`?",
        "c": "from collections import Counter\nc = Counter('aabbc')\nprint(c.most_common())",
        "o": [
            "[('a', 2), ('b', 2), ('c', 1)]",
            "[('a', 1), ('b', 2), ('c', 2)]",
            "[('a', 2), ('b', 1), ('c', 2)]",
            "[('a', 2), ('c', 1), ('b', 2)]"
        ]
    },
    {
        "q": "Which `itertools` function groups adjacent matching items?",
        "c": null,
        "o": [
            "groupby",
            "combinations",
            "product",
            "zip_longest"
        ]
    },
    {
        "q": "What does `reduce(lambda x, y: x - y, [10, 3, 1])` return?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x - y, [10, 3, 1]))",
        "o": [
            "6",
            "12",
            "8",
            "7"
        ]
    },
    {
        "q": "What does this call to `namedtuple` do?",
        "c": "from collections import namedtuple\nColor = namedtuple('Color', 'red green blue')\nc = Color(255, 255, 0)\nprint(c.blue)",
        "o": [
            "0",
            "255",
            "blue",
            "None"
        ]
    },
    {
        "q": "Which of the following creates an infinite iterator in `itertools`?",
        "c": null,
        "o": [
            "count",
            "chain",
            "cycle",
            "repeat"
        ]
    },
    {
        "q": "What does `heapq.heappushpop(h, item)` do?",
        "c": null,
        "o": [
            "Pushes item on the heap and then pops and returns the smallest item",
            "Pops the smallest and then pushes the item",
            "Replaces largest with smallest",
            "Returns the largest item"
        ]
    },
    {
        "q": "What is the result of this `filter` call?",
        "c": "print(list(filter(lambda x: x.islower(), 'PyThOn')))",
        "o": [
            "['y', 'h', 'n']",
            "['P', 'T', 'O']",
            "['y', 'h', 'O']",
            "['P', 'y', 'T', 'h', 'O', 'n']"
        ]
    },
    {
        "q": "What does `zip()` do in Python?",
        "c": null,
        "o": [
            "Pairs elements from multiple iterables",
            "Sorts two lists together",
            "Concatenates iterables",
            "Filters items by condition"
        ]
    },
    {
        "q": "How does `islice` behave in `itertools`?",
        "c": "from itertools import islice\nprint(list(islice(range(10), 2, 7, 2)))",
        "o": [
            "[2, 4, 6]",
            "[2, 3, 4, 5, 6]",
            "[3, 5, 7]",
            "[2, 4, 6, 8]"
        ]
    },
    {
        "q": "Which argument to `defaultdict()` would create an int default value?",
        "c": null,
        "o": [
            "int",
            "list",
            "dict",
            "None"
        ]
    },
    {
        "q": "What does this `reduce()` call output?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['P', 'y', 't', 'h', 'o', 'n']))",
        "o": [
            "Python",
            "['Python']",
            "P y t h o n",
            "['P', 'y', 't', 'h', 'o', 'n']"
        ]
    },
    {
        "q": "Which `itertools` function computes the cartesian product of input iterables?",
        "c": null,
        "o": [
            "product",
            "combinations",
            "chain",
            "repeat"
        ]
    },
    {
        "q": "What does `deque.maxlen` represent?",
        "c": null,
        "o": [
            "Maximum number of items a deque can hold",
            "Current number of items",
            "The index of the rightmost item",
            "The length of deque after resizing"
        ]
    },
    {
        "q": "Which built-in function returns True only if all items in iterable are true?",
        "c": null,
        "o": [
            "all",
            "any",
            "map",
            "reduce"
        ]
    },
    {
        "q": "What will be the output of the following code?",
        "c": "from collections import Counter\nc = Counter('success')\nprint(c['s'])",
        "o": [
            "3",
            "2",
            "1",
            "4"
        ]
    },
    {
        "q": "What is the behavior of `heapify()` in the `heapq` module?",
        "c": null,
        "o": [
            "Transforms a list into a valid heap in-place",
            "Sorts a list in ascending order",
            "Creates a max-heap from the list",
            "Creates a new heap without modifying the list"
        ]
    },
    {
        "q": "Which of the following returns a running total using `itertools`?",
        "c": "from itertools import accumulate\nprint(list(accumulate([1, 2, 3])))",
        "o": [
            "[1, 3, 6]",
            "[1, 2, 3]",
            "[6, 3, 1]",
            "[1, 4, 7]"
        ]
    },
    {
        "q": "Which `collections` tool creates objects that behave like lightweight class instances?",
        "c": null,
        "o": [
            "namedtuple",
            "Counter",
            "deque",
            "defaultdict"
        ]
    },
    {
        "q": "What does this code return using `filter()`?",
        "c": "print(list(filter(lambda x: x % 2 == 0, [10, 15, 20])))",
        "o": [
            "[10, 20]",
            "[15]",
            "[10, 15, 20]",
            "[20]"
        ]
    },
    {
        "q": "Which `heapq` function both pops and pushes efficiently?",
        "c": null,
        "o": [
            "heappushpop",
            "heappop",
            "heapify",
            "nlargest"
        ]
    },
    {
        "q": "What is the result of this `namedtuple` code?",
        "c": "from collections import namedtuple\nPoint = namedtuple('Point', ['x', 'y'])\np = Point(3, 4)\nprint(p._asdict())",
        "o": [
            "{'x': 3, 'y': 4}",
            "['x': 3, 'y': 4]",
            "(3, 4)",
            "{x: 3, y: 4}"
        ]
    },
    {
        "q": "Which `itertools` function would you use to repeat a value multiple times?",
        "c": null,
        "o": [
            "repeat",
            "cycle",
            "count",
            "accumulate"
        ]
    },
    {
        "q": "What will be printed by this reduce example?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [1, 2, 3, 4]))",
        "o": [
            "24",
            "10",
            "12",
            "6"
        ]
    },
    {
        "q": "What does `zip_longest` do in `itertools`?",
        "c": null,
        "o": [
            "Zips iterables and fills missing values with a specified fillvalue",
            "Zips the longest iterable and discards the rest",
            "Returns all values from the shortest iterable",
            "Extends shortest iterable with duplicates"
        ]
    },
    {
        "q": "What does `popleft()` do in a deque?",
        "c": null,
        "o": [
            "Removes and returns the leftmost item",
            "Adds a new item to the left end",
            "Removes the rightmost item",
            "Clears the deque"
        ]
    },
    {
        "q": "Which function produces all combinations of an iterable of given length?",
        "c": "from itertools import combinations\nprint(list(combinations('abc', 2)))",
        "o": [
            "[('a', 'b'), ('a', 'c'), ('b', 'c')]",
            "[('a', 'a'), ('b', 'b'), ('c', 'c')]",
            "[('a', 'b', 'c')]",
            "[('a', 'b'), ('b', 'a')]"
        ]
    },
    {
        "q": "Which of these functions removes and returns the smallest item from a heap?",
        "c": null,
        "o": [
            "heappop",
            "heappush",
            "heapreplace",
            "nlargest"
        ]
    },
    {
        "q": "Which of the following applies a function to each item and returns a new iterable?",
        "c": null,
        "o": [
            "map",
            "filter",
            "zip",
            "reduce"
        ]
    },
    {
        "q": "What does `Counter().update()` do?",
        "c": "from collections import Counter\nc = Counter()\nc.update('abcab')\nprint(c)",
        "o": [
            "Counter({'a': 2, 'b': 2, 'c': 1})",
            "Counter({'a': 1, 'b': 1, 'c': 1})",
            "Counter({'a': 3, 'b': 1, 'c': 1})",
            "Counter({'a': 2, 'b': 1, 'c': 2})"
        ]
    },
    {
        "q": "What will this code print using `defaultdict`?",
        "c": "from collections import defaultdict\nd = defaultdict(int)\nd['a'] += 1\nprint(d['a'])",
        "o": [
            "1",
            "0",
            "KeyError",
            "None"
        ]
    },
    {
        "q": "Which `heapq` function replaces and returns the smallest element?",
        "c": null,
        "o": [
            "heapreplace",
            "heappop",
            "heappushpop",
            "nlargest"
        ]
    },
    {
        "q": "What does this `filter()` call do?",
        "c": "print(list(filter(lambda x: x.isalpha(), 'abc123!@#')))",
        "o": [
            "['a', 'b', 'c']",
            "['1', '2', '3']",
            "['a', 'b', 'c', '1', '2', '3']",
            "['!', '@', '#']"
        ]
    },
    {
        "q": "What is the role of `product()` in `itertools`?",
        "c": "from itertools import product\nprint(list(product([1, 2], ['a', 'b'])))",
        "o": [
            "[(1, 'a'), (1, 'b'), (2, 'a'), (2, 'b')]",
            "[(1, 2, 'a', 'b')]",
            "[[1, 'a'], [2, 'b']]",
            "[('a', 1), ('b', 2)]"
        ]
    },
    {
        "q": "Which operation adds an item to the right side of a `deque`?",
        "c": null,
        "o": [
            "append",
            "appendleft",
            "extendleft",
            "popright"
        ]
    },
    {
        "q": "What does this `map()` function return?",
        "c": "print(list(map(str.upper, ['a', 'b', 'c'])))",
        "o": [
            "['A', 'B', 'C']",
            "['a', 'b', 'c']",
            "['A', 'b', 'C']",
            "['Upper a', 'Upper b', 'Upper c']"
        ]
    },
    {
        "q": "Which function gives the top N largest elements from a list?",
        "c": "import heapq\nprint(heapq.nlargest(2, [5, 3, 9, 1]))",
        "o": [
            "[9, 5]",
            "[5, 3]",
            "[1, 3]",
            "[5, 9]"
        ]
    },
    {
        "q": "Which of the following best describes `cycle()` from `itertools`?",
        "c": null,
        "o": [
            "It loops over an iterable infinitely.",
            "It returns only unique elements.",
            "It reverses an iterable repeatedly.",
            "It runs a function multiple times."
        ]
    },
    {
        "q": "Which `collections` class is best for a FIFO queue?",
        "c": null,
        "o": [
            "deque",
            "defaultdict",
            "Counter",
            "namedtuple"
        ]
    },
    {
        "q": "What is the effect of `Counter('aabbc') + Counter('bccd')`?",
        "c": "from collections import Counter\nprint(Counter('aabbc') + Counter('bccd'))",
        "o": [
            "Counter({'b': 3, 'c': 3, 'a': 2, 'd': 1})",
            "Counter({'a': 2, 'b': 2, 'c': 2, 'd': 1})",
            "Counter({'a': 2, 'b': 3, 'c': 1, 'd': 1})",
            "Counter({'b': 2, 'c': 2})"
        ]
    },
    {
        "q": "What does this `reduce()` example return?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, [1]))",
        "o": [
            "1",
            "0",
            "TypeError",
            "None"
        ]
    },
    {
        "q": "Which of the following returns `True` if at least one element is truthy?",
        "c": "print(any([0, False, 5, '']))",
        "o": [
            "True",
            "False",
            "None",
            "Error"
        ]
    },
    {
        "q": "Which `itertools` function limits the iteration while condition is true?",
        "c": null,
        "o": [
            "takewhile",
            "dropwhile",
            "islice",
            "cycle"
        ]
    },
    {
        "q": "What does this code output?",
        "c": "from collections import namedtuple\nPerson = namedtuple('Person', ['name', 'age'])\np = Person('Sam', 30)\nprint(p[0])",
        "o": [
            "Sam",
            "30",
            "name",
            "age"
        ]
    },
    {
        "q": "What does `zip(['a', 'b'], [1, 2])` produce?",
        "c": "print(list(zip(['a', 'b'], [1, 2])))",
        "o": [
            "[('a', 1), ('b', 2)]",
            "[('a', 2), ('b', 1)]",
            "[('a',), ('b',), (1,), (2,)]",
            "[['a', 1], ['b', 2]]"
        ]
    },
    {
        "q": "Which of the following statements about `defaultdict` is correct?",
        "c": null,
        "o": [
            "It automatically creates default values for missing keys.",
            "It removes keys if the default is None.",
            "It raises a KeyError for missing keys.",
            "It requires keys to be strings only."
        ]
    },
    {
        "q": "What does this code using `map()` output?",
        "c": "print(list(map(len, ['apple', 'banana'])))",
        "o": [
            "[5, 6]",
            "[6, 5]",
            "[11]",
            "[['apple'], ['banana']]"
        ]
    },
    {
        "q": "What is the result of this heap operation?",
        "c": "import heapq\nnums = [3, 1, 4]\nheapq.heapify(nums)\nheapq.heappush(nums, 0)\nprint(nums[0])",
        "o": [
            "0",
            "1",
            "3",
            "4"
        ]
    },
    {
        "q": "What does `repeat('x', 3)` return?",
        "c": "from itertools import repeat\nprint(list(repeat('x', 3)))",
        "o": [
            "['x', 'x', 'x']",
            "['xxx']",
            "['x3']",
            "['x', 3]"
        ]
    },
    {
        "q": "Which `collections` tool would you use to count how many times words appear in a list?",
        "c": null,
        "o": [
            "Counter",
            "deque",
            "namedtuple",
            "OrderedDict"
        ]
    },
    {
        "q": "Which built-in function applies a predicate and keeps only items that return `True`?",
        "c": null,
        "o": [
            "filter",
            "map",
            "zip",
            "reduce"
        ]
    },
    {
        "q": "What is the use of `combinations_with_replacement()`?",
        "c": null,
        "o": [
            "It returns combinations where elements can repeat.",
            "It sorts input data before combining.",
            "It only returns non-repeating tuples.",
            "It returns all permutations of input."
        ]
    },
    {
        "q": "Which operation removes the rightmost element of a deque?",
        "c": null,
        "o": [
            "pop",
            "popleft",
            "remove",
            "discard"
        ]
    },
    {
        "q": "What does `Counter.most_common(1)` return?",
        "c": "from collections import Counter\nc = Counter('aabbbc')\nprint(c.most_common(1))",
        "o": [
            "[('b', 3)]",
            "[('a', 2)]",
            "[('c', 1)]",
            "[('a', 2), ('b', 3)]"
        ]
    },
    {
        "q": "What happens if you pass multiple iterables of different lengths to `map()`?",
        "c": "print(list(map(lambda x, y: x + y, [1, 2], [3])))",
        "o": [
            "[4]",
            "[4, 2]",
            "Error",
            "[1, 5]"
        ]
    },
    {
        "q": "Which function would you use to generate index-value pairs from an iterable?",
        "c": "for i, v in enumerate(['a', 'b']): print(i, v)",
        "o": [
            "0 a\n1 b",
            "a 0\nb 1",
            "[0, 'a'], [1, 'b']",
            "['a', 'b']"
        ]
    },
    {
        "q": "Which tool in `itertools` would create an iterator that returns elements from multiple iterables?",
        "c": null,
        "o": [
            "chain",
            "cycle",
            "repeat",
            "accumulate"
        ]
    },
    {
        "q": "What does `heapq.nlargest(1, [5, 3, 7])` return?",
        "c": null,
        "o": [
            "[7]",
            "[5]",
            "[3]",
            "[3, 5]"
        ]
    },
    {
        "q": "Which of these creates a new named tuple with fields 'x' and 'y'?",
        "c": null,
        "o": [
            "namedtuple('Point', ['x', 'y'])",
            "namedtuple(Point, x, y)",
            "namedtuple(['x', 'y'])",
            "namedtuple('x y', Point)"
        ]
    },
    {
        "q": "What is the result of this reduce function?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['a', 'b']))",
        "o": [
            "'ab'",
            "['a', 'b']",
            "TypeError",
            "'a+b'"
        ]
    },
    {
        "q": "Which of the following modules is used for efficient looping and combinatorial operations in Python?",
        "c": null,
        "o": [
            "itertools",
            "collections",
            "heapq",
            "functools"
        ]
    },
    {
        "q": "What will this code output using `Counter`?",
        "c": "from collections import Counter\nprint(Counter('mississippi').most_common(2))",
        "o": [
            "[('i', 4), ('s', 4)]",
            "[('s', 4), ('p', 2)]",
            "[('m', 1), ('i', 4)]",
            "[('p', 2), ('i', 4)]"
        ]
    },
    {
        "q": "What does this code return using `heapq`?",
        "c": "import heapq\nh = [1, 3, 5, 7, 9]\nprint(heapq.nsmallest(3, h))",
        "o": [
            "[1, 3, 5]",
            "[7, 9, 5]",
            "[9, 7, 5]",
            "[1, 3, 9]"
        ]
    },
    {
        "q": "What is the result of this `itertools.combinations_with_replacement()` call?",
        "c": "from itertools import combinations_with_replacement\nprint(list(combinations_with_replacement('AB', 2)))",
        "o": [
            "[('A', 'A'), ('A', 'B'), ('B', 'B')]",
            "[('A', 'B'), ('B', 'A')]",
            "[('A',), ('B',)]",
            "[('A', 'A'), ('B', 'A'), ('B', 'B')]"
        ]
    },
    {
        "q": "Which method removes the leftmost item from a deque?",
        "c": null,
        "o": [
            "popleft",
            "pop",
            "shiftleft",
            "delete"
        ]
    },
    {
        "q": "What is the output of this `filter()` usage?",
        "c": "print(list(filter(None, [0, '', 5, 'a'])))",
        "o": [
            "[5, 'a']",
            "[0, '', 5, 'a']",
            "[]",
            "[0, 'a']"
        ]
    },
    {
        "q": "What does `accumulate()` do when passed a list of numbers?",
        "c": "from itertools import accumulate\nprint(list(accumulate([2, 4, 6])))",
        "o": [
            "[2, 6, 12]",
            "[2, 4, 6]",
            "[2, 2, 2]",
            "[6, 4, 2]"
        ]
    },
    {
        "q": "Which `heapq` method is used to maintain a heap in sorted order during insertions and deletions?",
        "c": null,
        "o": [
            "heapreplace",
            "heappop",
            "heapsort",
            "heapremove"
        ]
    },
    {
        "q": "What is the result of mapping `str.lower` to a list of uppercase characters?",
        "c": "print(list(map(str.lower, ['A', 'B', 'C'])))",
        "o": [
            "['a', 'b', 'c']",
            "['A', 'B', 'C']",
            "['abc']",
            "['A', 'b', 'C']"
        ]
    },
    {
        "q": "Which method allows retrieving a field value by name from a `namedtuple`?",
        "c": "from collections import namedtuple\nPoint = namedtuple('Point', 'x y')\np = Point(1, 2)\nprint(p.x)",
        "o": [
            "1",
            "x",
            "2",
            "Error"
        ]
    },
    {
        "q": "What is the result of this `reduce()` function on a list of strings?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x + '-' + y, ['a', 'b', 'c']))",
        "o": [
            "a-b-c",
            "abc",
            "a b c",
            "['a', 'b', 'c']"
        ]
    },
    {
        "q": "What does `islice(range(10), 1, 5)` return?",
        "c": "from itertools import islice\nprint(list(islice(range(10), 1, 5)))",
        "o": [
            "[1, 2, 3, 4]",
            "[0, 1, 2, 3, 4]",
            "[1, 2, 3, 4, 5]",
            "[2, 3, 4, 5]"
        ]
    },
    {
        "q": "Which `collections` tool is ideal for creating fast appends and pops from both ends?",
        "c": null,
        "o": [
            "deque",
            "Counter",
            "defaultdict",
            "OrderedDict"
        ]
    },
    {
        "q": "What will this code return using `groupby()`?",
        "c": "from itertools import groupby\nprint([(k, list(g)) for k, g in groupby('AAABBC')])",
        "o": [
            "[('A', ['A', 'A', 'A']), ('B', ['B', 'B']), ('C', ['C'])]",
            "[('A', ['A']), ('A', ['A']), ('A', ['A'])]",
            "[('AA', ['A', 'A']), ('BB', ['B', 'B']), ('C', ['C'])]",
            "[('A', 3), ('B', 2), ('C', 1)]"
        ]
    },
    {
        "q": "What does `heappushpop(heap, item)` do?",
        "c": null,
        "o": [
            "Pushes the item and then pops and returns the smallest element",
            "Pops the smallest and pushes the item to the end",
            "Pushes and pops the largest item",
            "Returns the item without modifying the heap"
        ]
    },
    {
        "q": "What is the primary use of `itertools.count()`?",
        "c": null,
        "o": [
            "To generate an infinite sequence of numbers starting from a given value",
            "To count the elements of an iterable",
            "To group repeated values",
            "To create a finite range of numbers"
        ]
    },
    {
        "q": "What does this code print?",
        "c": "from collections import defaultdict\nd = defaultdict(list)\nd['x'].append(5)\nprint(d['x'])",
        "o": [
            "[5]",
            "[]",
            "KeyError",
            "None"
        ]
    },
    {
        "q": "Which function would you use to get only even numbers from a list?",
        "c": null,
        "o": [
            "filter",
            "map",
            "zip",
            "reduce"
        ]
    },
    {
        "q": "What does `heapq.heapreplace([1, 2, 3], 0)` return?",
        "c": "import heapq\nh = [1, 2, 3]\nheapq.heapify(h)\nprint(heapq.heapreplace(h, 0))",
        "o": [
            "1",
            "0",
            "2",
            "3"
        ]
    },
    {
        "q": "Which of the following best describes the output of `chain.from_iterable()`?",
        "c": "from itertools import chain\nprint(list(chain.from_iterable([[1, 2], [3, 4]])))",
        "o": [
            "[1, 2, 3, 4]",
            "[[1, 2], [3, 4]]",
            "[1, [2], 3, [4]]",
            "[[1], [2], [3], [4]]"
        ]
    },
    {
        "q": "How does `namedtuple` differ from a normal tuple?",
        "c": null,
        "o": [
            "It allows access by attribute name as well as index",
            "It can only store strings",
            "It automatically sorts fields",
            "It is mutable unlike a tuple"
        ]
    },
    {
        "q": "Which function returns True if **any** element in an iterable is true?",
        "c": "print(any([0, '', None, 7]))",
        "o": [
            "True",
            "False",
            "None",
            "Error"
        ]
    },
    {
        "q": "Which `itertools` tool returns all length-2 permutations of a list?",
        "c": "from itertools import permutations\nprint(list(permutations(['x', 'y', 'z'], 2)))",
        "o": [
            "[('x', 'y'), ('x', 'z'), ('y', 'x'), ('y', 'z'), ('z', 'x'), ('z', 'y')]",
            "[('x', 'y', 'z')]",
            "[('x', 'x'), ('y', 'y'), ('z', 'z')]",
            "[('x', 'y'), ('y', 'z')]"
        ]
    },
    {
        "q": "What does the following `map()` function return?",
        "c": "print(list(map(lambda x: x*2, [1, 2, 3])))",
        "o": [
            "[2, 4, 6]",
            "[1, 2, 3]",
            "[3, 2, 1]",
            "[1, 4, 9]"
        ]
    },
    {
        "q": "What is a `deque` best known for?",
        "c": null,
        "o": [
            "Efficient append and pop operations on both ends",
            "Sorting data quickly",
            "Counting frequencies",
            "Creating named fields"
        ]
    },
    {
        "q": "Which method gives you the smallest N elements in a heap?",
        "c": null,
        "o": [
            "nsmallest",
            "nlargest",
            "heappop",
            "heapreplace"
        ]
    },
    {
        "q": "Which of these is NOT part of `collections`?",
        "c": null,
        "o": [
            "heapq",
            "Counter",
            "defaultdict",
            "deque"
        ]
    },
    {
        "q": "What does `cycle('AB')` produce?",
        "c": "from itertools import cycle\nfrom itertools import islice\nprint(list(islice(cycle('AB'), 5)))",
        "o": [
            "['A', 'B', 'A', 'B', 'A']",
            "['AB', 'AB', 'AB']",
            "['A', 'B']",
            "['A', 'A', 'A', 'A', 'A']"
        ]
    },
    {
        "q": "What is the default start value for `itertools.count()`?",
        "c": "from itertools import count\nc = count()\nprint(next(c))",
        "o": [
            "0",
            "1",
            "None",
            "Error"
        ]
    },
    {
        "q": "Which of these functions performs a cumulative sum by default?",
        "c": null,
        "o": [
            "accumulate",
            "reduce",
            "sum",
            "groupby"
        ]
    },
    {
        "q": "What will be the output of this Counter subtraction?",
        "c": "from collections import Counter\nc1 = Counter('aabb')\nc2 = Counter('ab')\nprint(c1 - c2)",
        "o": [
            "Counter({'a': 1, 'b': 1})",
            "Counter({'a': 2, 'b': 2})",
            "Counter({'a': 0, 'b': 0})",
            "Counter({'ab': 1})"
        ]
    },
    {
        "q": "Which function from itertools can be used to skip elements while a condition is true?",
        "c": null,
        "o": [
            "dropwhile",
            "takewhile",
            "islice",
            "accumulate"
        ]
    },
    {
        "q": "What will the following namedtuple code print?",
        "c": "from collections import namedtuple\nPerson = namedtuple('Person', 'name age')\np = Person('John', 25)\nprint(p.name, p.age)",
        "o": [
            "John 25",
            "name age",
            "('John', 25)",
            "Person(name='John', age=25)"
        ]
    },
    {
        "q": "Which `heapq` function returns the k largest elements from the iterable?",
        "c": null,
        "o": [
            "nlargest",
            "nsmallest",
            "heappop",
            "heapreplace"
        ]
    },
    {
        "q": "What is the behavior of this filter expression?",
        "c": "print(list(filter(lambda x: x > 2, [1, 2, 3, 4])))",
        "o": [
            "[3, 4]",
            "[1, 2]",
            "[2, 3]",
            "[1, 2, 3, 4]"
        ]
    },
    {
        "q": "What is the effect of `reduce(lambda x, y: x * y, range(1, 5))`?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, range(1, 5)))",
        "o": [
            "24",
            "10",
            "15",
            "20"
        ]
    },
    {
        "q": "What is the purpose of `chain()` in itertools?",
        "c": null,
        "o": [
            "To combine multiple iterables into a single iterable",
            "To create repeated cycles",
            "To accumulate values",
            "To group values by a key"
        ]
    },
    {
        "q": "What does `deque.extendleft('abc')` do?",
        "c": "from collections import deque\nd = deque()\nd.extendleft('abc')\nprint(list(d))",
        "o": [
            "['c', 'b', 'a']",
            "['a', 'b', 'c']",
            "['abc']",
            "['a']"
        ]
    },
    {
        "q": "Which of the following returns only distinct combinations?",
        "c": "from itertools import combinations\nprint(list(combinations('abc', 2)))",
        "o": [
            "[('a', 'b'), ('a', 'c'), ('b', 'c')]",
            "[('a', 'a'), ('b', 'b'), ('c', 'c')]",
            "[('a', 'b'), ('b', 'a')]",
            "[('a',), ('b',), ('c',)]"
        ]
    },
    {
        "q": "Which of the following will return `True`?",
        "c": "print(all([True, 1, 'yes']))",
        "o": [
            "True",
            "False",
            "None",
            "Error"
        ]
    },
    {
        "q": "Which function best mimics a stack structure?",
        "c": null,
        "o": [
            "append + pop on list or deque",
            "Counter",
            "heapq.heappop",
            "defaultdict"
        ]
    },
    {
        "q": "What is the output of this `map()` function?",
        "c": "print(list(map(lambda x: x**2, range(3))))",
        "o": [
            "[0, 1, 4]",
            "[1, 2, 3]",
            "[2, 4, 6]",
            "[0, 1, 2, 3]"
        ]
    },
    {
        "q": "What is the result of this heapq call?",
        "c": "import heapq\nheap = [3, 5, 1]\nheapq.heapify(heap)\nheapq.heappush(heap, 0)\nprint(heap[0])",
        "o": [
            "0",
            "1",
            "3",
            "5"
        ]
    },
    {
        "q": "What does `groupby(sorted('bananas'))` group by?",
        "c": "from itertools import groupby\nprint([(k, list(g)) for k, g in groupby(sorted('bananas'))])",
        "o": [
            "[('a', ['a', 'a', 'a']), ('b', ['b']), ('n', ['n', 'n']), ('s', ['s'])]",
            "[('b', ['b']), ('a', ['a']), ('n', ['n']), ('a', ['a']), ('n', ['n']), ('a', ['a']), ('s', ['s'])]",
            "[('banana', ['banana'])]",
            "[('a', ['a']), ('n', ['n'])]"
        ]
    },
    {
        "q": "Which function is used to convert a list of pairs into a dictionary?",
        "c": "pairs = [('a', 1), ('b', 2)]\nprint(dict(pairs))",
        "o": [
            "{'a': 1, 'b': 2}",
            "[('a', 1), ('b', 2)]",
            "{1: 'a', 2: 'b'}",
            "['a', 'b', 1, 2]"
        ]
    },
    {
        "q": "Which of these functions from `itertools` returns elements from the input iterable as long as the predicate is true?",
        "c": null,
        "o": [
            "takewhile",
            "dropwhile",
            "islice",
            "cycle"
        ]
    },
    {
        "q": "What will the following code output using `defaultdict`?",
        "c": "from collections import defaultdict\nd = defaultdict(lambda: 'N/A')\nprint(d['missing'])",
        "o": [
            "N/A",
            "KeyError",
            "None",
            "missing"
        ]
    },
    {
        "q": "What does `heappop()` return from the heap?",
        "c": "import heapq\nh = [4, 1, 3]\nheapq.heapify(h)\nprint(heapq.heappop(h))",
        "o": [
            "1",
            "3",
            "4",
            "None"
        ]
    },
    {
        "q": "What is the result of applying `reduce()` to a list of strings?",
        "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['Hello', ' ', 'World']))",
        "o": [
            "Hello World",
            "['Hello', ' ', 'World']",
            "Hello",
            "World"
        ]
    },
    {
        "q": "Which function will combine `['a', 'b']` and `[1, 2]` into pairs?",
        "c": "print(list(zip(['a', 'b'], [1, 2])))",
        "o": [
            "[('a', 1), ('b', 2)]",
            "[('a', 'b', 1, 2)]",
            "[['a', 1], ['b', 2]]",
            "['a1', 'b2']"
        ]
    },
    {
        "q": "Which built-in function applies a function to each item and returns a map object?",
        "c": null,
        "o": [
            "map",
            "filter",
            "zip",
            "sorted"
        ]
    },
    {
        "q": "Which is the correct way to find 3 largest numbers using `heapq`?",
        "c": "import heapq\nprint(heapq.nlargest(3, [10, 1, 23, 5, 8]))",
        "o": [
            "[23, 10, 8]",
            "[1, 5, 8]",
            "[10, 23, 8]",
            "[23, 5, 10]"
        ]
    },
    {
        "q": "Which collections tool allows you to treat a tuple like an object with named fields?",
        "c": null,
        "o": [
            "namedtuple",
            "tuplefield",
            "structtuple",
            "keytuple"
        ]
    },
    {
        "q": "What is the output of the following `filter()` code?",
        "c": "print(list(filter(lambda x: x.isdigit(), ['a', '2', 'b', '4'])))",
        "o": [
            "['2', '4']",
            "['a', 'b']",
            "[2, 4]",
            "[]"
        ]
    },
    {
        "q": "What will `accumulate()` return when used with multiplication?",
        "c": "from itertools import accumulate\nimport operator\nprint(list(accumulate([1, 2, 3, 4], operator.mul)))",
        "o": [
            "[1, 2, 6, 24]",
            "[1, 3, 6, 10]",
            "[2, 4, 6, 8]",
            "[1, 4, 9, 16]"
        ]
    },
    {
        "q": "What does `deque.clear()` do?",
        "c": "from collections import deque\nd = deque([1, 2, 3])\nd.clear()\nprint(d)",
        "o": [
            "deque([])",
            "None",
            "[1, 2, 3]",
            "Error"
        ]
    },
    {
        "q": "Which function will return a running minimum using `accumulate()`?",
        "c": "from itertools import accumulate\nimport operator\nprint(list(accumulate([5, 3, 6, 2], min)))",
        "o": [
            "[5, 3, 3, 2]",
            "[5, 8, 14, 16]",
            "[2, 3, 5, 6]",
            "[6, 3, 5, 2]"
        ]
    },
    {
        "q": "Which of the following will group a sequence of letters into identical consecutive groups?",
        "c": "from itertools import groupby\nprint([(k, list(g)) for k, g in groupby('AAABBBAAC')])",
        "o": [
            "[('A', ['A', 'A', 'A']), ('B', ['B', 'B', 'B']), ('A', ['A', 'A']), ('C', ['C'])]",
            "[('A', ['A']), ('B', ['B']), ('C', ['C'])]",
            "[('A', ['A', 'B', 'C'])]",
            "[('A', 'B', 'C')]"
        ]
    },
    {
        "q": "Which method is used to access the fields of a namedtuple as an ordered dictionary?",
        "c": "from collections import namedtuple\nPoint = namedtuple('Point', ['x', 'y'])\np = Point(3, 4)\nprint(p._asdict())",
        "o": [
            "{'x': 3, 'y': 4}",
            "['x': 3, 'y': 4]",
            "(3, 4)",
            "{x: 3, y: 4}"
        ]
    },
    {
        "q": "Which of the following would best suit a LIFO stack structure?",
        "c": null,
        "o": [
            "list with append() and pop()",
            "deque with appendleft() and popleft()",
            "heapq with heappush() and heappop()",
            "Counter with update() and subtract()"
        ]
    },
  {
    "q": "Which of the following statements about `Counter` subtraction is true?",
    "c": "from collections import Counter\nc1 = Counter(a=3, b=1)\nc2 = Counter(a=1, b=2)\nprint(c1 - c2)",
    "o": [
      "Counter({'a': 2})",
      "Counter({'b': -1})",
      "Counter({'a': 4, 'b': 3})",
      "Counter({'a': 1, 'b': 1})"
    ]
  },
  {
    "q": "Which itertools function creates an iterator returning accumulated sums?",
    "c": null,
    "o": [
      "accumulate",
      "combinations",
      "product",
      "permutations"
    ]
  },
  {
    "q": "What does this code print?\n\n```python\nfrom collections import deque\nd = deque([1, 2, 3])\nd.rotate(1)\nprint(list(d))\n```",
    "c": null,
    "o": [
      "[3, 1, 2]",
      "[2, 3, 1]",
      "[1, 2, 3]",
      "[3, 2, 1]"
    ]
  },
  {
    "q": "What is the output of the following heapq operation?\n\n```python\nimport heapq\nh = [5, 7, 9, 1, 3]\nheapq.heapify(h)\nheapq.heappop(h)\nprint(h)\n```",
    "c": null,
    "o": [
      "[3, 5, 9, 7]",
      "[1, 3, 5, 7, 9]",
      "[5, 7, 9, 3]",
      "[7, 9, 5, 3]"
    ]
  },
  {
    "q": "Which function would you use to apply a function to all elements of an iterable and filter the results based on a condition?",
    "c": null,
    "o": [
      "Use `map` followed by `filter`",
      "Use `filter` followed by `map`",
      "Use `reduce` followed by `map`",
      "Use `zip` followed by `filter`"
    ]
  },
  {
    "q": "What does `itertools.product('AB', repeat=2)` generate?",
    "c": "from itertools import product\nprint(list(product('AB', repeat=2)))",
    "o": [
      "[('A', 'A'), ('A', 'B'), ('B', 'A'), ('B', 'B')]",
      "[('A', 'B')]",
      "[('A',), ('B',)]",
      "[('AB', 'AB')]"
    ]
  },
  {
    "q": "What is a key difference between a `defaultdict` and a regular Python dictionary?",
    "c": null,
    "o": [
      "`defaultdict` provides a default value for missing keys",
      "Regular dicts allow duplicate keys",
      "`defaultdict` sorts the keys automatically",
      "Regular dicts can only use strings as keys"
    ]
  },
  {
    "q": "Which of these functions can be used to combine multiple iterables element-wise?",
    "c": null,
    "o": [
      "zip",
      "chain",
      "accumulate",
      "combinations"
    ]
  },
  {
    "q": "What does this code snippet output?\n\n```python\nfrom functools import reduce\nprint(reduce(lambda x, y: x*y, [1, 2, 3, 4]))\n```",
    "c": null,
    "o": [
      "24",
      "10",
      "1234",
      "Error"
    ]
  },
  {
    "q": "Which method of a `deque` removes and returns an element from the right end?",
    "c": null,
    "o": [
      "pop",
      "popleft",
      "remove",
      "clear"
    ]
  },
  {
    "q": "What does `defaultdict(int)` do when accessing a missing key?",
    "c": null,
    "o": [
      "Returns 0 as the default value",
      "Raises a KeyError",
      "Returns None",
      "Returns an empty string"
    ]
  },
  {
    "q": "How does `heapq.heappush()` affect a heap?",
    "c": null,
    "o": [
      "Adds a new element and maintains heap order",
      "Removes the smallest element",
      "Sorts the heap in ascending order",
      "Removes the largest element"
    ]
  },
  {
    "q": "What is the output of this itertools function?\n\n```python\nfrom itertools import permutations\nprint(list(permutations('AB', 2)))\n```",
    "c": null,
    "o": [
      "[('A', 'B'), ('B', 'A')]",
      "[('A', 'A'), ('B', 'B')]",
      "[('A',), ('B',)]",
      "[('AB', 'BA')]"
    ]
  },
  {
    "q": "Which function applies a function to each element and filters out elements returning False?",
    "c": null,
    "o": [
      "filter",
      "map",
      "reduce",
      "zip"
    ]
  },
  {
    "q": "What does this code output?\n\n```python\nfrom collections import Counter\nc = Counter('aabbcc')\nprint(c.most_common(2))\n```",
    "c": null,
    "o": [
      "[('a', 2), ('b', 2)]",
      "[('c', 2), ('b', 2)]",
      "[('a', 1), ('b', 1)]",
      "[('a', 2), ('b', 1)]"
    ]
  },
  {
    "q": "What is the main purpose of `namedtuple`?",
    "c": null,
    "o": [
      "To create tuple subclasses with named fields",
      "To create mutable dictionaries",
      "To create ordered dictionaries",
      "To create heaps"
    ]
  },
  {
    "q": "What will this `map` function produce?\n\n```python\nprint(list(map(str.upper, ['abc', 'def'])))\n```",
    "c": null,
    "o": [
      "['ABC', 'DEF']",
      "['abc', 'def']",
      "['Abc', 'Def']",
      "['aBc', 'dEf']"
    ]
  },
  {
    "q": "What does `heapq.nlargest(2, [1,3,5,7])` return?",
    "c": null,
    "o": [
      "[7, 5]",
      "[1, 3]",
      "[3, 5]",
      "[5, 7, 1]"
    ]
  },
  {
    "q": "Which itertools function creates repeated elements indefinitely?",
    "c": null,
    "o": [
      "cycle",
      "count",
      "repeat",
      "accumulate"
    ]
  },
  {
    "q": "Which of the following correctly creates a defaultdict with list as default factory?",
    "c": null,
    "o": [
      "defaultdict(list)",
      "defaultdict(dict)",
      "defaultdict(int)",
      "defaultdict()"
    ]
  },
  {
    "q": "What will `Counter('abbccc')` return?",
    "c": "from collections import Counter\nprint(Counter('abbccc'))",
    "o": [
      "Counter({'c': 3, 'b': 2, 'a': 1})",
      "Counter({'a': 3, 'b': 2, 'c': 1})",
      "Counter({'a': 1, 'b': 1, 'c': 1})",
      "Counter({'c': 1, 'b': 2, 'a': 3})"
    ]
  },
  {
    "q": "What is the output of this itertools `product` call?\n\n```python\nfrom itertools import product\nprint(list(product('AB', '12')))\n```",
    "c": null,
    "o": [
      "[('A', '1'), ('A', '2'), ('B', '1'), ('B', '2')]",
      "[('AB', '12')]",
      "[('A', 'B', '1', '2')]",
      "[('1', '2', 'A', 'B')]"
    ]
  },
  {
    "q": "Which function would you use to convert a list of key-value pairs into a dictionary?",
    "c": null,
    "o": [
      "dict()",
      "list()",
      "tuple()",
      "set()"
    ]
  },
  {
    "q": "What does this code do?\n\n```python\nfrom collections import deque\nd = deque('abc')\nd.appendleft('z')\nprint(list(d))\n```",
    "c": null,
    "o": [
      "['z', 'a', 'b', 'c']",
      "['a', 'b', 'c', 'z']",
      "['a', 'b', 'z', 'c']",
      "['z', 'c', 'b', 'a']"
    ]
  },
  {
    "q": "Which built-in function can be used to reduce a list to a single cumulative value?",
    "c": null,
    "o": [
      "reduce",
      "map",
      "filter",
      "zip"
    ]
  },
  {
    "q": "What does `heapq.heapify()` do to a list?",
    "c": null,
    "o": [
      "Transforms it into a heap, in-place, in linear time",
      "Sorts the list in ascending order",
      "Removes duplicates",
      "Converts the list to a deque"
    ]
  },
  {
    "q": "What will be printed by this code?\n\n```python\nprint(list(filter(None, [0, '', None, 'Python'])))\n```",
    "c": null,
    "o": [
      "['Python']",
      "[0, '', None, 'Python']",
      "[]",
      "[0]"
    ]
  },
  {
    "q": "Which itertools function produces an infinite sequence starting from a specified number?",
    "c": null,
    "o": [
      "count",
      "cycle",
      "repeat",
      "chain"
    ]
  },
  {
    "q": "What is the purpose of the `namedtuple` method `_replace()`?",
    "c": "from collections import namedtuple\nPoint = namedtuple('Point', 'x y')\np = Point(1, 2)\nprint(p._replace(x=3))",
    "o": [
      "Returns a new namedtuple with the specified fields replaced",
      "Changes the value of the field in place",
      "Deletes the field",
      "Raises an error"
    ]
  },
  {
    "q": "Which method of `deque` removes and returns an element from the left end?",
    "c": null,
    "o": [
      "popleft",
      "pop",
      "remove",
      "clear"
    ]
  },
  {
    "q": "Which of the following can be used to create a double-ended queue in Python?",
    "c": null,
    "o": [
      "collections.deque",
      "collections.Counter",
      "heapq.heapify",
      "itertools.combinations"
    ]
  },
  {
    "q": "What is the output of the following code using Counter?",
    "c": "from collections import Counter\nprint(Counter('banana'))",
    "o": [
      "Counter({'a': 3, 'b': 1, 'n': 2})",
      "Counter({'b': 1, 'a': 2, 'n': 3})",
      "Counter(['b', 'a', 'n', 'a', 'n', 'a'])",
      "Counter(('banana'))"
    ]
  },
  {
    "q": "Which collection type returns a default value if the key is not found?",
    "c": null,
    "o": [
      "defaultdict",
      "Counter",
      "OrderedDict",
      "namedtuple"
    ]
  },
  {
    "q": "Which function from itertools returns r-length tuples of elements from the input iterable?",
    "c": null,
    "o": [
      "combinations",
      "permutations",
      "product",
      "repeat"
    ]
  },
  {
    "q": "Which function would you use to get all possible orderings of elements in an iterable?",
    "c": null,
    "o": [
      "itertools.permutations",
      "itertools.combinations",
      "itertools.product",
      "itertools.chain"
    ]
  },
  {
    "q": "What does the following code return?",
    "c": "from heapq import heappush, heappop\nheap = []\nheappush(heap, 3)\nheappush(heap, 1)\nheappush(heap, 4)\nprint(heappop(heap))",
    "o": [
      "1",
      "3",
      "4",
      "None"
    ]
  },
  {
    "q": "Which built-in function is used to apply a function to all items in an iterable?",
    "c": null,
    "o": [
      "map",
      "filter",
      "reduce",
      "all"
    ]
  },
  {
    "q": "What will be the result of the following code?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, [1, 2, 3, 4]))",
    "o": [
      "10",
      "24",
      "None",
      "[1, 2, 3, 4]"
    ]
  },
  {
    "q": "Which function filters elements based on a condition?",
    "c": null,
    "o": [
      "filter",
      "map",
      "reduce",
      "zip"
    ]
  },
  {
    "q": "What is the output of this namedtuple example?",
    "c": "from collections import namedtuple\nPoint = namedtuple('Point', ['x', 'y'])\np = Point(1, 2)\nprint(p.x)",
    "o": [
      "1",
      "2",
      "x",
      "y"
    ]
  },
  {
    "q": "Which of the following is used to create a named tuple with fields 'name' and 'age'?",
    "c": null,
    "o": [
      "namedtuple('Person', ['name', 'age'])",
      "namedtuple('name', 'age')",
      "namedtuple(['name', 'age'], 'Person')",
      "namedtuple('name=Person', ['name', 'age'])"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "from collections import defaultdict\nd = defaultdict(int)\nd['a'] += 1\nprint(d['a'])",
    "o": [
      "1",
      "0",
      "None",
      "KeyError"
    ]
  },
  {
    "q": "Which method from heapq transforms a list into a heap in-place?",
    "c": null,
    "o": [
      "heapify",
      "heappop",
      "heappush",
      "heapreplace"
    ]
  },
  {
    "q": "What will be the result of the following code?",
    "c": "import heapq\nnums = [5, 3, 2, 8]\nheapq.heapify(nums)\nprint(nums[0])",
    "o": [
      "2",
      "3",
      "5",
      "8"
    ]
  },
  {
    "q": "Which itertools function can be used to create an iterator that returns elements from the iterable as long as the predicate is true?",
    "c": null,
    "o": [
      "takewhile",
      "dropwhile",
      "filterfalse",
      "cycle"
    ]
  },
  {
    "q": "What is the result of the following code?",
    "c": "import itertools\nfor i in itertools.islice(range(10), 3, 6):\n    print(i, end=' ')",
    "o": [
      "3 4 5 ",
      "0 1 2 ",
      "6 7 8 ",
      "3 4 5 6 "
    ]
  },
  {
    "q": "What will the following code return?",
    "c": "from collections import Counter\nprint(Counter([1, 2, 2, 3, 3, 3]).most_common(1))",
    "o": [
      "[(3, 3)]",
      "[(1, 1)]",
      "[(2, 2)]",
      "[(1, 2)]"
    ]
  },
  {
    "q": "Which function from functools is used to perform a cumulative operation on a list?",
    "c": null,
    "o": [
      "reduce",
      "accumulate",
      "chain",
      "groupby"
    ]
  },
  {
    "q": "Which of the following returns an iterator that produces elements indefinitely?",
    "c": null,
    "o": [
      "itertools.cycle",
      "itertools.chain",
      "itertools.combinations",
      "itertools.zip_longest"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "from itertools import combinations\nprint(list(combinations([1, 2, 3], 2)))",
    "o": [
      "[(1, 2), (1, 3), (2, 3)]",
      "[(1, 2), (2, 3), (3, 1)]",
      "[(1, 2), (2, 1), (1, 3)]",
      "[(1, 2, 3)]"
    ]
  },
  {
    "q": "Which of the following will create a Counter object with the elements and their counts?",
    "c": null,
    "o": [
      "Counter(['a', 'b', 'a', 'c', 'b', 'a'])",
      "Counter('a=3, b=2, c=1')",
      "Counter({'a', 'b', 'c'})",
      "Counter.fromkeys(['a', 'b', 'c'])"
    ]
  },
  {
    "q": "What will be the result of the following code?",
    "c": "from itertools import product\nprint(list(product([1, 2], repeat=2)))",
    "o": [
      "[(1, 1), (1, 2), (2, 1), (2, 2)]",
      "[(1, 2), (2, 1)]",
      "[(1, 1), (2, 2)]",
      "[(1, 2, 1, 2)]"
    ]
  },
  {
    "q": "Which function is used to group consecutive elements with the same key?",
    "c": null,
    "o": [
      "itertools.groupby",
      "collections.Counter",
      "itertools.chain",
      "functools.reduce"
    ]
  },
  {
    "q": "What is the output of the following deque operation?",
    "c": "from collections import deque\nd = deque([1, 2, 3])\nd.appendleft(0)\nprint(d)",
    "o": [
      "deque([0, 1, 2, 3])",
      "deque([1, 2, 3, 0])",
      "[0, 1, 2, 3]",
      "(0, 1, 2, 3)"
    ]
  },
  {
    "q": "Which of the following removes and returns the smallest element from a heap?",
    "c": null,
    "o": [
      "heappop",
      "heapreplace",
      "heapify",
      "heappushpop"
    ]
  },
  {
    "q": "What is the result of this code using map()?",
    "c": "nums = [1, 2, 3]\nresult = map(lambda x: x * 2, nums)\nprint(list(result))",
    "o": [
      "[2, 4, 6]",
      "[1, 2, 3]",
      "[1, 4, 9]",
      "[1, 2, 6]"
    ]
  },
  {
    "q": "Which of these functions returns a new iterator with results only if the condition is true?",
    "c": null,
    "o": [
      "filter",
      "map",
      "reduce",
      "count"
    ]
  },
  {
    "q": "What does this reduce() call compute?",
    "c": "from functools import reduce\nreduce(lambda x, y: x * y, [1, 2, 3, 4])",
    "o": [
      "24",
      "10",
      "0",
      "1"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "from collections import namedtuple\nCar = namedtuple('Car', 'make model year')\nc = Car('Toyota', 'Corolla', 2020)\nprint(c.model)",
    "o": [
      "Corolla",
      "Toyota",
      "2020",
      "Car(model='Corolla')"
    ]
  },
  {
    "q": "Which method is used to extend the right end of a deque with multiple values?",
    "c": null,
    "o": [
      "extend",
      "append",
      "appendleft",
      "extendleft"
    ]
  },
  {
    "q": "What will be the output of the following code using defaultdict?",
    "c": "from collections import defaultdict\nd = defaultdict(list)\nd['x'].append(10)\nprint(d['x'])",
    "o": [
      "[10]",
      "10",
      "[]",
      "KeyError"
    ]
  },
  {
    "q": "Which of the following can be used to merge multiple iterables into a single iterator?",
    "c": null,
    "o": [
      "itertools.chain",
      "itertools.cycle",
      "itertools.repeat",
      "itertools.groupby"
    ]
  },
  {
    "q": "Which function creates all r-length tuples of elements with replacement?",
    "c": null,
    "o": [
      "itertools.product",
      "itertools.permutations",
      "itertools.combinations",
      "itertools.zip_longest"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "import heapq\nh = [20, 15, 30]\nheapq.heapify(h)\nheapq.heappush(h, 10)\nprint(h[0])",
    "o": [
      "10",
      "15",
      "20",
      "30"
    ]
  },
  {
    "q": "What does the reduce function return if applied on an empty list without initializer?",
    "c": null,
    "o": [
      "TypeError",
      "0",
      "[]",
      "None"
    ]
  },
  {
    "q": "Which function will run indefinitely yielding the same value?",
    "c": null,
    "o": [
      "itertools.repeat",
      "itertools.cycle",
      "itertools.chain",
      "itertools.combinations"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "from collections import Counter\nc1 = Counter(a=2, b=1)\nc2 = Counter(a=1, b=2)\nprint(c1 + c2)",
    "o": [
      "Counter({'a': 3, 'b': 3})",
      "Counter({'a': 1, 'b': 2})",
      "Counter({'a': 1, 'b': 1})",
      "Counter({'a': 2, 'b': 2})"
    ]
  },
  {
    "q": "Which function in heapq pops the smallest and pushes a new element in one operation?",
    "c": null,
    "o": [
      "heappushpop",
      "heappop",
      "heapreplace",
      "heapify"
    ]
  },
  {
    "q": "What is the purpose of itertools.zip_longest()?",
    "c": null,
    "o": [
      "Zip iterables to the longest length, filling missing values",
      "Zip iterables to the shortest length",
      "Repeat values indefinitely",
      "Create Cartesian product of inputs"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "from collections import namedtuple\nPerson = namedtuple('Person', 'name age')\np = Person(name='Alice', age=30)\nprint(p._fields)",
    "o": [
      "('name', 'age')",
      "['name', 'age']",
      "{'name', 'age'}",
      "('Person', 'name', 'age')"
    ]
  },
  {
    "q": "What does the following code return?",
    "c": "from itertools import count\ncounter = count(start=5, step=2)\nprint(next(counter), next(counter), next(counter))",
    "o": [
      "5 7 9",
      "1 2 3",
      "2 4 6",
      "5 6 7"
    ]
  },
  {
    "q": "Which of the following will create a deque with a maximum length of 3?",
    "c": null,
    "o": [
      "deque(maxlen=3)",
      "deque(length=3)",
      "deque(3)",
      "deque(limit=3)"
    ]
  },
  {
    "q": "What does this heapq function do: heapq.nlargest(2, [1, 3, 5, 7, 9])?",
    "c": null,
    "o": [
      "[9, 7]",
      "[1, 3]",
      "[7, 5]",
      "[1, 3, 5, 7, 9]"
    ]
  },
  {
    "q": "Which of the following statements about map() is correct?",
    "c": null,
    "o": [
      "It applies a function to each item in an iterable and returns a map object",
      "It filters items in an iterable based on a function",
      "It combines elements from multiple iterables",
      "It returns the first item that meets a condition"
    ]
  },
  {
    "q": "Which itertools function can be used to skip items as long as a condition is true?",
    "c": null,
    "o": [
      "dropwhile",
      "takewhile",
      "filterfalse",
      "compress"
    ]
  },
  {
    "q": "What is the output of this code using Counter subtraction?",
    "c": "from collections import Counter\nc1 = Counter(a=4, b=2)\nc2 = Counter(a=1, b=3)\nprint(c1 - c2)",
    "o": [
      "Counter({'a': 3})",
      "Counter({'b': -1})",
      "Counter({'a': 5, 'b': 5})",
      "Counter({'a': 1, 'b': -1})"
    ]
  },
  {
    "q": "Which function would best be used to combine two lists element by element?",
    "c": null,
    "o": [
      "zip",
      "map",
      "chain",
      "combinations"
    ]
  },
  {
    "q": "Which method is used to remove elements from both ends of a deque?",
    "c": null,
    "o": [
      "popleft and pop",
      "remove and delete",
      "del and clear",
      "shift and unshift"
    ]
  },
  {
    "q": "What is the result of this reduce operation?",
    "c": "from functools import reduce\nreduce(lambda x, y: x - y, [10, 2, 1])",
    "o": [
      "7",
      "9",
      "11",
      "None"
    ]
  },
  {
    "q": "What does this code print?",
    "c": "from collections import namedtuple\nBook = namedtuple('Book', 'title author')\nb = Book._make(['1984', 'Orwell'])\nprint(b)",
    "o": [
      "Book(title='1984', author='Orwell')",
      "('1984', 'Orwell')",
      "Book(1984, Orwell)",
      "['1984', 'Orwell']"
    ]
  },
  {
    "q": "What does the following code return?",
    "c": "from collections import defaultdict\nd = defaultdict(int)\nd['a'] += 2\nd['b'] += 1\nprint(d)",
    "o": [
      "defaultdict(<class 'int'>, {'a': 2, 'b': 1})",
      "{'a': 2, 'b': 1}",
      "defaultdict({'a': 2, 'b': 1})",
      "defaultdict({'a': 2, 'b': 2})"
    ]
  },
  {
    "q": "Which itertools function returns the longest sequence by filling the shorter sequences with a fill value?",
    "c": null,
    "o": [
      "itertools.zip_longest",
      "itertools.chain",
      "itertools.count",
      "itertools.product"
    ]
  },
  {
    "q": "Which of the following heapq functions will remove and return the smallest item from the heap?",
    "c": null,
    "o": [
      "heappop",
      "heappush",
      "heapreplace",
      "heapify"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "from itertools import islice\nprint(list(islice(range(10), 5, 8)))",
    "o": [
      "[5, 6, 7]",
      "[0, 1, 2, 3, 4]",
      "[8, 9]",
      "[5, 6]"
    ]
  },
  {
    "q": "Which of the following statements about the deque is correct?",
    "c": null,
    "o": [
      "Deque supports adding/removing elements from both ends efficiently",
      "Deque can only be used with numeric data types",
      "Deque does not allow resizing",
      "Deque only supports adding/removing elements from the right end"
    ]
  },
  {
    "q": "What is the output of the following code using Counter?",
    "c": "from collections import Counter\nc = Counter(['apple', 'banana', 'apple', 'orange'])\nprint(c.most_common(1))",
    "o": [
      "[('apple', 2)]",
      "[('banana', 1)]",
      "[('orange', 1)]",
      "[('banana', 2)]"
    ]
  },
  {
    "q": "Which itertools function returns all combinations of an iterable with a specified length?",
    "c": null,
    "o": [
      "itertools.combinations",
      "itertools.permutations",
      "itertools.product",
      "itertools.cycle"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "from collections import namedtuple\nCar = namedtuple('Car', 'make model year')\nmy_car = Car(make='Tesla', model='Model 3', year=2023)\nprint(my_car[0])",
    "o": [
      "Tesla",
      "Model 3",
      "2023",
      "Car(make='Tesla', model='Model 3', year=2023)"
    ]
  },
  {
    "q": "Which of the following functions returns an iterator over all items of a sequence?",
    "c": null,
    "o": [
      "itertools.chain",
      "itertools.islice",
      "itertools.cycle",
      "itertools.accumulate"
    ]
  },
  {
    "q": "What does the following reduce operation return?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [1, 2, 3, 4]))",
    "o": [
      "24",
      "10",
      "1",
      "None"
    ]
  },
  {
    "q": "What will be the output of the following code using deque?",
    "c": "from collections import deque\nd = deque([1, 2, 3, 4])\nd.rotate(1)\nprint(d)",
    "o": [
      "deque([4, 1, 2, 3])",
      "deque([1, 2, 3, 4])",
      "deque([2, 3, 4, 1])",
      "deque([3, 4, 1, 2])"
    ]
  },
  {
    "q": "Which function is used to compute the cumulative sum of an iterable in itertools?",
    "c": null,
    "o": [
      "accumulate",
      "reduce",
      "chain",
      "combinations"
    ]
  },
  {
    "q": "What is the result of the following code using heapq?",
    "c": "import heapq\nh = [5, 1, 3]\nheapq.heapify(h)\nheapq.heappush(h, 2)\nheapq.heappop(h)\nprint(h)",
    "o": [
      "[2, 5, 3]",
      "[1, 3, 2]",
      "[2, 5]",
      "[3, 5, 2]"
    ]
  },
  {
    "q": "Which method adds multiple elements to the left of a deque?",
    "c": null,
    "o": [
      "extendleft",
      "appendleft",
      "append",
      "extend"
    ]
  },
  {
    "q": "What does this code return?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, [], 10))",
    "o": [
      "10",
      "0",
      "[]",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following can create a tuple-like object with named fields?",
    "c": null,
    "o": [
      "namedtuple",
      "defaultdict",
      "Counter",
      "deque"
    ]
  },
  {
    "q": "What does the following itertools function do: permutations([1, 2], 2)?",
    "c": null,
    "o": [
      "Returns all possible orderings of 2 elements from the list",
      "Returns all unique combinations of 2 elements from the list",
      "Returns the Cartesian product of the list with itself",
      "Returns a list of repeated 2s"
    ]
  },
  {
    "q": "Which of the following operations returns a shallow copy of a deque?",
    "c": null,
    "o": [
      "copy",
      "clone",
      "duplicate",
      "mirror"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "from collections import Counter\nc = Counter('success')\nprint(c['s'])",
    "o": [
      "3",
      "2",
      "1",
      "0"
    ]
  },
  {
    "q": "Which of the following tools combines multiple iterables element-wise until the shortest is exhausted?",
    "c": null,
    "o": [
      "zip",
      "zip_longest",
      "chain",
      "map"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "from collections import Counter\nc = Counter({'a': 2, 'b': 3})\nc.update({'a': 1, 'b': 1, 'c': 2})\nprint(c)",
    "o": [
      "Counter({'b': 4, 'a': 3, 'c': 2})",
      "Counter({'a': 1, 'b': 1, 'c': 2})",
      "Counter({'a': 2, 'b': 3})",
      "Counter({'a': 3, 'b': 4})"
    ]
  },
  {
    "q": "Which of the following statements about itertools.count() is correct?",
    "c": null,
    "o": [
      "It returns an infinite iterator starting from a number with an optional step",
      "It counts the number of elements in an iterable",
      "It is used to group elements",
      "It creates combinations of a list"
    ]
  },
  {
    "q": "Which heapq function returns the n smallest elements from a list?",
    "c": null,
    "o": [
      "nsmallest",
      "nlargest",
      "heapify",
      "heappushpop"
    ]
  },
  {
    "q": "What does this code return?",
    "c": "from collections import deque\nd = deque([1, 2, 3])\nd.pop()\nd.popleft()\nprint(d)",
    "o": [
      "deque([2])",
      "deque([1, 2])",
      "deque([3])",
      "deque([])"
    ]
  },
  {
    "q": "What does itertools.repeat(4, 3) produce?",
    "c": null,
    "o": [
      "4 repeated 3 times: 4, 4, 4",
      "4 repeated indefinitely",
      "[1, 2, 3, 4]",
      "4, 3"
    ]
  },
  {
    "q": "Which function from functools must be imported to use reduce() in Python 3?",
    "c": null,
    "o": [
      "from functools import reduce",
      "from itertools import reduce",
      "reduce is built-in in Python 3",
      "import reduce"
    ]
  },
  {
    "q": "What does this namedtuple method _asdict() return?",
    "c": null,
    "o": [
      "An OrderedDict mapping field names to values",
      "A list of values",
      "A tuple of field names",
      "A dictionary with random key order"
    ]
  },
  {
    "q": "What will be printed?",
    "c": "from itertools import permutations\nprint(list(permutations('ab', 2)))",
    "o": [
      "[('a', 'b'), ('b', 'a')]",
      "[('ab',)]",
      "[('a',), ('b',)]",
      "[('a', 'a'), ('b', 'b')]"
    ]
  },
  {
    "q": "Which function creates an infinite iterator that cycles through elements?",
    "c": null,
    "o": [
      "itertools.cycle",
      "itertools.repeat",
      "itertools.chain",
      "itertools.count"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from collections import defaultdict\nd = defaultdict(lambda: 'default')\nprint(d['missing'])",
    "o": [
      "default",
      "None",
      "KeyError",
      "''"
    ]
  },
  {
    "q": "What will be the output of this code using deque?",
    "c": "from collections import deque\nd = deque([1, 2, 3])\nd.clear()\nprint(len(d))",
    "o": [
      "0",
      "1",
      "3",
      "None"
    ]
  },
  {
    "q": "Which of the following methods returns the largest elements from a heap without modifying it?",
    "c": null,
    "o": [
      "heapq.nlargest",
      "heapq.heappop",
      "heapq.heapify",
      "heapq.heapreplace"
    ]
  },
  {
    "q": "What does the following code return?",
    "c": "from collections import namedtuple\nPoint = namedtuple('Point', 'x y')\np = Point(4, 5)\nprint(p.y)",
    "o": [
      "5",
      "4",
      "y",
      "Point"
    ]
  },
  {
    "q": "Which itertools function can remove items that match a false condition?",
    "c": null,
    "o": [
      "filterfalse",
      "dropwhile",
      "takewhile",
      "compress"
    ]
  },
  {
    "q": "Which function from itertools is useful for creating the Cartesian product of input iterables?",
    "c": null,
    "o": [
      "product",
      "combinations",
      "permutations",
      "cycle"
    ]
  },
  {
    "q": "Which heapq function replaces and returns the smallest element in the heap?",
    "c": null,
    "o": [
      "heapreplace",
      "heappop",
      "heappush",
      "heapify"
    ]
  },
  {
    "q": "Which of the following is true about reduce()?",
    "c": null,
    "o": [
      "It applies a function cumulatively to the items of a sequence",
      "It filters items based on a function",
      "It combines two iterables",
      "It counts the number of elements"
    ]
  },
  {
    "q": "What will be the output?",
    "c": "from collections import Counter\nprint(Counter('balloon')['l'])",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which method appends an item to the left end of a deque?",
    "c": null,
    "o": [
      "appendleft",
      "append",
      "extendleft",
      "insertleft"
    ]
  },
  {
    "q": "What does this itertools function do: islice([1, 2, 3, 4, 5], 1, 4)?",
    "c": null,
    "o": [
      "[2, 3, 4]",
      "[1, 2, 3]",
      "[1, 4]",
      "[2, 3, 4, 5]"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['a', 'b', 'c']))",
    "o": [
      "'abc'",
      "['a', 'b', 'c']",
      "['abc']",
      "'a+b+c'"
    ]
  },
  {
    "q": "Which itertools function would you use to repeat values from an iterable indefinitely?",
    "c": null,
    "o": [
      "cycle",
      "repeat",
      "chain",
      "count"
    ]
  },
  {
    "q": "Which of the following is NOT a valid use of collections?",
    "c": null,
    "o": [
      "collections.mapper",
      "collections.Counter",
      "collections.deque",
      "collections.defaultdict"
    ]
  },
  {
    "q": "What will this code return?",
    "c": "from collections import namedtuple\nEmployee = namedtuple('Employee', ['name', 'salary'])\ne = Employee('John', 5000)\nprint(e._replace(salary=6000))",
    "o": [
      "Employee(name='John', salary=6000)",
      "('John', 6000)",
      "Employee('John', 6000)",
      "{'name': 'John', 'salary': 6000}"
    ]
  },
  {
    "q": "Which built-in function is best for filtering values based on a condition?",
    "c": null,
    "o": [
      "filter",
      "map",
      "reduce",
      "sum"
    ]
  },
  {
    "q": "What is the behavior of heapq.heappushpop()?",
    "c": null,
    "o": [
      "Pushes and then pops the smallest element efficiently",
      "Pushes and pops the largest element",
      "Only pushes an element",
      "Only pops an element"
    ]
  },
  {
    "q": "Which of the following is the correct way to initialize a Counter from a dictionary?",
    "c": null,
    "o": [
      "Counter({'a': 2, 'b': 3})",
      "Counter([('a', 2), ('b', 3)])",
      "Counter(['a', 2, 'b', 3])",
      "Counter({'a', 2, 'b', 3})"
    ]
  },
  {
    "q": "What does itertools.accumulate() do?",
    "c": null,
    "o": [
      "Returns running totals of values in an iterable",
      "Accumulates values into a list",
      "Creates combinations with accumulation",
      "Repeats values a number of times"
    ]
  },
  {
    "q": "What will be the result of the following?",
    "c": "from collections import deque\nd = deque([1, 2, 3])\nd.extendleft([4, 5])\nprint(d)",
    "o": [
      "deque([5, 4, 1, 2, 3])",
      "deque([1, 2, 3, 4, 5])",
      "deque([4, 5, 1, 2, 3])",
      "deque([1, 2, 3, 5, 4])"
    ]
  },
  {
    "q": "Which function would return a list of tuples pairing elements from multiple iterables?",
    "c": null,
    "o": [
      "zip",
      "chain",
      "map",
      "reduce"
    ]
  },
  {
    "q": "What is the output of this code using itertools?",
    "c": "from itertools import chain\nprint(list(chain([1, 2], [3, 4])))",
    "o": [
      "[1, 2, 3, 4]",
      "[[1, 2], [3, 4]]",
      "[(1, 2), (3, 4)]",
      "[1, [2, 3], 4]"
    ]
  },
  {
    "q": "Which collections tool is ideal for counting the frequency of elements?",
    "c": null,
    "o": [
      "Counter",
      "deque",
      "defaultdict",
      "namedtuple"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "from collections import defaultdict\nd = defaultdict(str)\nprint(d['missing'])",
    "o": [
      "''",
      "None",
      "KeyError",
      "'missing'"
    ]
  },
  {
    "q": "Which method will return the number of occurrences of an element in a deque?",
    "c": null,
    "o": [
      "count",
      "index",
      "find",
      "len"
    ]
  },
  {
    "q": "What is the result of this heapq operation?",
    "c": "import heapq\nheap = [3, 1, 4]\nheapq.heapify(heap)\nprint(heap[0])",
    "o": [
      "1",
      "3",
      "4",
      "0"
    ]
  },
  {
    "q": "What will the following namedtuple method do: _fields?",
    "c": null,
    "o": [
      "Return a tuple of field names",
      "Return a dictionary of values",
      "Return all field values as list",
      "Return a string of field names"
    ]
  },
  {
    "q": "Which of the following can apply a function to all elements in parallel across multiple iterables?",
    "c": null,
    "o": [
      "map",
      "filter",
      "reduce",
      "zip"
    ]
  },
  {
    "q": "Which function from heapq returns the n largest elements?",
    "c": null,
    "o": [
      "nlargest",
      "nsmallest",
      "heapify",
      "heapreplace"
    ]
  },
  {
    "q": "What does the following itertools expression return?",
    "c": "from itertools import combinations_with_replacement\nprint(list(combinations_with_replacement([1, 2], 2)))",
    "o": [
      "[(1, 1), (1, 2), (2, 2)]",
      "[(1, 2), (2, 1)]",
      "[(1, 2)]",
      "[(1, 1), (2, 2)]"
    ]
  },
  {
    "q": "Which method will reverse the elements in a deque in-place?",
    "c": null,
    "o": [
      "reverse",
      "reversed",
      "invert",
      "flip"
    ]
  },
  {
    "q": "What will be the output of this code using map?",
    "c": "nums = [1, 2, 3, 4]\nresult = map(str, nums)\nprint(list(result))",
    "o": [
      "['1', '2', '3', '4']",
      "[1, 2, 3, 4]",
      "['str', 'str', 'str', 'str']",
      "['nums']"
    ]
  },
  {
    "q": "Which collections object lets you create class-like immutable structures?",
    "c": null,
    "o": [
      "namedtuple",
      "defaultdict",
      "Counter",
      "deque"
    ]
  },
  {
    "q": "What does this code return?",
    "c": "from collections import deque\nd = deque([1, 2, 3, 4])\nd.remove(2)\nprint(d)",
    "o": [
      "deque([1, 3, 4])",
      "deque([2, 3, 4])",
      "deque([1, 2, 4])",
      "deque([1, 3])"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "from itertools import repeat\nprint(list(repeat('x', 3)))",
    "o": [
      "['x', 'x', 'x']",
      "['xxx']",
      "['x']",
      "['x', 3]"
    ]
  },
  {
    "q": "Which heapq function pops the smallest item and pushes a new item in a single operation?",
    "c": null,
    "o": [
      "heapreplace",
      "heappushpop",
      "heappop",
      "heapify"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from collections import Counter\nc = Counter('aaabbc')\nprint(c['d'])",
    "o": [
      "0",
      "KeyError",
      "None",
      "-1"
    ]
  },
  {
    "q": "Which of the following functions generates all r-length permutations of elements?",
    "c": null,
    "o": [
      "permutations",
      "combinations",
      "chain",
      "repeat"
    ]
  },
  {
    "q": "Which attribute of a namedtuple can convert it into an OrderedDict?",
    "c": null,
    "o": [
      "_asdict()",
      "_fields()",
      "_replace()",
      "_tuple()"
    ]
  },
  {
    "q": "What is the purpose of itertools.compress()?",
    "c": null,
    "o": [
      "Filters elements by a selector iterable",
      "Combines iterables",
      "Compresses a list to a string",
      "Repeats each item"
    ]
  },
  {
    "q": "Which of the following deque operations throws an error if the deque is empty?",
    "c": null,
    "o": [
      "pop",
      "append",
      "extend",
      "rotate"
    ]
  },
  {
    "q": "Which function from itertools returns successive r-length combinations of elements from the iterable?",
    "c": null,
    "o": [
      "combinations",
      "permutations",
      "product",
      "chain"
    ]
  },
  {
    "q": "What does this code return?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, [1]))",
    "o": [
      "1",
      "TypeError",
      "0",
      "None"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import Counter\nc = Counter(['a', 'b', 'a', 'c'])\nc['b'] = 0\nprint(+c)",
    "o": [
      "Counter({'a': 2, 'c': 1})",
      "Counter({'a': 2, 'b': 0, 'c': 1})",
      "Counter({'b': 0})",
      "Counter({'a': 2})"
    ]
  },
  {
    "q": "Which of the following statements about deque is true?",
    "c": null,
    "o": [
      "It allows fast appends and pops from both ends",
      "It only allows queue-like operations",
      "It stores items in key-value format",
      "It is immutable"
    ]
  },
  {
    "q": "What does this itertools expression return?",
    "c": "from itertools import takewhile\nprint(list(takewhile(lambda x: x < 5, [1, 3, 7, 2, 4])))",
    "o": [
      "[1, 3]",
      "[1, 3, 7]",
      "[1, 3, 7, 2]",
      "[1, 3, 2, 4]"
    ]
  },
  {
    "q": "Which of the following is used to define field names in a namedtuple?",
    "c": null,
    "o": [
      "String with space-separated names or list of strings",
      "Only tuple of strings",
      "Only single string",
      "Only list of integers"
    ]
  },
  {
    "q": "What does heappush do in the heapq module?",
    "c": null,
    "o": [
      "Adds a new element while maintaining heap property",
      "Pops the smallest element from the heap",
      "Returns the smallest n elements from a list",
      "Replaces the largest element with a new one"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "from itertools import cycle\nc = cycle('AB')\nprint(next(c), next(c), next(c))",
    "o": [
      "A B A",
      "A A A",
      "A B C",
      "A B B"
    ]
  },
  {
    "q": "Which collections class is best for storing multiple values under the same key?",
    "c": null,
    "o": [
      "defaultdict(list)",
      "Counter",
      "deque",
      "namedtuple"
    ]
  },
  {
    "q": "Which of the following functions will return a single value by reducing a sequence?",
    "c": null,
    "o": [
      "reduce",
      "filter",
      "map",
      "zip"
    ]
  },
  {
    "q": "What is the purpose of the lambda in reduce(lambda x, y: x + y, seq)?",
    "c": null,
    "o": [
      "It defines how two items are combined",
      "It filters the items before reduction",
      "It maps items before reducing",
      "It converts items to integers"
    ]
  },
  {
    "q": "What will this code return?",
    "c": "from itertools import count\nc = count(3)\nprint(next(c), next(c), next(c))",
    "o": [
      "3 4 5",
      "0 1 2",
      "1 2 3",
      "4 5 6"
    ]
  },
  {
    "q": "Which of these functions applies a function only to items that meet a condition?",
    "c": null,
    "o": [
      "filter",
      "map",
      "reduce",
      "zip"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import deque\nd = deque([1, 2, 3, 4])\nd.rotate(-1)\nprint(d)",
    "o": [
      "deque([2, 3, 4, 1])",
      "deque([4, 1, 2, 3])",
      "deque([1, 2, 3, 4])",
      "deque([3, 4, 1, 2])"
    ]
  },
  {
    "q": "Which of the following is valid syntax to define a namedtuple?",
    "c": null,
    "o": [
      "namedtuple('Point', ['x', 'y'])",
      "namedtuple('Point', (x, y))",
      "namedtuple(['Point'], ['x', 'y'])",
      "namedtuple(Point, 'x y')"
    ]
  },
  {
    "q": "What does this code return?",
    "c": "from collections import Counter\nc = Counter('banana')\nprint(c.most_common(2))",
    "o": [
      "[('a', 3), ('n', 2)]",
      "[('b', 1), ('a', 3)]",
      "[('n', 2), ('a', 3)]",
      "[('a', 2), ('n', 3)]"
    ]
  },
  {
    "q": "Which function from heapq can push and pop in one call, optimizing performance?",
    "c": null,
    "o": [
      "heappushpop",
      "heappop",
      "heapreplace",
      "heapify"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "from itertools import product\nprint(list(product([1, 2], repeat=2)))",
    "o": [
      "[(1, 1), (1, 2), (2, 1), (2, 2)]",
      "[(1, 2), (2, 1)]",
      "[(1, 1), (2, 2)]",
      "[(1, 2, 1, 2)]"
    ]
  },
  {
    "q": "What does deque.maxlen represent?",
    "c": null,
    "o": [
      "Maximum number of items the deque can hold",
      "Maximum number of append operations allowed",
      "Maximum number of rotations allowed",
      "Maximum number of fields in a namedtuple"
    ]
  },
  {
    "q": "Which of the following is true about zip_longest from itertools?",
    "c": null,
    "o": [
      "It pads shorter iterables with a fill value",
      "It skips elements if length mismatches",
      "It works only with strings",
      "It combines iterables by repeating values"
    ]
  },
  {
    "q": "What will be the output of this code using defaultdict?",
    "c": "from collections import defaultdict\nd = defaultdict(list)\nd['a'].append(1)\nd['b'].append(2)\nprint(d['a'], d['b'], d['c'])",
    "o": [
      "[1] [2] []",
      "[1] [2] None",
      "[1] [2] KeyError",
      "[1] [2] [None]"
    ]
  },
  {
    "q": "What does heapify() do to a regular list?",
    "c": null,
    "o": [
      "Converts it into a valid heap in-place",
      "Sorts the list in ascending order",
      "Returns a new min-heap object",
      "Removes duplicates and sorts"
    ]
  },
  {
    "q": "What is the output of this reduce operation?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [2, 3, 4]))",
    "o": [
      "24",
      "9",
      "10",
      "None"
    ]
  },
  {
    "q": "Which method will return the index of an item in a deque?",
    "c": null,
    "o": [
      "index",
      "find",
      "get",
      "position"
    ]
  },
  {
    "q": "Which itertools function combines multiple iterables and returns only true-filtered items?",
    "c": null,
    "o": [
      "compress",
      "filterfalse",
      "chain",
      "cycle"
    ]
  },
  {
    "q": "Which attribute of namedtuple provides the field names?",
    "c": null,
    "o": [
      "_fields",
      "_asdict",
      "_replace",
      "_values"
    ]
  },
  {
    "q": "What does this code return?",
    "c": "from itertools import combinations\nprint(list(combinations('abc', 2)))",
    "o": [
      "[('a', 'b'), ('a', 'c'), ('b', 'c')]",
      "[('a', 'b'), ('b', 'a'), ('a', 'c'), ('c', 'a'), ('b', 'c'), ('c', 'b')]",
      "[('a', 'b'), ('b', 'c')]",
      "[('a',), ('b',), ('c',)]"
    ]
  },
  {
    "q": "Which function will give you a count of elements greater than a threshold in a list?",
    "c": null,
    "o": [
      "filter + len",
      "map",
      "reduce",
      "zip"
    ]
  },
  {
    "q": "What is the result of this deque operation?",
    "c": "from collections import deque\nd = deque([1, 2, 3])\nd.extend([4, 5])\nprint(d)",
    "o": [
      "deque([1, 2, 3, 4, 5])",
      "deque([4, 5, 1, 2, 3])",
      "deque([1, 2, 3])",
      "deque([5, 4, 3, 2, 1])"
    ]
  },
  {
    "q": "Which heapq operation replaces the smallest item and returns it?",
    "c": null,
    "o": [
      "heapreplace",
      "heappop",
      "heappushpop",
      "nlargest"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "from collections import Counter\nc = Counter('mississippi')\nprint(c['s'])",
    "o": [
      "4",
      "2",
      "3",
      "5"
    ]
  },
  {
    "q": "Which of the following is true about map() in Python?",
    "c": null,
    "o": [
      "It returns an iterator that applies a function to every item of an iterable",
      "It filters items based on a condition",
      "It reduces a sequence to a single value",
      "It groups values from multiple iterables"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "from collections import namedtuple\nPerson = namedtuple('Person', 'name age')\np = Person('Alice', 30)\nprint(p.name)",
    "o": [
      "Alice",
      "30",
      "name",
      "Person"
    ]
  },
  {
    "q": "Which itertools function returns accumulated sums (or other binary function results)?",
    "c": null,
    "o": [
      "accumulate",
      "repeat",
      "combinations",
      "islice"
    ]
  },
  {
    "q": "What is the result of this operation?",
    "c": "import heapq\nheap = [4, 1, 7, 3]\nheapq.heapify(heap)\nheapq.heappush(heap, 2)\nprint(heap[0])",
    "o": [
      "1",
      "2",
      "3",
      "4"
    ]
  },
  {
    "q": "Which function can be used to iterate over elements and their indexes together?",
    "c": null,
    "o": [
      "enumerate",
      "map",
      "zip",
      "range"
    ]
  },
  {
    "q": "Which deque method removes an element from the left end?",
    "c": null,
    "o": [
      "popleft",
      "pop",
      "removeleft",
      "shift"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "from itertools import combinations_with_replacement\nprint(list(combinations_with_replacement('ab', 2)))",
    "o": [
      "[('a', 'a'), ('a', 'b'), ('b', 'b')]",
      "[('a', 'b'), ('b', 'a')]",
      "[('a',), ('b',)]",
      "[('a', 'a'), ('b', 'b')]"
    ]
  },
  {
    "q": "What does the reduce() function require to work properly?",
    "c": null,
    "o": [
      "A binary function and a sequence",
      "A single argument",
      "A dictionary and a function",
      "Only a sequence"
    ]
  },
  {
    "q": "What is the main difference between combinations and permutations in itertools?",
    "c": null,
    "o": [
      "Permutations care about order, combinations do not",
      "Combinations care about order, permutations do not",
      "Combinations allow duplicates",
      "Permutations always return tuples of length 2"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x - y, [10, 3, 2]))",
    "o": [
      "5",
      "15",
      "7",
      "1"
    ]
  },
  {
    "q": "Which of the following statements about defaultdict is true?",
    "c": null,
    "o": [
      "It provides a default value for missing keys",
      "It removes duplicate keys automatically",
      "It allows only string keys",
      "It is immutable"
    ]
  },
  {
    "q": "What will this deque operation return?",
    "c": "from collections import deque\nd = deque(maxlen=3)\nd.extend([1, 2, 3, 4])\nprint(d)",
    "o": [
      "deque([2, 3, 4], maxlen=3)",
      "deque([1, 2, 3, 4])",
      "deque([1, 2, 3], maxlen=3)",
      "deque([4, 3, 2])"
    ]
  },
  {
    "q": "Which function from itertools can skip elements as long as a condition is true?",
    "c": null,
    "o": [
      "dropwhile",
      "takewhile",
      "filterfalse",
      "compress"
    ]
  },
  {
    "q": "What is the result of this Counter operation?",
    "c": "from collections import Counter\nc1 = Counter(a=3, b=1)\nc2 = Counter(a=1, b=2)\nprint(c1 + c2)",
    "o": [
      "Counter({'a': 4, 'b': 3})",
      "Counter({'a': 2, 'b': 1})",
      "Counter({'a': 3, 'b': 2})",
      "Counter({'a': 1, 'b': 2})"
    ]
  },
  {
    "q": "Which heapq function retrieves and removes the smallest element from a heap?",
    "c": null,
    "o": [
      "heappop",
      "heappushpop",
      "heapreplace",
      "nlargest"
    ]
  },
  {
    "q": "Which of the following operations is valid on a namedtuple instance?",
    "c": null,
    "o": [
      "_replace()",
      "update()",
      "append()",
      "clear()"
    ]
  },
  {
    "q": "Which built-in function can convert all items in an iterable to a specific type?",
    "c": null,
    "o": [
      "map",
      "filter",
      "reduce",
      "zip"
    ]
  },
  {
    "q": "What will the following code return?",
    "c": "from itertools import islice\nprint(list(islice([10, 20, 30, 40, 50], 1, 4)))",
    "o": [
      "[20, 30, 40]",
      "[10, 20, 30]",
      "[30, 40, 50]",
      "[10, 20, 30, 40]"
    ]
  },
  {
    "q": "Which of the following best describes heapq.nsmallest()?",
    "c": null,
    "o": [
      "Returns n smallest elements from iterable",
      "Removes n elements from the heap",
      "Sorts the list in-place",
      "Builds a heap and removes all items"
    ]
  },
  {
    "q": "Which method removes and returns an element from the right end of a deque?",
    "c": null,
    "o": [
      "pop",
      "popleft",
      "remove",
      "shift"
    ]
  },
  {
    "q": "What does the following code return?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, [], 10))",
    "o": [
      "10",
      "TypeError",
      "0",
      "None"
    ]
  },
  {
    "q": "What is the output of this code using Counter subtraction?",
    "c": "from collections import Counter\nc1 = Counter(a=3, b=1)\nc2 = Counter(a=1, b=2)\nprint(c1 - c2)",
    "o": [
      "Counter({'a': 2})",
      "Counter({'b': -1})",
      "Counter({'a': 2, 'b': -1})",
      "Counter({'a': 4, 'b': 3})"
    ]
  },
  {
    "q": "Which of the following itertools functions flattens multiple iterables into a single one?",
    "c": null,
    "o": [
      "chain",
      "repeat",
      "cycle",
      "combinations"
    ]
  },
  {
    "q": "What will the following namedtuple operation return?",
    "c": "from collections import namedtuple\nPoint = namedtuple('Point', 'x y')\np = Point(1, 2)\nprint(p._fields)",
    "o": [
      "('x', 'y')",
      "['x', 'y']",
      "Point('x', 'y')",
      "{'x': 1, 'y': 2}"
    ]
  },
  {
    "q": "What does heapq.nlargest(2, [4, 1, 7, 3]) return?",
    "c": null,
    "o": [
      "[7, 4]",
      "[1, 3]",
      "[4, 7]",
      "[4, 1]"
    ]
  },
  {
    "q": "Which function in itertools allows pairing elements until the shortest input is exhausted?",
    "c": null,
    "o": [
      "zip",
      "zip_longest",
      "product",
      "chain"
    ]
  },
  {
    "q": "Which deque method inserts an item at a given position?",
    "c": null,
    "o": [
      "insert",
      "appendleft",
      "extend",
      "put"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "from itertools import permutations\nprint(len(list(permutations('abc', 2))))",
    "o": [
      "6",
      "3",
      "2",
      "9"
    ]
  },
  {
    "q": "Which function applies a function of two arguments cumulatively to the items of a sequence?",
    "c": null,
    "o": [
      "reduce",
      "map",
      "filter",
      "accumulate"
    ]
  },
  {
    "q": "What is the result of this heap operation?",
    "c": "import heapq\nheap = [5, 1, 3]\nheapq.heappushpop(heap, 2)\nprint(heap)",
    "o": [
      "[2, 5, 3]",
      "[1, 2, 3]",
      "[2, 1, 3]",
      "[5, 2, 3]"
    ]
  },
  {
    "q": "Which function in itertools returns a count iterator starting from a given number?",
    "c": null,
    "o": [
      "count",
      "cycle",
      "repeat",
      "accumulate"
    ]
  },
  {
    "q": "Which of the following is true about namedtuple?",
    "c": null,
    "o": [
      "It creates lightweight, immutable objects",
      "It creates a mutable dictionary",
      "It supports item assignment",
      "It is slower than regular tuples"
    ]
  },
  {
    "q": "What does this code print?",
    "c": "from collections import defaultdict\nd = defaultdict(lambda: 'missing')\nprint(d['x'])",
    "o": [
      "missing",
      "KeyError",
      "None",
      "0"
    ]
  },
  {
    "q": "Which method of deque rotates elements to the right?",
    "c": null,
    "o": [
      "rotate",
      "shift",
      "reverse",
      "turn"
    ]
  },
  {
    "q": "What does this code return?",
    "c": "from itertools import combinations\nprint(list(combinations([1, 2, 3], 2)))",
    "o": [
      "[(1, 2), (1, 3), (2, 3)]",
      "[(1, 2), (2, 3), (3, 1)]",
      "[(1, 2), (2, 1), (1, 3)]",
      "[(1, 2), (2, 3)]"
    ]
  },
  {
    "q": "What is the default return type of Counter().most_common()?",
    "c": null,
    "o": [
      "List of (element, count) tuples",
      "Dictionary of element: count",
      "Sorted list of elements",
      "Set of most common elements"
    ]
  },
  {
    "q": "What will this code return?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['p', 'y', 't', 'h', 'o', 'n']))",
    "o": [
      "python",
      "['p', 'y', 't', 'h', 'o', 'n']",
      "py t h o n",
      "TypeError"
    ]
  },
  {
    "q": "Which of these is not a valid argument for heapq.nlargest()?",
    "c": null,
    "o": [
      "maxsize",
      "n",
      "iterable",
      "key"
    ]
  },
  {
    "q": "Which itertools function returns elements for which the function is false?",
    "c": null,
    "o": [
      "filterfalse",
      "dropwhile",
      "compress",
      "filter"
    ]
  },
  {
    "q": "What will this code return?",
    "c": "from collections import Counter\nc = Counter('apple')\nc.update('pear')\nprint(c['p'])",
    "o": [
      "2",
      "1",
      "3",
      "4"
    ]
  },
  {
    "q": "Which function in itertools would you use to get a cartesian product?",
    "c": null,
    "o": [
      "product",
      "permutations",
      "combinations",
      "chain"
    ]
  },
  {
    "q": "Which of the following functions from heapq is destructive (modifies the list)?",
    "c": null,
    "o": [
      "heapify",
      "nlargest",
      "sorted",
      "list"
    ]
  },
  {
    "q": "Which is true about map() and filter() in Python?",
    "c": null,
    "o": [
      "Both return iterators",
      "Both return lists",
      "Both return tuples",
      "Both return generators"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import deque\nd = deque([1, 2, 3])\nd.appendleft(0)\nprint(d)",
    "o": [
      "deque([0, 1, 2, 3])",
      "deque([1, 2, 3, 0])",
      "deque([0, 1, 2])",
      "deque([3, 2, 1, 0])"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "from collections import namedtuple\nBook = namedtuple('Book', 'title author')\nb = Book('1984', 'Orwell')\nprint(b._asdict())",
    "o": [
      "{'title': '1984', 'author': 'Orwell'}",
      "('1984', 'Orwell')",
      "Book(title='1984', author='Orwell')",
      "{'1984': 'Orwell'}"
    ]
  },
  {
    "q": "Which function in functools helps cache function results?",
    "c": null,
    "o": [
      "lru_cache",
      "reduce",
      "partial",
      "cmp_to_key"
    ]
  },
  {
    "q": "Which itertools function groups consecutive identical elements?",
    "c": null,
    "o": [
      "groupby",
      "compress",
      "repeat",
      "accumulate"
    ]
  },
  {
    "q": "What does heapq.heappushpop(heap, item) do?",
    "c": null,
    "o": [
      "Pushes item and pops smallest in one step",
      "Pushes then pops largest item",
      "Replaces last item in the heap",
      "Raises error if heap is empty"
    ]
  },
  {
    "q": "What is a valid use of filter()?",
    "c": null,
    "o": [
      "filter(lambda x: x % 2 == 0, [1, 2, 3, 4])",
      "filter([1, 2, 3, 4], lambda x: x % 2 == 0)",
      "filter(0, [1, 2, 3, 4])",
      "filter(map, reduce)"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, range(1, 5)))",
    "o": [
      "10",
      "15",
      "5",
      "None"
    ]
  },
  {
    "q": "Which collections type is best when you need to insert and remove from both ends?",
    "c": null,
    "o": [
      "deque",
      "defaultdict",
      "Counter",
      "namedtuple"
    ]
  },
  {
    "q": "Which itertools function repeats an object multiple times?",
    "c": null,
    "o": [
      "repeat",
      "cycle",
      "product",
      "count"
    ]
  },
  {
    "q": "What does this code return?",
    "c": "from collections import Counter\nprint(Counter('banana').most_common(1))",
    "o": [
      "[('a', 3)]",
      "[('b', 1)]",
      "[('n', 2)]",
      "[('a', 2)]"
    ]
  },
  {
    "q": "Which method would you use to convert a namedtuple into a dictionary?",
    "c": null,
    "o": [
      "_asdict()",
      "_fields()",
      "_replace()",
      "_dict()"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import deque\nd = deque([1, 2, 3])\nd.extendleft([0, -1])\nprint(d)",
    "o": [
      "deque([-1, 0, 1, 2, 3])",
      "deque([1, 2, 3, 0, -1])",
      "deque([0, -1, 1, 2, 3])",
      "deque([1, 2, 3])"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "from itertools import cycle\nc = cycle('AB')\nfor _ in range(4):\n    print(next(c), end=' ')",
    "o": [
      "A B A B ",
      "A B C D ",
      "B A B A ",
      "A A B B "
    ]
  },
  {
    "q": "Which function in heapq returns the smallest n elements?",
    "c": null,
    "o": [
      "nsmallest",
      "nlargest",
      "heapify",
      "heappop"
    ]
  },
  {
    "q": "Which function is used to convert a string of digits to integers before summing?",
    "c": null,
    "o": [
      "map",
      "filter",
      "reduce",
      "zip"
    ]
  },
  {
    "q": "Which of the following tools does not preserve the insertion order in Python < 3.7?",
    "c": null,
    "o": [
      "Counter",
      "deque",
      "defaultdict",
      "namedtuple"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "from itertools import filterfalse\nprint(list(filterfalse(lambda x: x % 2, range(5))))",
    "o": [
      "[0, 2, 4]",
      "[1, 3, 5]",
      "[0, 1, 2]",
      "[2, 4]"
    ]
  },
  {
    "q": "Which heapq function returns the largest n elements?",
    "c": null,
    "o": [
      "nlargest",
      "nsmallest",
      "heappop",
      "heapify"
    ]
  },
  {
    "q": "Which of the following operations creates a fixed-size queue?",
    "c": null,
    "o": [
      "deque(maxlen=5)",
      "list(size=5)",
      "queue.Queue()",
      "set(maxsize=5)"
    ]
  },
  {
    "q": "What does this code return?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['a', 'b', 'c']))",
    "o": [
      "abc",
      "a b c",
      "['a', 'b', 'c']",
      "TypeError"
    ]
  },
  {
    "q": "Which itertools function is most suitable to create infinite arithmetic sequences?",
    "c": null,
    "o": [
      "count",
      "cycle",
      "repeat",
      "accumulate"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "from collections import Counter\nc = Counter('aabbbc')\nprint(c.most_common()[-1])",
    "o": [
      "('c', 1)",
      "('a', 2)",
      "('b', 3)",
      "('a', 1)"
    ]
  },
  {
    "q": "What is the result of this namedtuple operation?",
    "c": "from collections import namedtuple\nCar = namedtuple('Car', 'brand year')\nc = Car('Toyota', 2020)\nprint(c._replace(year=2023))",
    "o": [
      "Car(brand='Toyota', year=2023)",
      "('Toyota', 2023)",
      "{'brand': 'Toyota', 'year': 2023}",
      "Car('Toyota', 2023)"
    ]
  },
  {
    "q": "Which built-in function works well with lambda to filter values based on a condition?",
    "c": null,
    "o": [
      "filter",
      "reduce",
      "map",
      "sum"
    ]
  },
  {
    "q": "What happens if you access a missing key in a defaultdict?",
    "c": null,
    "o": [
      "A default value is created and returned",
      "A KeyError is raised",
      "None is returned",
      "The program crashes"
    ]
  },
  {
    "q": "What does itertools.zip_longest do?",
    "c": null,
    "o": [
      "Fills shorter iterables with a default value",
      "Zips iterables and discards extra elements",
      "Creates all combinations of items",
      "Zips infinite iterables only"
    ]
  },
  {
    "q": "Which function from itertools would you use to repeat an iterable indefinitely?",
    "c": null,
    "o": [
      "cycle",
      "repeat",
      "count",
      "chain"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "from heapq import heapify\nnums = [10, 5, 1, 7]\nheapify(nums)\nprint(nums[0])",
    "o": [
      "1",
      "5",
      "10",
      "7"
    ]
  },
  {
    "q": "Which function in functools returns a new function with fixed arguments?",
    "c": null,
    "o": [
      "partial",
      "reduce",
      "lru_cache",
      "cmp_to_key"
    ]
  },
  {
    "q": "What is the output of this Counter operation?",
    "c": "from collections import Counter\nc = Counter(a=2, b=1)\nc.subtract({'a': 1, 'b': 2})\nprint(c)",
    "o": [
      "Counter({'a': 1, 'b': -1})",
      "Counter({'a': 3, 'b': 3})",
      "Counter({'a': 1, 'b': 2})",
      "Counter({'a': -1, 'b': -2})"
    ]
  },
  {
    "q": "Which deque method is used to add elements to the left end?",
    "c": null,
    "o": [
      "appendleft",
      "insertleft",
      "pushleft",
      "addleft"
    ]
  },
  {
    "q": "What does the map() function return in Python 3?",
    "c": null,
    "o": [
      "An iterator",
      "A list",
      "A set",
      "A tuple"
    ]
  },
  {
    "q": "Which of the following tools preserves the order of insertion?",
    "c": null,
    "o": [
      "deque",
      "set",
      "dict (Python < 3.7)",
      "Counter"
    ]
  },
  {
    "q": "Which of the following modules provides grouping consecutive identical elements?",
    "c": null,
    "o": [
      "itertools.groupby",
      "functools.reduce",
      "collections.Counter",
      "heapq.merge"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "from itertools import repeat\nfor x in repeat(5, 3): print(x, end=' ')",
    "o": [
      "5 5 5 ",
      "5 5 ",
      "5 ",
      "None"
    ]
  },
  {
    "q": "Which heapq function would replace the smallest element with a new one?",
    "c": null,
    "o": [
      "heapreplace",
      "heappushpop",
      "heappop",
      "nlargest"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from collections import Counter\nc = Counter(['a', 'b', 'a', 'c', 'b', 'a'])\nprint(c['b'])",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which function would you use to combine multiple iterables into one sequence?",
    "c": null,
    "o": [
      "chain",
      "cycle",
      "combinations",
      "accumulate"
    ]
  },
  {
    "q": "What does reduce(lambda x, y: x * y, [1, 2, 3, 4]) return?",
    "c": null,
    "o": [
      "24",
      "10",
      "9",
      "None"
    ]
  },
  {
    "q": "Which operation removes an item from the end of a deque?",
    "c": null,
    "o": [
      "pop",
      "popleft",
      "remove",
      "del"
    ]
  },
  {
    "q": "Which function from functools is commonly used to improve performance by memoizing function calls?",
    "c": null,
    "o": [
      "lru_cache",
      "reduce",
      "partial",
      "cmp_to_key"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "from collections import namedtuple\nUser = namedtuple('User', 'id name')\nu = User(1, 'Alice')\nprint(u.name)",
    "o": [
      "Alice",
      "1",
      "name",
      "User"
    ]
  },
  {
    "q": "What does heapify() do to a list?",
    "c": null,
    "o": [
      "Transforms it into a valid heap in-place",
      "Sorts the list",
      "Returns a new heap object",
      "Raises an error if non-integer elements are present"
    ]
  },
  {
    "q": "Which itertools function slices an iterable?",
    "c": null,
    "o": [
      "islice",
      "slice",
      "cut",
      "split"
    ]
  },
  {
    "q": "What is the result of this deque operation?",
    "c": "from collections import deque\nd = deque([1, 2, 3])\nd.rotate(1)\nprint(d)",
    "o": [
      "deque([3, 1, 2])",
      "deque([2, 3, 1])",
      "deque([1, 2, 3])",
      "deque([2, 1, 3])"
    ]
  },
  {
    "q": "Which function is used to get only elements that return True for a function?",
    "c": null,
    "o": [
      "filter",
      "map",
      "reduce",
      "groupby"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "from heapq import nsmallest\nprint(nsmallest(2, [4, 1, 7, 3]))",
    "o": [
      "[1, 3]",
      "[1, 4]",
      "[4, 7]",
      "[3, 4]"
    ]
  },
  {
    "q": "Which collections class allows you to count hashable objects easily?",
    "c": null,
    "o": [
      "Counter",
      "defaultdict",
      "deque",
      "OrderedDict"
    ]
  },
  {
    "q": "What does the itertools.accumulate() function do?",
    "c": null,
    "o": [
      "Returns accumulated sums or results of a binary function",
      "Repeats values multiple times",
      "Creates all permutations",
      "Chains multiple iterables"
    ]
  },
  {
    "q": "Which deque method removes an element from the beginning?",
    "c": null,
    "o": [
      "popleft",
      "pop",
      "remove",
      "shiftleft"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import defaultdict\nd = defaultdict(int)\nd['a'] += 1\nprint(d['a'])",
    "o": [
      "1",
      "0",
      "None",
      "KeyError"
    ]
  },
  {
    "q": "Which function will pair elements from two lists until the shorter one is exhausted?",
    "c": null,
    "o": [
      "zip",
      "zip_longest",
      "map",
      "chain"
    ]
  },
  {
    "q": "Which function in heapq pushes an item onto the heap and then pops and returns the smallest item?",
    "c": null,
    "o": [
      "heappushpop",
      "heapreplace",
      "heappop",
      "nlargest"
    ]
  },
  {
    "q": "Which of the following creates a namedtuple?",
    "c": null,
    "o": [
      "namedtuple('Point', 'x y')",
      "tuple.named('Point', ['x', 'y'])",
      "namedtuple(['x', 'y'])",
      "tuple('Point', ['x', 'y'])"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, [10]))",
    "o": [
      "10",
      "TypeError",
      "0",
      "None"
    ]
  },
  {
    "q": "Which itertools function gives all r-length permutations of elements?",
    "c": null,
    "o": [
      "permutations",
      "combinations",
      "cycle",
      "repeat"
    ]
  },
  {
    "q": "Which `heapq` function will push a new item and then pop the smallest item, but is more efficient than calling both separately?",
    "c": null,
    "o": [
      "heappushpop",
      "heapreplace",
      "heappop",
      "nlargest"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from collections import deque\nd = deque([1, 2, 3])\nd.append(4)\nprint(d)",
    "o": [
      "deque([1, 2, 3, 4])",
      "deque([4, 1, 2, 3])",
      "deque([1, 2, 3])",
      "deque([2, 3, 4])"
    ]
  },
  {
    "q": "Which itertools function would you use to make an iterator that returns selected elements from the iterable based on a selector?",
    "c": null,
    "o": [
      "compress",
      "filter",
      "dropwhile",
      "cycle"
    ]
  },
  {
    "q": "What is the output of this code using map?",
    "c": "nums = [1, 2, 3]\nresult = map(lambda x: x * 2, nums)\nprint(list(result))",
    "o": [
      "[2, 4, 6]",
      "[1, 2, 3]",
      "[2, 3, 4]",
      "[1, 4, 9]"
    ]
  },
  {
    "q": "What will be the result of this Counter subtraction?",
    "c": "from collections import Counter\nc1 = Counter({'a': 2, 'b': 1})\nc2 = Counter({'a': 1})\nprint(c1 - c2)",
    "o": [
      "Counter({'a': 1, 'b': 1})",
      "Counter({'a': 3, 'b': 1})",
      "Counter({'b': 1})",
      "Counter({'a': 1})"
    ]
  },
  {
    "q": "Which of the following creates a defaultdict with int as default value type?",
    "c": null,
    "o": [
      "defaultdict(int)",
      "defaultdict()",
      "defaultdict([])",
      "defaultdict(dict)"
    ]
  },
  {
    "q": "Which of the following built-in functions in Python applies a function to all items and returns an iterator?",
    "c": null,
    "o": [
      "map",
      "reduce",
      "filter",
      "enumerate"
    ]
  },
  {
    "q": "What does itertools.count(10, 2) generate?",
    "c": null,
    "o": [
      "An infinite sequence starting from 10, incremented by 2",
      "A list from 10 to 2",
      "A reversed iterator from 10 to 2",
      "Only even numbers less than 10"
    ]
  },
  {
    "q": "Which namedtuple method lets you update a field’s value?",
    "c": null,
    "o": [
      "_replace",
      "_asdict",
      "_fields",
      "_update"
    ]
  },
  {
    "q": "Which heapq function is most efficient for replacing the smallest item with a new one?",
    "c": null,
    "o": [
      "heapreplace",
      "heappop",
      "heappushpop",
      "nlargest"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "from collections import Counter\nprint(Counter('aabc').most_common(2))",
    "o": [
      "[('a', 2), ('b', 1)]",
      "[('a', 1), ('b', 2)]",
      "[('a', 2), ('c', 1)]",
      "[('b', 1), ('c', 1)]"
    ]
  },
  {
    "q": "Which function in itertools creates all r-length combinations of items?",
    "c": null,
    "o": [
      "combinations",
      "permutations",
      "chain",
      "product"
    ]
  },
  {
    "q": "Which of these functions returns a cumulative sum of a list?",
    "c": null,
    "o": [
      "accumulate",
      "reduce",
      "sum",
      "product"
    ]
  },
  {
    "q": "Which function is used to turn a list into a min-heap?",
    "c": null,
    "o": [
      "heapify",
      "heappush",
      "heappop",
      "minheap"
    ]
  },
  {
    "q": "Which method removes and returns an item from the left end of a deque?",
    "c": null,
    "o": [
      "popleft",
      "pop",
      "shiftleft",
      "remove"
    ]
  },
  {
    "q": "What is the correct way to create a namedtuple with fields 'x' and 'y'?",
    "c": null,
    "o": [
      "namedtuple('Point', ['x', 'y'])",
      "namedtuple(Point, ['x', 'y'])",
      "namedtuple('x y', 'Point')",
      "namedtuple(['x', 'y'], 'Point')"
    ]
  },
  {
    "q": "Which of these returns only elements for which the function is false?",
    "c": null,
    "o": [
      "filterfalse",
      "filter",
      "map",
      "groupby"
    ]
  },
  {
    "q": "What does this code return?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['a', 'b', 'c']))",
    "o": [
      "abc",
      "['a', 'b', 'c']",
      "a b c",
      "None"
    ]
  },
  {
    "q": "Which of the following is best used to repeatedly apply a function to a sequence and return a single value?",
    "c": null,
    "o": [
      "reduce",
      "map",
      "filter",
      "enumerate"
    ]
  },
  {
    "q": "Which function in heapq returns the n largest elements?",
    "c": null,
    "o": [
      "nlargest",
      "nsmallest",
      "heappop",
      "heapify"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "from collections import defaultdict\nd = defaultdict(list)\nd['a'].append(1)\nprint(d['a'])",
    "o": [
      "[1]",
      "[]",
      "1",
      "KeyError"
    ]
  },
  {
    "q": "Which itertools function groups values only if they are adjacent?",
    "c": null,
    "o": [
      "groupby",
      "combinations",
      "product",
      "cycle"
    ]
  },
  {
    "q": "Which function in functools allows you to convert a comparison function to a key function?",
    "c": null,
    "o": [
      "cmp_to_key",
      "partial",
      "reduce",
      "lru_cache"
    ]
  },
  {
    "q": "Which method would you use to extend a deque from the right side?",
    "c": null,
    "o": [
      "extend",
      "append",
      "appendleft",
      "insert"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from heapq import heapreplace\nheap = [1, 3, 5]\nheapreplace(heap, 2)\nprint(heap)",
    "o": [
      "[2, 3, 5]",
      "[1, 2, 5]",
      "[2, 1, 3]",
      "[3, 2, 5]"
    ]
  },
  {
    "q": "Which of the following best describes a namedtuple?",
    "c": null,
    "o": [
      "Immutable and indexable like a tuple, with named fields",
      "Mutable and indexable like a list",
      "Just a regular class with __dict__",
      "A dictionary with restricted keys"
    ]
  },
  {
    "q": "Which function from itertools allows you to get combinations with replacement?",
    "c": null,
    "o": [
      "combinations_with_replacement",
      "combinations",
      "product",
      "permutations"
    ]
  },
  {
    "q": "Which function from functools would you use to create a new function with some arguments pre-filled?",
    "c": null,
    "o": [
      "partial",
      "reduce",
      "cmp_to_key",
      "cache"
    ]
  },
  {
    "q": "Which heapq operation will raise an IndexError if the heap is empty?",
    "c": null,
    "o": [
      "heappop",
      "heapify",
      "heapreplace",
      "heappush"
    ]
  },
  {
    "q": "What is the result of the following code?",
    "c": "from collections import Counter\nc = Counter(['a', 'b', 'a'])\nc['b'] += 1\nprint(c['b'])",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which function in itertools can be used to flatten a list of lists?",
    "c": null,
    "o": [
      "chain.from_iterable",
      "repeat",
      "product",
      "compress"
    ]
  },
  {
    "q": "What is the result of this code using map and lambda?",
    "c": "nums = [1, 2, 3, 4]\nresult = list(map(lambda x: x**2, nums))\nprint(result)",
    "o": [
      "[1, 4, 9, 16]",
      "[2, 3, 4, 5]",
      "[1, 2, 3, 4]",
      "[1, 8, 27, 64]"
    ]
  },
  {
    "q": "Which heapq function both adds a new item and removes the smallest one?",
    "c": null,
    "o": [
      "heappushpop",
      "heapreplace",
      "heappop",
      "heapify"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "from collections import namedtuple\nPoint = namedtuple('Point', 'x y')\np = Point(2, 3)\nprint(p.x + p.y)",
    "o": [
      "5",
      "23",
      "(2, 3)",
      "Error"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from collections import deque\nd = deque(maxlen=3)\nd.extend([1, 2, 3, 4])\nprint(d)",
    "o": [
      "deque([2, 3, 4], maxlen=3)",
      "deque([1, 2, 3], maxlen=3)",
      "deque([1, 2, 3, 4], maxlen=3)",
      "deque([1, 2], maxlen=3)"
    ]
  },
  {
    "q": "Which itertools function creates a sliding window of length n over an iterable?",
    "c": null,
    "o": [
      "No built-in, but can be done using islice and zip",
      "window",
      "slide",
      "partition"
    ]
  },
  {
    "q": "Which function from functools caches recent return values for fast access?",
    "c": null,
    "o": [
      "lru_cache",
      "reduce",
      "partial",
      "cmp_to_key"
    ]
  },
  {
    "q": "Which method removes all elements from a deque?",
    "c": null,
    "o": [
      "clear",
      "reset",
      "truncate",
      "flush"
    ]
  },
  {
    "q": "Which of these functions is used to retrieve elements based on a boolean selector?",
    "c": null,
    "o": [
      "compress",
      "filterfalse",
      "groupby",
      "cycle"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "from collections import defaultdict\nd = defaultdict(lambda: 'N/A')\nd['key'] = 'value'\nprint(d['missing'])",
    "o": [
      "N/A",
      "None",
      "KeyError",
      "missing"
    ]
  },
  {
    "q": "Which function from heapq maintains the heap invariant after inserting a new element?",
    "c": null,
    "o": [
      "heappush",
      "heapify",
      "heappop",
      "heapreplace"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, [], 10))",
    "o": [
      "10",
      "TypeError",
      "0",
      "None"
    ]
  },
  {
    "q": "What does deque.rotate(-1) do?",
    "c": null,
    "o": [
      "Rotates left by 1 position",
      "Rotates right by 1 position",
      "Clears the deque",
      "Throws an error"
    ]
  },
  {
    "q": "Which of the following is TRUE about namedtuples?",
    "c": null,
    "o": [
      "They are immutable like regular tuples",
      "They are mutable like lists",
      "They cannot be indexed",
      "They are slower than regular classes"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from itertools import count\ncounter = count(5)\nprint(next(counter))\nprint(next(counter))",
    "o": [
      "5\\n6",
      "0\\n1",
      "1\\n2",
      "5\\n5"
    ]
  },
  {
    "q": "Which module includes the function 'reduce' in Python 3?",
    "c": null,
    "o": [
      "functools",
      "itertools",
      "collections",
      "builtins"
    ]
  },
  {
    "q": "Which function generates an infinite loop of a given iterable?",
    "c": null,
    "o": [
      "cycle",
      "repeat",
      "count",
      "loop"
    ]
  },
  {
    "q": "Which method adds multiple items to the left side of a deque?",
    "c": null,
    "o": [
      "extendleft",
      "appendleft",
      "addleft",
      "insertleft"
    ]
  },
  {
    "q": "Which of the following is used to return the largest n elements from a list?",
    "c": null,
    "o": [
      "heapq.nlargest",
      "heapq.heapify",
      "heapq.nsmallest",
      "heapq.heappop"
    ]
  },
  {
    "q": "What does 'defaultdict(str)' return when accessing a missing key?",
    "c": null,
    "o": [
      "An empty string",
      "None",
      "0",
      "Raises KeyError"
    ]
  },
  {
    "q": "What does this code return?",
    "c": "from collections import deque\nd = deque([1, 2, 3])\nd.pop()\nprint(d)",
    "o": [
      "deque([1, 2])",
      "deque([2, 3])",
      "deque([1, 3])",
      "deque([1, 2, 3])"
    ]
  },
  {
    "q": "Which itertools function would you use to generate Cartesian product?",
    "c": null,
    "o": [
      "product",
      "combinations",
      "chain",
      "cycle"
    ]
  },
  {
    "q": "Which of the following creates an empty Counter object?",
    "c": null,
    "o": [
      "Counter()",
      "Counter([])",
      "Counter('')",
      "Counter({})"
    ]
  },
  {
    "q": "Which built-in function would you pair with lambda to remove odd numbers from a list?",
    "c": null,
    "o": [
      "filter",
      "map",
      "reduce",
      "zip"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "from collections import defaultdict\nd = defaultdict(int)\nprint(d['new'])",
    "o": [
      "0",
      "None",
      "KeyError",
      "''"
    ]
  },
  {
    "q": "Which of the following allows grouping items with identical adjacent values?",
    "c": null,
    "o": [
      "groupby",
      "combinations",
      "compress",
      "chain"
    ]
  },
  {
    "q": "Which method is used to add an element to the start of a deque?",
    "c": null,
    "o": [
      "appendleft",
      "append",
      "extendleft",
      "insertleft"
    ]
  },
  {
    "q": "Which functools function is used to convert a comparator to a key?",
    "c": null,
    "o": [
      "cmp_to_key",
      "reduce",
      "partial",
      "cache"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from heapq import heapify, heappop\nh = [5, 7, 1, 3]\nheapify(h)\nprint(heappop(h))",
    "o": [
      "1",
      "3",
      "5",
      "7"
    ]
  },
  {
    "q": "Which function returns a specified number of the smallest elements in a list?",
    "c": null,
    "o": [
      "heapq.nsmallest",
      "heapq.nlargest",
      "heapq.heappop",
      "heapq.heapify"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from functools import partial\npow2 = partial(pow, exp=2)\nprint(pow2(3))",
    "o": [
      "9",
      "6",
      "8",
      "None"
    ]
  },
  {
    "q": "Which of the following modules provides fast fixed-point tools?",
    "c": null,
    "o": [
      "collections",
      "heapq",
      "functools",
      "decimal"
    ]
  },
  {
    "q": "What does this code print?",
    "c": "from itertools import repeat\nfor i in repeat(42, 3):\n    print(i, end=' ')",
    "o": [
      "42 42 42 ",
      "42 42 ",
      "42 ",
      "infinite loop"
    ]
  },
  {
    "q": "Which of the following returns elements in reverse priority in a heap?",
    "c": null,
    "o": [
      "heapq.nlargest",
      "heapq.heappop",
      "heapq.heapify",
      "heapq.heapreplace"
    ]
  },
  {
    "q": "What does this code return?",
    "c": "from collections import Counter\nc = Counter('banana')\nprint(c['a'])",
    "o": [
      "3",
      "2",
      "1",
      "4"
    ]
  },
  {
    "q": "Which function in itertools is best for making an iterator that filters elements where a function returns false?",
    "c": null,
    "o": [
      "filterfalse",
      "filter",
      "compress",
      "dropwhile"
    ]
  },
  {
    "q": "Which of the following will create a deque with a fixed size of 5?",
    "c": null,
    "o": [
      "deque(maxlen=5)",
      "deque(5)",
      "deque(length=5)",
      "deque(size=5)"
    ]
  },
  {
    "q": "What is the result of using filter with None as the function?",
    "c": "nums = [0, 1, False, True, '', 'hello']\nprint(list(filter(None, nums)))",
    "o": [
      "[1, True, 'hello']",
      "[0, 1, False, True]",
      "[True, 'hello']",
      "[0, 1, 'hello']"
    ]
  },
  {
    "q": "Which collections class lets you define fields and access them with dot notation?",
    "c": null,
    "o": [
      "namedtuple",
      "defaultdict",
      "Counter",
      "deque"
    ]
  },
  {
    "q": "Which heapq function is used to add an item while keeping heap order?",
    "c": null,
    "o": [
      "heappush",
      "heapify",
      "heapreplace",
      "heappop"
    ]
  },
  {
    "q": "Which function in itertools can be used to terminate iteration based on a predicate?",
    "c": null,
    "o": [
      "takewhile",
      "dropwhile",
      "filter",
      "compress"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "from collections import Counter\nc1 = Counter('abc')\nc2 = Counter('bcd')\nprint(c1 + c2)",
    "o": [
      "Counter({'b': 2, 'c': 2, 'a': 1, 'd': 1})",
      "Counter({'a': 1, 'b': 1, 'c': 1, 'd': 1})",
      "Counter({'a': 2, 'b': 2, 'c': 2, 'd': 2})",
      "Counter({'b': 1, 'c': 1})"
    ]
  },
  {
    "q": "Which heapq function is best for replacing and returning the smallest value efficiently?",
    "c": null,
    "o": [
      "heapreplace",
      "heappop",
      "heappush",
      "nlargest"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from collections import namedtuple\nColor = namedtuple('Color', 'r g b')\nc = Color(255, 0, 0)\nprint(c._asdict())",
    "o": [
      "{'r': 255, 'g': 0, 'b': 0}",
      "('r', 'g', 'b')",
      "[255, 0, 0]",
      "{'Color': (255, 0, 0)}"
    ]
  },
  {
    "q": "Which functools tool helps preserve metadata of the original function?",
    "c": null,
    "o": [
      "wraps",
      "partial",
      "reduce",
      "cache"
    ]
  },
  {
    "q": "Which of the following tools is best for counting frequency of characters?",
    "c": null,
    "o": [
      "Counter",
      "defaultdict",
      "namedtuple",
      "deque"
    ]
  },
  {
    "q": "What does this code print?",
    "c": "from heapq import nlargest\nnums = [4, 1, 7, 3, 9]\nprint(nlargest(2, nums))",
    "o": [
      "[9, 7]",
      "[7, 4]",
      "[1, 3]",
      "[9, 4]"
    ]
  },
  {
    "q": "What does itertools.permutations(['x','y'], 2) return?",
    "c": null,
    "o": [
      "[('x', 'y'), ('y', 'x')]",
      "[('x', 'x'), ('y', 'y')]",
      "[('x',), ('y',)]",
      "[('x', 'x'), ('x', 'y'), ('y', 'x'), ('y', 'y')]"
    ]
  },
  {
    "q": "Which function applies a function of two arguments cumulatively?",
    "c": null,
    "o": [
      "reduce",
      "map",
      "filter",
      "zip"
    ]
  },
  {
    "q": "Which of the following returns an iterator yielding pairs of adjacent values?",
    "c": null,
    "o": [
      "zip(a, a[1:])",
      "enumerate(a)",
      "chain(a, a)",
      "groupby(a)"
    ]
  },
  {
    "q": "Which function from itertools can repeat an item a specified number of times?",
    "c": null,
    "o": [
      "repeat",
      "cycle",
      "chain",
      "accumulate"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "from collections import defaultdict\nd = defaultdict(lambda: 5)\nprint(d['unknown'])",
    "o": [
      "5",
      "None",
      "KeyError",
      "0"
    ]
  },
  {
    "q": "Which of the following is not available in the heapq module?",
    "c": null,
    "o": [
      "heapsort",
      "heapify",
      "heappop",
      "heapreplace"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from functools import partial\nadd_five = partial(lambda x, y: x + y, 5)\nprint(add_five(10))",
    "o": [
      "15",
      "50",
      "5",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following can be used to create an infinite counter?",
    "c": null,
    "o": [
      "itertools.count",
      "range",
      "enumerate",
      "zip"
    ]
  },
  {
    "q": "Which of the following returns the number of elements in a Counter?",
    "c": "from collections import Counter\nc = Counter('hello')\nprint(len(c))",
    "o": [
      "4",
      "5",
      "1",
      "0"
    ]
  },
  {
    "q": "Which of these functions stops filtering when the predicate becomes false?",
    "c": null,
    "o": [
      "takewhile",
      "dropwhile",
      "filterfalse",
      "compress"
    ]
  },
  {
    "q": "What does the deque method 'extendleft' do?",
    "c": null,
    "o": [
      "Adds elements to the left end, in reverse order",
      "Adds elements to the right end",
      "Extends with only even elements",
      "Reverses the deque"
    ]
  },
  {
    "q": "Which functools decorator helps with caching results of expensive function calls?",
    "c": null,
    "o": [
      "lru_cache",
      "reduce",
      "partial",
      "wraps"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "from heapq import heapify\narr = [3, 1, 4, 1, 5]\nheapify(arr)\nprint(arr[0])",
    "o": [
      "1",
      "3",
      "4",
      "5"
    ]
  },
  {
    "q": "What does `collections.deque` provide over a regular list?",
    "c": null,
    "o": [
      "Faster appends and pops from both ends",
      "Sorting functionality",
      "Automatic indexing",
      "Memory-efficient slices"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import Counter\nc = Counter('mississippi')\nprint(c.most_common(1))",
    "o": [
      "[('i', 4)]",
      "[('s', 4)]",
      "[('p', 2)]",
      "[('m', 1)]"
    ]
  },
  {
    "q": "What is a correct use of itertools.chain?",
    "c": null,
    "o": [
      "chain([1, 2], [3, 4])",
      "chain((1, 2), 3, 4)",
      "chain([1, 2], 3)",
      "chain(1, 2, 3, 4)"
    ]
  },
  {
    "q": "Which built-in Python function can turn a list of values into a new list using a function?",
    "c": null,
    "o": [
      "map",
      "filter",
      "reduce",
      "zip"
    ]
  },
  {
    "q": "Which function in itertools is used to get all r-length combinations of elements without replacement?",
    "c": null,
    "o": [
      "combinations",
      "product",
      "permutations",
      "groupby"
    ]
  },
  {
    "q": "What does the following code return?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [1, 2, 3, 4]))",
    "o": [
      "24",
      "10",
      "6",
      "None"
    ]
  },
  {
    "q": "Which of the following functions turns a comparator into a key usable with sort?",
    "c": null,
    "o": [
      "cmp_to_key",
      "wraps",
      "partial",
      "reduce"
    ]
  },
  {
    "q": "What happens if you access a missing key in a normal Python dict?",
    "c": null,
    "o": [
      "Raises KeyError",
      "Returns None",
      "Returns empty string",
      "Returns 0"
    ]
  },
  {
    "q": "Which itertools function replicates each element a specific number of times?",
    "c": null,
    "o": [
      "repeat",
      "cycle",
      "product",
      "accumulate"
    ]
  },
  {
    "q": "Which of the following will give the last element of a heapified list?",
    "c": "import heapq\nh = [3, 1, 4, 2]\nheapq.heapify(h)\nprint(h[-1])",
    "o": [
      "4",
      "1",
      "3",
      "2"
    ]
  },
  {
    "q": "What is the default factory type used in `defaultdict` if not specified?",
    "c": null,
    "o": [
      "None (raises error if not provided)",
      "int",
      "str",
      "list"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "from collections import deque\nd = deque([10, 20, 30])\nd.rotate(1)\nprint(d)",
    "o": [
      "deque([30, 10, 20])",
      "deque([20, 30, 10])",
      "deque([10, 20, 30])",
      "deque([20, 10, 30])"
    ]
  },
  {
    "q": "Which of the following returns all possible orderings of a given length from an iterable?",
    "c": null,
    "o": [
      "permutations",
      "combinations",
      "product",
      "groupby"
    ]
  },
  {
    "q": "Which `heapq` function will return a sorted list of the n smallest items?",
    "c": null,
    "o": [
      "nsmallest",
      "nlargest",
      "heapify",
      "heapreplace"
    ]
  },
  {
    "q": "What does `functools.partial` do?",
    "c": null,
    "o": [
      "Fixes some arguments of a function and returns a new function",
      "Caches a function result",
      "Wraps a comparator as a key",
      "Combines multiple functions"
    ]
  },
  {
    "q": "Which of the following is immutable and supports named fields?",
    "c": null,
    "o": [
      "namedtuple",
      "dict",
      "list",
      "defaultdict"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x - y, [10, 5, 1]))",
    "o": [
      "4",
      "6",
      "14",
      "5"
    ]
  },
  {
    "q": "Which of the following is used to build heap structures from lists?",
    "c": null,
    "o": [
      "heapify",
      "heappop",
      "heappush",
      "nlargest"
    ]
  },
  {
    "q": "Which itertools function takes elements while the predicate is true?",
    "c": null,
    "o": [
      "takewhile",
      "dropwhile",
      "compress",
      "repeat"
    ]
  },
  {
    "q": "What does the `filter` function return in Python 3?",
    "c": null,
    "o": [
      "An iterator",
      "A list",
      "A tuple",
      "A generator function"
    ]
  },
  {
    "q": "What is the default starting value for `itertools.count()` if not provided?",
    "c": null,
    "o": [
      "0",
      "1",
      "None",
      "-1"
    ]
  },
  {
    "q": "Which function is used to merge multiple iterables into one in sequence?",
    "c": null,
    "o": [
      "chain",
      "product",
      "groupby",
      "accumulate"
    ]
  },
  {
    "q": "Which statement about `namedtuple` is FALSE?",
    "c": null,
    "o": [
      "Fields are mutable",
      "Supports indexing like a tuple",
      "Supports accessing fields by name",
      "It is immutable"
    ]
  },
  {
    "q": "Which `heapq` function pushes an item and then pops and returns the smallest?",
    "c": null,
    "o": [
      "heappushpop",
      "heapreplace",
      "heappop",
      "heapify"
    ]
  },
  {
    "q": "What is the purpose of `functools.wraps()`?",
    "c": null,
    "o": [
      "Preserves the original function's metadata when wrapping",
      "Converts a function into a wrapper",
      "Caches the function",
      "Wraps a partial function"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "from collections import defaultdict\nd = defaultdict(int)\nd['a'] += 3\nprint(d['a'])",
    "o": [
      "3",
      "0",
      "1",
      "KeyError"
    ]
  },
  {
    "q": "Which module includes tools like `count`, `cycle`, and `repeat`?",
    "c": null,
    "o": [
      "itertools",
      "functools",
      "heapq",
      "collections"
    ]
  },
  {
    "q": "What is the type of object returned by `map()` in Python 3?",
    "c": null,
    "o": [
      "map object (iterator)",
      "list",
      "tuple",
      "generator function"
    ]
  },
  {
    "q": "What happens if you call `heappop()` on an empty heap?",
    "c": null,
    "o": [
      "Raises IndexError",
      "Returns None",
      "Returns 0",
      "Raises ValueError"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from itertools import product\nprint(list(product([1, 2], repeat=2)))",
    "o": [
      "[(1, 1), (1, 2), (2, 1), (2, 2)]",
      "[(1, 2), (2, 1)]",
      "[(1, 1), (2, 2)]",
      "[(1, 2)]"
    ]
  },
  {
    "q": "What is the primary advantage of using `heapq` over `sorted()`?",
    "c": null,
    "o": [
      "Better performance for maintaining a dynamic sorted structure",
      "Built-in support for max-heaps",
      "It sorts in-place by default",
      "It can sort strings and numbers together"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "from collections import Counter\nc = Counter({'a': 2, 'b': 3})\nc.subtract({'a': 1, 'b': 4})\nprint(c)",
    "o": [
      "Counter({'a': 1, 'b': -1})",
      "Counter({'a': 3, 'b': 7})",
      "Counter({'a': 2, 'b': 3})",
      "Counter({'a': 1, 'b': 1})"
    ]
  },
  {
    "q": "Which of the following functions helps in accumulating sums?",
    "c": null,
    "o": [
      "accumulate",
      "repeat",
      "combinations",
      "product"
    ]
  },
  {
    "q": "Which of the following creates a heap in-place?",
    "c": "import heapq\narr = [10, 5, 3, 7]\nheapq.____(arr)",
    "o": [
      "heapify",
      "heappush",
      "heappop",
      "nlargest"
    ]
  },
  {
    "q": "What does this code return?",
    "c": "from functools import lru_cache\n@lru_cache(maxsize=None)\ndef fib(n):\n    return n if n < 2 else fib(n-1) + fib(n-2)\nprint(fib(5))",
    "o": [
      "5",
      "8",
      "13",
      "3"
    ]
  },
  {
    "q": "Which tool would you use to maintain insertion order and default values?",
    "c": null,
    "o": [
      "defaultdict",
      "OrderedDict",
      "Counter",
      "set"
    ]
  },
  {
    "q": "What is the use of `enumerate()`?",
    "c": null,
    "o": [
      "Returns index and value while iterating",
      "Reverses an iterable",
      "Filters values",
      "Creates a heap from a list"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from collections import deque\nd = deque([1, 2, 3, 4])\nd.popleft()\nprint(d)",
    "o": [
      "deque([2, 3, 4])",
      "deque([1, 2, 3])",
      "deque([1, 3, 4])",
      "deque([1, 2, 4])"
    ]
  },
  {
    "q": "Which function in `functools` turns a function into a comparator-friendly one for sorting?",
    "c": null,
    "o": [
      "cmp_to_key",
      "wraps",
      "partial",
      "reduce"
    ]
  },
  {
    "q": "Which of the following is NOT part of the `itertools` module?",
    "c": null,
    "o": [
      "filter",
      "product",
      "cycle",
      "repeat"
    ]
  },
  {
    "q": "What is the main use of `functools.partial`?",
    "c": null,
    "o": [
      "To create a new function with some arguments fixed",
      "To cache a function result",
      "To iterate over combinations",
      "To convert a comparator into a key function"
    ]
  },
  {
    "q": "Which of the following returns the highest frequency item from a Counter?",
    "c": "from collections import Counter\nc = Counter('aabbbcc')\nprint(c.most_common(1))",
    "o": [
      "[('b', 3)]",
      "[('a', 2)]",
      "[('c', 2)]",
      "[('b', 2)]"
    ]
  },
  {
    "q": "Which of the following `itertools` functions produces all possible permutations?",
    "c": null,
    "o": [
      "permutations",
      "combinations",
      "product",
      "combinations_with_replacement"
    ]
  },
  {
    "q": "Which function is used to push an item into a heap while maintaining heap order?",
    "c": null,
    "o": [
      "heappush",
      "heapify",
      "heappop",
      "nlargest"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "from itertools import combinations\nitems = ['a', 'b', 'c']\nprint(list(combinations(items, 2)))",
    "o": [
      "[('a', 'b'), ('a', 'c'), ('b', 'c')]",
      "[('a', 'a'), ('b', 'b'), ('c', 'c')]",
      "[('a', 'b'), ('b', 'c'), ('c', 'a')]",
      "[('a', 'b'), ('b', 'a'), ('a', 'c')]"
    ]
  },
  {
    "q": "What does the `reduce` function do?",
    "c": null,
    "o": [
      "Applies a rolling computation to sequential elements",
      "Filters values based on a condition",
      "Maps each element to a new value",
      "Concatenates strings"
    ]
  },
  {
    "q": "Which of these creates a max heap using heapq?",
    "c": null,
    "o": [
      "Use negative values with heappush/heappop",
      "Use maxheapify",
      "heapq has built-in maxheap",
      "Reverse the sorted list"
    ]
  },
  {
    "q": "Which deque method removes an element from the right end?",
    "c": null,
    "o": [
      "pop",
      "popleft",
      "remove",
      "discard"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['a', 'b', 'c']))",
    "o": [
      "abc",
      "a b c",
      "['a', 'b', 'c']",
      "TypeError"
    ]
  },
  {
    "q": "Which of these best describes `filterfalse` from itertools?",
    "c": null,
    "o": [
      "It filters elements where the function returns False",
      "It filters elements where the function returns True",
      "It stops after the first false condition",
      "It replaces None values in a list"
    ]
  },
  {
    "q": "What is the main difference between `heapreplace()` and `heappushpop()` in heapq?",
    "c": null,
    "o": [
      "heapreplace() pops and then pushes, heappushpop() pushes then pops",
      "heapreplace() only pushes, heappushpop() only pops",
      "heapreplace() maintains max heap, heappushpop() maintains min heap",
      "heapreplace() is slower than heappushpop()"
    ]
  },
  {
    "q": "Which of the following creates an iterator that groups consecutive identical elements?",
    "c": null,
    "o": [
      "groupby",
      "combinations",
      "chain",
      "accumulate"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "from collections import namedtuple\nPoint = namedtuple('Point', ['x', 'y'])\np = Point(1, 2)\nprint(p.x, p.y)",
    "o": [
      "1 2",
      "x y",
      "(1, 2)",
      "Error"
    ]
  },
  {
    "q": "Which of the following produces a running total of an iterable?",
    "c": null,
    "o": [
      "accumulate",
      "repeat",
      "chain",
      "groupby"
    ]
  },
  {
    "q": "What happens when you use `Counter` on a list with duplicates?",
    "c": null,
    "o": [
      "It counts the number of occurrences of each element",
      "It removes all duplicates",
      "It reverses the list",
      "It raises an error"
    ]
  },
  {
    "q": "What will the output be?",
    "c": "from itertools import combinations_with_replacement\nprint(list(combinations_with_replacement('AB', 2)))",
    "o": [
      "[('A', 'A'), ('A', 'B'), ('B', 'B')]",
      "[('A', 'B'), ('B', 'A')]",
      "[('A', 'A'), ('B', 'A'), ('B', 'B')]",
      "[('A', 'B'), ('A', 'A'), ('B', 'B')]"
    ]
  },
  {
    "q": "Which of the following is TRUE about `defaultdict`?",
    "c": null,
    "o": [
      "It creates a default value for missing keys",
      "It disallows key creation",
      "It only works with lists",
      "It automatically sorts keys"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from heapq import heapify, heappush\nnums = [8, 3, 5]\nheapify(nums)\nheappush(nums, 2)\nprint(nums[0])",
    "o": [
      "2",
      "3",
      "5",
      "8"
    ]
  },
  {
    "q": "Which of the following uses a generator internally?",
    "c": null,
    "o": [
      "filter",
      "list",
      "tuple",
      "str"
    ]
  },
  {
    "q": "What does `functools.reduce` return when applied to a list of strings and `+` operator?",
    "c": null,
    "o": [
      "Concatenated string",
      "List of characters",
      "Length of all strings",
      "None"
    ]
  },
  {
    "q": "What does the `extendleft()` method do in a `deque`?",
    "c": null,
    "o": [
      "Adds elements to the beginning of the deque in reverse order",
      "Adds elements to the end of the deque",
      "Adds elements to the beginning in given order",
      "Removes elements from the left"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "from collections import Counter\nc = Counter('aabc')\nc.update('bc')\nprint(c)",
    "o": [
      "Counter({'a': 2, 'b': 2, 'c': 2})",
      "Counter({'a': 2, 'b': 1, 'c': 1})",
      "Counter({'a': 1, 'b': 2, 'c': 1})",
      "Counter({'a': 3, 'b': 2, 'c': 2})"
    ]
  },
  {
    "q": "Which of these iterators returns values from multiple iterables in sequence?",
    "c": null,
    "o": [
      "chain",
      "zip",
      "cycle",
      "repeat"
    ]
  },
  {
    "q": "What does the `repeat()` function from `itertools` return?",
    "c": null,
    "o": [
      "An iterator that repeats an object either infinitely or a set number of times",
      "An iterator that yields values in reverse",
      "A list of random integers",
      "A new list with repeated values"
    ]
  },
  {
    "q": "Which method in `heapq` will return the n largest elements from a dataset?",
    "c": null,
    "o": [
      "nlargest",
      "heapreplace",
      "heapify",
      "heappushpop"
    ]
  },
  {
    "q": "Which `functools` function is typically used to memoize function calls?",
    "c": null,
    "o": [
      "lru_cache",
      "partial",
      "reduce",
      "wraps"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "from itertools import cycle\nc = cycle('XY')\nfor i in range(4):\n    print(next(c), end=' ')",
    "o": [
      "X Y X Y ",
      "X X Y Y ",
      "Y Y X X ",
      "Y X Y X "
    ]
  },
  {
    "q": "Which of the following is NOT a valid use of `namedtuple`?",
    "c": null,
    "o": [
      "Modifying field values after creation",
      "Creating lightweight, immutable objects",
      "Accessing fields by attribute name",
      "Unpacking like a regular tuple"
    ]
  },
  {
    "q": "Which built-in function filters elements based on a condition?",
    "c": null,
    "o": [
      "filter",
      "map",
      "reduce",
      "zip"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from heapq import heappop, heapify\nlst = [6, 3, 8, 1]\nheapify(lst)\nheappop(lst)\nprint(lst)",
    "o": [
      "[3, 6, 8]",
      "[6, 3, 8, 1]",
      "[1, 3, 6]",
      "[1, 6, 8]"
    ]
  },
  {
    "q": "Which of the following can be used to combine multiple iterables into tuples?",
    "c": null,
    "o": [
      "zip",
      "map",
      "filter",
      "chain"
    ]
  },
  {
    "q": "What will be the result of this code?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, [1, 2, 3, 4]))",
    "o": [
      "10",
      "24",
      "6",
      "None"
    ]
  },
  {
    "q": "Which of the following is best suited for implementing a LIFO queue?",
    "c": null,
    "o": [
      "collections.deque",
      "heapq",
      "set",
      "tuple"
    ]
  },
  {
    "q": "Which of these will return an iterator of 2-length permutations?",
    "c": null,
    "o": [
      "itertools.permutations([1, 2, 3], 2)",
      "itertools.combinations([1, 2, 3], 2)",
      "itertools.product([1, 2, 3], 2)",
      "itertools.repeat([1, 2], 2)"
    ]
  },
  {
    "q": "Which tool helps wrap a comparator function for sorting in Python?",
    "c": null,
    "o": [
      "functools.cmp_to_key",
      "functools.wraps",
      "functools.partial",
      "functools.reduce"
    ]
  },
  {
    "q": "What is the purpose of `heappop()` in heapq?",
    "c": null,
    "o": [
      "Removes and returns the smallest item",
      "Returns the largest item",
      "Adds a new item to the heap",
      "Converts list to heap"
    ]
  },
  {
    "q": "Which function will remove items from a deque starting from the left?",
    "c": null,
    "o": [
      "popleft",
      "pop",
      "remove",
      "del"
    ]
  },
  {
    "q": "Which of the following is TRUE about `filter()` in Python?",
    "c": null,
    "o": [
      "It returns an iterator of elements for which the function returns True",
      "It returns a list in Python 3",
      "It removes duplicates automatically",
      "It only works with strings"
    ]
  },
  {
    "q": "What will the output be?",
    "c": "from itertools import product\nprint(list(product([1, 2], repeat=2)))",
    "o": [
      "[(1, 1), (1, 2), (2, 1), (2, 2)]",
      "[(1, 2), (2, 1)]",
      "[(1, 2, 1), (2, 2, 1)]",
      "[(1, 2)]"
    ]
  },
  {
    "q": "Which of the following allows tuple-like access by attribute name?",
    "c": null,
    "o": [
      "namedtuple",
      "tuple",
      "dict",
      "defaultdict"
    ]
  },
  {
    "q": "Which statement is TRUE about `defaultdict`?",
    "c": null,
    "o": [
      "It initializes missing keys with a default factory function",
      "It raises a KeyError when a missing key is accessed",
      "It sorts all keys automatically",
      "It is immutable"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "from collections import deque\nd = deque([1, 2, 3])\nd.appendleft(0)\nprint(d)",
    "o": [
      "deque([0, 1, 2, 3])",
      "deque([1, 2, 3, 0])",
      "deque([3, 2, 1, 0])",
      "deque([0, 2, 3])"
    ]
  },
  {
    "q": "Which function from `functools` decorates a function for least-recently-used caching?",
    "c": null,
    "o": [
      "lru_cache",
      "wraps",
      "partial",
      "cmp_to_key"
    ]
  },
  {
    "q": "What will `filter(None, [0, 1, '', 'hello'])` return?",
    "c": null,
    "o": [
      "[1, 'hello']",
      "[0, 1, '', 'hello']",
      "['', 'hello']",
      "[0, 1]"
    ]
  },
  {
    "q": "Which of the following tools creates an infinite iterator?",
    "c": null,
    "o": [
      "itertools.cycle",
      "itertools.combinations",
      "functools.reduce",
      "collections.Counter"
    ]
  },
  {
    "q": "Which `heapq` function removes the smallest element and adds a new one?",
    "c": null,
    "o": [
      "heapreplace",
      "heappop",
      "heapify",
      "nlargest"
    ]
  },
  {
    "q": "Which of the following is a valid use of `Counter`?",
    "c": "from collections import Counter\nc = Counter(['a', 'b', 'a', 'c'])\nprint(c['a'])",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "What does `functools.wraps` do?",
    "c": null,
    "o": [
      "Preserves metadata of the original function in decorators",
      "Wraps a function to be immutable",
      "Wraps arguments in a list",
      "Caches the result of a function"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from itertools import accumulate\nprint(list(accumulate([1, 2, 3, 4])))",
    "o": [
      "[1, 3, 6, 10]",
      "[1, 2, 3, 4]",
      "[4, 3, 2, 1]",
      "[10]"
    ]
  },
  {
    "q": "Which function is used to create combinations allowing repeated elements?",
    "c": null,
    "o": [
      "combinations_with_replacement",
      "permutations",
      "groupby",
      "repeat"
    ]
  },
  {
    "q": "Which of these `itertools` functions will return successive r-length tuples from the input iterable?",
    "c": null,
    "o": [
      "permutations",
      "combinations",
      "groupby",
      "repeat"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "from collections import defaultdict\nd = defaultdict(list)\nd['a'].append(1)\nd['a'].append(2)\nprint(d['a'])",
    "o": [
      "[1, 2]",
      "[2]",
      "[1]",
      "None"
    ]
  },
  {
    "q": "Which function is used to flatten multiple iterables into a single iterable?",
    "c": null,
    "o": [
      "chain",
      "zip",
      "groupby",
      "repeat"
    ]
  },
  {
    "q": "Which function in `heapq` returns the smallest item without removing it?",
    "c": null,
    "o": [
      "heap[0]",
      "heappop",
      "heapreplace",
      "heapmin"
    ]
  },
  {
    "q": "Which module provides a lightweight way to store data with named fields?",
    "c": null,
    "o": [
      "collections.namedtuple",
      "functools.partial",
      "heapq",
      "operator"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from itertools import cycle\ncolors = cycle(['red', 'green'])\nprint(next(colors))\nprint(next(colors))\nprint(next(colors))",
    "o": [
      "red\ngreen\nred",
      "green\nred\ngreen",
      "red\nred\nred",
      "red\ngreen\ngreen"
    ]
  },
  {
    "q": "Which function in `functools` applies a function of two arguments cumulatively to the items of a sequence?",
    "c": null,
    "o": [
      "reduce",
      "partial",
      "cmp_to_key",
      "wraps"
    ]
  },
  {
    "q": "What is the use of `groupby()` in `itertools`?",
    "c": null,
    "o": [
      "Group adjacent elements with the same key",
      "Group sorted items by their values",
      "Sort items in a dictionary",
      "Remove duplicate values"
    ]
  },
  {
    "q": "Which of the following creates a min-heap from a list?",
    "c": "import heapq\nlst = [9, 5, 1, 3]\nheapq.____(lst)",
    "o": [
      "heapify",
      "heappop",
      "heappush",
      "nlargest"
    ]
  },
  {
    "q": "Which built-in function applies a function to every item of an iterable?",
    "c": null,
    "o": [
      "map",
      "filter",
      "reduce",
      "zip"
    ]
  },
  {
    "q": "What does `Counter('aabbc')` return?",
    "c": null,
    "o": [
      "Counter({'a': 2, 'b': 2, 'c': 1})",
      "Counter({'a': 1, 'b': 2, 'c': 2})",
      "Counter({'a': 1, 'b': 1, 'c': 1})",
      "Counter({'a': 2, 'b': 1, 'c': 2})"
    ]
  },
  {
    "q": "Which `itertools` function is used to skip elements while a condition is true?",
    "c": null,
    "o": [
      "dropwhile",
      "takewhile",
      "filterfalse",
      "repeat"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "from collections import namedtuple\nPerson = namedtuple('Person', 'name age')\np = Person('Alice', 30)\nprint(p.age)",
    "o": [
      "30",
      "'age'",
      "('Alice', 30)",
      "Error"
    ]
  },
  {
    "q": "Which of the following creates an infinite iterator with a constant value?",
    "c": null,
    "o": [
      "repeat",
      "cycle",
      "accumulate",
      "product"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from functools import partial\ndef power(base, exp): return base ** exp\nsquare = partial(power, exp=2)\nprint(square(4))",
    "o": [
      "16",
      "8",
      "2",
      "4"
    ]
  },
  {
    "q": "Which `heapq` function is best for keeping track of top N largest elements?",
    "c": null,
    "o": [
      "nlargest",
      "heapreplace",
      "heappushpop",
      "heappop"
    ]
  },
  {
    "q": "What does `deque(maxlen=3)` do?",
    "c": null,
    "o": [
      "Creates a deque with a maximum of 3 elements",
      "Creates a deque with 3 elements",
      "Creates a deque with step size 3",
      "Creates a deque that accepts only integers"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [1, 2, 3, 0, 5]))",
    "o": [
      "0",
      "30",
      "5",
      "1"
    ]
  },
  {
    "q": "Which of the following allows attribute access like a class but behaves like a tuple?",
    "c": null,
    "o": [
      "namedtuple",
      "dict",
      "defaultdict",
      "set"
    ]
  },
  {
    "q": "Which function will return an iterator that returns items from the iterable as long as the predicate is true?",
    "c": null,
    "o": [
      "takewhile",
      "dropwhile",
      "filter",
      "map"
    ]
  },
  {
    "q": "Which method is used to remove an item from the end of a `deque`?",
    "c": null,
    "o": [
      "pop",
      "popleft",
      "remove",
      "del"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "from collections import Counter\nc = Counter('abcabc')\nprint(c['a'])",
    "o": [
      "2",
      "1",
      "0",
      "3"
    ]
  },
  {
    "q": "What is the result of `list(itertools.repeat(5, 3))`?",
    "c": null,
    "o": [
      "[5, 5, 5]",
      "[3, 3, 3]",
      "[1, 2, 3, 4, 5]",
      "[5, 3]"
    ]
  },
  {
    "q": "Which `functools` function is commonly used in decorators to preserve the metadata of the original function?",
    "c": null,
    "o": [
      "wraps",
      "reduce",
      "partial",
      "cmp_to_key"
    ]
  },
  {
    "q": "Which of the following statements is TRUE about `heapify()`?",
    "c": null,
    "o": [
      "It transforms a list into a valid heap in-place",
      "It sorts a list in ascending order",
      "It returns a new list",
      "It only works with strings"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['P', 'y', 't', 'h', 'o', 'n']))",
    "o": [
      "Python",
      "['P', 'y', 't', 'h', 'o', 'n']",
      "P+y+t+h+o+n",
      "Error"
    ]
  },
  {
    "q": "Which function returns a list of the n smallest elements in a dataset?",
    "c": null,
    "o": [
      "nsmallest",
      "nlargest",
      "heapreplace",
      "heappop"
    ]
  },
  {
    "q": "What is the use of `functools.cmp_to_key()`?",
    "c": null,
    "o": [
      "Converts an old-style comparison function to a key function",
      "Compares two key values",
      "Caches results of comparison operations",
      "Creates key-value pairs from lists"
    ]
  },
  {
    "q": "Which method in `deque` inserts an item at the right end?",
    "c": null,
    "o": [
      "append",
      "appendleft",
      "extendleft",
      "insert"
    ]
  },
  {
    "q": "What will the following code return?",
    "c": "from itertools import combinations\nprint(list(combinations('AB', 2)))",
    "o": [
      "[('A', 'B')]",
      "[('B', 'A')]",
      "[('A',), ('B',)]",
      "[('A', 'A'), ('A', 'B')]"
    ]
  },
  {
    "q": "What does `heappushpop(heap, item)` do?",
    "c": null,
    "o": [
      "Pushes the item and then pops the smallest element in a single atomic operation",
      "Pops the smallest item and then pushes the new one",
      "Pushes the item twice",
      "Replaces the entire heap with a new one"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import defaultdict\nd = defaultdict(int)\nd['x'] += 5\nprint(d['x'])",
    "o": [
      "5",
      "0",
      "None",
      "KeyError"
    ]
  },
  {
    "q": "Which `itertools` function can be used to compute a Cartesian product of input iterables?",
    "c": null,
    "o": [
      "product",
      "combinations",
      "permutations",
      "cycle"
    ]
  },
  {
    "q": "What does `functools.partial` return?",
    "c": null,
    "o": [
      "A new function with fixed arguments",
      "A decorator that memoizes the function",
      "A sorted version of a function",
      "A dictionary with partial values"
    ]
  },
  {
    "q": "Which function provides the n largest elements from a data set using a key?",
    "c": null,
    "o": [
      "nlargest",
      "heapify",
      "heappop",
      "nsmallest"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import namedtuple\nPerson = namedtuple('Person', ['name', 'age'])\np = Person(name='Tom', age=25)\nprint(p.name)",
    "o": [
      "Tom",
      "25",
      "name",
      "Person"
    ]
  },
  {
    "q": "Which `itertools` function filters elements where the predicate is false?",
    "c": null,
    "o": [
      "filterfalse",
      "dropwhile",
      "takewhile",
      "filter"
    ]
  },
  {
    "q": "Which method removes all elements from a deque?",
    "c": null,
    "o": [
      "clear",
      "remove",
      "discard",
      "flush"
    ]
  },
  {
    "q": "Which function in `functools` supports total ordering for class comparisons?",
    "c": null,
    "o": [
      "total_ordering",
      "cmp_to_key",
      "wraps",
      "partial"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from heapq import nsmallest\nnums = [10, 1, 4, 3, 8]\nprint(nsmallest(2, nums))",
    "o": [
      "[1, 3]",
      "[10, 8]",
      "[4, 3]",
      "[1, 4]"
    ]
  },
  {
    "q": "Which of these `collections` classes is immutable?",
    "c": null,
    "o": [
      "namedtuple",
      "deque",
      "defaultdict",
      "Counter"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from collections import Counter\nc = Counter(['x', 'x', 'y'])\nc['z'] += 1\nprint(c)",
    "o": [
      "Counter({'x': 2, 'y': 1, 'z': 1})",
      "Counter({'x': 2, 'y': 1})",
      "Counter({'z': 1})",
      "KeyError"
    ]
  },
  {
    "q": "Which `itertools` function is commonly used to flatten a list of lists?",
    "c": null,
    "o": [
      "chain.from_iterable",
      "product",
      "groupby",
      "repeat"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from itertools import permutations\np = permutations('ab', 2)\nprint(list(p))",
    "o": [
      "[('a', 'b'), ('b', 'a')]",
      "[('a', 'a'), ('b', 'b')]",
      "[('ab',)]",
      "[('a', 'b')]"
    ]
  },
  {
    "q": "Which function allows building a chain of iterables into a single iterable?",
    "c": null,
    "o": [
      "chain",
      "zip",
      "map",
      "filter"
    ]
  },
  {
    "q": "Which `functools` decorator caches function results using an LRU strategy?",
    "c": null,
    "o": [
      "lru_cache",
      "wraps",
      "cmp_to_key",
      "partial"
    ]
  },
  {
    "q": "Which of these would you use to make a queue that can pop from both ends?",
    "c": null,
    "o": [
      "deque",
      "list",
      "set",
      "tuple"
    ]
  },
  {
    "q": "What will `heapq.heappop([1, 3, 2, 7])` return after `heapify`?",
    "c": "import heapq\nlst = [1, 3, 2, 7]\nheapq.heapify(lst)\nprint(heapq.heappop(lst))",
    "o": [
      "1",
      "3",
      "2",
      "7"
    ]
  },
  {
    "q": "Which `collections` tool automatically initializes missing keys?",
    "c": null,
    "o": [
      "defaultdict",
      "Counter",
      "deque",
      "namedtuple"
    ]
  },
  {
    "q": "What does `functools.cmp_to_key()` return?",
    "c": null,
    "o": [
      "A key function usable for sorting",
      "A comparator function for filtering",
      "A key-value dictionary",
      "A wrapper for partial sorting"
    ]
  },
  {
    "q": "Which of the following is TRUE about `itertools.accumulate()`?",
    "c": null,
    "o": [
      "It returns running totals of input iterable",
      "It repeats the input iterable indefinitely",
      "It groups items by key",
      "It returns sorted results"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import deque\nd = deque([1, 2, 3])\nd.rotate(1)\nprint(list(d))",
    "o": [
      "[3, 1, 2]",
      "[2, 3, 1]",
      "[1, 2, 3]",
      "[3, 2, 1]"
    ]
  },
  {
    "q": "Which function would you use to permanently store sorted order based on an old comparison function?",
    "c": null,
    "o": [
      "functools.cmp_to_key",
      "functools.wraps",
      "functools.partial",
      "heapq.heapify"
    ]
  },
  {
    "q": "What is the role of `extendleft()` in `deque`?",
    "c": null,
    "o": [
      "Adds multiple items to the left in reverse order",
      "Extends items at right end",
      "Removes items from left",
      "Clears the deque"
    ]
  },
  {
    "q": "Which method in `heapq` returns and removes the smallest element?",
    "c": null,
    "o": [
      "heappop",
      "heapreplace",
      "heappush",
      "nlargest"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from functools import reduce\nprint(reduce(lambda a, b: a if a > b else b, [1, 5, 3, 2]))",
    "o": [
      "5",
      "3",
      "1",
      "2"
    ]
  },
  {
    "q": "Which function is used to generate all r-length combinations without replacement?",
    "c": null,
    "o": [
      "combinations",
      "permutations",
      "product",
      "repeat"
    ]
  },
  {
    "q": "Which data type is returned by `namedtuple`?",
    "c": null,
    "o": [
      "A subclass of tuple with named fields",
      "A standard dictionary",
      "A custom list class",
      "A mutable set"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from itertools import islice\nprint(list(islice(range(10), 3)))",
    "o": [
      "[0, 1, 2]",
      "[1, 2, 3]",
      "[0, 1, 2, 3]",
      "[3, 4, 5]"
    ]
  },
  {
    "q": "Which `functools` utility helps bind some arguments to a function early?",
    "c": null,
    "o": [
      "partial",
      "reduce",
      "cmp_to_key",
      "wraps"
    ]
  },
  {
    "q": "What is the effect of calling `deque.rotate(2)` on `deque([1, 2, 3, 4])`?",
    "c": null,
    "o": [
      "Moves the last two elements to the front",
      "Moves the first two elements to the end",
      "Clears the deque",
      "Reverses the deque"
    ]
  },
  {
    "q": "What will `Counter(['a', 'b', 'a', 'c']).most_common(1)` return?",
    "c": null,
    "o": [
      "[('a', 2)]",
      "[('b', 1)]",
      "[('c', 1)]",
      "[('a', 1)]"
    ]
  },
  {
    "q": "Which itertools function creates an iterator that returns elements from the iterable and saves a copy for repeated use?",
    "c": null,
    "o": [
      "tee",
      "chain",
      "cycle",
      "combinations"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [2, 3, 4]))",
    "o": [
      "24",
      "9",
      "14",
      "10"
    ]
  },
  {
    "q": "Which method adds an element to the right end of a `deque`?",
    "c": null,
    "o": [
      "append",
      "appendleft",
      "pop",
      "popleft"
    ]
  },
  {
    "q": "What does `heapq.nlargest(3, [1, 3, 2, 7, 5])` return?",
    "c": null,
    "o": [
      "[7, 5, 3]",
      "[1, 2, 3]",
      "[3, 2, 1]",
      "[5, 7, 3]"
    ]
  },
  {
    "q": "Which of these `collections` classes allows you to count hashable objects?",
    "c": null,
    "o": [
      "Counter",
      "deque",
      "defaultdict",
      "namedtuple"
    ]
  },
  {
    "q": "What is the role of `functools.wraps` in Python decorators?",
    "c": null,
    "o": [
      "Preserves the original function’s metadata",
      "Caches the decorator’s result",
      "Generates a key function",
      "Binds arguments to the function"
    ]
  },
  {
    "q": "Which of the following returns all possible r-length tuples with repeated elements?",
    "c": null,
    "o": [
      "product",
      "permutations",
      "combinations",
      "combinations_with_replacement"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import defaultdict\nd = defaultdict(int)\nd['a'] += 2\nd['b'] += 3\nprint(d['a'], d['b'], d['c'])",
    "o": [
      "2 3 0",
      "2 3 None",
      "0 0 0",
      "Error"
    ]
  },
  {
    "q": "Which `heapq` function pushes an item on the heap?",
    "c": null,
    "o": [
      "heappush",
      "heappop",
      "heapify",
      "heapreplace"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from itertools import combinations_with_replacement\nprint(list(combinations_with_replacement('AB', 2)))",
    "o": [
      "[('A', 'A'), ('A', 'B'), ('B', 'B')]",
      "[('A', 'B'), ('B', 'A')]",
      "[('A', 'A'), ('B', 'B')]",
      "[('A',), ('B',)]"
    ]
  },
  {
    "q": "Which of these is NOT a feature of `defaultdict`?",
    "c": null,
    "o": [
      "Automatically creates missing keys",
      "Raises KeyError on missing keys",
      "Uses a default factory function",
      "Can be initialized with any callable"
    ]
  },
  {
    "q": "Which `functools` function can convert a comparison function to a key function for sorting?",
    "c": null,
    "o": [
      "cmp_to_key",
      "partial",
      "wraps",
      "lru_cache"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "from collections import deque\nd = deque('abc')\nd.extendleft('xy')\nprint(list(d))",
    "o": [
      "['y', 'x', 'a', 'b', 'c']",
      "['x', 'y', 'a', 'b', 'c']",
      "['a', 'b', 'c', 'x', 'y']",
      "['a', 'b', 'c']"
    ]
  },
  {
    "q": "Which of the following `itertools` functions produces cumulative sums?",
    "c": null,
    "o": [
      "accumulate",
      "cycle",
      "chain",
      "compress"
    ]
  },
  {
    "q": "What does the `filter()` function return when given a function and iterable?",
    "c": null,
    "o": [
      "An iterator yielding elements where the function returns True",
      "A list of all elements",
      "The first element for which function returns True",
      "None"
    ]
  },
  {
    "q": "What happens when you call `heapq.heapify()` on a list?",
    "c": null,
    "o": [
      "Transforms the list into a heap in-place",
      "Sorts the list in ascending order",
      "Creates a copy of the list",
      "Removes duplicates from the list"
    ]
  },
  {
    "q": "Which of these `collections` objects supports efficient appends and pops from both ends?",
    "c": null,
    "o": [
      "deque",
      "Counter",
      "defaultdict",
      "namedtuple"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['P', 'y', 't', 'h', 'o', 'n']))",
    "o": [
      "Python",
      "['P', 'y', 't', 'h', 'o', 'n']",
      "P+y+t+h+o+n",
      "Error"
    ]
  },
  {
    "q": "Which `collections` class provides a dictionary subclass for counting hashable objects?",
    "c": null,
    "o": [
      "Counter",
      "defaultdict",
      "OrderedDict",
      "ChainMap"
    ]
  },
  {
    "q": "What does `itertools.islice(iterable, 3, 6)` do?",
    "c": null,
    "o": [
      "Returns an iterator that yields elements from index 3 up to (but not including) 6",
      "Returns the first 3 elements",
      "Returns elements at indices 0, 3, and 6",
      "Returns all elements after index 6"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "from collections import namedtuple\nPoint = namedtuple('Point', ['x', 'y'])\np = Point(1, 2)\nprint(p.x + p.y)",
    "o": [
      "3",
      "12",
      "Point(1, 2)",
      "Error"
    ]
  },
  {
    "q": "Which function from `functools` can be used to create partial functions by fixing some arguments?",
    "c": null,
    "o": [
      "partial",
      "reduce",
      "wraps",
      "cmp_to_key"
    ]
  },
  {
    "q": "Which `heapq` function can be used to push a new item and then pop the smallest item efficiently?",
    "c": null,
    "o": [
      "heappushpop",
      "heappush",
      "heappop",
      "heapify"
    ]
  },
  {
    "q": "What will `list(itertools.combinations('ABC', 2))` output?",
    "c": null,
    "o": [
      "[('A', 'B'), ('A', 'C'), ('B', 'C')]",
      "[('A', 'B'), ('B', 'A'), ('C', 'B')]",
      "[('A', 'A'), ('B', 'B')]",
      "[('A',), ('B',), ('C',)]"
    ]
  },
  {
    "q": "Which `deque` method removes and returns an element from the left end?",
    "c": null,
    "o": [
      "popleft",
      "pop",
      "remove",
      "clear"
    ]
  },
  {
    "q": "What does `filter(None, iterable)` do?",
    "c": null,
    "o": [
      "Filters out all elements that are false in a boolean context",
      "Returns all elements unfiltered",
      "Filters out all elements that are true",
      "Returns an error"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [1, 2, 3, 4]))",
    "o": [
      "24",
      "10",
      "1",
      "0"
    ]
  },
  {
    "q": "Which `itertools` function produces a sequence of repeated values indefinitely?",
    "c": null,
    "o": [
      "repeat",
      "cycle",
      "accumulate",
      "compress"
    ]
  },
  {
    "q": "What does `defaultdict(int)` initialize missing keys with?",
    "c": null,
    "o": [
      "0",
      "None",
      "Empty list",
      "Raises KeyError"
    ]
  },
  {
    "q": "Which of these `itertools` functions returns consecutive keys and groups from an iterable?",
    "c": null,
    "o": [
      "groupby",
      "product",
      "permutations",
      "combinations"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "from collections import deque\nd = deque([1, 2, 3])\nd.append(4)\nprint(list(d))",
    "o": [
      "[1, 2, 3, 4]",
      "[4, 1, 2, 3]",
      "[1, 2, 3]",
      "[4]"
    ]
  },
  {
    "q": "Which function from `functools` is used to apply a rolling computation to sequential pairs of items?",
    "c": null,
    "o": [
      "reduce",
      "partial",
      "cmp_to_key",
      "wraps"
    ]
  },
  {
    "q": "What does `heapq.heappushpop(heap, item)` do?",
    "c": null,
    "o": [
      "Pushes new item then pops smallest item in one operation",
      "Pops smallest item then pushes new item",
      "Pushes item twice",
      "Raises error if heap is empty"
    ]
  },
  {
    "q": "Which method adds multiple elements to the left side of a `deque`?",
    "c": null,
    "o": [
      "extendleft",
      "extend",
      "appendleft",
      "append"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import Counter\nc = Counter('abracadabra')\nprint(c.most_common(2))",
    "o": [
      "[('a', 5), ('b', 2)]",
      "[('r', 2), ('a', 5)]",
      "[('c', 1), ('d', 1)]",
      "[('a', 2), ('b', 2)]"
    ]
  },
  {
    "q": "What does `functools.lru_cache()` provide?",
    "c": null,
    "o": [
      "Memoization to cache function results",
      "Function argument binding",
      "Comparison conversion",
      "Function wrapping"
    ]
  },
  {
    "q": "Which `itertools` function generates all permutations of an iterable of length r?",
    "c": null,
    "o": [
      "permutations",
      "combinations",
      "product",
      "cycle"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from itertools import accumulate\nprint(list(accumulate([1, 2, 3, 4])))",
    "o": [
      "[1, 3, 6, 10]",
      "[1, 2, 3, 4]",
      "[10]",
      "[4, 3, 2, 1]"
    ]
  },
  {
    "q": "Which method in `deque` removes the first occurrence of a value?",
    "c": null,
    "o": [
      "remove",
      "discard",
      "pop",
      "popleft"
    ]
  },
  {
    "q": "What does the `Counter` method `elements()` return?",
    "c": null,
    "o": [
      "An iterator over elements repeating each as many times as its count",
      "A list of unique elements",
      "A dictionary of elements",
      "The total count of elements"
    ]
  },
  {
    "q": "Which `heapq` function replaces the smallest element with a new value efficiently?",
    "c": null,
    "o": [
      "heapreplace",
      "heappushpop",
      "heappush",
      "heappop"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "from itertools import cycle\ncolors = cycle(['red', 'green'])\nprint(next(colors))\nprint(next(colors))\nprint(next(colors))",
    "o": [
      "red\ngreen\nred",
      "green\nred\ngreen",
      "red\nred\nred",
      "red\ngreen\ngreen"
    ]
  },
  {
    "q": "What is the purpose of `functools.wraps`?",
    "c": null,
    "o": [
      "To preserve the metadata of the original function when decorating",
      "To reduce function arguments",
      "To cache function calls",
      "To convert comparison functions"
    ]
  },
  {
    "q": "Which function from `itertools` can be used to create Cartesian products?",
    "c": null,
    "o": [
      "product",
      "combinations",
      "permutations",
      "chain"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "from collections import defaultdict\nd = defaultdict(list)\nd['key'].append(1)\nprint(d['key'])",
    "o": [
      "[1]",
      "[]",
      "None",
      "KeyError"
    ]
  },
  {
    "q": "Which `functools` function applies a function cumulatively to the items of a sequence?",
    "c": null,
    "o": [
      "reduce",
      "partial",
      "wraps",
      "cmp_to_key"
    ]
  },
  {
    "q": "What does `itertools.combinations_with_replacement('AB', 2)` produce?",
    "c": null,
    "o": [
      "[('A', 'A'), ('A', 'B'), ('B', 'B')]",
      "[('A', 'B'), ('B', 'A')]",
      "[('A', 'A'), ('B', 'A')]",
      "[('A',), ('B',)]"
    ]
  },
  {
    "q": "Which method adds an element to the left end of a `deque`?",
    "c": null,
    "o": [
      "appendleft",
      "append",
      "extendleft",
      "extend"
    ]
  },
  {
    "q": "What does the `defaultdict` do when accessing a missing key?",
    "c": null,
    "o": [
      "Returns a default value using the provided factory function",
      "Raises a KeyError",
      "Returns None",
      "Returns an empty string"
    ]
  },
  {
    "q": "What will be the output of this code snippet?",
    "c": "from collections import deque\nd = deque([1, 2, 3])\nd.appendleft(0)\nprint(list(d))",
    "o": [
      "[0, 1, 2, 3]",
      "[1, 2, 3, 0]",
      "[1, 2, 3]",
      "[3, 2, 1, 0]"
    ]
  },
  {
    "q": "Which `heapq` function returns the smallest element without removing it?",
    "c": null,
    "o": [
      "heap[0]",
      "heappop",
      "heappush",
      "heapreplace"
    ]
  },
  {
    "q": "Which function from `itertools` will repeat an iterable indefinitely?",
    "c": null,
    "o": [
      "cycle",
      "repeat",
      "chain",
      "compress"
    ]
  },
  {
    "q": "What does the `functools.reduce()` function do?",
    "c": null,
    "o": [
      "Applies a function cumulatively to the items of a sequence, reducing it to a single value",
      "Decorates a function to cache results",
      "Binds arguments to a function",
      "Wraps a function to preserve metadata"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "from collections import Counter\nc = Counter('banana')\nprint(c['a'])",
    "o": [
      "3",
      "2",
      "1",
      "0"
    ]
  },
  {
    "q": "Which `itertools` function generates all r-length permutations of an iterable?",
    "c": null,
    "o": [
      "permutations",
      "combinations",
      "product",
      "cycle"
    ]
  },
  {
    "q": "What is the use of `functools.partial`?",
    "c": null,
    "o": [
      "Creates a new function with fixed arguments",
      "Caches function calls",
      "Wraps a function to preserve metadata",
      "Converts comparison functions"
    ]
  },
  {
    "q": "Which method removes and returns the rightmost element of a deque?",
    "c": null,
    "o": [
      "pop",
      "popleft",
      "remove",
      "clear"
    ]
  },
  {
    "q": "What will `heapq.nlargest(2, [5, 1, 3, 7, 4])` return?",
    "c": null,
    "o": [
      "[7, 5]",
      "[5, 4]",
      "[1, 3]",
      "[3, 7]"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import Counter\nc = Counter(['a', 'b', 'a', 'c'])\nprint(c.most_common(2))",
    "o": [
      "[('a', 2), ('b', 1)]",
      "[('b', 1), ('c', 1)]",
      "[('a', 1), ('c', 1)]",
      "[('a', 2), ('c', 1)]"
    ]
  },
  {
    "q": "Which method of `deque` adds multiple elements to the right end?",
    "c": null,
    "o": [
      "extend",
      "append",
      "extendleft",
      "appendleft"
    ]
  },
  {
    "q": "What is the effect of `heapq.heapify()` on a list?",
    "c": null,
    "o": [
      "Transforms it into a heap, in-place",
      "Returns a sorted list",
      "Creates a copy of the list",
      "Clears the list"
    ]
  },
  {
    "q": "Which `itertools` function creates an infinite iterator returning repeated elements?",
    "c": null,
    "o": [
      "repeat",
      "cycle",
      "accumulate",
      "compress"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['H', 'i']))",
    "o": [
      "Hi",
      "['H', 'i']",
      "H+i",
      "Error"
    ]
  },
  {
    "q": "Which `collections` class is used to create tuples with named fields?",
    "c": null,
    "o": [
      "namedtuple",
      "defaultdict",
      "Counter",
      "deque"
    ]
  },
  {
    "q": "What does `filter()` return when called with a function and iterable?",
    "c": null,
    "o": [
      "An iterator over elements for which the function returns True",
      "A list of all elements",
      "A list of elements for which the function returns False",
      "None"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "from itertools import permutations\nprint(list(permutations('AB')))",
    "o": [
      "[('A', 'B'), ('B', 'A')]",
      "[('A', 'A'), ('B', 'B')]",
      "[('A',), ('B',)]",
      "[('AB',)]"
    ]
  },
  {
    "q": "Which method removes the first occurrence of a specified value from a deque?",
    "c": null,
    "o": [
      "remove",
      "discard",
      "pop",
      "popleft"
    ]
  },
  {
    "q": "What does `functools.lru_cache` do?",
    "c": null,
    "o": [
      "Caches recent function call results",
      "Creates a partial function",
      "Wraps a function to preserve metadata",
      "Converts comparison functions"
    ]
  },
  {
    "q": "Which `collections` object provides a double-ended queue?",
    "c": null,
    "o": [
      "deque",
      "Counter",
      "defaultdict",
      "namedtuple"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from itertools import combinations('ABC', 2)\nprint(list(combinations('ABC', 2)))",
    "o": [
      "[('A', 'B'), ('A', 'C'), ('B', 'C')]",
      "[('A', 'B'), ('B', 'A'), ('C', 'B')]",
      "[('A',), ('B',), ('C',)]",
      "[('A', 'A'), ('B', 'B')]"
    ]
  },
  {
    "q": "Which function can be used to transform a comparison function to a key function for sorting?",
    "c": null,
    "o": [
      "functools.cmp_to_key",
      "functools.partial",
      "functools.wraps",
      "functools.reduce"
    ]
  },
  {
    "q": "What does `heapq.nlargest(n, iterable)` do?",
    "c": null,
    "o": [
      "Returns a list of the n largest elements from the iterable",
      "Sorts the iterable in descending order",
      "Returns the smallest n elements",
      "Removes the n largest elements"
    ]
  },
  {
    "q": "What does `itertools.product('AB', repeat=2)` return?",
    "c": null,
    "o": [
      "[('A', 'A'), ('A', 'B'), ('B', 'A'), ('B', 'B')]",
      "[('A', 'B'), ('B', 'A')]",
      "[('A',), ('B',)]",
      "[('AB',)]"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [1, 2, 3, 4]))",
    "o": [
      "24",
      "10",
      "9",
      "0"
    ]
  },
  {
    "q": "Which `deque` method rotates the elements n steps to the right?",
    "c": null,
    "o": [
      "rotate",
      "extend",
      "append",
      "pop"
    ]
  },
  {
    "q": "What is the default factory function for `defaultdict(list)`?",
    "c": null,
    "o": [
      "list",
      "int",
      "str",
      "None"
    ]
  },
  {
    "q": "Which `Counter` method returns elements in the order they were first encountered?",
    "c": null,
    "o": [
      "elements",
      "most_common",
      "subtract",
      "update"
    ]
  },
  {
    "q": "What does the `filterfalse()` function from `itertools` do?",
    "c": null,
    "o": [
      "Returns elements of iterable for which function returns False",
      "Returns elements of iterable for which function returns True",
      "Returns all elements unfiltered",
      "Repeats elements indefinitely"
    ]
  },
  {
    "q": "Which `collections` subclass returns 0 for missing keys by default?",
    "c": null,
    "o": [
      "Counter",
      "defaultdict",
      "OrderedDict",
      "namedtuple"
    ]
  },
  {
    "q": "What does `heapq.heapreplace(heap, item)` do?",
    "c": null,
    "o": [
      "Pop and return the smallest item, then push the new item",
      "Push item and then pop the largest item",
      "Remove a specific item",
      "Sort the heap"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "from itertools import permutations\nprint(list(permutations('AB', 2)))",
    "o": [
      "[('A', 'B'), ('B', 'A')]",
      "[('A', 'A'), ('B', 'B')]",
      "[('A',), ('B',)]",
      "[('AB',)]"
    ]
  },
  {
    "q": "Which `functools` function is used to memoize (cache) function calls?",
    "c": null,
    "o": [
      "lru_cache",
      "partial",
      "wraps",
      "cmp_to_key"
    ]
  },
  {
    "q": "What will be the result of this code?",
    "c": "from collections import defaultdict\nd = defaultdict(int)\nd['x'] += 5\nprint(d['x'])",
    "o": [
      "5",
      "0",
      "None",
      "KeyError"
    ]
  },
  {
    "q": "What does `itertools.chain()` do?",
    "c": null,
    "o": [
      "Combines multiple iterables into one continuous iterator",
      "Creates permutations of an iterable",
      "Returns infinite repeated elements",
      "Splits an iterable into groups"
    ]
  },
  {
    "q": "Which method removes and returns the rightmost element from a `deque`?",
    "c": null,
    "o": [
      "pop",
      "popleft",
      "remove",
      "clear"
    ]
  },
  {
    "q": "What does `filter(None, iterable)` do?",
    "c": null,
    "o": [
      "Filters out elements that are falsy",
      "Returns all elements unchanged",
      "Filters out elements that are truthy",
      "Raises an error"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['a', 'b', 'c']))",
    "o": [
      "abc",
      "['a', 'b', 'c']",
      "a+b+c",
      "Error"
    ]
  },
  {
    "q": "Which `collections` class is best suited for counting hashable items?",
    "c": null,
    "o": [
      "Counter",
      "defaultdict",
      "deque",
      "namedtuple"
    ]
  },
  {
    "q": "Which method of `deque` allows inserting an element at the left end?",
    "c": null,
    "o": [
      "appendleft",
      "append",
      "extend",
      "extendleft"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import namedtuple\nPoint = namedtuple('Point', 'x y')\np = Point(2, 3)\nprint(p.y)",
    "o": [
      "3",
      "2",
      "Point(x=2, y=3)",
      "Error"
    ]
  },
  {
    "q": "What does the `heapq.heappushpop()` function do?",
    "c": null,
    "o": [
      "Pushes an item and then pops and returns the smallest item",
      "Pops the smallest item then pushes a new one",
      "Only pushes an item",
      "Only pops the smallest item"
    ]
  },
  {
    "q": "Which itertools function returns all possible r-length combinations of elements with replacement?",
    "c": null,
    "o": [
      "combinations_with_replacement",
      "combinations",
      "permutations",
      "product"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x - y, [10, 1, 2]))",
    "o": [
      "7",
      "9",
      "3",
      "-7"
    ]
  },
  {
    "q": "Which function from `functools` helps to create a new function with some arguments fixed?",
    "c": null,
    "o": [
      "partial",
      "reduce",
      "wraps",
      "lru_cache"
    ]
  },
  {
    "q": "What will `list(itertools.islice(range(10), 2, 5))` return?",
    "c": null,
    "o": [
      "[2, 3, 4]",
      "[0, 1, 2]",
      "[5, 6, 7]",
      "[3, 4, 5]"
    ]
  },
  {
    "q": "What happens if you call `deque.pop()` on an empty deque?",
    "c": null,
    "o": [
      "Raises an IndexError",
      "Returns None",
      "Returns 0",
      "Clears the deque"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import Counter\nc = Counter('mississippi')\nprint(c['s'])",
    "o": [
      "4",
      "2",
      "1",
      "0"
    ]
  },
  {
    "q": "What does `itertools.cycle()` do?",
    "c": null,
    "o": [
      "Cycles through the elements of an iterable indefinitely",
      "Returns unique elements",
      "Returns cumulative sums",
      "Returns all permutations"
    ]
  },
  {
    "q": "Which `collections` class allows you to define simple classes with named fields?",
    "c": null,
    "o": [
      "namedtuple",
      "Counter",
      "defaultdict",
      "deque"
    ]
  },
  {
    "q": "What will be the output of this code snippet?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [2, 3, 4]))",
    "o": [
      "24",
      "9",
      "14",
      "10"
    ]
  },
  {
    "q": "What does `heapq.heappop()` do?",
    "c": null,
    "o": [
      "Removes and returns the smallest item from the heap",
      "Adds an item to the heap",
      "Returns the largest item",
      "Transforms a list into a heap"
    ]
  },
  {
    "q": "Which `itertools` function returns the running totals of iterable values?",
    "c": null,
    "o": [
      "accumulate",
      "cycle",
      "compress",
      "chain"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import defaultdict\nd = defaultdict(int)\nd['count'] += 1\nprint(d['count'])",
    "o": [
      "1",
      "0",
      "None",
      "KeyError"
    ]
  },
  {
    "q": "Which `deque` method removes and returns an element from the left end?",
    "c": null,
    "o": [
      "popleft",
      "pop",
      "remove",
      "appendleft"
    ]
  },
  {
    "q": "What does `filter()` return?",
    "c": null,
    "o": [
      "An iterator of elements for which the function returns True",
      "A list of all elements",
      "A list of filtered out elements",
      "None"
    ]
  },
  {
    "q": "What is the purpose of `functools.wraps`?",
    "c": null,
    "o": [
      "Preserve metadata of decorated functions",
      "Cache function calls",
      "Create partial functions",
      "Convert comparison functions"
    ]
  },
  {
    "q": "What does `itertools.product('AB', repeat=2)` produce?",
    "c": null,
    "o": [
      "[('A', 'A'), ('A', 'B'), ('B', 'A'), ('B', 'B')]",
      "[('A', 'B'), ('B', 'A')]",
      "[('A',), ('B',)]",
      "[('AB',)]"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import Counter\nc = Counter('hello')\nprint(c['l'])",
    "o": [
      "2",
      "1",
      "0",
      "3"
    ]
  },
  {
    "q": "What is the difference between `heappushpop` and `heapreplace` in the `heapq` module?",
    "c": null,
    "o": [
      "`heappushpop` pushes the new item first then pops the smallest; `heapreplace` pops first then pushes the new item",
      "`heappushpop` pops first then pushes the new item; `heapreplace` pushes first then pops the smallest",
      "They are identical functions",
      "`heapreplace` removes the largest item"
    ]
  },
  {
    "q": "Which `collections` class provides a mapping where missing keys return a default value?",
    "c": null,
    "o": [
      "defaultdict",
      "Counter",
      "OrderedDict",
      "ChainMap"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "from itertools import permutations\nprint(list(permutations('AB', 1)))",
    "o": [
      "[('A',), ('B',)]",
      "[('A', 'B'), ('B', 'A')]",
      "[('AB',)]",
      "[]"
    ]
  },
  {
    "q": "Which `functools` function can convert a comparison function into a key function for sorting?",
    "c": null,
    "o": [
      "cmp_to_key",
      "partial",
      "lru_cache",
      "wraps"
    ]
  },
  {
    "q": "What does the `collections.Counter` method `most_common()` do?",
    "c": null,
    "o": [
      "Returns a list of the n most common elements and their counts",
      "Removes the most common element",
      "Returns elements sorted alphabetically",
      "Clears the counter"
    ]
  },
  {
    "q": "Which method adds multiple elements to the left end of a `deque`?",
    "c": null,
    "o": [
      "extendleft",
      "extend",
      "appendleft",
      "append"
    ]
  },
  {
    "q": "What will be the output of this code snippet?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x / y, [8, 2, 2]))",
    "o": [
      "2.0",
      "4.0",
      "1.0",
      "0.5"
    ]
  },
  {
    "q": "What does `itertools.combinations('ABC', 2)` generate?",
    "c": null,
    "o": [
      "All 2-length combinations of 'A', 'B', 'C' without repetition",
      "All 2-length permutations of 'A', 'B', 'C'",
      "All pairs including repetitions",
      "All single elements"
    ]
  },
  {
    "q": "What does `filterfalse()` from `itertools` do?",
    "c": null,
    "o": [
      "Returns elements of iterable for which function returns False",
      "Returns elements for which function returns True",
      "Returns all elements",
      "Raises an error"
    ]
  },
  {
    "q": "What happens if you call `deque.pop()` on an empty deque?",
    "c": null,
    "o": [
      "Raises IndexError",
      "Returns None",
      "Returns 0",
      "Does nothing"
    ]
  },
  {
    "q": "What is the default value returned by a `defaultdict` if no factory function is provided?",
    "c": null,
    "o": [
      "Raises a KeyError",
      "None",
      "0",
      "Empty list"
    ]
  },
  {
    "q": "Which method in `deque` adds an element to the right end?",
    "c": null,
    "o": [
      "append",
      "appendleft",
      "extend",
      "pop"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import Counter\nc = Counter('banana')\nprint(c['a'])",
    "o": [
      "3",
      "2",
      "1",
      "0"
    ]
  },
  {
    "q": "Which `itertools` function returns an iterator that aggregates elements from each of the iterables?",
    "c": null,
    "o": [
      "zip_longest",
      "chain",
      "product",
      "combinations"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [1, 2, 3, 4]))",
    "o": [
      "24",
      "10",
      "9",
      "0"
    ]
  },
  {
    "q": "What is the use of `functools.partial`?",
    "c": null,
    "o": [
      "Creates a new function with some arguments fixed",
      "Caches function calls",
      "Wraps functions to preserve metadata",
      "Converts comparison functions"
    ]
  },
  {
    "q": "What will `heapq.nlargest(3, [5, 2, 8, 1, 9])` return?",
    "c": null,
    "o": [
      "[9, 8, 5]",
      "[5, 2, 8]",
      "[1, 2, 5]",
      "[9, 8, 1]"
    ]
  },
  {
    "q": "Which method removes and returns the leftmost element in a `deque`?",
    "c": null,
    "o": [
      "popleft",
      "pop",
      "remove",
      "appendleft"
    ]
  },
  {
    "q": "What does `filter(None, iterable)` do in Python?",
    "c": null,
    "o": [
      "Filters out all falsy values",
      "Returns all elements unchanged",
      "Filters out all truthy values",
      "Returns an error"
    ]
  },
  {
    "q": "What does `itertools.accumulate()` do?",
    "c": null,
    "o": [
      "Returns accumulated sums (or results of a binary function) over an iterable",
      "Generates all combinations",
      "Cycles through elements indefinitely",
      "Filters elements based on a predicate"
    ]
  },
  {
    "q": "What is the purpose of the `namedtuple` in the `collections` module?",
    "c": null,
    "o": [
      "To create tuple subclasses with named fields",
      "To count hashable objects",
      "To provide a dictionary with default values",
      "To implement a double-ended queue"
    ]
  },
  {
    "q": "What does the `heapq.heappush()` function do?",
    "c": null,
    "o": [
      "Adds an item to the heap maintaining the heap invariant",
      "Removes the smallest item from the heap",
      "Replaces the smallest item in the heap",
      "Transforms a list into a heap"
    ]
  },
  {
    "q": "Which `itertools` function returns the Cartesian product of input iterables?",
    "c": null,
    "o": [
      "product",
      "combinations",
      "permutations",
      "chain"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['P', 'y', 't', 'h', 'o', 'n']))",
    "o": [
      "Python",
      "['P', 'y', 't', 'h', 'o', 'n']",
      "Py",
      "Error"
    ]
  },
  {
    "q": "What happens when you try to access a missing key in a `defaultdict`?",
    "c": null,
    "o": [
      "Returns a default value created by the factory function",
      "Raises a KeyError",
      "Returns None",
      "Returns an empty string"
    ]
  },
  {
    "q": "Which `collections` class is designed for counting hashable objects?",
    "c": null,
    "o": [
      "Counter",
      "defaultdict",
      "deque",
      "namedtuple"
    ]
  },
  {
    "q": "What will `list(itertools.combinations_with_replacement('AB', 2))` output?",
    "c": null,
    "o": [
      "[('A', 'A'), ('A', 'B'), ('B', 'B')]",
      "[('A', 'B'), ('B', 'A')]",
      "[('A', 'B'), ('B', 'B')]",
      "[('A',), ('B',)]"
    ]
  },
  {
    "q": "Which `functools` decorator caches the results of function calls?",
    "c": null,
    "o": [
      "lru_cache",
      "partial",
      "wraps",
      "cmp_to_key"
    ]
  },
  {
    "q": "What does `deque.rotate(1)` do?",
    "c": null,
    "o": [
      "Rotates the deque one step to the right",
      "Rotates the deque one step to the left",
      "Clears the deque",
      "Adds an element to the right"
    ]
  },
  {
    "q": "What will `filter(lambda x: x % 2 == 0, range(5))` return when converted to list?",
    "c": null,
    "o": [
      "[0, 2, 4]",
      "[1, 3, 5]",
      "[0, 1, 2, 3, 4]",
      "[]"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "from collections import deque\nd = deque([1, 2, 3])\nd.extendleft([4, 5])\nprint(list(d))",
    "o": [
      "[5, 4, 1, 2, 3]",
      "[1, 2, 3, 4, 5]",
      "[4, 5, 1, 2, 3]",
      "[1, 2, 3]"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import Counter\nc = Counter('abracadabra')\nprint(c.most_common(1))",
    "o": [
      "[('a', 5)]",
      "[('b', 2)]",
      "[('r', 2)]",
      "[('c', 1)]"
    ]
  },
  {
    "q": "Which function in `heapq` adds an element and then pops and returns the smallest element?",
    "c": null,
    "o": [
      "heappushpop",
      "heapreplace",
      "heappush",
      "heappop"
    ]
  },
  {
    "q": "What does `itertools.accumulate()` return by default?",
    "c": null,
    "o": [
      "Running totals (cumulative sums)",
      "All possible permutations",
      "Repeated elements",
      "Filtered elements"
    ]
  },
  {
    "q": "What is the purpose of `functools.partial`?",
    "c": null,
    "o": [
      "To fix some arguments of a function and generate a new function",
      "To cache function results",
      "To decorate functions to preserve metadata",
      "To convert comparison functions to key functions"
    ]
  },
  {
    "q": "What does `filter(None, iterable)` do?",
    "c": null,
    "o": [
      "Filters out falsy values",
      "Returns all elements",
      "Filters out truthy values",
      "Raises an error"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "from collections import defaultdict\nd = defaultdict(list)\nd['key'].append(1)\nprint(d['key'])",
    "o": [
      "[1]",
      "[]",
      "None",
      "KeyError"
    ]
  },
  {
    "q": "Which `deque` method removes and returns the leftmost element?",
    "c": null,
    "o": [
      "popleft",
      "pop",
      "remove",
      "clear"
    ]
  },
  {
    "q": "What does `heapq.nlargest(2, [4, 1, 7, 3])` return?",
    "c": null,
    "o": [
      "[7, 4]",
      "[4, 3]",
      "[1, 3]",
      "[3, 7]"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from itertools import permutations\nprint(list(permutations('AB')))",
    "o": [
      "[('A', 'B'), ('B', 'A')]",
      "[('A', 'A'), ('B', 'B')]",
      "[('A',), ('B',)]",
      "[('AB',)]"
    ]
  },
  {
    "q": "Which `collections` class allows you to create a dictionary with default values for missing keys?",
    "c": null,
    "o": [
      "defaultdict",
      "Counter",
      "OrderedDict",
      "namedtuple"
    ]
  },
  {
    "q": "What will be the output of this code snippet?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x - y, [10, 2, 3]))",
    "o": [
      "5",
      "9",
      "1",
      "-5"
    ]
  },
  {
    "q": "What does the `heapq.heapify()` function do?",
    "c": null,
    "o": [
      "Transforms a list into a heap in-place",
      "Sorts a list",
      "Removes the smallest element",
      "Creates a new heap"
    ]
  },
  {
    "q": "What does the `itertools.chain()` function do?",
    "c": null,
    "o": [
      "Combines multiple iterables into a single iterator",
      "Generates permutations",
      "Cycles through elements indefinitely",
      "Filters elements based on a predicate"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import Counter\nc = Counter('apple')\nprint(c['p'])",
    "o": [
      "2",
      "1",
      "0",
      "3"
    ]
  },
  {
    "q": "Which `functools` decorator caches the results of function calls?",
    "c": null,
    "o": [
      "lru_cache",
      "partial",
      "wraps",
      "cmp_to_key"
    ]
  },
  {
    "q": "Which `deque` method adds an element to the left end?",
    "c": null,
    "o": [
      "appendleft",
      "append",
      "extend",
      "pop"
    ]
  },
  {
    "q": "What does `filter()` return?",
    "c": null,
    "o": [
      "An iterator over elements for which the function returns True",
      "A list of all elements",
      "A list of filtered elements",
      "None"
    ]
  },
  {
    "q": "What will `heapq.nlargest(3, [3, 1, 4, 1, 5])` return?",
    "c": null,
    "o": [
      "[5, 4, 3]",
      "[1, 1, 3]",
      "[3, 4, 5]",
      "[1, 3, 5]"
    ]
  },
  {
    "q": "What does `itertools.cycle()` do?",
    "c": null,
    "o": [
      "Cycles through the elements of an iterable indefinitely",
      "Returns unique elements",
      "Returns cumulative sums",
      "Returns all permutations"
    ]
  },
  {
    "q": "What does the `collections.Counter` method `elements()` do?",
    "c": null,
    "o": [
      "Returns an iterator over elements repeating each as many times as its count",
      "Returns the most common elements",
      "Clears the Counter",
      "Updates counts from another iterable"
    ]
  },
  {
    "q": "Which `heapq` function removes and returns the smallest element from the heap?",
    "c": null,
    "o": [
      "heappop",
      "heappush",
      "heapreplace",
      "heappushpop"
    ]
  },
  {
    "q": "What will be the output of this code snippet?",
    "c": "from itertools import combinations('ABC', 2)\nprint(list(combinations('ABC', 2)))",
    "o": [
      "[('A', 'B'), ('A', 'C'), ('B', 'C')]",
      "[('A', 'B'), ('B', 'A'), ('C', 'B')]",
      "[('A',), ('B',), ('C',)]",
      "[('A', 'A'), ('B', 'B')]"
    ]
  },
  {
    "q": "Which `functools` utility helps preserve the metadata of decorated functions?",
    "c": null,
    "o": [
      "wraps",
      "partial",
      "lru_cache",
      "cmp_to_key"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "from collections import defaultdict\nd = defaultdict(int)\nd['a'] += 2\nprint(d['a'])",
    "o": [
      "2",
      "0",
      "None",
      "KeyError"
    ]
  },
  {
    "q": "Which `deque` method inserts multiple elements to the left end in reverse order?",
    "c": null,
    "o": [
      "extendleft",
      "extend",
      "appendleft",
      "append"
    ]
  },
  {
    "q": "What will be the result of this code?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['a', 'b', 'c']))",
    "o": [
      "abc",
      "['a', 'b', 'c']",
      "a+b+c",
      "Error"
    ]
  },
  {
    "q": "What does `itertools.islice()` do?",
    "c": null,
    "o": [
      "Returns selected elements from an iterator by index range",
      "Creates permutations",
      "Cycles indefinitely",
      "Filters elements"
    ]
  },
  {
    "q": "What will `heapq.heapreplace(heap, item)` do?",
    "c": null,
    "o": [
      "Pop and return the smallest item, then push the new item",
      "Push item and then pop the largest item",
      "Remove a specific item",
      "Sort the heap"
    ]
  },
  {
    "q": "Which built-in Python function applies a function to every item of an iterable and returns an iterator?",
    "c": null,
    "o": [
      "map",
      "filter",
      "reduce",
      "zip"
    ]
  },
  {
    "q": "What does the `namedtuple` factory function return?",
    "c": null,
    "o": [
      "A subclass of tuple with named fields",
      "A dictionary",
      "A list",
      "A set"
    ]
  },
  {
    "q": "Which `heapq` function adds an element to the heap?",
    "c": null,
    "o": [
      "heappush",
      "heappop",
      "heapreplace",
      "heappushpop"
    ]
  },
  {
    "q": "What does `itertools.permutations('ABC', 2)` generate?",
    "c": null,
    "o": [
      "All ordered arrangements of length 2 from 'A', 'B', 'C'",
      "All unordered pairs of length 2",
      "All combinations with replacement",
      "All single elements"
    ]
  },
  {
    "q": "What is the purpose of `functools.lru_cache`?",
    "c": null,
    "o": [
      "Caches function results to optimize repeated calls",
      "Creates partial functions",
      "Wraps functions to preserve metadata",
      "Converts cmp functions to key functions"
    ]
  },
  {
    "q": "What happens if you try to access a missing key in a regular dictionary?",
    "c": null,
    "o": [
      "Raises a KeyError",
      "Returns None",
      "Returns 0",
      "Returns a default value"
    ]
  },
  {
    "q": "Which method of `deque` removes and returns an element from the right end?",
    "c": null,
    "o": [
      "pop",
      "popleft",
      "remove",
      "clear"
    ]
  },
  {
    "q": "What does `filter(lambda x: x > 0, [-1, 0, 1, 2])` return as a list?",
    "c": null,
    "o": [
      "[1, 2]",
      "[-1, 0]",
      "[-1, 0, 1, 2]",
      "[]"
    ]
  },
  {
    "q": "What does `itertools.product('AB', repeat=3)` generate?",
    "c": null,
    "o": [
      "All 3-length tuples from 'A' and 'B' with repetitions",
      "All 3-length combinations without repetition",
      "All permutations of length 3",
      "All 2-length tuples"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import Counter\nc = Counter('mississippi')\nprint(c['s'])",
    "o": [
      "4",
      "2",
      "1",
      "0"
    ]
  },
  {
    "q": "Which built-in Python function combines elements from multiple iterables?",
    "c": null,
    "o": [
      "zip",
      "map",
      "filter",
      "reduce"
    ]
  },
  {
    "q": "Which `collections` class provides a list-like container with fast appends and pops on both ends?",
    "c": null,
    "o": [
      "deque",
      "Counter",
      "defaultdict",
      "namedtuple"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [3, 4, 5]))",
    "o": [
      "60",
      "12",
      "15",
      "0"
    ]
  },
  {
    "q": "Which `heapq` function pops and returns the smallest item from the heap?",
    "c": null,
    "o": [
      "heappop",
      "heappush",
      "heapreplace",
      "heappushpop"
    ]
  },
  {
    "q": "What does the `itertools.combinations('XYZ', 2)` produce?",
    "c": null,
    "o": [
      "[('X', 'Y'), ('X', 'Z'), ('Y', 'Z')]",
      "[('X', 'Y'), ('Y', 'X'), ('Z', 'Y')]",
      "[('X',), ('Y',), ('Z',)]",
      "[('X', 'X'), ('Y', 'Y'), ('Z', 'Z')]"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import defaultdict\nd = defaultdict(int)\nd['count'] += 3\nprint(d['count'])",
    "o": [
      "3",
      "0",
      "None",
      "KeyError"
    ]
  },
  {
    "q": "Which `deque` method rotates the elements n steps to the right?",
    "c": null,
    "o": [
      "rotate",
      "append",
      "pop",
      "extendleft"
    ]
  },
  {
    "q": "What does `filter(lambda x: x % 2 == 1, range(5))` return when converted to list?",
    "c": null,
    "o": [
      "[1, 3]",
      "[0, 2, 4]",
      "[0, 1, 2, 3, 4]",
      "[]"
    ]
  },
  {
    "q": "Which `functools` function creates a new function with some arguments fixed?",
    "c": null,
    "o": [
      "partial",
      "wraps",
      "lru_cache",
      "cmp_to_key"
    ]
  },
  {
    "q": "What does `heapq.nlargest(2, [10, 5, 3, 12, 7])` return?",
    "c": null,
    "o": [
      "[12, 10]",
      "[10, 5]",
      "[3, 5]",
      "[7, 12]"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "from collections import Counter\nc = Counter('banana')\nprint(c['a'])",
    "o": [
      "3",
      "2",
      "1",
      "0"
    ]
  },
  {
    "q": "What does the `collections.defaultdict` constructor take as an argument?",
    "c": null,
    "o": [
      "A factory function that provides default values",
      "An initial dictionary",
      "A list of keys",
      "A tuple"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "from collections import deque\nd = deque([1, 2, 3])\nd.appendleft(0)\nprint(list(d))",
    "o": [
      "[0, 1, 2, 3]",
      "[1, 2, 3, 0]",
      "[1, 2, 3]",
      "[0, 1, 3]"
    ]
  },
  {
    "q": "Which function in `heapq` adds an item to the heap?",
    "c": null,
    "o": [
      "heappush",
      "heappop",
      "heapreplace",
      "heappushpop"
    ]
  },
  {
    "q": "What will be the output of this code snippet?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x + y, ['H', 'i']))",
    "o": [
      "Hi",
      "['H', 'i']",
      "H+i",
      "Error"
    ]
  },
  {
    "q": "What does the `itertools.combinations_with_replacement('AB', 2)` return?",
    "c": null,
    "o": [
      "[('A', 'A'), ('A', 'B'), ('B', 'B')]",
      "[('A', 'B'), ('B', 'A')]",
      "[('A', 'A'), ('B', 'A')]",
      "[('A',), ('B',)]"
    ]
  },
  {
    "q": "Which method of `deque` removes and returns an element from the right end?",
    "c": null,
    "o": [
      "pop",
      "popleft",
      "remove",
      "clear"
    ]
  },
  {
    "q": "What does `filter(None, ['a', '', 'b', None, 'c'])` return as a list?",
    "c": null,
    "o": [
      "['a', 'b', 'c']",
      "['', None]",
      "['a', '', 'b', None, 'c']",
      "[]"
    ]
  },
  {
    "q": "What does the `functools.wraps` decorator do?",
    "c": null,
    "o": [
      "Preserves the metadata of the original function when decorating",
      "Caches function results",
      "Creates partial functions",
      "Converts comparison functions"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import Counter\nc = Counter('mississippi')\nprint(c.most_common(2))",
    "o": [
      "[('i', 4), ('s', 4)]",
      "[('m', 1), ('p', 2)]",
      "[('s', 3), ('i', 2)]",
      "[('m', 4), ('i', 4)]"
    ]
  },
  {
    "q": "Which built-in Python function applies a function to every item of an iterable and returns an iterator?",
    "c": null,
    "o": [
      "map",
      "filter",
      "reduce",
      "zip"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "from collections import deque\nd = deque([1, 2, 3])\nd.rotate(2)\nprint(list(d))",
    "o": [
      "[2, 3, 1]",
      "[3, 1, 2]",
      "[1, 2, 3]",
      "[3, 2, 1]"
    ]
  },
  {
    "q": "What does the `heapq.heapify()` function do?",
    "c": null,
    "o": [
      "Transforms a list into a heap in-place",
      "Sorts a list",
      "Adds an item to the heap",
      "Removes the smallest item"
    ]
  },
  {
    "q": "Which `itertools` function returns the Cartesian product of input iterables?",
    "c": null,
    "o": [
      "product",
      "combinations",
      "permutations",
      "chain"
    ]
  },
  {
    "q": "What does the `filter()` function return in Python 3?",
    "c": null,
    "o": [
      "An iterator with elements where the function returns True",
      "A list with all elements",
      "A list with filtered elements",
      "None"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "from functools import reduce\nprint(reduce(lambda x, y: x * y, [1, 2, 3, 4]))",
    "o": [
      "24",
      "10",
      "9",
      "0"
    ]
  },
  {
    "q": "What does `collections.Counter()` count?",
    "c": null,
    "o": [
      "Hashable objects",
      "Lists",
      "Sets",
      "Mutable objects"
    ]
  },
  {
    "q": "Which method of `deque` removes and returns the leftmost element?",
    "c": null,
    "o": [
      "popleft",
      "pop",
      "remove",
      "appendleft"
    ]
  },
  {
    "q": "What does `functools.partial` do?",
    "c": null,
    "o": [
      "Creates a new function with some arguments fixed",
      "Caches function calls",
      "Decorates functions to preserve metadata",
      "Converts comparison functions"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "from collections import Counter\nc = Counter('banana')\nprint(c['a'])",
    "o": [
      "3",
      "2",
      "1",
      "0"
    ]
  },
  {
    "q": "What does `itertools.permutations('ABC', 2)` generate?",
    "c": null,
    "o": [
      "All ordered arrangements of length 2",
      "All unordered pairs",
      "All combinations with replacement",
      "All single elements"
    ]
  },
  {
    "q": "What is the key feature of a `defaultdict` compared to a normal dictionary?",
    "c": null,
    "o": [
      "Automatically provides default values for missing keys",
      "Maintains insertion order",
      "Allows duplicate keys",
      "Is immutable"
    ]
  },
  {
    "q": "What will be the output of this code snippet?",
    "c": "from collections import deque\nd = deque([1, 2, 3])\nd.append(4)\nprint(list(d))",
    "o": [
      "[1, 2, 3, 4]",
      "[4, 1, 2, 3]",
      "[1, 2, 3]",
      "[4]"
    ]
  },
  {
    "q": "Which `heapq` function pushes a new element and then pops the smallest element?",
    "c": null,
    "o": [
      "heappushpop",
      "heapreplace",
      "heappop",
      "heappush"
    ]
  },
  {
    "q": "What does `itertools.chain('AB', 'CD')` do?",
    "c": null,
    "o": [
      "Combines the input iterables into a single sequence",
      "Generates Cartesian product",
      "Returns permutations",
      "Returns combinations"
    ]
  },
  {
    "q": "What will `reduce(lambda x, y: x + y, [1, 2, 3, 4])` return?",
    "c": null,
    "o": [
      "10",
      "24",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which `collections` class counts the frequency of elements in an iterable?",
    "c": null,
    "o": [
      "Counter",
      "defaultdict",
      "deque",
      "namedtuple"
    ]
  },
  {
    "q": "What does the `deque.popleft()` method do?",
    "c": null,
    "o": [
      "Removes and returns the leftmost element",
      "Removes and returns the rightmost element",
      "Adds an element to the left end",
      "Adds an element to the right end"
    ]
  },
  {
    "q": "What does `filter(None, [0, '', None, 1, 'a'])` return as a list?",
    "c": null,
    "o": [
      "[1, 'a']",
      "[0, '', None]",
      "[0, 1, 'a']",
      "[]"
    ]
  },
  {
    "q": "Which `functools` decorator caches the results of a function?",
    "c": null,
    "o": [
      "lru_cache",
      "partial",
      "wraps",
      "cmp_to_key"
    ]
  },
  {
    "q": "What does `heapq.nlargest(3, [1, 4, 2, 7, 5])` return?",
    "c": null,
    "o": [
      "[7, 5, 4]",
      "[1, 2, 4]",
      "[4, 5, 7]",
      "[7, 4, 2]"
    ]
  }
]