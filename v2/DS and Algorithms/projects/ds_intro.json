[
  {
    "title": "Definition and Importance",
    "ques": "Write a Python program that demonstrates a simple data structure (list) and an algorithm (sorting) to illustrate the definition and importance of data structures and algorithms.",
    "answer": {
      "type": "code",
      "lang": "python",
      "content": "numbers = [5, 2, 8, 1, 9]\nprint('Original list:', numbers)\nnumbers.sort()\nprint('Sorted list:', numbers)"
    },
    "explanation": "***Step 1:*** A list `numbers` is created to store integers, demonstrating a data structure.\n***Step 2:*** The `sort()` method is an algorithm that arranges the list in ascending order.\n***Step 3:*** The `print()` function displays the original and sorted lists, showing how data structures (list) and algorithms (sorting) work together to organize data efficiently."
  },
  {
    "title": "Time Complexity Calculation",
    "ques": "Write a Python function to calculate the sum of elements in a list and explain its time complexity.",
    "answer": {
      "type": "code",
      "lang": "python",
      "content": "def list_sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nnumbers = [1, 2, 3, 4, 5]\nprint('Sum:', list_sum(numbers))"
    },
    "explanation": "***Step 1:*** The function `list_sum` iterates through each element in the input list `arr`.\n***Step 2:*** It adds each element to the variable `total`.\n***Step 3:*** The function returns the sum.\n***Time Complexity:*** The loop runs `n` times, where `n` is the length of the list, so the time complexity is ***O(n)*** (linear time)."
  },
  {
    "title": "Big-O Notation Practice",
    "ques": "Write a Python program to find the maximum element in a list and determine its Big-O notation.",
    "answer": {
      "type": "code",
      "lang": "python",
      "content": "def find_max(arr):\n    max_val = arr[0]\n    for num in arr:\n        if num > max_val:\n            max_val = num\n    return max_val\n\nnumbers = [3, 7, 2, 9, 1]\nprint('Maximum:', find_max(numbers))"
    },
    "explanation": "***Step 1:*** The function `find_max` initializes `max_val` with the first element of the list.\n***Step 2:*** It iterates through the list, updating `max_val` if a larger element is found.\n***Step 3:*** The function returns the maximum value.\n***Big-O Notation:*** The loop iterates `n` times, where `n` is the list length, so the time complexity is ***O(n)***."
  },
  {
    "title": "Algorithm Efficiency Comparison",
    "ques": "Write two Python functions to check if a number exists in a list: one using a linear search and another using a sorted list with binary search. Compare their efficiencies.",
    "answer": {
      "type": "code",
      "lang": "python",
      "content": "def linear_search(arr, target):\n    for num in arr:\n        if num == target:\n            return True\n    return False\n\ndef binary_search(arr, target):\n    arr.sort()\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\nnumbers = [5, 2, 8, 1, 9]\ntarget = 8\nprint('Linear Search:', linear_search(numbers, target))\nprint('Binary Search:', binary_search(numbers, target))"
    },
    "explanation": "***Step 1:*** The `linear_search` function checks each element in the list until the target is found or the list ends.\n***Step 2:*** The `binary_search` function sorts the list first, then uses a divide-and-conquer approach to find the target.\n***Efficiency:*** Linear search has a time complexity of ***O(n)***, while binary search has a time complexity of ***O(log n)*** after sorting (***O(n log n)*** for sorting). Binary search is more efficient for large, sorted lists."
  },
  {
    "title": "Trade-offs in Design",
    "ques": "Write a Python program that demonstrates the trade-off between using a list and a set for checking membership, highlighting time and space complexity.",
    "answer": {
      "type": "code",
      "lang": "python",
      "content": "def list_membership(arr, target):\n    return target in arr\n\ndef set_membership(arr, target):\n    return target in set(arr)\n\nnumbers = [1, 2, 3, 4, 5]\ntarget = 3\nprint('List Membership:', list_membership(numbers, target))\nprint('Set Membership:', set_membership(numbers, target))"
    },
    "explanation": "***Step 1:*** The `list_membership` function checks if `target` exists in the list using the `in` operator.\n***Step 2:*** The `set_membership` function converts the list to a set and checks membership.\n***Trade-offs:*** List membership check has a time complexity of ***O(n)***, while set membership is ***O(1)*** on average. However, creating a set requires additional space (***O(n)*** space complexity) compared to the list (***O(1)*** additional space for the check)."
  },
  {
    "title": "Common Complexity Classes",
    "ques": "Write a Python program that implements functions with different complexity classes (O(1), O(n), O(n^2)) and prints their outputs for a given input.",
    "answer": {
      "type": "code",
      "lang": "python",
      "content": "def constant_time(arr):\n    return arr[0]  # O(1)\n\ndef linear_time(arr):\n    return sum(arr)  # O(n)\n\ndef quadratic_time(arr):\n    count = 0\n    for i in arr:\n        for j in arr:\n            count += 1\n    return count  # O(n^2)\n\nnumbers = [1, 2, 3, 4, 5]\nprint('O(1) - First element:', constant_time(numbers))\nprint('O(n) - Sum:', linear_time(numbers))\nprint('O(n^2) - Count:', quadratic_time(numbers))"
    },
    "explanation": "***Step 1:*** The `constant_time` function accesses the first element, which takes ***O(1)*** time.\n***Step 2:*** The `linear_time` function sums the list elements, requiring ***O(n)*** time.\n***Step 3:*** The `quadratic_time` function uses nested loops, resulting in ***O(n^2)*** time.\n***Common Complexity Classes:*** This demonstrates constant (***O(1)***), linear (***O(n)***), and quadratic (***O(n^2)***), showing how algorithm design impacts performance."
  },
  {
    "title": "Understanding Data Structure Usage",
    "ques": "Write a Python program that uses a dictionary to count the frequency of elements in a list, demonstrating the importance of choosing the right data structure.",
    "answer": {
      "type": "code",
      "lang": "python",
      "content": "def count_frequencies(arr):\n    freq = {}\n    for item in arr:\n        freq[item] = freq.get(item, 0) + 1\n    return freq\n\nitems = [1, 2, 2, 3, 1, 4]\nprint('Frequency count:', count_frequencies(items))"
    },
    "explanation": "***Step 1:*** Initialize an empty dictionary `freq` to store element frequencies.\n***Step 2:*** Iterate through the list `items`, updating the count of each element in the dictionary using `get()`.\n***Step 3:*** Return and print the frequency dictionary.\n***Importance:*** Using a dictionary allows efficient key-value storage and retrieval, reducing the need for repeated list traversals, unlike a list-based approach."
  },
  {
    "title": "Space Complexity Analysis",
    "ques": "Write a Python function to reverse a list in-place and analyze its space complexity.",
    "answer": {
      "type": "code",
      "lang": "python",
      "content": "def reverse_list(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n    return arr\n\nnumbers = [1, 2, 3, 4, 5]\nprint('Reversed list:', reverse_list(numbers))"
    },
    "explanation": "***Step 1:*** Initialize two pointers, `left` and `right`, at the start and end of the list.\n***Step 2:*** Swap elements at `left` and `right` indices, moving the pointers inward until they meet.\n***Step 3:*** Return the reversed list.\n***Space Complexity:*** The function uses only a constant amount of extra space (two pointers), so the space complexity is ***O(1)***, demonstrating an in-place operation."
  },
  {
    "title": "Big-O Notation for Nested Loops",
    "ques": "Write a Python program to print all pairs of elements in a list and determine its Big-O notation.",
    "answer": {
      "type": "code",
      "lang": "python",
      "content": "def print_pairs(arr):\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            pairs.append((arr[i], arr[j]))\n    return pairs\n\nnumbers = [1, 2, 3]\nprint('All pairs:', print_pairs(numbers))"
    },
    "explanation": "***Step 1:*** Initialize an empty list `pairs` to store the pairs.\n***Step 2:*** Use nested loops to iterate through the list, pairing each element with every subsequent element.\n***Step 3:*** Append each pair to the list and return it.\n***Big-O Notation:*** The nested loops result in a time complexity of ***O(n^2)***, where `n` is the list length, as each element is paired with others."
  },
  {
    "title": "Algorithm Efficiency with Sorting",
    "ques": "Write a Python program that implements bubble sort and compares its efficiency to Pythonâ€™s built-in sort.",
    "answer": {
      "type": "code",
      "lang": "python",
      "content": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n\nnumbers = [5, 3, 8, 1, 2]\nprint('Bubble Sort:', bubble_sort(numbers.copy()))\nprint('Built-in Sort:', sorted(numbers))"
    },
    "explanation": "***Step 1:*** The `bubble_sort` function compares adjacent elements and swaps them if out of order, repeating until sorted.\n***Step 2:*** The built-in `sorted()` function uses Timsort.\n***Efficiency:*** Bubble sort has a time complexity of ***O(n^2)***, while Timsort has an average time complexity of ***O(n log n)***, making the built-in sort more efficient for large datasets."
  },
  {
    "title": "Trade-offs in Data Structure Choice",
    "ques": "Write a Python program that compares using a list versus a set for storing unique elements, highlighting trade-offs.",
    "answer": {
      "type": "code",
      "lang": "python",
      "content": "def unique_list(arr):\n    result = []\n    for item in arr:\n        if item not in result:\n            result.append(item)\n    return result\n\ndef unique_set(arr):\n    return list(set(arr))\n\nitems = [1, 2, 2, 3, 3, 4]\nprint('Unique (List):', unique_list(items))\nprint('Unique (Set):', unique_set(items))"
    },
    "explanation": "***Step 1:*** The `unique_list` function checks each element and appends it to a new list if not already present.\n***Step 2:*** The `unique_set` function converts the list to a set to remove duplicates and converts back to a list.\n***Trade-offs:*** The list approach has a time complexity of ***O(n^2)*** due to the `in` check, while the set approach is ***O(n)*** but requires ***O(n)*** additional space for the set."
  },
  {
    "title": "Exploring Complexity Classes",
    "ques": "Write a Python program that demonstrates logarithmic time complexity using a binary search tree (simulated with a sorted list) and compares it to a linear search.",
    "answer": {
      "type": "code",
      "lang": "python",
      "content": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\nnumbers = [1, 3, 5, 7, 9]\ntarget = 7\nprint('Linear Search Index:', linear_search(numbers, target))\nprint('Binary Search Index:', binary_search(numbers, target))"
    },
    "explanation": "***Step 1:*** The `linear_search` function checks each element until the target is found or the list ends.\n***Step 2:*** The `binary_search` function assumes a sorted list and divides the search space in half each iteration.\n***Complexity Classes:*** Linear search is ***O(n)***, while binary search is ***O(log n)***, demonstrating the efficiency of logarithmic time complexity for sorted data."
  },
  {
    "title": "Data Structure Design and Importance",
    "ques": "Write a Python program that implements a stack using two queues and demonstrates its use for reversing a list. Explain how the choice of data structures impacts the solution.",
    "answer": {
      "type": "code",
      "lang": "python",
      "content": "from collections import deque\n\nclass StackUsingQueues:\n    def __init__(self):\n        self.q1 = deque()\n        self.q2 = deque()\n    \n    def push(self, item):\n        self.q2.append(item)\n        while self.q1:\n            self.q2.append(self.q1.popleft())\n        self.q1, self.q2 = self.q2, self.q1\n    \n    def pop(self):\n        if not self.q1:\n            return None\n        return self.q1.popleft()\n\ndef reverse_list(arr):\n    stack = StackUsingQueues()\n    for item in arr:\n        stack.push(item)\n    result = []\n    while True:\n        item = stack.pop()\n        if item is None:\n            break\n        result.append(item)\n    return result\n\nnumbers = [1, 2, 3, 4, 5]\nprint('Reversed list:', reverse_list(numbers))"
    },
    "explanation": "***Step 1:*** Define a `StackUsingQueues` class using two queues (`q1`, `q2`) to simulate a stack.\n***Step 2:*** The `push` method adds an item to `q2`, moves all items from `q1` to `q2`, then swaps queues to maintain stack order.\n***Step 3:*** The `pop` method removes and returns the front item from `q1`.\n***Step 4:*** The `reverse_list` function pushes all list items to the stack and pops them to create a reversed list.\n***Importance:*** Using queues to implement a stack demonstrates how data structure choice affects algorithm design; queues provide FIFO behavior, but the solution manipulates them to achieve LIFO, highlighting the importance of selecting appropriate structures for specific tasks."
  },
  {
    "title": "Time and Space Complexity Analysis",
    "ques": "Write a Python function to find the kth smallest element in an unsorted list using a min-heap and analyze its time and space complexity.",
    "answer": {
      "type": "code",
      "lang": "python",
      "content": "import heapq\n\ndef kth_smallest(arr, k):\n    if k < 1 or k > len(arr):\n        return None\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n    for _ in range(k - 1):\n        heapq.heappop(heap)\n    return heapq.heappop(heap)\n\nnumbers = [7, 10, 4, 3, 20, 15]\nk = 3\nprint(f'{k}th smallest:', kth_smallest(numbers, k))"
    },
    "explanation": "***Step 1:*** Create a min-heap using `heapq` and push all elements from the list.\n***Step 2:*** Pop the smallest element `k-1` times to reach the kth smallest element.\n***Step 3:*** Pop and return the kth smallest element.\n***Time Complexity:*** Building the heap takes ***O(n)***, and popping `k` elements takes ***O(k log n)***, so the total is ***O(n + k log n)***.\n***Space Complexity:*** The heap requires ***O(n)*** space to store all elements."
  },
  {
    "title": "Big-O Notation for Recursive Algorithms",
    "ques": "Write a Python program to compute the Fibonacci sequence up to n terms using recursion and memoization, and determine its Big-O notation.",
    "answer": {
      "type": "code",
      "lang": "python",
      "content": "def fibonacci_memo(n, memo={}):\n    if n <= 1:\n        return n\n    if n not in memo:\n        memo[n] = fibonacci_memo(n - 1, memo) + fibonacci_memo(n - 2, memo)\n    return memo[n]\n\ndef get_fibonacci_sequence(n):\n    return [fibonacci_memo(i) for i in range(n)]\n\nn = 10\nprint('Fibonacci sequence:', get_fibonacci_sequence(n))"
    },
    "explanation": "***Step 1:*** The `fibonacci_memo` function uses recursion with a memoization dictionary to store previously computed Fibonacci numbers.\n***Step 2:*** Base cases return 0 or 1 for `n <= 1`.\n***Step 3:*** For each `n`, compute the Fibonacci number using memoized results.\n***Step 4:*** The `get_fibonacci_sequence` function generates the sequence up to `n` terms.\n***Big-O Notation:*** Without memoization, the time complexity is ***O(2^n)*** due to redundant recursive calls; with memoization, it reduces to ***O(n)*** as each number is computed once. Space complexity is ***O(n)*** for the memoization dictionary."
  },
  {
    "title": "Algorithm Efficiency with Divide-and-Conquer",
    "ques": "Write a Python program to implement merge sort and compare its efficiency to selection sort for sorting a list.",
    "answer": {
      "type": "code",
      "lang": "python",
      "content": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n\ndef selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n\nnumbers = [64, 34, 25, 12, 22, 11, 90]\nprint('Merge Sort:', merge_sort(numbers.copy()))\nprint('Selection Sort:', selection_sort(numbers.copy()))"
    },
    "explanation": "***Step 1:*** The `merge_sort` function recursively divides the list into halves and merges them in sorted order.\n***Step 2:*** The `merge` function combines two sorted lists into one.\n***Step 3:*** The `selection_sort` function finds the minimum element in the unsorted portion and swaps it to the front.\n***Efficiency:*** Merge sort has a time complexity of ***O(n log n)***, while selection sort is ***O(n^2)***. Merge sort is more efficient for large datasets, but selection sort uses less memory (***O(1)*** vs. ***O(n)*** for merge sort)."
  },
  {
    "title": "Trade-offs in Algorithm Design",
    "ques": "Write a Python program that implements two methods to find duplicates in a list: one using a hash set and another using sorting. Discuss the trade-offs.",
    "answer": {
      "type": "code",
      "lang": "python",
      "content": "def find_duplicates_hash(arr):\n    seen = set()\n    duplicates = set()\n    for item in arr:\n        if item in seen:\n            duplicates.add(item)\n        else:\n            seen.add(item)\n    return list(duplicates)\n\ndef find_duplicates_sort(arr):\n    arr.sort()\n    duplicates = []\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            if not duplicates or duplicates[-1] != arr[i]:\n                duplicates.append(arr[i])\n    return duplicates\n\nnumbers = [1, 3, 3, 4, 2, 1, 5, 4]\nprint('Duplicates (Hash):', find_duplicates_hash(numbers.copy()))\nprint('Duplicates (Sort):', find_duplicates_sort(numbers.copy()))"
    },
    "explanation": "***Step 1:*** The `find_duplicates_hash` function uses a set to track seen items and collect duplicates.\n***Step 2:*** The `find_duplicates_sort` function sorts the list and checks adjacent elements for duplicates.\n***Trade-offs:*** The hash method has a time complexity of ***O(n)*** and space complexity of ***O(n)***. The sorting method has a time complexity of ***O(n log n)*** but lower space complexity (***O(1)*** if in-place sorting is used). The hash method is faster but uses more memory, while sorting is memory-efficient but slower."
  },
  {
    "title": "Advanced Complexity Classes",
    "ques": "Write a Python program to compute the factorial of a number using iteration and recursion, and compare their complexity classes.",
    "answer": {
      "type": "code",
      "lang": "python",
      "content": "def factorial_iterative(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\ndef factorial_recursive(n):\n    if n <= 1:\n        return 1\n    return n * factorial_recursive(n - 1)\n\nn = 5\nprint('Factorial (Iterative):', factorial_iterative(n))\nprint('Factorial (Recursive):', factorial_recursive(n))"
    },
    "explanation": "***Step 1:*** The `factorial_iterative` function uses a loop to multiply numbers from 1 to `n`.\n***Step 2:*** The `factorial_recursive` function recursively multiplies `n` by the factorial of `n-1`.\n***Complexity Classes:*** Both have a time complexity of ***O(n)***, as they perform `n` multiplications. The iterative version has a space complexity of ***O(1)***, while the recursive version has ***O(n)*** due to the call stack, demonstrating a trade-off between code simplicity and memory usage."
  }
]