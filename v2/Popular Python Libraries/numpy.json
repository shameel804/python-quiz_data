[
  {
    "q": "Which function is used to create a NumPy array from a list?",
    "c": null,
    "o": [
      "np.array()",
      "np.list()",
      "np.make_array()",
      "np.tolist()"
    ]
  },
  {
    "q": "What will be the shape of the array created by the code below?",
    "c": "import numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6]])\nprint(arr.shape)",
    "o": [
      "(2, 3)",
      "(3, 2)",
      "(1, 6)",
      "(6,)"
    ]
  },
  {
    "q": "How can you access the element at the second row and third column of a 2D array 'arr'?",
    "c": null,
    "o": [
      "arr[1, 2]",
      "arr[2, 1]",
      "arr[2][3]",
      "arr[3, 2]"
    ]
  },
  {
    "q": "Which NumPy function is used to generate an array of evenly spaced values within a given interval?",
    "c": null,
    "o": [
      "np.linspace()",
      "np.arange()",
      "np.range()",
      "np.sequence()"
    ]
  },
  {
    "q": "What does the following code return?",
    "c": "import numpy as np\narr = np.array([1, 2, 3])\nprint(arr + 10)",
    "o": [
      "[11 12 13]",
      "[10 10 10]",
      "[1 2 3 10]",
      "[1 2 3 10 10 10]"
    ]
  },
  {
    "q": "Which function would you use to compute the mean of a NumPy array?",
    "c": null,
    "o": [
      "np.mean()",
      "np.avg()",
      "np.average()",
      "np.median()"
    ]
  },
  {
    "q": "Which NumPy function is used for matrix multiplication?",
    "c": null,
    "o": [
      "np.dot()",
      "np.mul()",
      "np.multiply()",
      "np.matmul()"
    ]
  },
  {
    "q": "What is broadcasting in NumPy?",
    "c": null,
    "o": [
      "Automatic expansion of arrays with different shapes to perform operations",
      "Sending data over a network",
      "Copying arrays into new memory blocks",
      "Compressing array data"
    ]
  },
  {
    "q": "What does vectorization in NumPy refer to?",
    "c": null,
    "o": [
      "Using array operations instead of loops for performance",
      "Converting 2D arrays into vectors",
      "Saving arrays in vector image formats",
      "Increasing array dimensions"
    ]
  },
  {
    "q": "Which function is used to generate random numbers in NumPy?",
    "c": null,
    "o": [
      "np.random.rand()",
      "np.rand()",
      "np.random()",
      "np.generate.rand()"
    ]
  },
  {
    "q": "Which NumPy function is used to reshape an array?",
    "c": null,
    "o": [
      "np.reshape()",
      "np.resize()",
      "np.shape()",
      "np.form()"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "import numpy as np\narr = np.arange(5)\nprint(arr)",
    "o": [
      "[0 1 2 3 4]",
      "[1 2 3 4 5]",
      "[0 1 2 3 4 5]",
      "[5 4 3 2 1]"
    ]
  },
  {
    "q": "Which of the following is a universal function (ufunc) in NumPy?",
    "c": null,
    "o": [
      "np.sqrt()",
      "np.array()",
      "np.reshape()",
      "np.shape()"
    ]
  },
  {
    "q": "What is the result of slicing `arr[1:4]` on `arr = np.array([10, 20, 30, 40, 50])`?",
    "c": null,
    "o": [
      "[20 30 40]",
      "[10 20 30]",
      "[30 40 50]",
      "[10 20 30 40]"
    ]
  },
  {
    "q": "How do you set the random seed in NumPy to ensure reproducible results?",
    "c": null,
    "o": [
      "np.random.seed(0)",
      "np.set.seed(0)",
      "np.random.set_seed(0)",
      "np.seed(0)"
    ]
  },
  {
    "q": "Which function creates a 3x3 identity matrix in NumPy?",
    "c": null,
    "o": [
      "np.eye(3)",
      "np.identity(3,3)",
      "np.ones(3,3)",
      "np.diag(3)"
    ]
  },
  {
    "q": "Which NumPy function would you use to combine two arrays horizontally (column-wise)?",
    "c": null,
    "o": [
      "np.hstack()",
      "np.vstack()",
      "np.concat()",
      "np.horizontal()"
    ]
  },
  {
    "q": "What will `np.zeros((2, 2))` create?",
    "c": null,
    "o": [
      "A 2x2 array filled with zeros",
      "A 2x2 array filled with random values",
      "A 1D array of two zeros",
      "A 2x2 identity matrix"
    ]
  },
  {
    "q": "Which of the following NumPy functions calculates the standard deviation?",
    "c": null,
    "o": [
      "np.std()",
      "np.var()",
      "np.mean()",
      "np.average()"
    ]
  },
  {
    "q": "How do you convert a NumPy array to a list?",
    "c": null,
    "o": [
      "arr.tolist()",
      "list(arr)",
      "arr.to_list()",
      "np.tolist(arr)"
    ]
  },
  {
    "q": "Which of the following methods creates an array of ones?",
    "c": null,
    "o": [
      "np.ones()",
      "np.one_array()",
      "np.make_ones()",
      "np.full_ones()"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "import numpy as np\narr = np.array([[1, 2], [3, 4]])\nprint(arr[0][1])",
    "o": [
      "2",
      "1",
      "3",
      "4"
    ]
  },
  {
    "q": "Which of the following will flatten a 2D NumPy array into 1D?",
    "c": null,
    "o": [
      "arr.flatten()",
      "arr.reshape(1)",
      "arr.to1D()",
      "np.squeeze(arr)"
    ]
  },
  {
    "q": "What does `np.max(arr)` return?",
    "c": null,
    "o": [
      "The maximum value in the array",
      "The index of the maximum value",
      "The shape of the array",
      "A sorted version of the array"
    ]
  },
  {
    "q": "What is the default data type of an array created with `np.array([1, 2, 3])`?",
    "c": null,
    "o": [
      "int",
      "float",
      "str",
      "bool"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "import numpy as np\narr = np.array([1, 2, 3, 4, 5])\nprint(arr[::2])",
    "o": [
      "[1 3 5]",
      "[2 4]",
      "[5 4 3 2 1]",
      "[1 2 3 4 5]"
    ]
  },
  {
    "q": "Which function can be used to combine multiple arrays vertically (row-wise)?",
    "c": null,
    "o": [
      "np.vstack()",
      "np.hstack()",
      "np.concatenate_rows()",
      "np.rowstack()"
    ]
  },
  {
    "q": "Which function gives the number of elements in a NumPy array?",
    "c": null,
    "o": [
      "arr.size",
      "arr.length",
      "np.count(arr)",
      "arr.len()"
    ]
  },
  {
    "q": "Which NumPy function returns the cumulative sum of array elements?",
    "c": null,
    "o": [
      "np.cumsum()",
      "np.sum()",
      "np.accumulate()",
      "np.total()"
    ]
  },
  {
    "q": "How do you check the data type of the elements in a NumPy array?",
    "c": null,
    "o": [
      "arr.dtype",
      "arr.type",
      "type(arr)",
      "np.type(arr)"
    ]
  },
  {
    "q": "Which of the following functions generates an array with random values between 0 and 1?",
    "c": null,
    "o": [
      "np.random.rand()",
      "np.random.randint()",
      "np.random.randn()",
      "np.random.randomint()"
    ]
  },
  {
    "q": "What does `np.arange(3, 10, 2)` return?",
    "c": null,
    "o": [
      "[3 5 7 9]",
      "[3 4 5 6 7 8 9 10]",
      "[3 6 9]",
      "[3 10 2]"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "import numpy as np\narr = np.array([4, 5, 6])\nprint(arr * 2)",
    "o": [
      "[8 10 12]",
      "[4 5 6 4 5 6]",
      "[2 2 2]",
      "[4 6 8]"
    ]
  },
  {
    "q": "Which attribute is used to check the number of dimensions of a NumPy array?",
    "c": null,
    "o": [
      "arr.ndim",
      "arr.dims",
      "arr.shape",
      "arr.dimension()"
    ]
  },
  {
    "q": "What is the correct syntax to install NumPy using pip?",
    "c": null,
    "o": [
      "pip install numpy",
      "pip numpy install",
      "pip install np",
      "install numpy"
    ]
  },
  {
    "q": "Which function is used to round elements of a NumPy array to the nearest integer?",
    "c": null,
    "o": [
      "np.round()",
      "np.int()",
      "np.fix()",
      "np.floor()"
    ]
  },
  {
    "q": "Which NumPy function calculates the median of an array?",
    "c": null,
    "o": [
      "np.median()",
      "np.mean()",
      "np.average()",
      "np.mid()"
    ]
  },
  {
    "q": "What does `np.shape(arr)` return?",
    "c": null,
    "o": [
      "The dimensions of the array",
      "The total number of elements",
      "The data type of the array",
      "The minimum value of the array"
    ]
  },
  {
    "q": "What is the purpose of `np.copy()`?",
    "c": null,
    "o": [
      "To create a new copy of an array",
      "To clone NumPy module",
      "To copy Python built-in lists",
      "To convert array into a list"
    ]
  },
  {
    "q": "Which of the following is a valid way to import NumPy?",
    "c": null,
    "o": [
      "import numpy as np",
      "import NumPy as np",
      "include numpy",
      "require('numpy')"
    ]
  },
  {
    "q": "Which function returns the minimum value in a NumPy array?",
    "c": null,
    "o": [
      "np.min()",
      "np.minimum()",
      "np.lowest()",
      "np.least()"
    ]
  },
  {
    "q": "What does the function `np.full((2, 2), 7)` return?",
    "c": null,
    "o": [
      "A 2x2 array filled with the value 7",
      "A 2x2 array filled with 0s",
      "An empty array of size 2x2",
      "A 2x2 identity matrix"
    ]
  },
  {
    "q": "Which NumPy function returns the square root of each element in an array?",
    "c": null,
    "o": [
      "np.sqrt()",
      "np.square()",
      "np.pow()",
      "np.exp()"
    ]
  },
  {
    "q": "How do you reverse a NumPy array?",
    "c": null,
    "o": [
      "arr[::-1]",
      "arr.reverse()",
      "np.flipud(arr)",
      "arr.flip()"
    ]
  },
  {
    "q": "What is the purpose of `np.unique()`?",
    "c": null,
    "o": [
      "To return sorted unique elements of an array",
      "To find duplicate elements",
      "To shuffle array elements",
      "To remove the first element"
    ]
  },
  {
    "q": "Which of the following is a valid NumPy data type?",
    "c": null,
    "o": [
      "np.float32",
      "np.decimal",
      "np.doubleint",
      "np.realnum"
    ]
  },
  {
    "q": "What will be the result of `np.sum([[1, 2], [3, 4]])`?",
    "c": null,
    "o": [
      "10",
      "[4 6]",
      "[1 2 3 4]",
      "TypeError"
    ]
  },
  {
    "q": "Which NumPy function returns the index of the maximum element?",
    "c": null,
    "o": [
      "np.argmax()",
      "np.maxindex()",
      "np.maxloc()",
      "np.indexmax()"
    ]
  },
  {
    "q": "Which method is used to save a NumPy array to a binary `.npy` file?",
    "c": null,
    "o": [
      "np.save()",
      "np.write()",
      "np.export()",
      "np.tofile()"
    ]
  },
  {
    "q": "Which function generates an array of random integers in NumPy?",
    "c": null,
    "o": [
      "np.random.randint()",
      "np.random.rand()",
      "np.random.int()",
      "np.random.uniformint()"
    ]
  },
  {
    "q": "Which function in NumPy checks whether any element of an array is True?",
    "c": null,
    "o": [
      "np.any()",
      "np.all()",
      "np.some()",
      "np.check_true()"
    ]
  },
  {
    "q": "What does the expression `arr.T` return in NumPy?",
    "c": null,
    "o": [
      "Transpose of the array",
      "Temporary array",
      "Total size of array",
      "Trimmed version of array"
    ]
  },
  {
    "q": "Which of the following is used to change the data type of a NumPy array?",
    "c": null,
    "o": [
      "arr.astype(new_type)",
      "arr.dtype(new_type)",
      "arr.change_type(new_type)",
      "np.convert(arr)"
    ]
  },
  {
    "q": "What will be the result of the following code?",
    "c": "import numpy as np\narr = np.array([1.2, 3.5, 5.1])\nprint(np.floor(arr))",
    "o": [
      "[1. 3. 5.]",
      "[2. 4. 6.]",
      "[1.0 3.0 5.0]",
      "[1.5 3.5 5.5]"
    ]
  },
  {
    "q": "Which method stacks arrays along a new axis?",
    "c": null,
    "o": [
      "np.stack()",
      "np.append()",
      "np.concat()",
      "np.combine()"
    ]
  },
  {
    "q": "What will `np.linspace(1, 5, 5)` return?",
    "c": null,
    "o": [
      "[1. 2. 3. 4. 5.]",
      "[1 2 3 4 5 6]",
      "[1. 1.5 2.5 3.5 4.5]",
      "[5 4 3 2 1]"
    ]
  },
  {
    "q": "What does `np.clip(arr, 0, 10)` do?",
    "c": null,
    "o": [
      "Limits the values of arr between 0 and 10",
      "Removes values greater than 10",
      "Rounds all values to nearest 10",
      "Returns values less than 10 only"
    ]
  },
  {
    "q": "Which of the following NumPy functions can be used to count non-zero elements?",
    "c": null,
    "o": [
      "np.count_nonzero()",
      "np.count_nonzero_elements()",
      "np.nonzero_count()",
      "np.count()"
    ]
  },
  {
    "q": "What is returned by `np.arange(6).reshape((2, 3))`?",
    "c": null,
    "o": [
      "[[0 1 2]\n [3 4 5]]",
      "[[0 1 2 3 4 5]]",
      "[[0 1]\n [2 3]\n [4 5]]",
      "[[6]]"
    ]
  },
  {
    "q": "Which NumPy function can be used to generate random samples from a normal distribution?",
    "c": null,
    "o": [
      "np.random.randn()",
      "np.random.rand()",
      "np.random.randint()",
      "np.random.uniform()"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "import numpy as np\narr = np.array([True, False, True])\nprint(np.any(arr))",
    "o": [
      "True",
      "False",
      "[True False True]",
      "None"
    ]
  },
  {
    "q": "Which function will return the shape of a NumPy array?",
    "c": null,
    "o": [
      "arr.shape",
      "np.shape(arr)",
      "arr.dim()",
      "np.size(arr)"
    ]
  },
  {
    "q": "Which of the following will create a 1D array of 4 elements, all with the value 9?",
    "c": null,
    "o": [
      "np.full(4, 9)",
      "np.ones(4, 9)",
      "np.array([9, 9, 9, 9, 9])",
      "np.fill(4, 9)"
    ]
  },
  {
    "q": "What does `arr[1:]` do in NumPy?",
    "c": null,
    "o": [
      "Returns all elements except the first one",
      "Returns only the first element",
      "Returns elements at odd indices",
      "Reverses the array"
    ]
  },
  {
    "q": "Which of the following returns a boolean array indicating if each element is greater than 5?",
    "c": "arr = np.array([2, 6, 4, 8])",
    "o": [
      "arr > 5",
      "arr >= 5",
      "arr == 5",
      "np.where(arr)"
    ]
  },
  {
    "q": "How do you generate an array of 10 random integers between 1 and 100 using NumPy?",
    "c": null,
    "o": [
      "np.random.randint(1, 101, 10)",
      "np.randint(1, 100, 10)",
      "np.random.rand(1, 100, 10)",
      "np.random.array(10, 1, 100)"
    ]
  },
  {
    "q": "What does `np.eye(4)` create?",
    "c": null,
    "o": [
      "A 4x4 identity matrix",
      "A 4-element vector",
      "A 4x4 matrix of all ones",
      "A diagonal matrix with 4s"
    ]
  },
  {
    "q": "What is the correct way to sum all elements in a NumPy array?",
    "c": null,
    "o": [
      "np.sum(arr)",
      "sum(arr)",
      "arr.total()",
      "np.add(arr)"
    ]
  },
  {
    "q": "What will `np.array([[1, 2], [3, 4]]).flatten()` return?",
    "c": null,
    "o": [
      "[1 2 3 4]",
      "[[1 2 3 4]]",
      "[[1, 2], [3, 4]]",
      "[4 3 2 1]"
    ]
  },
  {
    "q": "What does `np.arange(0, 6, 2)` produce?",
    "c": null,
    "o": [
      "[0 2 4]",
      "[0 1 2 3 4 5]",
      "[2 4 6]",
      "[0 3 6]"
    ]
  },
  {
    "q": "Which NumPy function returns the number of dimensions of an array?",
    "c": null,
    "o": [
      "arr.ndim",
      "arr.dim()",
      "np.shape(arr)",
      "np.ndim(arr)"
    ]
  },
  {
    "q": "What does `np.zeros((3, 1))` create?",
    "c": null,
    "o": [
      "A 3x1 array filled with zeros",
      "A 1x3 array filled with zeros",
      "A 3-element array with value None",
      "A 3x1 identity matrix"
    ]
  },
  {
    "q": "Which of the following functions generates values from a uniform distribution?",
    "c": null,
    "o": [
      "np.random.uniform()",
      "np.random.normal()",
      "np.random.randint()",
      "np.random.randn()"
    ]
  },
  {
    "q": "What is the result of `np.arange(4).reshape(2, 2)`?",
    "c": null,
    "o": [
      "[[0 1]\n [2 3]]",
      "[[1 2]\n [3 4]]",
      "[[0 2]\n [1 3]]",
      "[[4]]"
    ]
  },
  {
    "q": "What does the function `np.mean(arr)` do?",
    "c": null,
    "o": [
      "Calculates the average of all elements",
      "Returns the median",
      "Returns the most frequent element",
      "Finds the maximum value"
    ]
  },
  {
    "q": "Which NumPy function rounds values to the nearest integer?",
    "c": null,
    "o": [
      "np.rint()",
      "np.floor()",
      "np.int()",
      "np.integer()"
    ]
  },
  {
    "q": "What is the output of `np.array([1, 2, 3]) == 2`?",
    "c": null,
    "o": [
      "[False  True False]",
      "[True False True]",
      "[1 2 3]",
      "[False False False]"
    ]
  },
  {
    "q": "Which of the following returns indices of non-zero elements?",
    "c": null,
    "o": [
      "np.nonzero(arr)",
      "np.where(arr == 0)",
      "np.find(arr)",
      "np.index(arr)"
    ]
  },
  {
    "q": "What does `arr.sum(axis=0)` do for a 2D array?",
    "c": null,
    "o": [
      "Sums the elements column-wise",
      "Sums the elements row-wise",
      "Sums all elements",
      "Finds maximum of each row"
    ]
  },
  {
    "q": "Which of the following can be used to concatenate arrays along existing axis?",
    "c": null,
    "o": [
      "np.concatenate()",
      "np.stack()",
      "np.append()",
      "np.combine()"
    ]
  },
  {
    "q": "Which function would you use to find the index of the minimum element in a NumPy array?",
    "c": null,
    "o": [
      "np.argmin()",
      "np.index_min()",
      "np.minindex()",
      "np.findmin()"
    ]
  },
  {
    "q": "What will be the result of `np.array([10, 20, 30]) / 10`?",
    "c": null,
    "o": [
      "[1. 2. 3.]",
      "[10 20 30 10]",
      "[0.1 0.2 0.3]",
      "[100 200 300]"
    ]
  },
  {
    "q": "Which of the following is a valid shape for a NumPy 2D array?",
    "c": null,
    "o": [
      "(3, 4)",
      "(4)",
      "(3, 4, 5, 6)",
      "(3.5, 2)"
    ]
  },
  {
    "q": "How do you convert a 2D array into a 1D array?",
    "c": null,
    "o": [
      "arr.flatten()",
      "arr.reshape(1)",
      "arr.resize()",
      "arr.compress()"
    ]
  },
  {
    "q": "What does `arr[::2]` return?",
    "c": null,
    "o": [
      "Every second element from the array",
      "Every second row of the array",
      "Last two elements",
      "Array reversed"
    ]
  },
  {
    "q": "Which NumPy function creates an array from 0 to 4 (inclusive of 0, exclusive of 5)?",
    "c": null,
    "o": [
      "np.arange(5)",
      "np.range(5)",
      "np.linspace(0, 5)",
      "np.create_array(0, 5)"
    ]
  },
  {
    "q": "What is the output of `np.round([1.49, 2.5, 3.51])`?",
    "c": null,
    "o": [
      "[1. 2. 4.]",
      "[1. 3. 4.]",
      "[1 2 3]",
      "[2. 3. 3.]"
    ]
  },
  {
    "q": "Which NumPy function is used to stack arrays depth-wise (along the third axis)?",
    "c": null,
    "o": [
      "np.dstack()",
      "np.hstack()",
      "np.vstack()",
      "np.stack()"
    ]
  },
  {
    "q": "What will be the shape of `np.zeros((2, 3, 4))`?",
    "c": null,
    "o": [
      "(2, 3, 4)",
      "(3, 4, 2)",
      "(4, 2, 3)",
      "(2, 12)"
    ]
  },
  {
    "q": "What will be the result of `np.array([[1, 2], [3, 4]]).sum(axis=1)`?",
    "c": null,
    "o": [
      "[3 7]",
      "[4 6]",
      "[10]",
      "[1 2 3 4]"
    ]
  },
  {
    "q": "What does `np.random.seed(42)` do?",
    "c": null,
    "o": [
      "Sets the seed to make random number generation reproducible",
      "Randomly changes the output each time",
      "Creates an array of 42 random numbers",
      "Initializes a new array"
    ]
  },
  {
    "q": "Which function checks if all elements in a NumPy array are True?",
    "c": null,
    "o": [
      "np.all()",
      "np.any()",
      "np.every()",
      "np.truth()"
    ]
  },
  {
    "q": "How do you multiply two NumPy arrays element-wise?",
    "c": null,
    "o": [
      "arr1 * arr2",
      "np.dot(arr1, arr2)",
      "arr1 + arr2",
      "np.matmul(arr1, arr2)"
    ]
  },
  {
    "q": "What does `np.array([1, 2, 3]) + np.array([4, 5, 6])` return?",
    "c": null,
    "o": [
      "[5 7 9]",
      "[1 2 3 4 5 6]",
      "[4 5 6]",
      "Error"
    ]
  },
  {
    "q": "Which of the following is used to generate 100 numbers between 0 and 1?",
    "c": null,
    "o": [
      "np.random.rand(100)",
      "np.rand(100)",
      "np.random.randint(0, 1, 100)",
      "np.linspace(0, 1, 100)"
    ]
  },
  {
    "q": "What does `np.array([3, 6, 9]) > 5` return?",
    "c": null,
    "o": [
      "[False  True  True]",
      "[True True True]",
      "[3 6 9]",
      "[False False False]"
    ]
  },
  {
    "q": "How do you check the size (number of elements) of a NumPy array?",
    "c": null,
    "o": [
      "arr.size",
      "arr.length",
      "np.sizeof(arr)",
      "arr.count()"
    ]
  },
  {
    "q": "Which of these is used to load a `.npy` file?",
    "c": null,
    "o": [
      "np.load()",
      "np.open()",
      "np.read()",
      "np.import()"
    ]
  },
  {
    "q": "Which NumPy function computes the variance of array elements?",
    "c": null,
    "o": [
      "np.var()",
      "np.variance()",
      "np.dev()",
      "np.spread()"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "import numpy as np\narr = np.array([10, 20, 30, 40])\nprint(arr[-1])",
    "o": [
      "40",
      "10",
      "30",
      "0"
    ]
  },
  {
    "q": "Which of the following is used to create an identity matrix?",
    "c": null,
    "o": [
      "np.eye()",
      "np.ones()",
      "np.identity_matrix()",
      "np.unit()"
    ]
  },
  {
    "q": "What is the result of `np.zeros((2, 3))`?",
    "c": null,
    "o": [
      "A 2x3 array filled with zeros",
      "A 3x2 array filled with zeros",
      "A 2-element array of zeros",
      "An error"
    ]
  },
  {
    "q": "Which attribute of a NumPy array gives the number of dimensions?",
    "c": null,
    "o": [
      "ndim",
      "shape",
      "size",
      "dtype"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "import numpy as np\narr = np.array([[1, 2], [3, 4]])\nprint(arr.shape)",
    "o": [
      "(2, 2)",
      "(4,)",
      "(1, 4)",
      "(2,)"
    ]
  },
  {
    "q": "What does `np.sum(arr)` do?",
    "c": null,
    "o": [
      "Returns the sum of all elements in the array",
      "Returns a cumulative sum",
      "Returns the maximum value",
      "Returns a copy of the array"
    ]
  },
  {
    "q": "Which function gives the standard deviation of array values?",
    "c": null,
    "o": [
      "np.std()",
      "np.var()",
      "np.mean()",
      "np.dev()"
    ]
  },
  {
    "q": "What is the purpose of `np.linspace(0, 10, 5)`?",
    "c": null,
    "o": [
      "Returns 5 evenly spaced numbers from 0 to 10",
      "Generates 5 random numbers from 0 to 10",
      "Creates an array of 5 zeros",
      "Returns the average of numbers from 0 to 10"
    ]
  },
  {
    "q": "How to get the transpose of a 2D array in NumPy?",
    "c": null,
    "o": [
      "arr.T",
      "arr.transpose()",
      "np.transpose(arr)",
      "All of the above"
    ]
  },
  {
    "q": "What is the default data type of values in `np.array([1, 2, 3])`?",
    "c": null,
    "o": [
      "int",
      "float",
      "complex",
      "str"
    ]
  },
  {
    "q": "What is broadcasting in NumPy?",
    "c": null,
    "o": [
      "Automatically expanding smaller arrays in arithmetic operations",
      "Converting arrays to strings",
      "Sending data over a network",
      "Reading data from a file"
    ]
  },
  {
    "q": "Which function creates a 1D array from 0 to 9?",
    "c": null,
    "o": [
      "np.arange(10)",
      "np.array(10)",
      "np.linspace(0, 9)",
      "np.range(0, 10)"
    ]
  },
  {
    "q": "What does the `dtype` attribute of a NumPy array show?",
    "c": null,
    "o": [
      "The data type of the array elements",
      "The size of the array",
      "The number of dimensions",
      "The number of elements"
    ]
  },
  {
    "q": "Which of the following is used to generate random integers?",
    "c": null,
    "o": [
      "np.random.randint()",
      "np.random.rand()",
      "np.random.randn()",
      "np.random.choice()"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "import numpy as np\narr = np.array([10, 20, 30, 40])\nprint(arr[2])",
    "o": [
      "30",
      "20",
      "40",
      "10"
    ]
  },
  {
    "q": "Which of the following functions reshapes an array?",
    "c": null,
    "o": [
      "reshape()",
      "resize()",
      "reshape_array()",
      "change_shape()"
    ]
  },
  {
    "q": "What does `np.mean(arr)` return?",
    "c": null,
    "o": [
      "The average of the array elements",
      "The sum of the array elements",
      "The median value",
      "The maximum value"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "import numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr[-1])",
    "o": [
      "4",
      "3",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which function returns a copy of the array sorted in ascending order?",
    "c": null,
    "o": [
      "np.sort()",
      "np.order()",
      "np.arrange()",
      "np.rank()"
    ]
  },
  {
    "q": "What is the purpose of `np.random.seed(0)`?",
    "c": null,
    "o": [
      "To make random results reproducible",
      "To increase randomness",
      "To clear random memory",
      "To generate a random number between 0 and 1"
    ]
  },
  {
    "q": "Which NumPy function calculates the dot product of two arrays?",
    "c": null,
    "o": [
      "np.dot()",
      "np.cross()",
      "np.multiply()",
      "np.product()"
    ]
  },
  {
    "q": "Which of the following creates a 3x3 array of all zeros?",
    "c": null,
    "o": [
      "np.zeros((3, 3))",
      "np.zeros[3][3]",
      "np.array(3, 3, 0)",
      "np.empty((3, 3))"
    ]
  },
  {
    "q": "Which function returns the number of dimensions in a NumPy array?",
    "c": null,
    "o": [
      "ndim",
      "shape",
      "size",
      "dtype"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "import numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6]])\nprint(arr.shape)",
    "o": [
      "(2, 3)",
      "(3, 2)",
      "(6,)",
      "(2,)"
    ]
  },
  {
    "q": "Which of the following is a universal function (ufunc) in NumPy?",
    "c": null,
    "o": [
      "np.sqrt()",
      "np.array()",
      "np.append()",
      "np.reshape()"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "import numpy as np\narr = np.array([2, 4, 6, 8])\nprint(arr * 2)",
    "o": [
      "[ 4  8 12 16]",
      "[2 4 6 8 2 4 6 8]",
      "[4 16 36 64]",
      "[2 2 4 4 6 6 8 8]"
    ]
  },
  {
    "q": "Which function is used to concatenate two arrays along an axis?",
    "c": null,
    "o": [
      "np.concatenate()",
      "np.attach()",
      "np.combine()",
      "np.append()"
    ]
  },
  {
    "q": "What does `np.linspace(0, 1, 5)` return?",
    "c": null,
    "o": [
      "[0.   0.25 0.5  0.75 1. ]",
      "[0, 1, 2, 3, 4]",
      "[0, 0.2, 0.4, 0.6, 0.8]",
      "[0, 0.5, 1]"
    ]
  },
  {
    "q": "Which method returns the total number of elements in a NumPy array?",
    "c": null,
    "o": [
      "size",
      "shape",
      "len",
      "count"
    ]
  },
  {
    "q": "How do you select the second row from a 2D array `arr`?",
    "c": null,
    "o": [
      "arr[1]",
      "arr[2]",
      "arr[0]",
      "arr[:][1]"
    ]
  },
  {
    "q": "What is the default axis for `np.sum()` when applied to a 2D array?",
    "c": null,
    "o": [
      "None (sums all elements)",
      "0 (sums columns)",
      "1 (sums rows)",
      "-1 (last axis)"
    ]
  },
  {
    "q": "Which of the following functions creates an array with values from 0 to 9?",
    "c": null,
    "o": [
      "np.arange(10)",
      "np.linspace(0, 9, 10)",
      "np.range(0, 10)",
      "np.sequence(10)"
    ]
  },
  {
    "q": "What is the data type of the elements in the following array?",
    "c": "import numpy as np\narr = np.array([1, 2, 3])\nprint(arr.dtype)",
    "o": [
      "int64",
      "float",
      "str",
      "bool"
    ]
  },
  {
    "q": "What does the `reshape` function do in NumPy?",
    "c": null,
    "o": [
      "Changes the shape of an array without changing its data",
      "Sorts the array",
      "Changes the data type of array elements",
      "Fills the array with zeros"
    ]
  },
  {
    "q": "Which NumPy function returns the maximum value in an array?",
    "c": null,
    "o": [
      "np.max()",
      "np.maximum()",
      "np.argmax()",
      "np.highest()"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "import numpy as np\narr = np.ones((2, 2))\nprint(arr)",
    "o": [
      "[[1. 1.]\n [1. 1.]]",
      "[[1 0]\n [0 1]]",
      "[[0. 0.]\n [0. 0.]]",
      "[[1 1 1]\n [1 1 1]]"
    ]
  },
  {
    "q": "Which of the following creates an identity matrix in NumPy?",
    "c": null,
    "o": [
      "np.eye(3)",
      "np.identity(0, 3)",
      "np.ones((3,3))",
      "np.diag(3)"
    ]
  },
  {
    "q": "Which function is used to get the square root of each element in an array?",
    "c": null,
    "o": [
      "np.sqrt()",
      "np.power()",
      "np.square()",
      "np.exp()"
    ]
  },
  {
    "q": "Which function is used to set the seed for random number generation in NumPy?",
    "c": null,
    "o": [
      "np.random.seed()",
      "np.seed()",
      "np.set_seed()",
      "np.random.set()"
    ]
  },
  {
    "q": "Which NumPy function returns the mean of array elements?",
    "c": null,
    "o": [
      "np.mean()",
      "np.avg()",
      "np.middle()",
      "np.average()"
    ]
  },
  {
    "q": "Which of the following is the correct way to slice the first 3 elements of a NumPy array?",
    "c": null,
    "o": [
      "arr[:3]",
      "arr[3:]",
      "arr[:]",
      "arr[0:4]"
    ]
  },
  {
    "q": "Which function is used to create an array filled with zeros?",
    "c": null,
    "o": [
      "np.zeros()",
      "np.empty()",
      "np.full()",
      "np.ones()"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "import numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr[1])",
    "o": [
      "2",
      "1",
      "3",
      "4"
    ]
  },
  {
    "q": "Which of these functions will create an array with random values between 0 and 1?",
    "c": null,
    "o": [
      "np.random.rand()",
      "np.random.randint()",
      "np.random.normal()",
      "np.random.uniform(-1, 1)"
    ]
  },
  {
    "q": "Which of the following is used to add two NumPy arrays element-wise?",
    "c": null,
    "o": [
      "arr1 + arr2",
      "arr1.add(arr2)",
      "np.add(arr1, arr2)",
      "arr1 * arr2"
    ]
  },
  {
    "q": "What is the shape of the following array?",
    "c": "import numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6]])\nprint(arr.shape)",
    "o": [
      "(2, 3)",
      "(3, 2)",
      "(6,)",
      "(2,)"
    ]
  },
  {
    "q": "Which function returns the number of elements in a NumPy array?",
    "c": null,
    "o": [
      "arr.size",
      "arr.length",
      "len(arr)",
      "arr.shape"
    ]
  },
  {
    "q": "Which function computes the dot product of two arrays?",
    "c": null,
    "o": [
      "np.dot()",
      "np.product()",
      "np.multiply()",
      "np.cross()"
    ]
  },
  {
    "q": "Which NumPy function is used to combine two arrays along rows?",
    "c": null,
    "o": [
      "np.vstack()",
      "np.hstack()",
      "np.concatenate(axis=1)",
      "np.append()"
    ]
  },
  {
    "q": "What does the following code return?",
    "c": "import numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr[-1])",
    "o": [
      "4",
      "3",
      "1",
      "IndexError"
    ]
  },
  {
    "q": "Which of the following best describes broadcasting in NumPy?",
    "c": null,
    "o": [
      "Automatic expansion of arrays for element-wise operations",
      "Sorting of arrays",
      "Reshaping arrays into different dimensions",
      "Creating random numbers in arrays"
    ]
  },
  {
    "q": "Which function is used to get the mean of elements in a NumPy array?",
    "c": null,
    "o": [
      "np.mean()",
      "np.avg()",
      "np.median()",
      "np.average()"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "import numpy as np\narr = np.array([10, 20, 30, 40])\nprint(arr[:2])",
    "o": [
      "[10 20]",
      "[30 40]",
      "[20 30]",
      "[10 20 30]"
    ]
  },
  {
    "q": "Which NumPy function returns the cumulative sum of elements?",
    "c": null,
    "o": [
      "np.cumsum()",
      "np.sum()",
      "np.accumulate()",
      "np.add()"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "import numpy as np\narr = np.arange(5)\nprint(arr)",
    "o": [
      "[0 1 2 3 4]",
      "[1 2 3 4 5]",
      "[0 1 2 3 4 5]",
      "[1 2 3 4]"
    ]
  },
  {
    "q": "Which of the following functions creates an identity matrix?",
    "c": null,
    "o": [
      "np.eye()",
      "np.identity()",
      "np.ones()",
      "np.diag()"
    ]
  },
  {
    "q": "How can you reshape an array of shape (6,) to (2, 3)?",
    "c": null,
    "o": [
      "arr.reshape(2, 3)",
      "arr.shape(2, 3)",
      "reshape(arr, 2, 3)",
      "arr.resize(2, 3)"
    ]
  },
  {
    "q": "What is the result of the expression: np.array([1, 2, 3]) * 2?",
    "c": null,
    "o": [
      "[2 4 6]",
      "[1 2 3 1 2 3]",
      "[1 2 3 2]",
      "[1 4 9]"
    ]
  },
  {
    "q": "Which of these will correctly import the NumPy library?",
    "c": null,
    "o": [
      "import numpy as np",
      "import NumPy",
      "include numpy",
      "from numpy import * as np"
    ]
  },
  {
    "q": "Which function is used to generate evenly spaced values between two numbers?",
    "c": null,
    "o": [
      "np.linspace()",
      "np.arange()",
      "np.spacing()",
      "np.range()"
    ]
  },
  {
    "q": "Which method is used to generate a 1-D array of random integers from 0 to 9?",
    "c": null,
    "o": [
      "np.random.randint(0, 10, size=5)",
      "np.random.rand(0, 10, 5)",
      "np.random.random(10)",
      "np.random.uniform(0, 10, 5)"
    ]
  },
  {
    "q": "What does the NumPy function `np.zeros((2, 3))` return?",
    "c": null,
    "o": [
      "A 2x3 array filled with zeros",
      "A 3x2 array filled with zeros",
      "An array with values from 0 to 5",
      "A 2x3 identity matrix"
    ]
  },
  {
    "q": "Which of the following correctly seeds the random number generator in NumPy?",
    "c": null,
    "o": [
      "np.random.seed(42)",
      "np.seed(42)",
      "random.seed(42)",
      "np.set.seed(42)"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "import numpy as np\narr = np.array([[1, 2], [3, 4]])\nprint(arr.shape)",
    "o": [
      "(2, 2)",
      "(4,)",
      "(1, 4)",
      "(2,)"
    ]
  },
  {
    "q": "Which NumPy function returns the standard deviation of the array?",
    "c": null,
    "o": [
      "np.std()",
      "np.variance()",
      "np.mean()",
      "np.sum()"
    ]
  },
  {
    "q": "How can you flatten a multi-dimensional NumPy array to 1D?",
    "c": null,
    "o": [
      "arr.flatten()",
      "arr.reshape(1)",
      "arr.flat()",
      "arr.compress()"
    ]
  },
  {
    "q": "Which NumPy function gives you the index of the maximum element?",
    "c": null,
    "o": [
      "np.argmax()",
      "np.maxindex()",
      "np.max()",
      "np.indexmax()"
    ]
  },
  {
    "q": "What is the result of: `np.array([True, False, True]) & np.array([False, False, True])`?",
    "c": null,
    "o": [
      "[False False  True]",
      "[True False True]",
      "[False False False]",
      "[True True True]"
    ]
  },
  {
    "q": "Which of the following creates a 1D array with 4 values starting from 1?",
    "c": null,
    "o": [
      "np.arange(1, 5)",
      "np.linspace(1, 4)",
      "np.ones(4)",
      "np.zeros(4)"
    ]
  },
  {
    "q": "Which method returns the maximum value in a NumPy array?",
    "c": null,
    "o": [
      "np.max()",
      "np.maximum()",
      "np.argmax()",
      "np.top()"
    ]
  },
  {
    "q": "Which of the following is a valid use of broadcasting?",
    "c": null,
    "o": [
      "Adding a scalar to a NumPy array",
      "Adding two arrays of different shapes with same number of elements",
      "Multiplying two arrays of different lengths without rules",
      "Concatenating arrays of unequal dimensions"
    ]
  },
  {
    "q": "Which NumPy function creates an array with evenly spaced values between two numbers?",
    "c": null,
    "o": [
      "np.linspace()",
      "np.arange()",
      "np.range()",
      "np.sequence()"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "import numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr[1:3])",
    "o": [
      "[2 3]",
      "[1 2]",
      "[3 4]",
      "[2 3 4]"
    ]
  },
  {
    "q": "What does the `.reshape()` function do in NumPy?",
    "c": null,
    "o": [
      "Changes the shape of the array without changing its data",
      "Removes duplicates from the array",
      "Sorts the array",
      "Fills the array with zeros"
    ]
  },
  {
    "q": "Which of the following is a valid way to import NumPy?",
    "c": null,
    "o": [
      "import numpy as np",
      "import numpy.py",
      "include numpy",
      "using numpy"
    ]
  },
  {
    "q": "Which NumPy function is used to generate random integers?",
    "c": null,
    "o": [
      "np.random.randint()",
      "np.random.int()",
      "np.randint()",
      "np.random.integer()"
    ]
  },
  {
    "q": "What does `np.mean()` return?",
    "c": null,
    "o": [
      "The average value of elements in the array",
      "The median value",
      "The mode value",
      "The highest value"
    ]
  },
  {
    "q": "Which of the following NumPy functions checks whether any of the elements are True?",
    "c": null,
    "o": [
      "np.any()",
      "np.check()",
      "np.test()",
      "np.alltrue()"
    ]
  },
  {
    "q": "Which function returns the number of dimensions in a NumPy array?",
    "c": null,
    "o": [
      "ndim",
      "shape",
      "size",
      "length"
    ]
  },
  {
    "q": "Which function creates a copy of a NumPy array?",
    "c": null,
    "o": [
      "np.copy()",
      "np.clone()",
      "np.duplicate()",
      "np.new()"
    ]
  },
  {
    "q": "Which of the following methods multiplies two NumPy arrays element-wise?",
    "c": null,
    "o": [
      "Using * operator",
      "Using np.dot()",
      "Using np.matmul()",
      "Using np.multiplyrows()"
    ]
  },
  {
    "q": "Which function is used to create an array of zeros in NumPy?",
    "c": null,
    "o": [
      "np.zeros()",
      "np.empty()",
      "np.ones()",
      "np.full()"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "import numpy as np\narr = np.array([[1, 2], [3, 4]])\nprint(arr.shape)",
    "o": [
      "(2, 2)",
      "(4,)",
      "(1, 4)",
      "(2,)"
    ]
  },
  {
    "q": "Which NumPy function returns the maximum value in an array?",
    "c": null,
    "o": [
      "np.max()",
      "np.maximum()",
      "np.top()",
      "np.maximum_value()"
    ]
  },
  {
    "q": "Which of these creates a 1D NumPy array with values from 0 to 4?",
    "c": null,
    "o": [
      "np.arange(5)",
      "np.range(5)",
      "np.linspace(0, 4)",
      "np.array([0:5])"
    ]
  },
  {
    "q": "What does `np.eye(3)` return?",
    "c": null,
    "o": [
      "A 3x3 identity matrix",
      "A 3x3 matrix of ones",
      "A 3x3 matrix of zeros",
      "A diagonal matrix of threes"
    ]
  },
  {
    "q": "Which of the following correctly generates a 3x2 array of random floats?",
    "c": null,
    "o": [
      "np.random.rand(3, 2)",
      "np.random.random(3, 2)",
      "np.rand(3, 2)",
      "np.float.random(3, 2)"
    ]
  },
  {
    "q": "What is the result of broadcasting `[1, 2, 3] + 5` in NumPy?",
    "c": null,
    "o": [
      "[6, 7, 8]",
      "[1, 2, 3, 5]",
      "[5, 6, 7, 8]",
      "[1, 2, 3, 5, 6, 7, 8]"
    ]
  },
  {
    "q": "Which function returns the standard deviation of a NumPy array?",
    "c": null,
    "o": [
      "np.std()",
      "np.var()",
      "np.mean()",
      "np.dev()"
    ]
  },
  {
    "q": "What does `np.array([[1, 2], [3, 4]]).flatten()` return?",
    "c": null,
    "o": [
      "[1 2 3 4]",
      "[[1 2] [3 4]]",
      "[1, 2], [3, 4]",
      "[[1], [2], [3], [4]]"
    ]
  },
  {
    "q": "Which function gives the cumulative sum of elements in an array?",
    "c": null,
    "o": [
      "np.cumsum()",
      "np.sumall()",
      "np.totalsum()",
      "np.running_sum()"
    ]
  },
  {
    "q": "Which NumPy function is used to compute the mean of an array?",
    "c": null,
    "o": [
      "np.mean()",
      "np.median()",
      "np.average()",
      "np.avg()"
    ]
  },
  {
    "q": "Which of the following creates a 3x3 array filled with the number 7?",
    "c": null,
    "o": [
      "np.full((3, 3), 7)",
      "np.zeros((3, 3), 7)",
      "np.ones((3, 3), 7)",
      "np.fill((3, 3), 7)"
    ]
  },
  {
    "q": "What does the `reshape` method do in NumPy?",
    "c": null,
    "o": [
      "Changes the shape of the array without changing its data",
      "Sorts the array",
      "Removes elements from the array",
      "Changes the data type of array elements"
    ]
  },
  {
    "q": "Which of the following sets the seed for NumPy's random number generator?",
    "c": null,
    "o": [
      "np.random.seed()",
      "np.seed()",
      "np.random.set_seed()",
      "np.set_random_seed()"
    ]
  },
  {
    "q": "What is the result of `np.array([1, 2, 3]) * 2`?",
    "c": null,
    "o": [
      "[2 4 6]",
      "[1 2 3 2]",
      "[1 4 9]",
      "[2 3 4]"
    ]
  },
  {
    "q": "What will `np.linspace(0, 1, 5)` return?",
    "c": null,
    "o": [
      "[0.   0.25 0.5  0.75 1. ]",
      "[0 0.2 0.4 0.6 0.8]",
      "[0 1 2 3 4]",
      "[0 0.1 0.2 0.3 0.4]"
    ]
  },
  {
    "q": "Which function converts a list to a NumPy array?",
    "c": null,
    "o": [
      "np.array()",
      "np.asarray()",
      "np.to_array()",
      "np.convert()"
    ]
  },
  {
    "q": "Which of the following would return the data type of a NumPy array?",
    "c": null,
    "o": [
      "arr.dtype",
      "arr.type()",
      "arr.datatype()",
      "arr.get_dtype()"
    ]
  },
  {
    "q": "What does the `axis` parameter in functions like `sum()` and `mean()` control?",
    "c": null,
    "o": [
      "The direction along which the operation is performed",
      "The number of operations performed",
      "The data type of the result",
      "The size of the array"
    ]
  },
  {
    "q": "Which NumPy function checks whether any element is True in a boolean array?",
    "c": null,
    "o": [
      "np.any()",
      "np.all()",
      "np.exists()",
      "np.true()"
    ]
  },
  {
    "q": "Which function in NumPy returns the shape of an array?",
    "c": null,
    "o": [
      "array.shape",
      "array.size()",
      "array.length()",
      "array.dimension()"
    ]
  },
  {
    "q": "How do you create an array of 10 zeros using NumPy?",
    "c": null,
    "o": [
      "np.zeros(10)",
      "np.zero(10)",
      "np.ones(0,10)",
      "np.full(10, 0)"
    ]
  },
  {
    "q": "Which of the following will generate a 2D array?",
    "c": null,
    "o": [
      "np.array([[1, 2], [3, 4]])",
      "np.array([1, 2, 3, 4])",
      "np.zeros(4)",
      "np.arange(4)"
    ]
  },
  {
    "q": "What is the output of `np.arange(4).reshape(2, 2)`?",
    "c": null,
    "o": [
      "[[0 1]\n [2 3]]",
      "[[1 2]\n [3 4]]",
      "[[0 2]\n [1 3]]",
      "[[4 3]\n [2 1]]"
    ]
  },
  {
    "q": "Which function would you use to compute the square root of each element in a NumPy array?",
    "c": null,
    "o": [
      "np.sqrt()",
      "np.power(0.5)",
      "np.square()",
      "np.exp()"
    ]
  },
  {
    "q": "Which keyword is used to import NumPy using the alias 'np'?",
    "c": null,
    "o": [
      "import numpy as np",
      "include numpy as np",
      "load numpy as np",
      "using numpy np"
    ]
  },
  {
    "q": "What does broadcasting in NumPy allow you to do?",
    "c": null,
    "o": [
      "Perform operations on arrays of different shapes",
      "Copy data between arrays",
      "Sort arrays automatically",
      "Reshape arrays without copying"
    ]
  },
  {
    "q": "Which of the following returns a random float between 0 and 1?",
    "c": null,
    "o": [
      "np.random.rand()",
      "np.random.randint()",
      "np.random.randn()",
      "np.random.random_integers()"
    ]
  },
  {
    "q": "Which of the following generates a 1D array with 5 evenly spaced numbers from 0 to 10?",
    "c": null,
    "o": [
      "np.linspace(0, 10, 5)",
      "np.arange(0, 10, 2)",
      "np.linspace(0, 5, 10)",
      "np.arange(5, 10, 1)"
    ]
  },
  {
    "q": "What does the `np.sum(array, axis=0)` do?",
    "c": null,
    "o": [
      "Sums the elements along each column",
      "Sums all elements in the array",
      "Sums elements along each row",
      "Returns the number of elements"
    ]
  },
  {
    "q": "Which NumPy function is used to create an array with random integers?",
    "c": null,
    "o": [
      "np.random.randint()",
      "np.random.rand()",
      "np.random.random()",
      "np.random.randn()"
    ]
  },
  {
    "q": "Which of the following will give the total number of elements in a NumPy array?",
    "c": null,
    "o": [
      "array.size",
      "array.shape",
      "array.length",
      "array.count"
    ]
  },
  {
    "q": "What will `np.array([1, 2, 3]) + 5` return?",
    "c": null,
    "o": [
      "[6 7 8]",
      "[1 2 3 5]",
      "[1 2 3 10]",
      "[5 5 5]"
    ]
  },
  {
    "q": "Which function is used to compute the mean of a NumPy array?",
    "c": null,
    "o": [
      "np.mean()",
      "np.average()",
      "np.median()",
      "np.center()"
    ]
  },
  {
    "q": "How do you access the first element of a 1D NumPy array `arr`?",
    "c": null,
    "o": [
      "arr[0]",
      "arr(0)",
      "arr{0}",
      "arr.0"
    ]
  },
  {
    "q": "Which of the following reshapes a 1D array of 6 elements to a 2D array with shape (2, 3)?",
    "c": null,
    "o": [
      "arr.reshape(2, 3)",
      "arr.resize(2, 3)",
      "arr.reshape(3, 2)",
      "arr.flatten(2, 3)"
    ]
  },
  {
    "q": "Which method flattens a multi-dimensional NumPy array into 1D?",
    "c": null,
    "o": [
      "array.flatten()",
      "array.flat()",
      "array.compress()",
      "array.reshape()"
    ]
  },
  {
    "q": "Which of the following creates an array with values from 0 to 9?",
    "c": null,
    "o": [
      "np.arange(10)",
      "np.range(10)",
      "np.linspace(0, 9, 1)",
      "np.list(10)"
    ]
  },
  {
    "q": "What does `np.ones((2, 2))` create?",
    "c": null,
    "o": [
      "A 2x2 array filled with 1s",
      "A 2-element array with ones",
      "An empty 2x2 array",
      "A 1x2 array filled with 1s"
    ]
  },
  {
    "q": "How do you set the seed for random number generation in NumPy?",
    "c": null,
    "o": [
      "np.random.seed(0)",
      "np.random.set(0)",
      "np.seed(0)",
      "np.setseed(0)"
    ]
  },
  {
    "q": "What is broadcasting in NumPy?",
    "c": null,
    "o": [
      "Automatic expansion of smaller arrays in arithmetic operations",
      "Copying arrays to new memory",
      "Flattening arrays",
      "Encrypting array values"
    ]
  },
  {
    "q": "Which of these libraries commonly uses NumPy arrays as input?",
    "c": null,
    "o": [
      "Scikit-learn",
      "Tkinter",
      "Flask",
      "Selenium"
    ]
  },
  {
    "q": "Which NumPy function returns the standard deviation of array elements?",
    "c": null,
    "o": [
      "np.std()",
      "np.var()",
      "np.mean()",
      "np.sqrt()"
    ]
  },
  {
    "q": "Which of these ensures reproducibility in NumPy's random number generation?",
    "c": null,
    "o": [
      "np.random.seed()",
      "np.random.generate()",
      "np.seed.random()",
      "np.random.fix()"
    ]
  },
  {
    "q": "What is the benefit of vectorization in NumPy?",
    "c": null,
    "o": [
      "Faster execution without explicit loops",
      "Better image rendering",
      "GPU acceleration",
      "Compression of arrays"
    ]
  },
  {
    "q": "What does `np.random.normal()` generate?",
    "c": null,
    "o": [
      "Random samples from a normal (Gaussian) distribution",
      "Random integers",
      "Uniform random numbers",
      "Complex numbers"
    ]
  },
  {
    "q": "Which NumPy function computes the cumulative sum of an array?",
    "c": null,
    "o": [
      "np.cumsum()",
      "np.sum()",
      "np.accumulate()",
      "np.add()"
    ]
  },
  {
    "q": "What does `np.isclose()` check for?",
    "c": null,
    "o": [
      "Element-wise comparison of floating-point values within tolerance",
      "If arrays are identical in shape",
      "If arrays are sorted",
      "If arrays are numeric"
    ]
  },
  {
    "q": "Which data structure in Pandas is typically built on top of NumPy arrays?",
    "c": null,
    "o": [
      "DataFrame",
      "SeriesDict",
      "Panel",
      "DataTree"
    ]
  },
  {
    "q": "What is the default data type for a NumPy array created with only float values?",
    "c": null,
    "o": [
      "float64",
      "float32",
      "int32",
      "int64"
    ]
  },
  {
    "q": "Which function reshapes a NumPy array without changing its data?",
    "c": null,
    "o": [
      "reshape()",
      "reorder()",
      "resize()",
      "rebuild()"
    ]
  },
  {
    "q": "Which NumPy function returns the maximum value in an array?",
    "c": null,
    "o": [
      "np.max()",
      "np.maximum()",
      "np.argmax()",
      "np.top()"
    ]
  },
  {
    "q": "What does `np.linspace(0, 1, 5)` return?",
    "c": null,
    "o": [
      "[0.   0.25 0.5  0.75 1.  ]",
      "[0 0 0 0 0]",
      "[0 1 2 3 4]",
      "[1 2 3 4 5]"
    ]
  },
  {
    "q": "Which parameter in `np.array()` is used to specify the data type?",
    "c": null,
    "o": [
      "dtype",
      "type",
      "data",
      "format"
    ]
  },
  {
    "q": "Which of these is a universal function (ufunc) in NumPy?",
    "c": null,
    "o": [
      "np.sin()",
      "np.append()",
      "np.sort()",
      "np.copy()"
    ]
  },
  {
    "q": "What does `np.arange(5)` return?",
    "c": null,
    "o": [
      "[0 1 2 3 4]",
      "[1 2 3 4 5]",
      "[0 2 4 6 8]",
      "[5 4 3 2 1]"
    ]
  },
  {
    "q": "Which function is used to flatten a multi-dimensional array in NumPy?",
    "c": null,
    "o": [
      "flatten()",
      "reshape(-1)",
      "collapse()",
      "squeeze()"
    ]
  },
  {
    "q": "How do you access the second row of a 2D array `a`?",
    "c": null,
    "o": [
      "a[1]",
      "a[2]",
      "a[0][1]",
      "a[1,:]"
    ]
  },
  {
    "q": "Which function helps plot a NumPy array in Matplotlib?",
    "c": null,
    "o": [
      "plt.plot()",
      "plt.draw()",
      "plt.grid()",
      "plt.show()"
    ]
  },
  {
    "q": "Which function returns the number of dimensions in a NumPy array?",
    "c": null,
    "o": [
      "ndim",
      "shape",
      "size",
      "len"
    ]
  },
  {
    "q": "Which NumPy function creates an array of zeros?",
    "c": null,
    "o": [
      "np.zeros()",
      "np.empty()",
      "np.full()",
      "np.nulls()"
    ]
  },
  {
    "q": "What does `np.random.seed(42)` do?",
    "c": null,
    "o": [
      "Sets the seed for random number generation",
      "Generates 42 random numbers",
      "Creates a random array of shape (4, 2)",
      "Shuffles the array 42 times"
    ]
  },
  {
    "q": "Which data type is used for complex numbers in NumPy?",
    "c": null,
    "o": [
      "complex128",
      "float64",
      "int32",
      "bool"
    ]
  },
  {
    "q": "How do you apply a condition to filter elements in a NumPy array?",
    "c": null,
    "o": [
      "Boolean indexing",
      "Slicing",
      "Looping",
      "Typecasting"
    ]
  },
  {
    "q": "Which axis represents rows in NumPy?",
    "c": null,
    "o": [
      "axis=0",
      "axis=1",
      "axis=-1",
      "axis=2"
    ]
  },
  {
    "q": "What does `a.sum(axis=1)` compute for 2D array `a`?",
    "c": null,
    "o": [
      "Sum of elements in each row",
      "Sum of elements in each column",
      "Sum of all elements",
      "Mean of each row"
    ]
  },
  {
    "q": "What is the shape of the result of broadcasting a (3,) array with a (3,3) array?",
    "c": null,
    "o": [
      "(3, 3)",
      "(3,)",
      "(1, 3)",
      "Broadcasting not allowed"
    ]
  },
  {
    "q": "How is NumPy typically imported?",
    "c": null,
    "o": [
      "import numpy as np",
      "import np as numpy",
      "from numpy import *",
      "import numpylib"
    ]
  },
  {
    "q": "Which of the following functions generates values from a normal distribution?",
    "c": null,
    "o": [
      "np.random.normal()",
      "np.random.rand()",
      "np.random.randint()",
      "np.random.shuffle()"
    ]
  },
  {
    "q": "Which NumPy function is commonly used with Scikit-learn for converting DataFrames to arrays?",
    "c": null,
    "o": [
      "to_numpy()",
      "fromarray()",
      "arrayify()",
      "tolist()"
    ]
  },
  {
    "q": "Which function returns the standard deviation of elements in a NumPy array?",
    "c": null,
    "o": [
      "np.std()",
      "np.var()",
      "np.mean()",
      "np.median()"
    ]
  },
  {
    "q": "Which function reshapes a NumPy array without changing its data?",
    "c": null,
    "o": [
      "reshape()",
      "reorder()",
      "transform()",
      "resize()"
    ]
  },
  {
    "q": "What does `np.arange(5)` return?",
    "c": "print(np.arange(5))",
    "o": [
      "[0 1 2 3 4]",
      "[1 2 3 4 5]",
      "[0 1 2 3 4 5]",
      "[0 2 4 6 8]"
    ]
  },
  {
    "q": "Which NumPy function combines multiple arrays along an axis?",
    "c": null,
    "o": [
      "np.concatenate()",
      "np.append()",
      "np.join()",
      "np.combine()"
    ]
  },
  {
    "q": "What will `np.ones((2,3))` create?",
    "c": "print(np.ones((2,3)))",
    "o": [
      "A 2x3 array filled with 1.0",
      "A 3x2 array filled with 1.0",
      "A 2x3 array filled with 0",
      "A 2x3 identity matrix"
    ]
  },
  {
    "q": "Which method can be used to convert a NumPy array to a Python list?",
    "c": null,
    "o": [
      "tolist()",
      "to_list()",
      "listify()",
      "as_list()"
    ]
  },
  {
    "q": "Which NumPy function returns the index of the maximum value in an array?",
    "c": null,
    "o": [
      "np.argmax()",
      "np.maxindex()",
      "np.indexmax()",
      "np.maxpos()"
    ]
  },
  {
    "q": "What is broadcasting in NumPy?",
    "c": null,
    "o": [
      "Expanding arrays of smaller shape to match larger ones during operations",
      "Sending arrays over a network",
      "Resizing arrays to zero",
      "Changing data types"
    ]
  },
  {
    "q": "Which function returns evenly spaced numbers over a specified interval?",
    "c": null,
    "o": [
      "np.linspace()",
      "np.arange()",
      "np.random()",
      "np.split()"
    ]
  },
  {
    "q": "Which NumPy function can be used to get both mean and standard deviation at once?",
    "c": null,
    "o": [
      "[np.mean(a), np.std(a)]",
      "np.describe(a)",
      "np.stats(a)",
      "np.summary(a)"
    ]
  },
  {
    "q": "Which of the following will create a 1D NumPy array with values 0 through 4?",
    "c": "import numpy as np\nprint(np.arange(5))",
    "o": [
      "[0 1 2 3 4]",
      "[1 2 3 4 5]",
      "[0 2 4 6 8]",
      "[5 4 3 2 1]"
    ]
  },
  {
    "q": "How do you get the shape of a NumPy array `a`?",
    "c": null,
    "o": [
      "a.shape",
      "shape(a)",
      "a.size()",
      "a.getshape()"
    ]
  },
  {
    "q": "Which function is used to compute the dot product of two arrays?",
    "c": null,
    "o": [
      "np.dot()",
      "np.product()",
      "np.matmul()",
      "np.multiply()"
    ]
  },
  {
    "q": "Which NumPy function generates random integers?",
    "c": null,
    "o": [
      "np.random.randint()",
      "np.random.rand()",
      "np.random.randn()",
      "np.random.random()"
    ]
  },
  {
    "q": "How can you reshape a 1D array of 6 elements into a 2D array with 2 rows and 3 columns?",
    "c": "a = np.array([1,2,3,4,5,6])\na = a.reshape((2,3))",
    "o": [
      "a.reshape((2,3))",
      "a.resize((2,3))",
      "a.reshape(2x3)",
      "reshape(a, (2,3))"
    ]
  },
  {
    "q": "Which attribute gives the number of elements in a NumPy array?",
    "c": null,
    "o": [
      "size",
      "length",
      "count",
      "shape"
    ]
  },
  {
    "q": "What does `np.sum()` do when applied to a NumPy array?",
    "c": null,
    "o": [
      "Adds all elements",
      "Finds the maximum element",
      "Sorts the array",
      "Finds the average"
    ]
  },
  {
    "q": "What does `np.zeros((3, 2))` create?",
    "c": "print(np.zeros((3, 2)))",
    "o": [
      "A 3x2 array filled with 0.0",
      "A 3x2 array filled with 1.0",
      "A 2x3 array filled with 0.0",
      "An empty array"
    ]
  },
  {
    "q": "Which function calculates the cumulative sum of array elements?",
    "c": null,
    "o": [
      "np.cumsum()",
      "np.cumprod()",
      "np.sum()",
      "np.accumulate()"
    ]
  },
  {
    "q": "How can you seed the random number generator in NumPy?",
    "c": null,
    "o": [
      "np.random.seed(0)",
      "np.seed(0)",
      "random.seed(0)",
      "np.random.start(0)"
    ]
  },
  {
    "q": "Which of the following best describes broadcasting in NumPy?",
    "c": null,
    "o": [
      "Automatically expanding arrays of smaller shape to perform operations",
      "Random sampling from an array",
      "Compressing large arrays to save memory",
      "Displaying arrays in console"
    ]
  },
  {
    "q": "Which NumPy feature helps avoid explicit for-loops and speeds up operations?",
    "c": null,
    "o": [
      "Vectorization",
      "Serialization",
      "Looping",
      "Iteration"
    ]
  },
  {
    "q": "What is a ufunc in NumPy?",
    "c": null,
    "o": [
      "A function that operates element-wise on ndarrays",
      "A universal file reader",
      "A NumPy-specific random number generator",
      "A utility for file I/O"
    ]
  },
  {
    "q": "Which of the following is a ufunc provided by NumPy?",
    "c": null,
    "o": [
      "np.add",
      "np.random.seed",
      "np.shape",
      "np.linspace"
    ]
  },
  {
    "q": "How can NumPy arrays be plotted using Matplotlib?",
    "c": "import numpy as np\nimport matplotlib.pyplot as plt\nx = np.arange(0, 10)\ny = np.sin(x)\nplt.plot(x, y)\nplt.show()",
    "o": [
      "Using plt.plot() with NumPy arrays",
      "Using np.plot() directly",
      "Using plt.numpy_plot()",
      "Using np.display()"
    ]
  },
  {
    "q": "Which Pandas method can convert a DataFrame column to a NumPy array?",
    "c": null,
    "o": [
      "to_numpy()",
      "as_array()",
      "from_numpy()",
      "get_array()"
    ]
  },
  {
    "q": "How is NumPy typically used in Scikit-learn?",
    "c": null,
    "o": [
      "As input/output format for model training and prediction",
      "To build GUIs",
      "To store JSON data",
      "To scrape web data"
    ]
  },
  {
    "q": "Which function returns evenly spaced numbers over a specified interval?",
    "c": null,
    "o": [
      "np.linspace()",
      "np.arange()",
      "np.range()",
      "np.spacing()"
    ]
  },
  {
    "q": "What does `np.set_printoptions(suppress=True)` do?",
    "c": null,
    "o": [
      "Prevents scientific notation in printed output",
      "Suppresses all print statements",
      "Limits the size of arrays",
      "Suppresses errors"
    ]
  },
  {
    "q": "Which of these methods can reduce memory usage of a NumPy array?",
    "c": null,
    "o": [
      "Using a smaller dtype like np.float32 instead of np.float64",
      "Enabling garbage collection",
      "Reshaping the array",
      "Padding the array with zeros"
    ]
  },
  {
    "q": "What will be the shape of the result of adding a (3,1) array to a (1,4) array in NumPy?",
    "c": null,
    "o": [
      "(3, 4)",
      "(1, 1)",
      "(3, 1)",
      "Error"
    ]
  },
  {
    "q": "Which NumPy function checks whether two arrays have the same shape and elements?",
    "c": null,
    "o": [
      "np.array_equal()",
      "np.allclose()",
      "np.equal()",
      "np.same()"
    ]
  },
  {
    "q": "Which NumPy function applies a function element-wise over an array?",
    "c": null,
    "o": [
      "np.vectorize()",
      "np.apply()",
      "np.map()",
      "np.elementwise()"
    ]
  },
  {
    "q": "Which of the following describes the relationship between Pandas and NumPy?",
    "c": null,
    "o": [
      "Pandas is built on top of NumPy",
      "NumPy is built on top of Pandas",
      "They are completely unrelated",
      "Pandas is a visualization library"
    ]
  },
  {
    "q": "What does the 'axis' parameter in many NumPy functions control?",
    "c": null,
    "o": [
      "The dimension along which the operation is performed",
      "The speed of the function",
      "The shape of the array",
      "The direction of plotting"
    ]
  },
  {
    "q": "Which of the following generates a 2D array of shape (2, 3) filled with random integers?",
    "c": "np.random.randint(0, 10, size=(2, 3))",
    "o": [
      "np.random.randint(0, 10, size=(2, 3))",
      "np.random.rand(2, 3)",
      "np.random.randn(2, 3)",
      "np.random.random((2, 3))"
    ]
  },
  {
    "q": "What does the following line do?\n`np.clip(arr, 0, 1)`",
    "c": "arr = np.array([1.5, -0.2, 0.7])\nnp.clip(arr, 0, 1)",
    "o": [
      "Limits all values in arr to the range [0, 1]",
      "Normalizes the array between 0 and 1",
      "Rounds values to nearest integer",
      "Sorts the array"
    ]
  },
  {
    "q": "Which NumPy function is used to transpose a 2D array?",
    "c": null,
    "o": [
      "np.transpose()",
      "np.flip()",
      "np.reverse()",
      "np.swap()"
    ]
  },
  {
    "q": "Which method returns a flattened version of a NumPy array?",
    "c": null,
    "o": [
      "flatten()",
      "reshape()",
      "expand()",
      "split()"
    ]
  },
  {
    "q": "What is the primary benefit of using NumPy arrays over Python lists?",
    "c": null,
    "o": [
      "Faster computation and lower memory usage",
      "Easier syntax",
      "Better error messages",
      "Larger capacity"
    ]
  },
  {
    "q": "Which of the following is the correct way to get the number of dimensions of a NumPy array?",
    "c": null,
    "o": [
      "array.ndim",
      "array.shape",
      "array.size",
      "array.type"
    ]
  },
  {
    "q": "What will `np.arange(5)` produce?",
    "c": "np.arange(5)",
    "o": [
      "[0 1 2 3 4]",
      "[1 2 3 4 5]",
      "[0 1 2 3 4 5]",
      "[0 2 4 6 8]"
    ]
  },
  {
    "q": "Which of the following functions returns an array filled with ones?",
    "c": null,
    "o": [
      "np.ones()",
      "np.full()",
      "np.empty()",
      "np.zeros()"
    ]
  },
  {
    "q": "What is the default data type of NumPy arrays created using np.array with integers?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr.dtype)",
    "o": [
      "int64",
      "float64",
      "int32",
      "str"
    ]
  },
  {
    "q": "Which NumPy function would you use to compute the mean of an array?",
    "c": null,
    "o": [
      "np.mean()",
      "np.average()",
      "np.median()",
      "np.total()"
    ]
  },
  {
    "q": "What does `np.zeros((2, 3))` create?",
    "c": "np.zeros((2, 3))",
    "o": [
      "A 2x3 array filled with zeros",
      "A 3x2 array filled with zeros",
      "An array of 2 zeros",
      "An array of shape (6,)"
    ]
  },
  {
    "q": "Which function would be used to compute the dot product of two arrays?",
    "c": null,
    "o": [
      "np.dot()",
      "np.multiply()",
      "np.prod()",
      "np.cross()"
    ]
  },
  {
    "q": "Which parameter in np.reshape() defines the new shape of the array?",
    "c": "np.reshape(arr, (2, 3))",
    "o": [
      "(2, 3)",
      "arr",
      "shape=2,3",
      "new_shape=2,3"
    ]
  },
  {
    "q": "Which function is used to compute the cumulative sum of array elements?",
    "c": null,
    "o": [
      "np.cumsum()",
      "np.sum()",
      "np.accumulate()",
      "np.add()"
    ]
  },
  {
    "q": "How do you generate a random float in the range [0.0, 1.0) using NumPy?",
    "c": null,
    "o": [
      "np.random.rand()",
      "np.random.randint()",
      "np.random.uniform(1)",
      "np.random.randn()"
    ]
  },
  {
    "q": "Which NumPy function checks if two arrays are element-wise equal within a tolerance?",
    "c": null,
    "o": [
      "np.allclose()",
      "np.equal()",
      "np.array_equal()",
      "np.compare()"
    ]
  },
  {
    "q": "What will be the shape of the array created by `np.zeros((3, 4))`?",
    "c": "a = np.zeros((3, 4))\nprint(a.shape)",
    "o": [
      "(3, 4)",
      "(4, 3)",
      "3x4",
      "(12,)"
    ]
  },
  {
    "q": "Which of the following functions would flatten a multi-dimensional NumPy array?",
    "c": null,
    "o": [
      "array.flatten()",
      "array.squeeze()",
      "array.reshape()",
      "array.expand_dims()"
    ]
  },
  {
    "q": "Which ufunc performs element-wise square root in NumPy?",
    "c": "np.sqrt(np.array([4, 9, 16]))",
    "o": [
      "[2. 3. 4.]",
      "[4.5.6.]",
      "[16.81.256.]",
      "[4.9.16.]"
    ]
  },
  {
    "q": "What does `np.random.seed(42)` do?",
    "c": null,
    "o": [
      "Sets the seed to generate reproducible random numbers",
      "Generates a random number with seed 42",
      "Changes the default seed permanently",
      "Clears all random data"
    ]
  },
  {
    "q": "What does broadcasting allow in NumPy?",
    "c": null,
    "o": [
      "Operations between arrays of different shapes",
      "Conversion of array to matrix",
      "Combining arrays with the same shape only",
      "Changing the data type of array"
    ]
  },
  {
    "q": "Which NumPy function returns the largest integer less than or equal to a value?",
    "c": "np.floor(4.8)",
    "o": [
      "4.0",
      "5.0",
      "4.5",
      "4"
    ]
  },
  {
    "q": "Which NumPy function helps in stacking arrays vertically?",
    "c": null,
    "o": [
      "np.vstack()",
      "np.stack()",
      "np.hstack()",
      "np.concatenate()"
    ]
  },
  {
    "q": "Which statistical function computes standard deviation in NumPy?",
    "c": null,
    "o": [
      "np.std()",
      "np.var()",
      "np.mean()",
      "np.average()"
    ]
  },
  {
    "q": "What does the following do: `np.array([1, 2, 3]) * 2`?",
    "c": "np.array([1, 2, 3]) * 2",
    "o": [
      "[2 4 6]",
      "[1 2 3 1 2 3]",
      "[1 2 3 2]",
      "[3 4 5]"
    ]
  },
  {
    "q": "Which method can be used to convert a Python list to a NumPy array?",
    "c": null,
    "o": [
      "np.array()",
      "np.asarray()",
      "np.list()",
      "np.convert()"
    ]
  },
  {
    "q": "Which of the following will return a 1D array with values from 0 to 9?",
    "c": "np.arange(10)",
    "o": [
      "[0 1 2 3 4 5 6 7 8 9]",
      "[1 2 3 4 5 6 7 8 9 10]",
      "[0 1 2 3 4 5 6 7 8 9 10]",
      "[0 2 4 6 8]"
    ]
  },
  {
    "q": "Which NumPy function returns the cumulative sum of elements?",
    "c": null,
    "o": [
      "np.cumsum()",
      "np.sum()",
      "np.add()",
      "np.accumulate()"
    ]
  },
  {
    "q": "Which attribute is used to find the number of dimensions in a NumPy array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.ndim)",
    "o": [
      "2",
      "4",
      "1",
      "0"
    ]
  },
  {
    "q": "Which function returns evenly spaced numbers over a specified interval?",
    "c": null,
    "o": [
      "np.linspace()",
      "np.arange()",
      "np.zeros()",
      "np.repeat()"
    ]
  },
  {
    "q": "What is the output of `np.ones((2, 3))`?",
    "c": "print(np.ones((2, 3)))",
    "o": [
      "[[1. 1. 1.]\n [1. 1. 1.]]",
      "[[1 2 3]\n [1 2 3]]",
      "[[0. 0. 0.]\n [0. 0. 0.]]",
      "[1, 1, 1, 1, 1, 1]"
    ]
  },
  {
    "q": "Which of the following is a universal function (ufunc) in NumPy?",
    "c": null,
    "o": [
      "np.exp()",
      "np.dtype()",
      "np.array_equal()",
      "np.histogram()"
    ]
  },
  {
    "q": "Which slicing operation will return the first three elements of a NumPy array `a`?",
    "c": "a = np.array([10, 20, 30, 40])",
    "o": [
      "a[:3]",
      "a[3:]",
      "a[1:3]",
      "a[-1:-4]"
    ]
  },
  {
    "q": "What does `np.max(array)` do?",
    "c": null,
    "o": [
      "Returns the maximum value in the array",
      "Returns the index of the max value",
      "Returns the average value of the array",
      "Returns the sum of array"
    ]
  },
  {
    "q": "Which NumPy function returns a copy of the array with only unique elements?",
    "c": null,
    "o": [
      "np.unique()",
      "np.set()",
      "np.filter()",
      "np.distinct()"
    ]
  },
  {
    "q": "What is the correct way to get the shape of a NumPy array?",
    "c": "arr = np.array([[1, 2, 3], [4, 5, 6]])\nprint(arr.shape)",
    "o": [
      "(2, 3)",
      "(3, 2)",
      "2",
      "6"
    ]
  },
  {
    "q": "Which function is used to generate an identity matrix?",
    "c": null,
    "o": [
      "np.eye()",
      "np.identity()",
      "np.ones()",
      "np.matrix()"
    ]
  },
  {
    "q": "Which parameter in `np.random.seed()` ensures reproducibility?",
    "c": "np.random.seed(42)\nprint(np.random.rand())",
    "o": [
      "42",
      "1",
      "True",
      "0"
    ]
  },
  {
    "q": "Which NumPy method flattens a multi-dimensional array into 1D?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.flatten())",
    "o": [
      "[1 2 3 4]",
      "[[1, 2], [3, 4]]",
      "[1, 2], [3, 4]",
      "[[1 2 3 4]]"
    ]
  },
  {
    "q": "Which NumPy function calculates the standard deviation of elements?",
    "c": null,
    "o": [
      "np.std()",
      "np.mean()",
      "np.var()",
      "np.avg()"
    ]
  },
  {
    "q": "Which function will generate a 1D array of 5 random integers between 1 and 10?",
    "c": null,
    "o": [
      "np.random.randint(1, 11, 5)",
      "np.random.rand(1, 10, 5)",
      "np.randint(1, 10, 5)",
      "np.random.integers(1, 10, 5)"
    ]
  },
  {
    "q": "How can you check the data type of elements in a NumPy array?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr.dtype)",
    "o": [
      "int64",
      "int",
      "int[]",
      "dtype"
    ]
  },
  {
    "q": "Which function helps apply a function element-wise in NumPy efficiently?",
    "c": null,
    "o": [
      "Universal function (ufunc)",
      "for loop",
      "list comprehension",
      "map()"
    ]
  },
  {
    "q": "What is broadcasting in NumPy?",
    "c": null,
    "o": [
      "Automatic expansion of arrays in arithmetic operations",
      "Copying one array into another",
      "Saving an array to disk",
      "Streaming data into arrays"
    ]
  },
  {
    "q": "Which NumPy function can calculate the dot product of two arrays?",
    "c": null,
    "o": [
      "np.dot()",
      "np.multiply()",
      "np.prod()",
      "np.sum()"
    ]
  },
  {
    "q": "Which NumPy function converts a list to an array?",
    "c": "lst = [1, 2, 3, 4]\narr = np._____",
    "o": [
      "array(lst)",
      "asarray(lst)",
      "convert(lst)",
      "tolist(lst)"
    ]
  },
  {
    "q": "What will `np.zeros((2,3))` return?",
    "c": "print(np.zeros((2, 3)))",
    "o": [
      "[[0. 0. 0.]\n [0. 0. 0.]]",
      "[[0 0 0]\n [0 0 0]]",
      "[0 0 0 0 0 0]",
      "[[0.0] * 3] * 2"
    ]
  },
  {
    "q": "Which function gives cumulative sum of an array in NumPy?",
    "c": "arr = np.array([1, 2, 3])\nprint(np._____(arr))",
    "o": [
      "cumsum",
      "sum",
      "accumulate",
      "add.accumulate"
    ]
  },
  {
    "q": "Which of these functions reshapes an array without changing its data?",
    "c": "arr = np.arange(6)\nprint(arr.reshape((2, 3)))",
    "o": [
      "reshape()",
      "resize()",
      "shape()",
      "split()"
    ]
  },
  {
    "q": "Which NumPy method can be used to transpose a matrix?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.___)",
    "o": [
      "T",
      "transpose()",
      "swap()",
      "reverse()"
    ]
  },
  {
    "q": "Which keyword argument sets the axis for aggregation in NumPy functions?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(np.sum(arr, axis=0))",
    "o": [
      "axis",
      "along",
      "dim",
      "direction"
    ]
  },
  {
    "q": "Which of these NumPy functions is used to get unique elements?",
    "c": "arr = np.array([1, 2, 2, 3])\nprint(np.____(arr))",
    "o": [
      "unique",
      "distinct",
      "set",
      "filter"
    ]
  },
  {
    "q": "How do you generate a 1D array with values from 0 to 9 using NumPy?",
    "c": null,
    "o": [
      "np.arange(10)",
      "np.range(10)",
      "np.linspace(0, 10)",
      "np.array(0, 9)"
    ]
  },
  {
    "q": "Which NumPy function is used to check for missing values (NaN)?",
    "c": "arr = np.array([1, 2, np.nan])\nprint(np.____(arr))",
    "o": [
      "isnan",
      "isnull",
      "null",
      "checknan"
    ]
  },
  {
    "q": "Which method converts a NumPy array to a Pandas Series?",
    "c": "arr = np.array([10, 20, 30])\nprint(pd.Series(arr))",
    "o": [
      "pd.Series(arr)",
      "arr.to_series()",
      "pd.DataFrame(arr)",
      "series(arr)"
    ]
  },
  {
    "q": "What will be the result of the broadcasting operation `a + b` where `a` is shape (3, 1) and `b` is shape (1, 4)?",
    "c": "a = np.ones((3,1))\nb = np.ones((1,4))\nprint((a + b).shape)",
    "o": [
      "(3, 4)",
      "(1, 1)",
      "(3, 1)",
      "Error"
    ]
  },
  {
    "q": "Which NumPy function is used to generate random integers?",
    "c": null,
    "o": [
      "np.random.randint",
      "np.random.rand",
      "np.random.normal",
      "np.random.choice"
    ]
  },
  {
    "q": "How do you set a seed for random number generation in NumPy?",
    "c": null,
    "o": [
      "np.random.seed(42)",
      "np.seed(42)",
      "random.seed(42)",
      "np.randomstate(42)"
    ]
  },
  {
    "q": "What is the purpose of `np.mean()`?",
    "c": "arr = np.array([1, 2, 3, 4])\nprint(np.mean(arr))",
    "o": [
      "To compute the average",
      "To compute the sum",
      "To compute the max",
      "To compute the median"
    ]
  },
  {
    "q": "Which of the following gives standard deviation of a NumPy array?",
    "c": "arr = np.array([1, 2, 3])\nprint(np.____(arr))",
    "o": [
      "std",
      "variance",
      "mean",
      "deviation"
    ]
  },
  {
    "q": "Which function returns both unique values and their counts in a NumPy array?",
    "c": "arr = np.array([1, 2, 2, 3])\nprint(np.unique(arr, return_counts=True))",
    "o": [
      "np.unique(arr, return_counts=True)",
      "np.count(arr)",
      "np.distinct(arr)",
      "np.set(arr)"
    ]
  },
  {
    "q": "What is the shape of the array returned by `np.eye(3)`?",
    "c": "print(np.eye(3).shape)",
    "o": [
      "(3, 3)",
      "(1, 3)",
      "(3, 1)",
      "(3,)"
    ]
  },
  {
    "q": "Which NumPy function converts a multi-dimensional array to a 1D array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(np.____(arr))",
    "o": [
      "ravel",
      "flatten",
      "reshape(-1)",
      "split"
    ]
  },
  {
    "q": "Which NumPy function returns a sample from a normal (Gaussian) distribution?",
    "c": null,
    "o": [
      "np.random.normal",
      "np.random.rand",
      "np.random.randint",
      "np.random.uniform"
    ]
  },
  {
    "q": "Which of the following libraries can be used together with NumPy for machine learning tasks?",
    "c": null,
    "o": [
      "scikit-learn",
      "seaborn",
      "pytesseract",
      "openpyxl"
    ]
  },
  {
    "q": "Which function creates an array filled with zeros?",
    "c": null,
    "o": [
      "np.zeros",
      "np.ones",
      "np.empty",
      "np.full"
    ]
  },
  {
    "q": "Which of the following is used to create a 2D array in NumPy?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.ndim)",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which parameter is used in `np.reshape()` to automatically calculate the correct dimension?",
    "c": "arr = np.array([1, 2, 3, 4])\nprint(arr.reshape(2, -1))",
    "o": [
      "-1",
      "None",
      "0",
      "Auto"
    ]
  },
  {
    "q": "What will `np.arange(5)` return?",
    "c": "print(np.arange(5))",
    "o": [
      "[0 1 2 3 4]",
      "[1 2 3 4 5]",
      "[0 1 2 3 4 5]",
      "[1 2 3 4]"
    ]
  },
  {
    "q": "Which of the following functions computes cumulative sum of array elements?",
    "c": "arr = np.array([1, 2, 3])\nprint(np.____(arr))",
    "o": [
      "cumsum",
      "sum",
      "cumprod",
      "prod"
    ]
  },
  {
    "q": "Which function would you use to stack arrays vertically?",
    "c": "a = np.array([1, 2])\nb = np.array([3, 4])\nprint(np.vstack((a, b)))",
    "o": [
      "np.vstack",
      "np.stack",
      "np.hstack",
      "np.concatenate"
    ]
  },
  {
    "q": "Which of the following methods flattens an array copy?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.flatten())",
    "o": [
      "flatten",
      "ravel",
      "reshape(-1)",
      "flat"
    ]
  },
  {
    "q": "What is the default axis for most NumPy aggregation functions like `sum()`?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(np.sum(arr))",
    "o": [
      "All elements",
      "Row-wise (axis=1)",
      "Column-wise (axis=0)",
      "No operation"
    ]
  },
  {
    "q": "Which NumPy function creates arrays with random values between 0 and 1?",
    "c": "print(np.random.rand(2, 2))",
    "o": [
      "np.random.rand",
      "np.random.randint",
      "np.random.normal",
      "np.random.uniform(low=0, high=1)"
    ]
  },
  {
    "q": "How can you access the first element of a 1D NumPy array named `arr`?",
    "c": "arr = np.array([10, 20, 30])\nprint(arr[0])",
    "o": [
      "arr[0]",
      "arr(0)",
      "arr.first()",
      "arr.get(0)"
    ]
  },
  {
    "q": "What will `np.linspace(0, 5, 6)` return?",
    "c": "print(np.linspace(0, 5, 6))",
    "o": [
      "[0. 1. 2. 3. 4. 5.]",
      "[0 1 2 3 4 5]",
      "[1. 2. 3. 4. 5. 6.]",
      "[0 0.5 1.0 1.5 2.0 2.5]"
    ]
  },
  {
    "q": "Which NumPy function returns the number of elements in an array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.size)",
    "o": [
      "size",
      "shape",
      "ndim",
      "dtype"
    ]
  },
  {
    "q": "How do you check the data type of a NumPy array?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr.dtype)",
    "o": [
      "arr.dtype",
      "arr.datatype",
      "arr.type",
      "arr.class"
    ]
  },
  {
    "q": "Which NumPy function checks for NaN values in an array?",
    "c": "arr = np.array([1, np.nan, 3])\nprint(np.isnan(arr))",
    "o": [
      "np.isnan",
      "np.isnull",
      "np.nan_check",
      "np.check_nan"
    ]
  },
  {
    "q": "Which function would you use to get the index of the maximum value in a NumPy array?",
    "c": "arr = np.array([10, 20, 5, 30])\nprint(np.argmax(arr))",
    "o": [
      "np.argmax",
      "np.maxindex",
      "np.index_max",
      "np.where_max"
    ]
  },
  {
    "q": "Which NumPy attribute returns the shape (dimensions) of an array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.shape)",
    "o": [
      "shape",
      "size",
      "reshape",
      "form"
    ]
  },
  {
    "q": "Which function performs element-wise multiplication in NumPy?",
    "c": "a = np.array([1, 2])\nb = np.array([3, 4])\nprint(a * b)",
    "o": [
      "*",
      "@",
      "np.dot",
      "np.multiply.outer"
    ]
  },
  {
    "q": "How can you convert a list to a NumPy array?",
    "c": "lst = [1, 2, 3]\nprint(np.array(lst))",
    "o": [
      "np.array",
      "np.tolist",
      "np.convert",
      "np.arr"
    ]
  },
  {
    "q": "What does `np.identity(3)` return?",
    "c": "print(np.identity(3))",
    "o": [
      "3x3 identity matrix",
      "Array of zeros",
      "Array of ones",
      "Diagonal of 3s"
    ]
  },
  {
    "q": "What is the purpose of `np.clip()` function?",
    "c": "arr = np.array([1, 3, 7, 10])\nprint(np.clip(arr, 3, 8))",
    "o": [
      "Limit values to a given range",
      "Round the array values",
      "Clip off decimal values",
      "Truncate array shape"
    ]
  },
  {
    "q": "Which function returns evenly spaced values within a given interval in NumPy?",
    "c": "print(np.arange(0, 10, 2))",
    "o": [
      "np.arange",
      "np.linspace",
      "np.range",
      "np.spacing"
    ]
  },
  {
    "q": "How do you reshape a 1D NumPy array with 6 elements into a 2x3 matrix?",
    "c": "arr = np.array([1, 2, 3, 4, 5, 6])\nprint(arr.reshape(2, 3))",
    "o": [
      "arr.reshape(2, 3)",
      "arr.resize(2, 3)",
      "arr.reshape(3, 2)",
      "arr.flatten(2, 3)"
    ]
  },
  {
    "q": "What does `np.mean()` compute?",
    "c": "arr = np.array([1, 2, 3, 4])\nprint(np.mean(arr))",
    "o": [
      "Arithmetic average",
      "Median",
      "Mode",
      "Range"
    ]
  },
  {
    "q": "Which of the following best describes broadcasting in NumPy?",
    "c": null,
    "o": [
      "Automatically expands arrays during arithmetic operations",
      "Reduces array size for memory",
      "Changes data type to fit operations",
      "Compresses large arrays"
    ]
  },
  {
    "q": "Which attribute shows the number of dimensions of an array?",
    "c": "arr = np.array([[1, 2, 3], [4, 5, 6]])\nprint(arr.ndim)",
    "o": [
      "ndim",
      "shape",
      "size",
      "length"
    ]
  },
  {
    "q": "What does `np.random.seed(0)` do?",
    "c": "np.random.seed(0)\nprint(np.random.rand(2))",
    "o": [
      "Sets seed for reproducibility",
      "Generates a seed value",
      "Creates a random permutation",
      "Clears the random state"
    ]
  },
  {
    "q": "Which NumPy function returns the cumulative sum of elements?",
    "c": "arr = np.array([1, 2, 3])\nprint(np.cumsum(arr))",
    "o": [
      "np.cumsum",
      "np.sum",
      "np.accumulate",
      "np.add"
    ]
  },
  {
    "q": "Which of the following is a Universal Function (ufunc) in NumPy?",
    "c": null,
    "o": [
      "np.sqrt",
      "np.matrix",
      "np.dtype",
      "np.array_equal"
    ]
  },
  {
    "q": "Which parameter of `np.array()` lets you specify the data type?",
    "c": "np.array([1, 2, 3], dtype='float32')",
    "o": [
      "dtype",
      "type",
      "astype",
      "format"
    ]
  },
  {
    "q": "How can you visualize a NumPy array using Matplotlib?",
    "c": "import matplotlib.pyplot as plt\nplt.plot(np.array([1, 2, 3]))\nplt.show()",
    "o": [
      "plt.plot()",
      "plt.image()",
      "plt.graph()",
      "plt.map()"
    ]
  },
  {
    "q": "Which of the following NumPy methods returns the maximum value in an array?",
    "c": "arr = np.array([10, 20, 5, 8])\nprint(np.max(arr))",
    "o": [
      "np.max",
      "np.maximum",
      "np.argmax",
      "np.maximum_value"
    ]
  },
  {
    "q": "Which function converts a multi-dimensional array into a 1D array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.flatten())",
    "o": [
      "flatten()",
      "reshape(-1)",
      "ravel()",
      "reduce()"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr * 2)",
    "o": [
      "[2 4 6]",
      "[1 2 3 1 2 3]",
      "[1 2 3 2]",
      "[1 4 9]"
    ]
  },
  {
    "q": "Which function is used to generate a random integer in NumPy?",
    "c": "print(np.random.randint(1, 10))",
    "o": [
      "np.random.randint",
      "np.random.int",
      "np.random.randInt",
      "np.random.number"
    ]
  },
  {
    "q": "Which NumPy function returns the shape of an array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.shape)",
    "o": [
      "shape",
      "size",
      "ndim",
      "len"
    ]
  },
  {
    "q": "Which of the following operations will broadcast correctly?",
    "c": "a = np.array([[1, 2, 3], [4, 5, 6]])\nb = np.array([10, 20, 30])\nprint(a + b)",
    "o": [
      "Adding a 2D array with shape (2,3) and a 1D array with shape (3,)",
      "Adding arrays with incompatible shapes",
      "Adding a scalar to a string array",
      "Subtracting a 1D array with shape (2,) from a (3,3) array"
    ]
  },
  {
    "q": "Which NumPy function calculates standard deviation?",
    "c": "arr = np.array([1, 2, 3, 4, 5])\nprint(np.std(arr))",
    "o": [
      "np.std",
      "np.variance",
      "np.mean",
      "np.dev"
    ]
  },
  {
    "q": "Which parameter in `np.linspace` defines the number of samples?",
    "c": "np.linspace(0, 1, num=5)",
    "o": [
      "num",
      "size",
      "samples",
      "step"
    ]
  },
  {
    "q": "Which NumPy module integrates well with Pandas for DataFrame creation?",
    "c": "import pandas as pd\nimport numpy as np\ndata = np.array([[1, 2], [3, 4]])\ndf = pd.DataFrame(data)",
    "o": [
      "numpy arrays used to initialize DataFrame",
      "np.to_dataframe",
      "pd.read_numpy",
      "numpy.frame()"
    ]
  },
  {
    "q": "What is the correct method to transpose a matrix in NumPy?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.T)",
    "o": [
      "arr.T",
      "arr.transpose()",
      "np.transpose(arr)",
      "All of the above"
    ]
  },
  {
    "q": "Which NumPy function returns the cumulative sum of array elements?",
    "c": "arr = np.array([1, 2, 3, 4])\nprint(np.cumsum(arr))",
    "o": [
      "np.cumsum",
      "np.sum",
      "np.add.accumulate",
      "np.cumulate"
    ]
  },
  {
    "q": "How can you generate a 3x3 identity matrix in NumPy?",
    "c": "print(np.eye(3))",
    "o": [
      "np.eye",
      "np.identity",
      "np.ones",
      "np.unit"
    ]
  },
  {
    "q": "Which function returns the indices of the non-zero elements in an array?",
    "c": "arr = np.array([0, 3, 0, 4])\nprint(np.nonzero(arr))",
    "o": [
      "np.nonzero",
      "np.where",
      "np.find",
      "np.nonzeros"
    ]
  },
  {
    "q": "Which NumPy function returns a new array with the specified shape and filled with zeros?",
    "c": "print(np.zeros((2, 3)))",
    "o": [
      "np.zeros",
      "np.empty",
      "np.fill",
      "np.blank"
    ]
  },
  {
    "q": "Which function is used to stack two arrays vertically?",
    "c": "a = np.array([1, 2])\nb = np.array([3, 4])\nprint(np.vstack((a, b)))",
    "o": [
      "np.vstack",
      "np.hstack",
      "np.stack",
      "np.merge"
    ]
  },
  {
    "q": "Which of the following will return an array of evenly spaced numbers (including start and stop)?",
    "c": "print(np.linspace(1, 5, 5))",
    "o": [
      "np.linspace",
      "np.arange",
      "np.range",
      "np.even"
    ]
  },
  {
    "q": "What does `np.any()` return?",
    "c": "arr = np.array([0, 0, 1])\nprint(np.any(arr))",
    "o": [
      "True if any element is non-zero",
      "True if all elements are non-zero",
      "Sum of all non-zero elements",
      "None of the above"
    ]
  },
  {
    "q": "What is the default data type of a NumPy array created with `np.array([1, 2, 3])`?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr.dtype)",
    "o": [
      "int64",
      "float64",
      "int32",
      "object"
    ]
  },
  {
    "q": "How do you check if a NumPy array contains NaN values?",
    "c": "arr = np.array([1, 2, np.nan])\nprint(np.isnan(arr))",
    "o": [
      "np.isnan",
      "np.isnull",
      "np.hasnan",
      "np.find_nan"
    ]
  },
  {
    "q": "Which NumPy function returns the number of dimensions of an array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.ndim)",
    "o": [
      "ndim",
      "shape",
      "size",
      "dimcount"
    ]
  },
  {
    "q": "Which function is used to flatten a multi-dimensional NumPy array into 1D?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.flatten())",
    "o": [
      "flatten",
      "reshape",
      "ravel",
      "squeeze"
    ]
  },
  {
    "q": "What does the `np.shape` attribute return?",
    "c": "arr = np.array([[1, 2, 3], [4, 5, 6]])\nprint(arr.shape)",
    "o": [
      "(2, 3)",
      "6",
      "(3, 2)",
      "(1, 6)"
    ]
  },
  {
    "q": "Which of the following will generate a 1D array of 10 random integers between 1 and 100?",
    "c": "print(np.random.randint(1, 101, 10))",
    "o": [
      "np.random.randint(1, 101, 10)",
      "np.random.rand(10, 100)",
      "np.randint(1, 100, 10)",
      "np.random.integers(1, 100, 10)"
    ]
  },
  {
    "q": "Which method creates a new array without copying data?",
    "c": "a = np.array([1, 2, 3])\nb = a.view()\nprint(b is a)",
    "o": [
      "view",
      "copy",
      "clone",
      "assign"
    ]
  },
  {
    "q": "What is the default behavior of `np.mean()` on a 2D array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(np.mean(arr))",
    "o": [
      "Mean of all elements",
      "Mean of rows",
      "Mean of columns",
      "Raises an error"
    ]
  },
  {
    "q": "Which NumPy function performs matrix multiplication?",
    "c": "a = np.array([[1, 2], [3, 4]])\nb = np.array([[5, 6], [7, 8]])\nprint(np.dot(a, b))",
    "o": [
      "np.dot",
      "np.multiply",
      "np.matmul",
      "np.cross"
    ]
  },
  {
    "q": "Which function checks whether two arrays have the same shape and elements?",
    "c": "a = np.array([1, 2])\nb = np.array([1, 2])\nprint(np.array_equal(a, b))",
    "o": [
      "np.array_equal",
      "np.equal",
      "np.compare",
      "np.is_equal"
    ]
  },
  {
    "q": "Which of the following functions will give the square root of every element in an array?",
    "c": "arr = np.array([1, 4, 9])\nprint(np.sqrt(arr))",
    "o": [
      "np.sqrt",
      "np.square",
      "np.exp",
      "np.log"
    ]
  },
  {
    "q": "What will `np.arange(5)` return?",
    "c": "print(np.arange(5))",
    "o": [
      "[0 1 2 3 4]",
      "[1 2 3 4 5]",
      "[0 1 2 3 4 5]",
      "[5 4 3 2 1]"
    ]
  },
  {
    "q": "Which argument is used in NumPy random functions to ensure reproducibility?",
    "c": "np.random.seed(42)",
    "o": [
      "seed",
      "random_state",
      "state",
      "reproduce"
    ]
  },
  {
    "q": "Which function in NumPy is used to compute the cumulative sum of array elements?",
    "c": "arr = np.array([1, 2, 3])\nprint(np.cumsum(arr))",
    "o": [
      "np.cumsum",
      "np.sum",
      "np.add.accumulate",
      "np.accumulate"
    ]
  },
  {
    "q": "What will `np.zeros((2, 3))` return?",
    "c": "print(np.zeros((2, 3)))",
    "o": [
      "A 2x3 array filled with 0s",
      "A 3x2 array filled with 0s",
      "A 2x3 array filled with 1s",
      "An array of shape (2, 3) filled with random values"
    ]
  },
  {
    "q": "What does `np.linspace(0, 1, 5)` do?",
    "c": "print(np.linspace(0, 1, 5))",
    "o": [
      "Returns 5 equally spaced numbers between 0 and 1",
      "Returns numbers from 0 to 1 with step size 5",
      "Returns integers between 0 and 1",
      "Returns a list with five 1's"
    ]
  },
  {
    "q": "Which NumPy function is used to find the maximum element in an array?",
    "c": "arr = np.array([5, 7, 2])\nprint(np.max(arr))",
    "o": [
      "np.max",
      "np.maximum",
      "np.argmax",
      "np.greatest"
    ]
  },
  {
    "q": "What is the output of `np.array([1, 2, 3]).ndim`?",
    "c": "print(np.array([1, 2, 3]).ndim)",
    "o": [
      "1",
      "2",
      "3",
      "0"
    ]
  },
  {
    "q": "How can you change the data type of a NumPy array?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr.astype(float))",
    "o": [
      "astype",
      "typecast",
      "convert",
      "to_type"
    ]
  },
  {
    "q": "Which function returns a new array with random samples from a uniform distribution over [0, 1)?",
    "c": "print(np.random.rand(3))",
    "o": [
      "np.random.rand",
      "np.random.randint",
      "np.random.randn",
      "np.random.uniform"
    ]
  },
  {
    "q": "What does `np.array([[1, 2], [3, 4]]).T` do?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.T)",
    "o": [
      "Transposes the array",
      "Flattens the array",
      "Sorts the array",
      "Inverts the array"
    ]
  },
  {
    "q": "What does the `np.where()` function do?",
    "c": "arr = np.array([10, 20, 30, 40])\nprint(np.where(arr > 25))",
    "o": [
      "Returns indices where condition is true",
      "Returns values greater than 25",
      "Replaces values with 0",
      "Sorts the array"
    ]
  },
  {
    "q": "Which attribute gives the total number of elements in a NumPy array?",
    "c": "arr = np.array([[1, 2], [3, 4], [5, 6]])\nprint(arr.size)",
    "o": [
      "size",
      "shape",
      "length",
      "count"
    ]
  },
  {
    "q": "Which NumPy function is used to return the indices of non-zero elements?",
    "c": "arr = np.array([0, 1, 0, 2, 3])\nprint(np.nonzero(arr))",
    "o": [
      "np.nonzero",
      "np.where",
      "np.find",
      "np.index"
    ]
  },
  {
    "q": "What will `np.identity(3)` return?",
    "c": "print(np.identity(3))",
    "o": [
      "A 3x3 identity matrix",
      "A 3x3 matrix filled with 1s",
      "A 1D array with 3 elements",
      "A diagonal matrix with all elements as 3"
    ]
  },
  {
    "q": "How do you flatten a multi-dimensional array to a 1D array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.flatten())",
    "o": [
      "flatten",
      "ravel",
      "reshape(-1)",
      "squeeze"
    ]
  },
  {
    "q": "Which NumPy function combines multiple arrays along an existing axis?",
    "c": "a = np.array([1, 2])\nb = np.array([3, 4])\nprint(np.concatenate((a, b)))",
    "o": [
      "np.concatenate",
      "np.append",
      "np.merge",
      "np.bind"
    ]
  },
  {
    "q": "What does `np.clip()` do to an array?",
    "c": "arr = np.array([1, 3, 7, 9])\nprint(np.clip(arr, 3, 8))",
    "o": [
      "Limits values to a range",
      "Removes outliers",
      "Returns top values only",
      "Clips the array size"
    ]
  },
  {
    "q": "What does `np.any()` return?",
    "c": "arr = np.array([0, 0, 1])\nprint(np.any(arr))",
    "o": [
      "True if any element is non-zero",
      "True if all elements are non-zero",
      "The maximum value",
      "The minimum value"
    ]
  },
  {
    "q": "What is the function of `np.full()`?",
    "c": "print(np.full((2, 2), 5))",
    "o": [
      "Creates an array filled with a constant value",
      "Creates an empty array",
      "Fills NaN values in an array",
      "Repeats values in an array"
    ]
  },
  {
    "q": "Which function is used to create an array of ones?",
    "c": "print(np.ones((2, 3)))",
    "o": [
      "np.ones",
      "np.full",
      "np.zeros + 1",
      "np.one_array"
    ]
  },
  {
    "q": "Which of the following will reshape an array to 2 rows and 3 columns?",
    "c": "arr = np.array([1, 2, 3, 4, 5, 6])\nprint(arr.reshape(2, 3))",
    "o": [
      "reshape(2, 3)",
      "resize(2, 3)",
      "format(2, 3)",
      "shape(2, 3)"
    ]
  },
  {
    "q": "What is returned by `np.arange(3, 10, 2)`?",
    "c": "print(np.arange(3, 10, 2))",
    "o": [
      "[3 5 7 9]",
      "[3 4 5 6 7 8 9 10]",
      "[2 4 6 8 10]",
      "[3 6 9 12]"
    ]
  },
  {
    "q": "Which NumPy function returns the cumulative sum of elements?",
    "c": "arr = np.array([1, 2, 3])\nprint(np.cumsum(arr))",
    "o": [
      "np.cumsum",
      "np.sum",
      "np.accumulate",
      "np.total"
    ]
  },
  {
    "q": "What is the use of `np.linspace()`?",
    "c": "print(np.linspace(0, 5, 6))",
    "o": [
      "Returns evenly spaced numbers over a specified interval",
      "Generates random integers",
      "Returns logarithmic spaced values",
      "Sorts the array in ascending order"
    ]
  },
  {
    "q": "What will `np.ndim` return?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.ndim)",
    "o": [
      "Number of dimensions of the array",
      "Number of elements",
      "Number of rows",
      "Number of columns"
    ]
  },
  {
    "q": "What does `np.array_equal(a, b)` check?",
    "c": "a = np.array([1, 2])\nb = np.array([1, 2])\nprint(np.array_equal(a, b))",
    "o": [
      "Checks if two arrays are exactly equal",
      "Adds two arrays",
      "Compares shapes of arrays",
      "Checks if arrays share memory"
    ]
  },
  {
    "q": "What will `np.sort()` do?",
    "c": "arr = np.array([3, 1, 2])\nprint(np.sort(arr))",
    "o": [
      "Returns a sorted copy of the array",
      "Sorts the array in-place",
      "Returns index of sorted elements",
      "Sorts only the first row"
    ]
  },
  {
    "q": "What does `np.argmax()` return?",
    "c": "arr = np.array([1, 3, 2])\nprint(np.argmax(arr))",
    "o": [
      "Index of the maximum value",
      "Maximum value",
      "Minimum value",
      "Index of the minimum value"
    ]
  },
  {
    "q": "Which function is used to find the square root of each element?",
    "c": "arr = np.array([4, 9, 16])\nprint(np.sqrt(arr))",
    "o": [
      "np.sqrt",
      "np.power",
      "np.square",
      "np.exp"
    ]
  },
  {
    "q": "What does `np.random.choice()` do?",
    "c": "print(np.random.choice([1, 2, 3], size=2))",
    "o": [
      "Randomly selects elements from a list",
      "Generates sequential numbers",
      "Shuffles the array in-place",
      "Creates a choice matrix"
    ]
  },
  {
    "q": "Which NumPy function returns the standard deviation of elements?",
    "c": "arr = np.array([1, 2, 3])\nprint(np.std(arr))",
    "o": [
      "np.std",
      "np.variance",
      "np.mean",
      "np.sum"
    ]
  },
  {
    "q": "What is the default axis used by `np.sum()` on a 2D array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(np.sum(arr))",
    "o": [
      "All elements are summed",
      "Rows are summed",
      "Columns are summed",
      "Last axis is summed"
    ]
  },
  {
    "q": "What does `reshape()` do in NumPy?",
    "c": "arr = np.array([1, 2, 3, 4])\nprint(arr.reshape((2, 2)))",
    "o": [
      "Changes the shape of an array",
      "Changes the data type of elements",
      "Sorts the array",
      "Removes duplicate values"
    ]
  },
  {
    "q": "What does `np.isnan()` return?",
    "c": "arr = np.array([1.0, np.nan, 3.0])\nprint(np.isnan(arr))",
    "o": [
      "Boolean array where NaNs are marked as True",
      "Removes NaNs from array",
      "Fills NaNs with zero",
      "Converts NaNs to integers"
    ]
  },
  {
    "q": "Which function is used to concatenate two arrays along an axis?",
    "c": "a = np.array([[1, 2]])\nb = np.array([[3, 4]])\nprint(np.concatenate((a, b), axis=0))",
    "o": [
      "np.concatenate",
      "np.combine",
      "np.merge",
      "np.append"
    ]
  },
  {
    "q": "What does `np.identity(n)` create?",
    "c": "print(np.identity(3))",
    "o": [
      "An identity matrix of size n x n",
      "A zero matrix",
      "A random matrix",
      "A matrix of ones"
    ]
  },
  {
    "q": "Which NumPy function reverses an array?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr[::-1])",
    "o": [
      "Array slicing with step -1",
      "np.reverse(arr)",
      "np.flipud(arr)",
      "np.flip(arr, axis=1)"
    ]
  },
  {
    "q": "What is the default behavior of `np.mean()`?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(np.mean(arr))",
    "o": [
      "Computes the mean of all elements",
      "Computes the row-wise mean",
      "Computes the column-wise mean",
      "Returns the median"
    ]
  },
  {
    "q": "What is the result of `np.full()`?",
    "c": "print(np.full((2, 2), 7))",
    "o": [
      "A 2x2 array filled with 7",
      "A 2x2 array of zeros",
      "A 2x2 array of NaNs",
      "A 2x2 identity matrix"
    ]
  },
  {
    "q": "Which function stacks arrays vertically (row-wise)?",
    "c": "a = np.array([1, 2])\nb = np.array([3, 4])\nprint(np.vstack((a, b)))",
    "o": [
      "np.vstack",
      "np.hstack",
      "np.dstack",
      "np.stack(axis=1)"
    ]
  },
  {
    "q": "What will `np.allclose(a, b)` check?",
    "c": "a = np.array([1.0, 2.0])\nb = np.array([1.0, 2.000001])\nprint(np.allclose(a, b))",
    "o": [
      "Checks if two arrays are element-wise equal within a tolerance",
      "Returns maximum of both arrays",
      "Concatenates both arrays",
      "Compares array shapes"
    ]
  },
  {
    "q": "Which of the following sets all values greater than 10 to 10?",
    "c": "arr = np.array([5, 15, 10])\narr[arr > 10] = 10\nprint(arr)",
    "o": [
      "Boolean indexing",
      "np.clip(arr, 0, 10)",
      "arr.set(10, where=arr > 10)",
      "np.where(arr > 10, 10, arr)"
    ]
  },
  {
    "q": "What is broadcasting in NumPy?",
    "c": "a = np.array([1, 2, 3])\nb = 2\nprint(a + b)",
    "o": [
      "Automatic expansion of smaller arrays to match shape",
      "Compressing arrays to a single value",
      "Storing arrays in memory",
      "Copying values from one array to another"
    ]
  },
  {
    "q": "What is the output of `np.where()` used for?",
    "c": "arr = np.array([10, 20, 30])\nprint(np.where(arr > 15, 1, 0))",
    "o": [
      "Conditional selection and replacement",
      "Finding array length",
      "Sorting the array",
      "Generating random numbers"
    ]
  },
  {
    "q": "Which function generates random integers in NumPy?",
    "c": "print(np.random.randint(1, 10, size=3))",
    "o": [
      "np.random.randint",
      "np.random.rand",
      "np.random.random",
      "np.random.uniform"
    ]
  },
  {
    "q": "What does `np.clip()` do?",
    "c": "arr = np.array([1, 5, 10, 15])\nprint(np.clip(arr, 3, 12))",
    "o": [
      "Limits values within a range",
      "Rounds the array values",
      "Removes NaNs",
      "Clips array shape"
    ]
  },
  {
    "q": "What is the difference between `np.array()` and `np.asarray()`?",
    "c": "a = [1, 2, 3]\nb = np.asarray(a)",
    "o": [
      "asarray avoids making a copy if the input is already an array",
      "asarray makes a deep copy always",
      "array is only for 2D arrays",
      "There is no difference"
    ]
  },
  {
    "q": "What does the `axis=1` argument mean in NumPy?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(np.sum(arr, axis=1))",
    "o": [
      "Operate across columns (row-wise)",
      "Operate across rows (column-wise)",
      "Flatten the array",
      "Remove the first axis"
    ]
  },
  {
    "q": "What does `np.random.seed(0)` do?",
    "c": "np.random.seed(0)\nprint(np.random.rand(2))",
    "o": [
      "Makes random numbers reproducible",
      "Increases randomness",
      "Resets the array to zeros",
      "Selects random seed from 0"
    ]
  },
  {
    "q": "Which of these returns only unique values from a NumPy array?",
    "c": "arr = np.array([1, 2, 2, 3, 1])\nprint(np.unique(arr))",
    "o": [
      "np.unique",
      "np.distinct",
      "np.set",
      "np.deduplicate"
    ]
  },
  {
    "q": "What does `arr.flatten()` do?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.flatten())",
    "o": [
      "Converts multidimensional array into 1D",
      "Deletes all zeroes",
      "Reverses the array",
      "Creates a 2D version of 1D array"
    ]
  },
  {
    "q": "Which function checks if any value in a NumPy array is True?",
    "c": "arr = np.array([0, 0, 1])\nprint(np.any(arr))",
    "o": [
      "np.any",
      "np.all",
      "np.check",
      "np.some"
    ]
  },
  {
    "q": "What is broadcasting in NumPy?",
    "c": "a = np.array([1, 2, 3])\nb = 2\nprint(a + b)",
    "o": [
      "Automatic expansion of smaller arrays to match shape",
      "Compressing arrays to a single value",
      "Storing arrays in memory",
      "Copying values from one array to another"
    ]
  },
  {
    "q": "What is the output of `np.where()` used for?",
    "c": "arr = np.array([10, 20, 30])\nprint(np.where(arr > 15, 1, 0))",
    "o": [
      "Conditional selection and replacement",
      "Finding array length",
      "Sorting the array",
      "Generating random numbers"
    ]
  },
  {
    "q": "Which function generates random integers in NumPy?",
    "c": "print(np.random.randint(1, 10, size=3))",
    "o": [
      "np.random.randint",
      "np.random.rand",
      "np.random.random",
      "np.random.uniform"
    ]
  },
  {
    "q": "What does `np.clip()` do?",
    "c": "arr = np.array([1, 5, 10, 15])\nprint(np.clip(arr, 3, 12))",
    "o": [
      "Limits values within a range",
      "Rounds the array values",
      "Removes NaNs",
      "Clips array shape"
    ]
  },
  {
    "q": "What is the difference between `np.array()` and `np.asarray()`?",
    "c": "a = [1, 2, 3]\nb = np.asarray(a)",
    "o": [
      "asarray avoids making a copy if the input is already an array",
      "asarray makes a deep copy always",
      "array is only for 2D arrays",
      "There is no difference"
    ]
  },
  {
    "q": "What does the `axis=1` argument mean in NumPy?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(np.sum(arr, axis=1))",
    "o": [
      "Operate across columns (row-wise)",
      "Operate across rows (column-wise)",
      "Flatten the array",
      "Remove the first axis"
    ]
  },
  {
    "q": "What does `np.random.seed(0)` do?",
    "c": "np.random.seed(0)\nprint(np.random.rand(2))",
    "o": [
      "Makes random numbers reproducible",
      "Increases randomness",
      "Resets the array to zeros",
      "Selects random seed from 0"
    ]
  },
  {
    "q": "Which of these returns only unique values from a NumPy array?",
    "c": "arr = np.array([1, 2, 2, 3, 1])\nprint(np.unique(arr))",
    "o": [
      "np.unique",
      "np.distinct",
      "np.set",
      "np.deduplicate"
    ]
  },
  {
    "q": "What does `arr.flatten()` do?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.flatten())",
    "o": [
      "Converts multidimensional array into 1D",
      "Deletes all zeroes",
      "Reverses the array",
      "Creates a 2D version of 1D array"
    ]
  },
  {
    "q": "Which function checks if any value in a NumPy array is True?",
    "c": "arr = np.array([0, 0, 1])\nprint(np.any(arr))",
    "o": [
      "np.any",
      "np.all",
      "np.check",
      "np.some"
    ]
  },
  {
    "q": "Which attribute gives the number of dimensions in a NumPy array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.ndim)",
    "o": [
      "arr.ndim",
      "arr.shape",
      "arr.size",
      "arr.dtype"
    ]
  },
  {
    "q": "What does `np.nan` represent in NumPy?",
    "c": "arr = np.array([1, np.nan, 3])\nprint(np.isnan(arr))",
    "o": [
      "Not a Number (missing or undefined)",
      "Negative number",
      "Null array",
      "New array"
    ]
  },
  {
    "q": "Which function is used to create a diagonal matrix in NumPy?",
    "c": "print(np.diag([1, 2, 3]))",
    "o": [
      "np.diag",
      "np.identity",
      "np.eye",
      "np.diagonal"
    ]
  },
  {
    "q": "What does `arr.T` return in NumPy?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.T)",
    "o": [
      "Transpose of the array",
      "Total of the array",
      "Trimmed version of array",
      "Temporary array copy"
    ]
  },
  {
    "q": "Which function is used to test if two arrays are equal?",
    "c": "a = np.array([1, 2])\nb = np.array([1, 2])\nprint(np.array_equal(a, b))",
    "o": [
      "np.array_equal",
      "np.equal",
      "np.compare",
      "np.is_same"
    ]
  },
  {
    "q": "What will `arr[::2]` return?",
    "c": "arr = np.array([10, 20, 30, 40, 50])\nprint(arr[::2])",
    "o": [
      "Every second element",
      "Last two elements",
      "First two elements",
      "Reverse array"
    ]
  },
  {
    "q": "What does `np.zeros_like(arr)` return?",
    "c": "arr = np.array([[5, 6], [7, 8]])\nprint(np.zeros_like(arr))",
    "o": [
      "An array of zeros with same shape and type",
      "A clone of arr",
      "Zeros of shape (1, 1)",
      "Flattened array of arr"
    ]
  },
  {
    "q": "Which function can be used to remove duplicate rows in a 2D array?",
    "c": "arr = np.array([[1, 2], [1, 2], [3, 4]])\nprint(np.unique(arr, axis=0))",
    "o": [
      "np.unique with axis=0",
      "np.remove_duplicates",
      "np.setdiff1d",
      "np.prune"
    ]
  },
  {
    "q": "Which NumPy function is used to round values to the nearest integer?",
    "c": "arr = np.array([1.3, 2.7])\nprint(np.rint(arr))",
    "o": [
      "np.rint",
      "np.round_down",
      "np.approx",
      "np.floor_ceil"
    ]
  },
  {
    "q": "Which method reshapes an array without changing its data?",
    "c": "arr = np.array([1, 2, 3, 4])\nprint(arr.reshape(2, 2))",
    "o": [
      "reshape",
      "reform",
      "resize",
      "remap"
    ]
  },
  {
    "q": "What does `np.linspace(0, 1, 5)` do?",
    "c": "print(np.linspace(0, 1, 5))",
    "o": [
      "Creates 5 evenly spaced numbers between 0 and 1",
      "Creates numbers from 0 to 5 with step 1",
      "Creates a random array of size 5",
      "Creates 5 zeros between 0 and 1"
    ]
  },
  {
    "q": "How do you multiply every element in a NumPy array by 2?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr * 2)",
    "o": [
      "arr * 2",
      "np.multiply(arr)",
      "arr.multiply(2)",
      "np.dot(arr, 2)"
    ]
  },
  {
    "q": "Which NumPy function gives the mean of an array?",
    "c": "arr = np.array([1, 2, 3])\nprint(np.mean(arr))",
    "o": [
      "np.mean",
      "np.average",
      "np.median",
      "np.center"
    ]
  },
  {
    "q": "What does `arr[-1]` return?",
    "c": "arr = np.array([10, 20, 30, 40])\nprint(arr[-1])",
    "o": [
      "Last element of the array",
      "First element of the array",
      "Second element of the array",
      "Throws an error"
    ]
  },
  {
    "q": "Which function flattens a multi-dimensional array into 1D?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.flatten())",
    "o": [
      "flatten",
      "reshape",
      "compress",
      "expand"
    ]
  },
  {
    "q": "How to create a 3x3 identity matrix in NumPy?",
    "c": "print(np.identity(3))",
    "o": [
      "np.identity(3)",
      "np.eye(2)",
      "np.ones((3,3))",
      "np.diag(3)"
    ]
  },
  {
    "q": "Which function adds two NumPy arrays element-wise?",
    "c": "a = np.array([1, 2])\nb = np.array([3, 4])\nprint(a + b)",
    "o": [
      "a + b",
      "np.append(a, b)",
      "np.add(a, b, axis=1)",
      "np.concatenate((a, b))"
    ]
  },
  {
    "q": "Which method would reverse a NumPy array?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr[::-1])",
    "o": [
      "arr[::-1]",
      "arr.reverse()",
      "np.flipud(arr)",
      "np.sort(arr)"
    ]
  },
  {
    "q": "What will `np.sum(arr, axis=0)` do?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(np.sum(arr, axis=0))",
    "o": [
      "Sum over columns",
      "Sum over rows",
      "Total sum of all elements",
      "Flatten array before summing"
    ]
  },
  {
    "q": "Which of the following will return a boolean array?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr > 1)",
    "o": [
      "arr > 1",
      "arr + 1",
      "arr == arr",
      "np.array_equal(arr, arr)"
    ]
  },
  {
    "q": "What is broadcasting in NumPy?",
    "c": "a = np.array([1, 2, 3])\nb = 5\nprint(a + b)",
    "o": [
      "Automatic expansion of arrays to match shapes during operations",
      "Manual reshaping of arrays before addition",
      "Repeating array elements",
      "Creating new arrays from existing ones"
    ]
  },
  {
    "q": "Which code uses boolean indexing to filter even numbers?",
    "c": "arr = np.array([1, 2, 3, 4, 5, 6])\nprint(arr[arr % 2 == 0])",
    "o": [
      "arr[arr % 2 == 0]",
      "arr[arr == 2, 4, 6]",
      "arr.filter(even)",
      "arr.select(even=True)"
    ]
  },
  {
    "q": "What is the output of `np.where(arr > 2)`?",
    "c": "arr = np.array([1, 2, 3, 4])\nprint(np.where(arr > 2))",
    "o": [
      "Indexes of elements where condition is True",
      "Boolean array where condition is True",
      "Values greater than 2",
      "Length of the array"
    ]
  },
  {
    "q": "How to create a structured array with fields?",
    "c": "data = np.array([(1, 'A'), (2, 'B')], dtype=[('id', 'i4'), ('code', 'U1')])",
    "o": [
      "Using dtype with named fields",
      "Using list of lists",
      "Using np.matrix",
      "Using np.structured()"
    ]
  },
  {
    "q": "How to access the 'id' field from a structured array?",
    "c": "print(data['id'])",
    "o": [
      "data['id']",
      "data.id()",
      "data.get('id')",
      "data->id"
    ]
  },
  {
    "q": "What does `np.any(arr > 0)` return?",
    "c": "arr = np.array([-1, 0, 2])\nprint(np.any(arr > 0))",
    "o": [
      "True if any value is > 0",
      "The number of values > 0",
      "List of positive values",
      "True if all values are > 0"
    ]
  },
  {
    "q": "Which function will check if all elements meet a condition?",
    "c": "arr = np.array([1, 2, 3])\nprint(np.all(arr > 0))",
    "o": [
      "np.all",
      "np.any",
      "np.check",
      "np.every"
    ]
  },
  {
    "q": "Which function fills a masked NumPy array with a default value?",
    "c": "import numpy.ma as ma\narr = ma.masked_array([1, 2, 3], mask=[0, 1, 0])\nprint(arr.filled(0))",
    "o": [
      "filled",
      "mask_fill",
      "replace",
      "fillna"
    ]
  },
  {
    "q": "How to mask all negative values in an array?",
    "c": "import numpy.ma as ma\narr = np.array([1, -2, 3])\nmasked = ma.masked_less(arr, 0)\nprint(masked)",
    "o": [
      "ma.masked_less(arr, 0)",
      "np.mask(arr < 0)",
      "arr.mask(< 0)",
      "np.hide(arr < 0)"
    ]
  },
  {
    "q": "Which NumPy function returns only the unique values?",
    "c": "arr = np.array([1, 2, 2, 3])\nprint(np.unique(arr))",
    "o": [
      "np.unique",
      "np.distinct",
      "np.set(arr)",
      "np.filter_unique"
    ]
  },
  {
    "q": "Which function converts a list of lists into a 2D NumPy array?",
    "c": "lst = [[1, 2], [3, 4]]\narr = np.array(lst)",
    "o": [
      "np.array",
      "np.matrix",
      "np.convert",
      "np.tolist"
    ]
  },
  {
    "q": "How to create an identity matrix of size 3x3?",
    "c": "print(np.eye(3))",
    "o": [
      "np.eye(3)",
      "np.ones((3,3))",
      "np.identity(3, 3)",
      "np.matrix(3)"
    ]
  },
  {
    "q": "Which method flattens a NumPy array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.flatten())",
    "o": [
      "flatten",
      "reshape(-1)",
      "squeeze",
      "ravelize"
    ]
  },
  {
    "q": "How to reverse a 1D NumPy array?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr[::-1])",
    "o": [
      "arr[::-1]",
      "arr.reverse()",
      "np.reverse(arr)",
      "arr.reversed()"
    ]
  },
  {
    "q": "What is the shape of `np.array([[1, 2, 3]]).T`?",
    "c": "arr = np.array([[1, 2, 3]]).T\nprint(arr.shape)",
    "o": [
      "(3, 1)",
      "(1, 3)",
      "(3,)",
      "(3, 3)"
    ]
  },
  {
    "q": "What is the output of `np.arange(3, 10, 2)`?",
    "c": "print(np.arange(3, 10, 2))",
    "o": [
      "[3 5 7 9]",
      "[3 4 5 6 7 8 9 10]",
      "[2 4 6 8]",
      "[3 6 9 12]"
    ]
  },
  {
    "q": "How to convert all elements of a NumPy array to float?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr.astype(float))",
    "o": [
      "arr.astype(float)",
      "arr.tofloat()",
      "np.float(arr)",
      "arr.convert(float)"
    ]
  },
  {
    "q": "Which of the following will return the maximum element?",
    "c": "arr = np.array([10, 20, 5])\nprint(np.max(arr))",
    "o": [
      "np.max(arr)",
      "arr.maximum()",
      "np.maximum(arr)",
      "max(arr)"
    ]
  },
  {
    "q": "Which function returns the number of dimensions in an array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.ndim)",
    "o": [
      "ndim",
      "shape",
      "rank",
      "dims"
    ]
  },
  {
    "q": "Which function would you use to repeat elements of an array?",
    "c": "arr = np.array([1, 2])\nprint(np.repeat(arr, 2))",
    "o": [
      "np.repeat",
      "np.tile",
      "np.duplicate",
      "np.extend"
    ]
  },
  {
    "q": "Which of the following is used to generate a NumPy array with values from 0 to 4?",
    "c": "print(np.arange(5))",
    "o": [
      "np.arange(5)",
      "np.range(5)",
      "np.array(0:5)",
      "np.fromrange(5)"
    ]
  },
  {
    "q": "Which attribute gives the total number of elements in a NumPy array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.size)",
    "o": [
      "size",
      "shape",
      "length",
      "count"
    ]
  },
  {
    "q": "Which of the following reshapes a 1D array into 2 rows and 3 columns?",
    "c": "arr = np.array([1, 2, 3, 4, 5, 6])\nprint(arr.reshape((2, 3)))",
    "o": [
      "arr.reshape((2, 3))",
      "arr.shape((2, 3))",
      "np.resize(arr, (2, 3))",
      "arr.change_shape((2, 3))"
    ]
  },
  {
    "q": "Which of these functions returns the cumulative sum of elements?",
    "c": "arr = np.array([1, 2, 3])\nprint(np.cumsum(arr))",
    "o": [
      "np.cumsum",
      "np.sumall",
      "np.total",
      "np.cumprod"
    ]
  },
  {
    "q": "Which function is used to sort a NumPy array?",
    "c": "arr = np.array([3, 1, 2])\nprint(np.sort(arr))",
    "o": [
      "np.sort",
      "np.order",
      "np.arrange",
      "np.sorting"
    ]
  },
  {
    "q": "Which function gives unique elements in a NumPy array?",
    "c": "arr = np.array([1, 2, 2, 3])\nprint(np.unique(arr))",
    "o": [
      "np.unique",
      "np.distinct",
      "np.only",
      "np.different"
    ]
  },
  {
    "q": "Which operator is used for element-wise multiplication in NumPy?",
    "c": "a = np.array([1, 2])\nb = np.array([3, 4])\nprint(a * b)",
    "o": [
      "*",
      "dot",
      "@",
      "&"
    ]
  },
  {
    "q": "What does `np.linspace(0, 1, 5)` generate?",
    "c": "print(np.linspace(0, 1, 5))",
    "o": [
      "[0.   0.25 0.5  0.75 1.  ]",
      "[0 0 0 0 0]",
      "[1 2 3 4 5]",
      "[0.0 1.0 2.0 3.0 4.0]"
    ]
  },
  {
    "q": "How to find the standard deviation of a NumPy array?",
    "c": "arr = np.array([1, 2, 3])\nprint(np.std(arr))",
    "o": [
      "np.std",
      "np.variance",
      "np.dev",
      "np.mean_dev"
    ]
  },
  {
    "q": "Which function returns a boolean array after checking condition?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr > 1)",
    "o": [
      "arr > 1",
      "np.check(arr, 1)",
      "arr.more(1)",
      "np.bool(arr)"
    ]
  },
  {
    "q": "Which of these creates a 2x3 array of all True values?",
    "c": "print(np.full((2, 3), True))",
    "o": [
      "np.full((2, 3), True)",
      "np.ones((2, 3), dtype=bool)",
      "np.array([[True]*3]*2)",
      "All of the above"
    ]
  },
  {
    "q": "What is the output of `np.isnan(np.nan)`?",
    "c": "print(np.isnan(np.nan))",
    "o": [
      "True",
      "False",
      "np.nan",
      "Error"
    ]
  },
  {
    "q": "Which of the following will reverse a NumPy array?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr[::-1])",
    "o": [
      "arr[::-1]",
      "np.reverse(arr)",
      "arr.reverse()",
      "np.flip(arr, axis=0)[::-1]"
    ]
  },
  {
    "q": "Which attribute gives the data type of array elements?",
    "c": "arr = np.array([1.0, 2.0])\nprint(arr.dtype)",
    "o": [
      "dtype",
      "type",
      "element_type",
      "data"
    ]
  },
  {
    "q": "How do you convert a float NumPy array to integers?",
    "c": "arr = np.array([1.5, 2.8])\nprint(arr.astype(int))",
    "o": [
      "arr.astype(int)",
      "arr.convert(int)",
      "arr.toint()",
      "np.int(arr)"
    ]
  },
  {
    "q": "Which of the following is used to flatten a multi-dimensional array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.flatten())",
    "o": [
      "arr.flatten()",
      "arr.flat()",
      "arr.reshape(-1, 1)",
      "np.squeeze(arr)"
    ]
  },
  {
    "q": "Which function combines multiple arrays horizontally (column-wise)?",
    "c": "a = np.array([[1], [2]])\nb = np.array([[3], [4]])\nprint(np.hstack((a, b)))",
    "o": [
      "np.hstack",
      "np.vstack",
      "np.concatenate(axis=1)",
      "Both A and C"
    ]
  },
  {
    "q": "How do you check if all elements in a NumPy array are non-zero?",
    "c": "arr = np.array([1, 2, 3])\nprint(np.all(arr))",
    "o": [
      "np.all(arr)",
      "arr.all()",
      "np.every(arr)",
      "np.nonzero(arr)"
    ]
  },
  {
    "q": "What will `np.mean([])` return?",
    "c": "print(np.mean([]))",
    "o": [
      "nan",
      "0",
      "Error",
      "Infinity"
    ]
  },
  {
    "q": "Which NumPy function returns both unique values and their counts?",
    "c": "arr = np.array([1, 2, 2, 3])\nprint(np.unique(arr, return_counts=True))",
    "o": [
      "np.unique(arr, return_counts=True)",
      "np.count_unique(arr)",
      "np.frequency(arr)",
      "np.counts(arr)"
    ]
  },
  {
    "q": "Which method returns the shape of a NumPy array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.shape)",
    "o": [
      "arr.shape",
      "arr.get_shape()",
      "shape(arr)",
      "np.shapeof(arr)"
    ]
  },
  {
    "q": "Which function returns the cumulative sum of array elements?",
    "c": "arr = np.array([1, 2, 3])\nprint(np.cumsum(arr))",
    "o": [
      "np.cumsum(arr)",
      "np.cum_sum(arr)",
      "np.sum(arr, cumulative=True)",
      "np.add.accumulate(arr)"
    ]
  },
  {
    "q": "What is the correct way to create a 3x3 identity matrix in NumPy?",
    "c": "print(np.eye(3))",
    "o": [
      "np.eye(3)",
      "np.identity(3)",
      "np.ones((3, 3))",
      "np.diag([1,1,1])"
    ]
  },
  {
    "q": "How can you check if two arrays are equal (element-wise)?",
    "c": "a = np.array([1, 2])\nb = np.array([1, 2])\nprint(np.array_equal(a, b))",
    "o": [
      "np.array_equal(a, b)",
      "a == b",
      "np.equal(a, b).all()",
      "Both A and C"
    ]
  },
  {
    "q": "Which NumPy function creates a sequence of numbers with equal spacing?",
    "c": "print(np.linspace(0, 1, 5))",
    "o": [
      "np.linspace",
      "np.arange",
      "np.sequence",
      "np.range"
    ]
  },
  {
    "q": "What does `np.argmax()` return?",
    "c": "arr = np.array([1, 3, 2])\nprint(np.argmax(arr))",
    "o": [
      "Index of the maximum element",
      "Maximum value",
      "Sum of all elements",
      "Index of minimum value"
    ]
  },
  {
    "q": "Which function stacks arrays vertically (row-wise)?",
    "c": "a = np.array([[1, 2]])\nb = np.array([[3, 4]])\nprint(np.vstack((a, b)))",
    "o": [
      "np.vstack",
      "np.hstack",
      "np.row_stack",
      "Both A and C"
    ]
  },
  {
    "q": "What is the result of broadcasting in NumPy?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr + 1)",
    "o": [
      "Automatically expands arrays to match shapes",
      "Multiplies all elements",
      "Changes dtype",
      "Removes one dimension"
    ]
  },
  {
    "q": "Which NumPy function returns a sorted array?",
    "c": "arr = np.array([3, 1, 2])\nprint(np.sort(arr))",
    "o": [
      "np.sort",
      "np.sorted",
      "arr.sort()",
      "np.order()"
    ]
  },
  {
    "q": "How do you access the last element of a NumPy array?",
    "c": "arr = np.array([10, 20, 30])\nprint(arr[-1])",
    "o": [
      "arr[-1]",
      "arr[len(arr)]",
      "arr[end]",
      "arr.last()"
    ]
  },
  {
    "q": "Which NumPy function reverses the elements of an array?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr[::-1])",
    "o": [
      "arr[::-1]",
      "np.reverse(arr)",
      "np.flip(arr)",
      "Both A and C"
    ]
  },
  {
    "q": "What is the data type of elements in this array?\nnp.array([1, 2, 3])",
    "c": "arr = np.array([1, 2, 3])\nprint(arr.dtype)",
    "o": [
      "int64",
      "float",
      "str",
      "bool"
    ]
  },
  {
    "q": "How to convert a NumPy array of float values to integers?",
    "c": "arr = np.array([1.5, 2.8])\nprint(arr.astype(int))",
    "o": [
      "arr.astype(int)",
      "arr.to(int)",
      "int(arr)",
      "np.convert(arr, int)"
    ]
  },
  {
    "q": "How to find the number of dimensions of a NumPy array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.ndim)",
    "o": [
      "arr.ndim",
      "arr.shape",
      "arr.size",
      "arr.dimension"
    ]
  },
  {
    "q": "Which function returns the maximum value from an array?",
    "c": "arr = np.array([5, 7, 1])\nprint(np.max(arr))",
    "o": [
      "np.max(arr)",
      "arr.maximum()",
      "arr.top()",
      "np.highest(arr)"
    ]
  },
  {
    "q": "How do you flatten a multidimensional array to 1D?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.flatten())",
    "o": [
      "arr.flatten()",
      "arr.flat()",
      "arr.ravel()",
      "Both A and C"
    ]
  },
  {
    "q": "Which function will return the square root of all array elements?",
    "c": "arr = np.array([1, 4, 9])\nprint(np.sqrt(arr))",
    "o": [
      "np.sqrt(arr)",
      "np.power(arr, 0.5)",
      "np.square(arr)",
      "Both A and B"
    ]
  },
  {
    "q": "Which function adds two arrays element-wise?",
    "c": "a = np.array([1, 2])\nb = np.array([3, 4])\nprint(np.add(a, b))",
    "o": [
      "np.add(a, b)",
      "a + b",
      "np.sum([a, b], axis=0)",
      "All of the above"
    ]
  },
  {
    "q": "What does the `np.zeros()` function do?",
    "c": "arr = np.zeros((2, 3))\nprint(arr)",
    "o": [
      "Creates an array filled with 0s",
      "Creates an array filled with None",
      "Creates an empty array",
      "Creates an array filled with NaNs"
    ]
  },
  {
    "q": "How can you generate an array of 5 random numbers between 0 and 1?",
    "c": "print(np.random.rand(5))",
    "o": [
      "np.random.rand(5)",
      "np.random.random(5)",
      "np.random.uniform(0, 1, 5)",
      "All of the above"
    ]
  },
  {
    "q": "What does the `np.ones((2, 3))` function return?",
    "c": "print(np.ones((2, 3)))",
    "o": [
      "A 2x3 array filled with 1s",
      "A 3x2 array filled with 1s",
      "A 2x3 array filled with 0s",
      "An empty 2x3 array"
    ]
  },
  {
    "q": "How to check if any element in an array is non-zero?",
    "c": "arr = np.array([0, 0, 3])\nprint(np.any(arr))",
    "o": [
      "np.any(arr)",
      "np.all(arr)",
      "arr.any()",
      "arr.all()"
    ]
  },
  {
    "q": "What does `np.linspace(0, 1, 5)` return?",
    "c": "print(np.linspace(0, 1, 5))",
    "o": [
      "An array with 5 values from 0 to 1 (inclusive)",
      "An array with 5 zeros",
      "An array with values from 0 to 1 (exclusive)",
      "An array with values 0, 0.2, 0.4, 0.6, 0.8"
    ]
  },
  {
    "q": "Which of these creates an identity matrix?",
    "c": "print(np.eye(3))",
    "o": [
      "np.eye(3)",
      "np.identity(3)",
      "np.diag([1,1,1])",
      "All of the above"
    ]
  },
  {
    "q": "How do you reshape a 1D array to a 2x3 matrix?",
    "c": "arr = np.array([1, 2, 3, 4, 5, 6])\nprint(arr.reshape((2, 3)))",
    "o": [
      "arr.reshape((2, 3))",
      "arr.reshape((3, 2))",
      "arr.reshape((1, 6))",
      "arr.to((2, 3))"
    ]
  },
  {
    "q": "Which function returns cumulative sum of array elements?",
    "c": "arr = np.array([1, 2, 3])\nprint(np.cumsum(arr))",
    "o": [
      "np.cumsum(arr)",
      "np.sum(arr)",
      "np.add(arr)",
      "np.accumulate(arr)"
    ]
  },
  {
    "q": "What does `arr.T` return?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.T)",
    "o": [
      "Transpose of the array",
      "Inverse of the array",
      "Flattened array",
      "1D version of the array"
    ]
  },
  {
    "q": "Which method sorts a NumPy array in ascending order?",
    "c": "arr = np.array([3, 1, 2])\nprint(np.sort(arr))",
    "o": [
      "np.sort(arr)",
      "arr.sort()",
      "np.sorted(arr)",
      "np.arr.sort()"
    ]
  },
  {
    "q": "What is returned by `arr.shape`?",
    "c": "arr = np.array([[1, 2], [3, 4], [5, 6]])\nprint(arr.shape)",
    "o": [
      "(3, 2)",
      "(2, 3)",
      "6",
      "(6,)"
    ]
  },
  {
    "q": "How to generate an array of random integers between 10 and 20 of size 5?",
    "c": "print(np.random.randint(10, 20, 5))",
    "o": [
      "np.random.randint(10, 20, 5)",
      "np.random.rand(10, 20, 5)",
      "np.random.random_integers(10, 20, 5)",
      "np.random.int(10, 20, 5)"
    ]
  },
  {
    "q": "Which NumPy function returns the maximum value in an array?",
    "c": "arr = np.array([4, 2, 7, 1])\nprint(np.max(arr))",
    "o": [
      "np.max(arr)",
      "np.maximum(arr)",
      "arr.maxvalue()",
      "np.maximumvalue(arr)"
    ]
  },
  {
    "q": "What is the purpose of `np.full((2, 3), 5)`?",
    "c": "print(np.full((2, 3), 5))",
    "o": [
      "Creates a 2x3 array filled with 5",
      "Creates a 3x2 array filled with 2",
      "Creates a 5x5 array",
      "Creates an empty 2x3 array"
    ]
  },
  {
    "q": "What is the output of `np.mean(np.array([1, 2, 3]))`?",
    "c": "print(np.mean(np.array([1, 2, 3])))",
    "o": [
      "2.0",
      "3",
      "1.0",
      "6"
    ]
  },
  {
    "q": "Which function flattens a multi-dimensional array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.flatten())",
    "o": [
      "arr.flatten()",
      "arr.flat()",
      "arr.ravel()",
      "np.shrink(arr)"
    ]
  },
  {
    "q": "What will `np.unique([1, 2, 2, 3, 1])` return?",
    "c": "print(np.unique([1, 2, 2, 3, 1]))",
    "o": [
      "[1 2 3]",
      "[1 2 2 3 1]",
      "[1 1 2 2 3]",
      "[3 2 1]"
    ]
  },
  {
    "q": "Which function returns the standard deviation of an array?",
    "c": "arr = np.array([1, 2, 3])\nprint(np.std(arr))",
    "o": [
      "np.std(arr)",
      "np.variance(arr)",
      "np.mean(arr)",
      "np.dev(arr)"
    ]
  },
  {
    "q": "How can you change the data type of an array?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr.astype(float))",
    "o": [
      "arr.astype(float)",
      "arr.cast(float)",
      "arr.dtype(float)",
      "arr.type(float)"
    ]
  },
  {
    "q": "What does `np.zeros_like(arr)` do?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(np.zeros_like(arr))",
    "o": [
      "Creates a zero array with the same shape as arr",
      "Creates an array with zeros and same data as arr",
      "Fills arr with zeros",
      "Returns the first zero element from arr"
    ]
  },
  {
    "q": "Which of the following is a correct way to get the index of the maximum value?",
    "c": "arr = np.array([10, 20, 5])\nprint(np.argmax(arr))",
    "o": [
      "np.argmax(arr)",
      "np.maxindex(arr)",
      "arr.argmax()",
      "np.index.max(arr)"
    ]
  },
  {
    "q": "What does `np.diag([1, 2, 3])` return?",
    "c": "print(np.diag([1, 2, 3]))",
    "o": [
      "A diagonal matrix with 1, 2, 3 on the diagonal",
      "An array of shape (3, 3) filled with 1s",
      "An array with only the diagonal elements of a matrix",
      "None of the above"
    ]
  },
  {
    "q": "Which NumPy function creates an identity matrix?",
    "c": "print(np.identity(3))",
    "o": [
      "np.identity(3)",
      "np.eye_matrix(3)",
      "np.ones((3, 3))",
      "np.id_matrix(3)"
    ]
  },
  {
    "q": "What does `np.linspace(0, 10, 5)` return?",
    "c": "print(np.linspace(0, 10, 5))",
    "o": [
      "[ 0.   2.5  5.   7.5 10. ]",
      "[0 2 4 6 8]",
      "[1 3 5 7 9]",
      "[0 5 10 15 20]"
    ]
  },
  {
    "q": "Which function gives the number of non-zero elements in an array?",
    "c": "arr = np.array([0, 1, 2, 0, 3])\nprint(np.count_nonzero(arr))",
    "o": [
      "np.count_nonzero(arr)",
      "np.nonzero(arr)",
      "np.where(arr > 0)",
      "arr.nonzero().count()"
    ]
  },
  {
    "q": "What does `np.clip([1, 2, 3, 4], 2, 3)` do?",
    "c": "print(np.clip([1, 2, 3, 4], 2, 3))",
    "o": [
      "[2 2 3 3]",
      "[1 2 3 4]",
      "[1 2 2 3]",
      "[2 3 4 5]"
    ]
  },
  {
    "q": "How do you get a boolean array for elements greater than 5?",
    "c": "arr = np.array([3, 6, 1, 7])\nprint(arr > 5)",
    "o": [
      "arr > 5",
      "np.bool(arr > 5)",
      "arr => 5",
      "np.where(arr > 5, True, False)"
    ]
  },
  {
    "q": "Which function is used to round elements to the nearest integer?",
    "c": "arr = np.array([1.2, 2.7, 3.5])\nprint(np.round(arr))",
    "o": [
      "np.round(arr)",
      "np.integer(arr)",
      "np.floor(arr)",
      "np.int(arr)"
    ]
  },
  {
    "q": "How to reverse the elements of a 1D array in NumPy?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr[::-1])",
    "o": [
      "arr[::-1]",
      "arr.reverse()",
      "np.reverse(arr)",
      "np.flipud(arr)"
    ]
  },
  {
    "q": "What is the result of `np.sum([[1,2],[3,4]], axis=0)`?",
    "c": "print(np.sum([[1, 2], [3, 4]], axis=0))",
    "o": [
      "[4 6]",
      "[1 2 3 4]",
      "[10]",
      "[2 6]"
    ]
  },
  {
    "q": "What does `np.cumsum([1, 2, 3])` return?",
    "c": "print(np.cumsum([1, 2, 3]))",
    "o": [
      "[1 3 6]",
      "[1 2 3]",
      "[6 3 1]",
      "[3 6 9]"
    ]
  },
  {
    "q": "What does `arr.shape` return for a 2x3 NumPy array?",
    "c": "arr = np.array([[1, 2, 3], [4, 5, 6]])\nprint(arr.shape)",
    "o": [
      "(2, 3)",
      "(3, 2)",
      "6",
      "(6,)"
    ]
  },
  {
    "q": "What does broadcasting mean in NumPy?",
    "c": "arr = np.array([1, 2, 3]) + 10\nprint(arr)",
    "o": [
      "Automatic expansion of arrays during arithmetic operations",
      "Manual repetition of elements",
      "Compressing arrays",
      "Changing data type of array"
    ]
  },
  {
    "q": "Which function is used to generate a 2x2 array of random floats between 0 and 1?",
    "c": "print(np.random.rand(2, 2))",
    "o": [
      "np.random.rand(2, 2)",
      "np.random.random((2, 2))",
      "np.random.randint(0, 1, size=(2, 2))",
      "np.random.uniform(0, 1, size=(2, 2))"
    ]
  },
  {
    "q": "What is the output shape of `np.zeros((3, 4)).reshape(2, 6)`?",
    "c": "print(np.zeros((3, 4)).reshape(2, 6).shape)",
    "o": [
      "(2, 6)",
      "(3, 4)",
      "(6, 2)",
      "Error"
    ]
  },
  {
    "q": "What does `np.full((2, 2), 7)` do?",
    "c": "print(np.full((2, 2), 7))",
    "o": [
      "Creates a 2x2 array filled with 7s",
      "Creates a 2x2 identity matrix",
      "Creates a 2x2 array of random values",
      "Creates a 2x2 array with increasing integers"
    ]
  },
  {
    "q": "What will `np.random.seed(42)` do?",
    "c": "np.random.seed(42)\nprint(np.random.rand())",
    "o": [
      "Set the seed for reproducible random numbers",
      "Set array size to 42",
      "Generate only 42 values",
      "Change data type to 42-bit"
    ]
  },
  {
    "q": "What does `np.array([1, 2, 3], dtype=float)` do?",
    "c": "print(np.array([1, 2, 3], dtype=float))",
    "o": [
      "Creates a float array",
      "Creates an int array",
      "Creates a complex array",
      "Creates a string array"
    ]
  },
  {
    "q": "Which NumPy function stacks arrays vertically?",
    "c": "a = np.array([1, 2])\nb = np.array([3, 4])\nprint(np.vstack((a, b)))",
    "o": [
      "np.vstack()",
      "np.hstack()",
      "np.append()",
      "np.column_stack()"
    ]
  },
  {
    "q": "What does `np.set_printoptions(precision=2)` do?",
    "c": "np.set_printoptions(precision=2)\nprint(np.array([1.12345, 2.34567]))",
    "o": [
      "Limits float display to 2 decimal places",
      "Rounds values to 2",
      "Removes decimal points",
      "Sets array size to 2"
    ]
  },
  {
    "q": "Which function returns unique values in an array?",
    "c": "arr = np.array([1, 2, 2, 3])\nprint(np.unique(arr))",
    "o": [
      "np.unique(arr)",
      "np.distinct(arr)",
      "np.filter_unique(arr)",
      "arr.unique()"
    ]
  },
  {
    "q": "What does `np.tile([1, 2], 2)` return?",
    "c": "print(np.tile([1, 2], 2))",
    "o": [
      "[1 2 1 2]",
      "[1 1 2 2]",
      "[2 1 2 1]",
      "[1 2 2 1]"
    ]
  },
  {
    "q": "Which method returns a view instead of a copy in NumPy?",
    "c": "arr = np.array([1, 2, 3, 4])\nview = arr[1:3]",
    "o": [
      "Slicing like arr[1:3]",
      "Using arr.copy()",
      "Using np.copy()",
      "Using deep copy method"
    ]
  },
  {
    "q": "What is the result of `np.isnan(np.nan)`?",
    "c": "print(np.isnan(np.nan))",
    "o": [
      "True",
      "False",
      "None",
      "Error"
    ]
  },
  {
    "q": "Which function computes the sum while ignoring NaN values?",
    "c": "arr = np.array([1, 2, np.nan])\nprint(np.nansum(arr))",
    "o": [
      "np.nansum",
      "np.sum",
      "np.nanignore",
      "np.clean_sum"
    ]
  },
  {
    "q": "What does `np.argmax([1, 3, 2])` return?",
    "c": "print(np.argmax([1, 3, 2]))",
    "o": [
      "1",
      "2",
      "3",
      "0"
    ]
  },
  {
    "q": "What is the use of `np.where()`?",
    "c": "arr = np.array([10, 20, 30, 40])\nprint(np.where(arr > 25))",
    "o": [
      "Returns indices where condition is True",
      "Filters array directly",
      "Sorts the array",
      "Returns array shape"
    ]
  },
  {
    "q": "How do you create a structured array with fields?",
    "c": "data = np.array([(1, 'a'), (2, 'b')], dtype=[('num', 'i4'), ('char', 'U1')])",
    "o": [
      "By using dtype with named fields",
      "By using nested lists",
      "By calling array on dictionary",
      "Not supported in NumPy"
    ]
  },
  {
    "q": "Which function is used to flatten a multi-dimensional array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.flatten())",
    "o": [
      "flatten()",
      "resize()",
      "ravel()",
      "reshape(-1)"
    ]
  },
  {
    "q": "What is the output of `np.r_[[1, 2], [3, 4]]`?",
    "c": "print(np.r_[[1, 2], [3, 4]])",
    "o": [
      "[1 2 3 4]",
      "[[1, 2], [3, 4]]",
      "[1, 2][3, 4]",
      "[[1 3], [2 4]]"
    ]
  },
  {
    "q": "What is the default axis for most NumPy reduction functions like sum()?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(np.sum(arr))",
    "o": [
      "None (flattened)",
      "0 (column-wise)",
      "1 (row-wise)",
      "Last axis"
    ]
  },
  {
    "q": "Which function will reverse a NumPy array?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr[::-1])",
    "o": [
      "arr[::-1]",
      "np.reverse(arr)",
      "arr.flip()",
      "arr.swap()"
    ]
  },
  {
    "q": "What will be the shape of the result of broadcasting an array of shape (3,1) with shape (1,4)?",
    "c": "a = np.ones((3,1))\nb = np.ones((1,4))\nc = a + b\nprint(c.shape)",
    "o": [
      "(3, 4)",
      "(1, 1)",
      "(3, 1)",
      "(4, 3)"
    ]
  },
  {
    "q": "How to ensure reproducible random numbers in NumPy?",
    "c": "np.random.seed(0)\nprint(np.random.rand(2))",
    "o": [
      "Use np.random.seed()",
      "Use np.reproducible()",
      "Use np.random.repeat()",
      "Use np.control_random()"
    ]
  },
  {
    "q": "Which function converts data type of a NumPy array?",
    "c": "arr = np.array([1.1, 2.2])\nprint(arr.astype(int))",
    "o": [
      "astype()",
      "convert()",
      "to_type()",
      "dtype_change()"
    ]
  },
  {
    "q": "Which method is used for boolean indexing?",
    "c": "arr = np.array([10, 20, 30, 40])\nprint(arr[arr > 25])",
    "o": [
      "Using conditions inside square brackets",
      "Using index arrays",
      "Using where directly",
      "Using filter()"
    ]
  },
  {
    "q": "How can you check if any element in an array is True?",
    "c": "arr = np.array([0, 0, 1])\nprint(np.any(arr))",
    "o": [
      "np.any()",
      "np.one()",
      "np.is_true()",
      "np.hasTrue()"
    ]
  },
  {
    "q": "Which NumPy object allows masking elements from computation?",
    "c": "import numpy.ma as ma\nmasked = ma.masked_array([1, 2, 3], mask=[0, 1, 0])",
    "o": [
      "masked_array",
      "np.hide_array",
      "np.mask_array",
      "np.ignore_array"
    ]
  },
  {
    "q": "What will `np.array([True, False]) + np.array([False, True])` return?",
    "c": "print(np.array([True, False]) + np.array([False, True]))",
    "o": [
      "[1 1]",
      "[True True]",
      "[1 0]",
      "[False False]"
    ]
  },
  {
    "q": "Which function computes the cumulative product?",
    "c": "arr = np.array([1, 2, 3, 4])\nprint(np.cumprod(arr))",
    "o": [
      "np.cumprod()",
      "np.cumsum()",
      "np.product()",
      "np.accumulate()"
    ]
  },
  {
    "q": "What is the result of `np.linspace(0, 1, 5)`?",
    "c": "print(np.linspace(0, 1, 5))",
    "o": [
      "[0.   0.25 0.5  0.75 1. ]",
      "[0 1 2 3 4]",
      "[0 1]",
      "[0.0, 1.0]"
    ]
  },
  {
    "q": "Which function stacks arrays in sequence vertically?",
    "c": "a = np.array([1, 2])\nb = np.array([3, 4])\nprint(np.vstack((a, b)))",
    "o": [
      "np.vstack()",
      "np.stack(axis=0)",
      "np.concat()",
      "np.append()"
    ]
  },
  {
    "q": "What does the `np.identity(3)` function create?",
    "c": "print(np.identity(3))",
    "o": [
      "A 3x3 identity matrix",
      "A 3x3 matrix of ones",
      "A diagonal matrix with random numbers",
      "A 3x3 matrix filled with zeros"
    ]
  },
  {
    "q": "Which function flattens a NumPy array?",
    "c": "arr = np.array([[1, 2], [3, 4]])\nprint(arr.flatten())",
    "o": [
      "flatten()",
      "reshape(-1)",
      "ravel()",
      "All of the above"
    ]
  },
  {
    "q": "What is the default data type for `np.array([1, 2, 3])`?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr.dtype)",
    "o": [
      "int64 (or int32 depending on system)",
      "float64",
      "str",
      "bool"
    ]
  },
  {
    "q": "How to reverse a NumPy array?",
    "c": "arr = np.array([1, 2, 3])\nprint(arr[::-1])",
    "o": [
      "arr[::-1]",
      "np.reverse(arr)",
      "arr.reverse()",
      "np.flipud(arr)"
    ]
  },
  {
    "q": "What does `np.zeros((2, 3))` return?",
    "c": "print(np.zeros((2, 3)))",
    "o": [
      "2x3 array filled with 0.0",
      "2x3 array filled with 0 (int)",
      "An empty array",
      "An identity matrix"
    ]
  },
  {
    "q": "Which function returns the largest element in a NumPy array?",
    "c": "arr = np.array([4, 7, 2])\nprint(np.max(arr))",
    "o": [
      "np.max()",
      "np.largest()",
      "np.maximum()",
      "np.argmax()"
    ]
  },
  {
    "q": "Which method gives the index of the maximum value?",
    "c": "arr = np.array([4, 7, 2])\nprint(np.argmax(arr))",
    "o": [
      "np.argmax()",
      "np.maxindex()",
      "np.where_max()",
      "np.find_max()"
    ]
  },
  {
    "q": "What will `np.array(['1', '2']).astype(int)` return?",
    "c": "print(np.array(['1', '2']).astype(int))",
    "o": [
      "[1 2]",
      "['1' '2']",
      "[1.0 2.0]",
      "Error"
    ]
  },
  {
    "q": "How do you get a copy instead of a view in NumPy?",
    "c": "a = np.array([1, 2, 3])\nb = a.copy()\nb[0] = 100\nprint(a)",
    "o": [
      "Use copy()",
      "Use view()",
      "Use clone()",
      "Use deepcopy()"
    ]
  },
  {
    "q": "Which function checks if arrays are equal element-wise?",
    "c": "a = np.array([1, 2])\nb = np.array([1, 2])\nprint(np.array_equal(a, b))",
    "o": [
      "np.array_equal()",
      "np.equal()",
      "np.same()",
      "np.compare()"
    ]
  },
  {
    "q": "What does the function `np.linspace(0, 1, 5)` return?",
    "c": "print(np.linspace(0, 1, 5))",
    "o": [
      "[0.   0.25 0.5  0.75 1.  ]",
      "[0 1 2 3 4]",
      "[0 0 0 0 0]",
      "[0.  0.2 0.4 0.6 0.8]"
    ]
  },
  {
    "q": "What does `np.isnan(np.nan)` return?",
    "c": "print(np.isnan(np.nan))",
    "o": [
      "True",
      "False",
      "None",
      "Error"
    ]
  },
  {
    "q": "What is the use of `np.where(condition)`?",
    "c": "arr = np.array([1, 2, 3, 4])\nprint(np.where(arr > 2))",
    "o": [
      "Returns indices where condition is True",
      "Returns True/False values",
      "Returns array sorted by condition",
      "Deletes elements where condition is False"
    ]
  },
  {
    "q": "What is the shape of the array created by `np.zeros((3, 4))`?",
    "c": "a = np.zeros((3, 4))\nprint(a.shape)",
    "o": [
      "(3, 4)",
      "(4, 3)",
      "(3,)",
      "(4,)"
    ]
  },
  {
    "q": "What does `np.clip(array, min, max)` do?",
    "c": "a = np.array([1, 5, 10])\nprint(np.clip(a, 2, 8))",
    "o": [
      "[2 5 8]",
      "[1 5 10]",
      "[2 8 8]",
      "[1 5 9]"
    ]
  },
  {
    "q": "What is the output of `np.sum(np.eye(3))`?",
    "c": "print(np.sum(np.eye(3)))",
    "o": [
      "3.0",
      "6.0",
      "0.0",
      "1.0"
    ]
  },
  {
    "q": "How to get only the upper triangle of a matrix?",
    "c": "a = np.arange(9).reshape(3, 3)\nprint(np.triu(a))",
    "o": [
      "np.triu()",
      "np.upper()",
      "np.top()",
      "np.slice_upper()"
    ]
  },
  {
    "q": "What function checks for NaN values in an array?",
    "c": "a = np.array([1.0, np.nan, 3.0])\nprint(np.isnan(a))",
    "o": [
      "np.isnan()",
      "np.isnull()",
      "np.checknan()",
      "np.is_nan()"
    ]
  },
  {
    "q": "Which function would convert a NumPy array into a Python list?",
    "c": "a = np.array([1, 2, 3])\nprint(a.tolist())",
    "o": [
      "tolist()",
      "aslist()",
      "tolistify()",
      "listify()"
    ]
  },
  {
    "q": "What does `np.setdiff1d([1, 2, 3], [2, 3, 4])` return?",
    "c": "print(np.setdiff1d([1, 2, 3], [2, 3, 4]))",
    "o": [
      "[1]",
      "[2, 3]",
      "[4]",
      "[]"
    ]
  },
  {
    "q": "What does `np.ndim()` return?",
    "c": "a = np.array([[1, 2], [3, 4]])\nprint(np.ndim(a))",
    "o": [
      "2",
      "4",
      "1",
      "0"
    ]
  },
  {
    "q": "What does `np.itemsize` represent?",
    "c": "a = np.array([1, 2, 3], dtype=np.int32)\nprint(a.itemsize)",
    "o": [
      "Size in bytes of one array element",
      "Total size of the array in bytes",
      "Shape of the array",
      "Size of each array dimension"
    ]
  },
  {
    "q": "What does `np.repeat([1, 2], 3)` return?",
    "c": "print(np.repeat([1, 2], 3))",
    "o": [
      "[1 1 1 2 2 2]",
      "[1 2 1 2 1 2]",
      "[3 3 3]",
      "[1 2 3]"
    ]
  },
  {
    "q": "What is the output of `np.arange(5, 15, 3)`?",
    "c": "print(np.arange(5, 15, 3))",
    "o": [
      "[ 5  8 11 14]",
      "[5 6 7 8 9]",
      "[5 10 15]",
      "[3 6 9 12]"
    ]
  },
  {
    "q": "Which NumPy function returns evenly spaced numbers over a specified interval?",
    "c": "",
    "o": [
      "linspace()",
      "arange()",
      "range()",
      "zeros()"
    ]
  },
  {
    "q": "Which of the following will return a flat iterator over a NumPy array?",
    "c": "a = np.array([[1, 2], [3, 4]])\nfor x in a.flat: print(x, end=' ')",
    "o": [
      "flat",
      "flatten",
      "ravel",
      "reshape"
    ]
  },
  {
    "q": "What does `np.cumsum()` do?",
    "c": "a = np.array([1, 2, 3])\nprint(np.cumsum(a))",
    "o": [
      "[1 3 6]",
      "[1 2 3]",
      "[6 3 1]",
      "[3 3 3]"
    ]
  },
  {
    "q": "Which function would you use to join two arrays along an axis?",
    "c": "",
    "o": [
      "concatenate()",
      "combine()",
      "collate()",
      "compress()"
    ]
  },
  {
    "q": "What does `a.T` do where `a` is a NumPy 2D array?",
    "c": "a = np.array([[1, 2], [3, 4]])\nprint(a.T)",
    "o": [
      "Transpose the array",
      "Flatten the array",
      "Reverse the array",
      "Sort the array"
    ]
  },
  {
    "q": "Which function checks if two arrays are element-wise equal?",
    "c": "a = np.array([1, 2, 3])\nb = np.array([1, 2, 4])\nprint(np.array_equal(a, b))",
    "o": [
      "False",
      "True",
      "None",
      "Error"
    ]
  },
  {
    "q": "What does `np.random.rand(2, 2)` generate?",
    "c": "",
    "o": [
      "A 2x2 array of random floats between 0 and 1",
      "A 2x2 array of random integers",
      "A 2x2 identity matrix",
      "A 2x2 array of zeros"
    ]
  },
  {
    "q": "Which function generates random integers in NumPy?",
    "c": "",
    "o": [
      "random.randint()",
      "random.rand()",
      "random.normal()",
      "random.choice()"
    ]
  },
  {
    "q": "What is the result of `np.eye(3)`?",
    "c": "print(np.eye(3))",
    "o": [
      "A 3x3 identity matrix",
      "A 3x3 matrix of ones",
      "A 3x3 matrix of zeros",
      "A 3x3 diagonal matrix with random values"
    ]
  },
  {
    "q": "Which NumPy function is used to calculate matrix dot product?",
    "c": "",
    "o": [
      "dot()",
      "mul()",
      "multiply()",
      "product()"
    ]
  },
  {
    "q": "What does `np.sort()` do?",
    "c": "a = np.array([3, 1, 2])\nprint(np.sort(a))",
    "o": [
      "[1 2 3]",
      "[3 2 1]",
      "[1 3 2]",
      "[2 1 3]"
    ]
  },
  {
    "q": "Which function returns the indices of the maximum values?",
    "c": "a = np.array([1, 5, 3])\nprint(np.argmax(a))",
    "o": [
      "1",
      "0",
      "2",
      "5"
    ]
  },
  {
    "q": "Which of the following functions finds unique elements?",
    "c": "a = np.array([1, 2, 2, 3])\nprint(np.unique(a))",
    "o": [
      "[1 2 3]",
      "[1 2 2 3]",
      "[3 2 1]",
      "[1 1 2 3]"
    ]
  },
  {
    "q": "What does `np.full((2, 3), 7)` return?",
    "c": "",
    "o": [
      "A 2x3 array filled with the number 7",
      "A 3x2 array filled with the number 7",
      "An array from 2 to 7",
      "A 7x7 matrix"
    ]
  },
  {
    "q": "What is the result of `np.clip([1, 5, 9], 3, 7)`?",
    "c": "",
    "o": [
      "[3 5 7]",
      "[1 5 9]",
      "[3 3 3]",
      "[1 3 5]"
    ]
  },
  {
    "q": "Which function flattens a NumPy array?",
    "c": "a = np.array([[1, 2], [3, 4]])\nprint(a.flatten())",
    "o": [
      "[1 2 3 4]",
      "[[1, 2], [3, 4]]",
      "[[1 2 3 4]]",
      "[1, [2, [3, 4]]]"
    ]
  },
  {
    "q": "What is the output of `np.array([1, 2, 3])[1]`?",
    "c": "",
    "o": [
      "2",
      "1",
      "[2]",
      "3"
    ]
  },
  {
    "q": "Which NumPy method changes the shape of an array?",
    "c": "",
    "o": [
      "reshape()",
      "resize()",
      "shape()",
      "format()"
    ]
  },
  {
    "q": "What is the output of `np.arange(1, 6)[::2]`?",
    "c": "",
    "o": [
      "[1 3 5]",
      "[1 2 3]",
      "[2 4 6]",
      "[1 2 4]"
    ]
  },
  {
    "q": "Which function is used to filter array elements by condition?",
    "c": "",
    "o": [
      "Boolean indexing",
      "Vector indexing",
      "Masked assignment",
      "Random sampling"
    ]
  },
  {
    "q": "What does `a.dtype` return for `a = np.array([1, 2, 3])`?",
    "c": "",
    "o": [
      "int64 or int32 depending on system",
      "float64",
      "object",
      "string"
    ]
  },
  {
    "q": "What is the result of `np.array([[1, 2], [3, 4]]).T`?",
    "c": "",
    "o": [
      "The transpose of the matrix",
      "The inverse of the matrix",
      "A flat array",
      "An array of booleans"
    ]
  },
  {
    "q": "What is `np.linspace(0, 1, 5)` used for?",
    "c": "",
    "o": [
      "To create 5 equally spaced numbers between 0 and 1",
      "To create a random array of size 5",
      "To fill an array with 5 ones",
      "To repeat numbers 0 and 1 five times"
    ]
  },
  {
    "q": "How do you convert a list to a NumPy array?",
    "c": "",
    "o": [
      "np.array(list)",
      "np.list(array)",
      "list.to_array()",
      "np.make(list)"
    ]
  },
  {
    "q": "Which NumPy function repeats elements of an array?",
    "c": "",
    "o": [
      "np.repeat()",
      "np.tile()",
      "np.stack()",
      "np.add()"
    ]
  },
  {
    "q": "What does `np.array([True, False]) & np.array([False, False])` return?",
    "c": "",
    "o": [
      "[False False]",
      "[True False]",
      "[True True]",
      "[False True]"
    ]
  },
  {
    "q": "What does `np.zeros((2, 2))` create?",
    "c": "",
    "o": [
      "A 2x2 array filled with zeros",
      "A 1D array of two zeros",
      "An array with values [2, 2]",
      "A list with two elements"
    ]
  },
  {
    "q": "What is broadcasting in NumPy?",
    "c": "",
    "o": [
      "Automatic expansion of arrays to match shapes for operations",
      "Sending data over a network",
      "Reducing array size",
      "Combining two arrays element-wise"
    ]
  },
  {
    "q": "Which axis does `np.sum(a, axis=0)` operate along?",
    "c": "",
    "o": [
      "Columns (downward direction)",
      "Rows (sideways direction)",
      "All elements",
      "Only the first row"
    ]
  },
  {
    "q": "What does `a.copy()` do in NumPy?",
    "c": "",
    "o": [
      "Creates a deep copy of the array",
      "Deletes the array",
      "Returns the same reference",
      "Creates a shallow view"
    ]
  },
  {
    "q": "What is the shape of `np.array([[1,2],[3,4],[5,6]])`?",
    "c": "",
    "o": [
      "(3, 2)",
      "(2, 3)",
      "(6,)",
      "(3,)"
    ]
  },
  {
    "q": "Which function joins arrays along an axis?",
    "c": "",
    "o": [
      "np.concatenate()",
      "np.connect()",
      "np.append()",
      "np.group()"
    ]
  },
  {
    "q": "What does `np.unique()` return?",
    "c": "",
    "o": [
      "Sorted unique elements of an array",
      "Random values from array",
      "Only duplicates",
      "Reversed array"
    ]
  },
  {
    "q": "What does `np.mean([1, 2, 3])` return?",
    "c": "",
    "o": [
      "2.0",
      "1",
      "6",
      "1.5"
    ]
  },
  {
    "q": "How do you flatten a 2D array to 1D?",
    "c": "",
    "o": [
      "array.flatten()",
      "array.reshape(1)",
      "array.compress()",
      "array.squeeze()"
    ]
  },
  {
    "q": "What is the result of `np.arange(10)[::-1]`?",
    "c": "",
    "o": [
      "[9 8 7 6 5 4 3 2 1 0]",
      "[0 1 2 3 4 5 6 7 8 9]",
      "[1 3 5 7 9]",
      "[10 9 8 7 6 5 4 3 2 1]"
    ]
  },
  {
    "q": "What does `np.random.rand(2, 2)` return?",
    "c": "",
    "o": [
      "A 2x2 array of random floats between 0 and 1",
      "A 2x2 array of integers",
      "An array of zeros",
      "A list of random strings"
    ]
  },
  {
    "q": "Which function is used to replace NaN values in a NumPy array?",
    "c": "",
    "o": [
      "np.nan_to_num()",
      "np.fillna()",
      "np.replace_nan()",
      "np.clear_nan()"
    ]
  },
  {
    "q": "What does `np.any([False, False, True])` return?",
    "c": "",
    "o": [
      "True",
      "False",
      "None",
      "Error"
    ]
  },
  {
    "q": "What is the result of `np.array_equal([1,2],[1,2])`?",
    "c": "",
    "o": [
      "True",
      "False",
      "Error",
      "None"
    ]
  },
  {
    "q": "Which NumPy function finds indices of non-zero elements?",
    "c": "",
    "o": [
      "np.nonzero()",
      "np.where_not_zero()",
      "np.find_nonzero()",
      "np.index_nonzero()"
    ]
  },
  {
    "q": "What does `np.full((2,3), 7)` create?",
    "c": "",
    "o": [
      "A 2x3 array filled with 7s",
      "A 3x2 array filled with zeros",
      "A list of 7 elements",
      "An empty array"
    ]
  },
  {
    "q": "Which function generates random integers in NumPy?",
    "c": "",
    "o": [
      "np.random.randint()",
      "np.random.int()",
      "np.randint()",
      "np.random.integer()"
    ]
  },
  {
    "q": "What does `np.argmax([1, 3, 2])` return?",
    "c": "",
    "o": [
      "1",
      "2",
      "3",
      "0"
    ]
  },
  {
    "q": "How to reshape a 1D array of size 6 into 2D with 2 rows?",
    "c": "",
    "o": [
      "array.reshape(2, 3)",
      "array.reshape(3, 2)",
      "array.reshape(6, 1)",
      "array.reshape(1, 6)"
    ]
  },
  {
    "q": "What does `np.isfinite(np.inf)` return?",
    "c": "",
    "o": [
      "False",
      "True",
      "0",
      "Raises an error"
    ]
  },
  {
    "q": "What will be the result of `np.arange(3)`?",
    "c": "",
    "o": [
      "[0 1 2]",
      "[1 2 3]",
      "[0 1 2 3]",
      "[3 2 1]"
    ]
  },
  {
    "q": "Which function in NumPy is used to stack arrays vertically?",
    "c": "",
    "o": [
      "np.vstack()",
      "np.hstack()",
      "np.concat()",
      "np.stack_vertically()"
    ]
  },
  {
    "q": "What will `arr[1:]` return if `arr = np.array([10, 20, 30])`?",
    "c": "",
    "o": [
      "[20 30]",
      "[10 20]",
      "[10]",
      "[30]"
    ]
  },
  {
    "q": "Which of the following is a valid NumPy data type?",
    "c": "",
    "o": [
      "int32",
      "integer64",
      "string",
      "decimal"
    ]
  },
  {
    "q": "What is broadcasting in NumPy?",
    "c": "",
    "o": [
      "Automatic expansion of arrays for arithmetic operations",
      "Sending arrays over a network",
      "Displaying arrays",
      "Reading arrays from a file"
    ]
  },
  {
    "q": "What is the result of `np.shape(np.array([[1,2],[3,4]]))`?",
    "c": "",
    "o": [
      "(2, 2)",
      "(4,)",
      "(1, 4)",
      "(2,)"
    ]
  },
  {
    "q": "Which function returns the square root of array elements?",
    "c": "",
    "o": [
      "np.sqrt()",
      "np.square()",
      "np.pow()",
      "np.root()"
    ]
  },
  {
    "q": "What is the default data type of `np.array([1, 2, 3])`?",
    "c": "",
    "o": [
      "int64",
      "float64",
      "str",
      "bool"
    ]
  },
  {
    "q": "Which function returns the mean of all elements in an array?",
    "c": "",
    "o": [
      "np.mean()",
      "np.total()",
      "np.average()",
      "np.median()"
    ]
  },
  {
    "q": "What will `np.array([[1,2],[3,4]]).T` return?",
    "c": "",
    "o": [
      "[[1 3]\n [2 4]]",
      "[[1 2]\n [3 4]]",
      "[[4 3]\n [2 1]]",
      "[[1 4]\n [2 3]]"
    ]
  },
  {
    "q": "Which of the following functions creates a 2D identity matrix?",
    "c": "",
    "o": [
      "np.eye()",
      "np.identity_matrix()",
      "np.ones()",
      "np.unit()"
    ]
  },
  {
    "q": "What will be the shape of `np.zeros((2, 3))`?",
    "c": "",
    "o": [
      "(2, 3)",
      "(3, 2)",
      "(2,)",
      "(3,)"
    ]
  },
  {
    "q": "How can you reshape a 1D array of 6 elements into a 2D array with 2 rows?",
    "c": "",
    "o": [
      "np.reshape(arr, (2, 3))",
      "np.resize(arr, (3, 2))",
      "arr.reshape((6, 1))",
      "arr.split((2, 3))"
    ]
  },
  {
    "q": "Which slicing operation returns the first two columns of a 2D array `arr`?",
    "c": "",
    "o": [
      "arr[:, :2]",
      "arr[:2, :]",
      "arr[:2]",
      "arr[:, 2:]"
    ]
  },
  {
    "q": "What will `np.array([True, False, True]).sum()` return?",
    "c": "",
    "o": [
      "2",
      "3",
      "1",
      "0"
    ]
  },
  {
    "q": "How do you create an array of 10 random numbers between 0 and 1?",
    "c": "",
    "o": [
      "np.random.rand(10)",
      "np.random.randint(10)",
      "np.random.random(0, 1, 10)",
      "np.rand(0, 1, 10)"
    ]
  },
  {
    "q": "Which function is used to join two arrays along an existing axis?",
    "c": "",
    "o": [
      "np.concatenate()",
      "np.merge()",
      "np.join()",
      "np.union()"
    ]
  },
  {
    "q": "Which attribute gives the number of dimensions of a NumPy array?",
    "c": "",
    "o": [
      "ndim",
      "shape",
      "size",
      "dtype"
    ]
  },
  {
    "q": "Which function is used to find unique elements in a NumPy array?",
    "c": "",
    "o": [
      "np.unique()",
      "np.distinct()",
      "np.set()",
      "np.only()"
    ]
  },
  {
    "q": "What is the output of `np.array([1, 2, 3]) * 2`?",
    "c": "",
    "o": [
      "[2 4 6]",
      "[1 2 3 1 2 3]",
      "[1 4 9]",
      "[0 1 2]"
    ]
  },
  {
    "q": "What is the result of the following code involving broadcasting in NumPy?",
    "c": "import numpy as np\nA = np.array([[1], [2], [3]])\nB = np.array([4, 5, 6])\nprint((A * B).shape)",
    "o": [
      "(3, 3)",
      "(3,)",
      "(1, 3)",
      "(3, 1)"
    ]
  },
  {
    "q": "Which of the following reshapes a 1D array of 16 elements into a 4x4 matrix?",
    "c": "import numpy as np\na = np.arange(16)",
    "o": [
      "a.reshape(4, 4)",
      "a.resize((4, 4))",
      "np.reshape(4, 4, a)",
      "a.reshape((2, 8))"
    ]
  },
  {
    "q": "Which NumPy function performs matrix multiplication (not element-wise multiplication)?",
    "c": null,
    "o": [
      "np.matmul",
      "np.multiply",
      "np.dot",
      "np.prod"
    ]
  },
  {
    "q": "Which of the following operations is best optimized using NumPy vectorization?",
    "c": "import numpy as np\na = np.arange(1e6)\nb = np.array([2])\n# Efficient multiplication",
    "o": [
      "a * b",
      "[x * 2 for x in a]",
      "map(lambda x: x*2, a)",
      "for i in range(len(a)): a[i] *= 2"
    ]
  },
  {
    "q": "In NumPy, what does the following code output?",
    "c": "import numpy as np\nnp.random.seed(42)\nprint(np.random.randint(1, 10, size=3))",
    "o": [
      "[7 4 8]",
      "[6 3 7]",
      "[3 4 6]",
      "[8 6 3]"
    ]
  },
  {
    "q": "Which NumPy function is a universal function (ufunc) for element-wise square root?",
    "c": null,
    "o": [
      "np.sqrt",
      "np.power(, 0.5)",
      "np.square",
      "np.exp"
    ]
  },
  {
    "q": "What is the main benefit of using `np.vectorize`?",
    "c": null,
    "o": [
      "To apply a Python function element-wise over arrays with syntax like vectorized functions",
      "To speed up matrix multiplication operations",
      "To avoid memory allocation in temporary arrays",
      "To parallelize the function internally using threads"
    ]
  },
  {
    "q": "Which of the following statements best describes broadcasting in NumPy?",
    "c": null,
    "o": [
      "It allows arithmetic operations on arrays of different shapes by automatically expanding one array's dimensions",
      "It replicates the smaller array's values to match the larger array",
      "It only works with arrays of the same shape",
      "It flattens both arrays before performing element-wise operations"
    ]
  },
  {
    "q": "Which of these is a correct way to integrate a NumPy array into a Matplotlib plot?",
    "c": "import numpy as np\nimport matplotlib.pyplot as plt\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nplt.plot(x, y)",
    "o": [
      "It will correctly plot a sine wave",
      "It raises a ValueError due to incompatible types",
      "The plot will be empty unless x and y are lists",
      "plt.plot() cannot accept NumPy arrays"
    ]
  },
  {
    "q": "Which of the following statistical operations returns the standard deviation in NumPy?",
    "c": null,
    "o": [
      "np.std",
      "np.var",
      "np.mean",
      "np.average"
    ]
  },
  {
    "q": "What will be the result of this code involving advanced indexing?",
    "c": "import numpy as np\narr = np.array([[10, 20], [30, 40], [50, 60]])\nprint(arr[[0, 1, 2], [1, 1, 0]])",
    "o": [
      "[20 40 50]",
      "[10 20 30]",
      "[20 30 50]",
      "[10 40 60]"
    ]
  },
  {
    "q": "Which technique ensures memory efficiency when slicing NumPy arrays?",
    "c": "import numpy as np\na = np.arange(1000000)\nb = a[100:100000]",
    "o": [
      "Slicing creates a view, not a copy",
      "NumPy uses memory pooling",
      "Slicing uses deepcopy under the hood",
      "Python garbage collector manages NumPy memory"
    ]
  },
  {
    "q": "What is the output of this code involving reshaping and flattening?",
    "c": "import numpy as np\na = np.array([[1, 2], [3, 4]])\nprint(a.reshape(4, 1).flatten())",
    "o": [
      "[1 2 3 4]",
      "[[1]\n [2]\n [3]\n [4]]",
      "[[1, 2], [3, 4]]",
      "[1 3 2 4]"
    ]
  },
  {
    "q": "What does `np.linalg.svd()` return?",
    "c": null,
    "o": [
      "U, S, V^T matrices of the Singular Value Decomposition",
      "Only the eigenvalues of a matrix",
      "A reduced form of QR decomposition",
      "A diagonal matrix of eigenvalues"
    ]
  },
  {
    "q": "Which NumPy function will generate an array with 100 samples from a standard normal distribution?",
    "c": null,
    "o": [
      "np.random.randn(100)",
      "np.random.normal(0, 1, 1, 100)",
      "np.random.normal(size=1000)",
      "np.random.standard_normal(0, 1, 100)"
    ]
  },
  {
    "q": "Which of the following can be broadcast together according to NumPy's rules?",
    "c": null,
    "o": [
      "Shapes (3, 1) and (1, 4)",
      "Shapes (3, 2) and (3,)",
      "Shapes (5, 1) and (4, 1)",
      "Shapes (2, 3, 4) and (3, 1)"
    ]
  },
  {
    "q": "Which ufunc provides a numerically stable way to compute the hypotenuse?",
    "c": null,
    "o": [
      "np.hypot",
      "np.sqrt(x**2 + y**2)",
      "np.linalg.norm([x, y])",
      "np.power(x**2 + y**2, 0.5)"
    ]
  },
  {
    "q": "How does NumPy integrate with Pandas under the hood?",
    "c": null,
    "o": [
      "Pandas Series and DataFrame objects use NumPy arrays for data storage",
      "Pandas rewrites NumPy operations with its own back-end",
      "NumPy reads DataFrames as built-in types",
      "Pandas stores tabular data using Python lists internally"
    ]
  },
  {
    "q": "What is the difference between `np.dot(a, b)` and `np.multiply(a, b)` for 2D arrays?",
    "c": null,
    "o": [
      "`np.dot` performs matrix multiplication; `np.multiply` performs element-wise multiplication",
      "They are identical",
      "`np.dot` returns a scalar product, while `np.multiply` returns a matrix",
      "`np.dot` does broadcasting, `np.multiply` doesn't"
    ]
  },
  {
    "q": "What will be the effect of `np.random.seed()` on `np.random.default_rng()`?",
    "c": null,
    "o": [
      "No effect; `default_rng` uses a separate random number generator system",
      "`np.random.seed()` globally controls all random sources",
      "`default_rng()` automatically inherits global seed",
      "`seed()` modifies all RNGs initialized later"
    ]
  },
  {
    "q": "What will be the result of the following code involving `np.newaxis`?",
    "c": "import numpy as np\nx = np.array([1, 2, 3])\nprint(x[:, np.newaxis].shape)",
    "o": [
      "(3, 1)",
      "(1, 3)",
      "(3,)",
      "(3, 3)"
    ]
  },
  {
    "q": "Which of the following NumPy operations does NOT return a view of the original array?",
    "c": "import numpy as np\na = np.arange(10)\nb = a[::2]\nc = a.reshape(2, 5)\nd = a.copy()",
    "o": [
      "a.copy()",
      "a[::2]",
      "a.reshape(2, 5)",
      "a[:5]"
    ]
  },
  {
    "q": "Which of the following functions is best suited for checking NaN values element-wise in a NumPy array?",
    "c": null,
    "o": [
      "np.isnan",
      "np.isnull",
      "np.isna",
      "np.isnanany"
    ]
  },
  {
    "q": "What will be the output of this code involving `np.where()`?",
    "c": "import numpy as np\na = np.array([10, 20, 30, 40])\nb = np.array([1, 0, 1, 0])\nprint(np.where(b, a, -1))",
    "o": [
      "[10 -1 30 -1]",
      "[1 0 1 0]",
      "[10 20 30 40]",
      "[0 20 0 40]"
    ]
  },
  {
    "q": "Which of these is a correct way to generate a 3x3 identity matrix using NumPy?",
    "c": null,
    "o": [
      "np.eye(3)",
      "np.identity((3, 3))",
      "np.ones((3, 3)) * np.eye(3)",
      "np.unit_matrix(3)"
    ]
  },
  {
    "q": "Which of the following expressions will return a boolean array showing which elements in `arr` are greater than 5?",
    "c": "import numpy as np\narr = np.array([3, 7, 1, 8])",
    "o": [
      "arr > 5",
      "np.where(arr > 5)",
      "np.greater(5, arr)",
      "arr[arr > 5]"
    ]
  },
  {
    "q": "What is a key difference between `np.sum()` and Python’s built-in `sum()` when used with NumPy arrays?",
    "c": null,
    "o": [
      "`np.sum()` is vectorized and much faster for large arrays",
      "Python's `sum()` returns a NumPy array",
      "`np.sum()` requires iteration",
      "`sum()` supports multi-dimensional summing"
    ]
  },
  {
    "q": "Which of these operations ensures reproducibility in NumPy's new random number generator API?",
    "c": "from numpy.random import default_rng\nrng = default_rng(42)\nprint(rng.integers(0, 10, size=3))",
    "o": [
      "Passing a fixed seed to `default_rng()`",
      "Calling `np.random.seed()` before `default_rng()`",
      "Using `np.random.set_state()`",
      "Setting an environment variable `PYTHONHASHSEED`"
    ]
  },
  {
    "q": "Which function can you use to get cumulative product along a given axis in a multi-dimensional NumPy array?",
    "c": null,
    "o": [
      "np.cumprod",
      "np.prod",
      "np.cumsum",
      "np.accumulate"
    ]
  },
  {
    "q": "What does `np.set_printoptions(precision=2)` affect?",
    "c": null,
    "o": [
      "Only the number of decimal places shown when printing arrays",
      "It limits internal calculation precision",
      "It rounds the array values to 2 decimals",
      "It casts arrays to float32 format"
    ]
  },
  {
    "q": "What will be the result of this code using masked indexing?",
    "c": "import numpy as np\na = np.array([1, 2, 3, 4, 5])\nmask = (a % 2 == 0)\na[mask] = -1\nprint(a)",
    "o": [
      "[ 1 -1  3 -1  5]",
      "[1 2 3 4 5]",
      "[0 2 0 4 0]",
      "[-1 -1 -1 -1 -1]"
    ]
  },
  {
    "q": "Which of the following will generate a 2D array of shape (2, 3) with values between 0 and 1?",
    "c": null,
    "o": [
      "np.random.rand(2, 3)",
      "np.random.uniform((2, 3))",
      "np.random.normal(0, 1, (2, 3))",
      "np.random.randn((2, 3))"
    ]
  },
  {
    "q": "How does NumPy optimize operations like `a + b` for arrays `a` and `b`?",
    "c": null,
    "o": [
      "By using C-implemented ufuncs that loop in compiled code",
      "By precomputing results when arrays are initialized",
      "By using GPU-based acceleration by default",
      "By parallelizing using Python's threading module"
    ]
  },
  {
    "q": "What will the following slicing operation return?",
    "c": "import numpy as np\na = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\nprint(a[:2, 1:])",
    "o": [
      "[[1 2]\n [4 5]]",
      "[[0 1]\n [3 4]]",
      "[[1 2 3]\n [4 5 6]]",
      "[[1 2 3]\n [2 3 4]]"
    ]
  },
  {
    "q": "Which NumPy function calculates the correlation coefficient matrix?",
    "c": null,
    "o": [
      "np.corrcoef",
      "np.cov",
      "np.correlation",
      "np.stats.pearson"
    ]
  },
  {
    "q": "Which method will convert a NumPy array `a` into a Python list of lists if it's 2D?",
    "c": "import numpy as np\na = np.array([[1, 2], [3, 4]])",
    "o": [
      "a.tolist()",
      "list(a)",
      "np.list(a)",
      "a.to_list()"
    ]
  },
  {
    "q": "Which of the following best explains why NumPy arrays are more efficient than Python lists?",
    "c": null,
    "o": [
      "Contiguous memory layout and fixed data types",
      "They use hash tables internally",
      "They preallocate memory for future expansion",
      "They use linked lists for faster access"
    ]
  },
  {
    "q": "Which NumPy function is equivalent to applying `np.logical_and.reduce()` across a boolean axis?",
    "c": null,
    "o": [
      "np.all",
      "np.any",
      "np.logical_and",
      "np.logical_xor"
    ]
  },
  {
    "q": "Which statement is true about `np.array_split` vs `np.split`?",
    "c": null,
    "o": [
      "`np.array_split` allows uneven splits; `np.split` does not",
      "`np.split` is faster in all cases",
      "They are functionally identical",
      "`np.split` handles mismatched dimensions better"
    ]
  },
  {
    "q": "What does the following NumPy operation perform?",
    "c": "import numpy as np\narr = np.array([1, 2, 3, 4])\nprint(np.add.accumulate(arr))",
    "o": [
      "[1 3 6 10]",
      "[10 6 3 1]",
      "[1 2 3 4]",
      "[2 4 6 8]"
    ]
  },
  {
    "q": "What is the output of the following code using `np.squeeze()`?",
    "c": "import numpy as np\narr = np.array([[[42]]])\nprint(arr.squeeze().shape)",
    "o": [
      "()",
      "(1, 1, 1)",
      "(1,)",
      "(1, 1)"
    ]
  },
  {
    "q": "Which NumPy function returns the indices that would sort an array?",
    "c": null,
    "o": [
      "np.argsort",
      "np.sort",
      "np.order",
      "np.index_sort"
    ]
  },
  {
    "q": "What is the primary role of `out` parameter in NumPy ufuncs like `np.add(a, b, out=c)`?",
    "c": null,
    "o": [
      "Stores the result directly into a pre-allocated array for memory efficiency",
      "Enables broadcasting over multiple arrays",
      "It caches the output for future reuse",
      "It is used to define the shape of the result"
    ]
  },
  {
    "q": "What is the result of the following array broadcasting operation?",
    "c": "import numpy as np\na = np.array([[1], [2], [3]])\nb = np.array([10, 20])\nprint((a + b).shape)",
    "o": [
      "(3, 2)",
      "(3, 1)",
      "(2, 3)",
      "(1, 2)"
    ]
  },
  {
    "q": "Which function returns the memory layout (row-major or column-major) of a NumPy array?",
    "c": null,
    "o": [
      "arr.flags",
      "arr.order",
      "arr.shape",
      "np.memory_layout(arr)"
    ]
  },
  {
    "q": "What is the best way to test if two NumPy arrays are equal in both shape and element values?",
    "c": "import numpy as np\na = np.array([1, 2, 3])\nb = np.array([1, 2, 3])",
    "o": [
      "np.array_equal(a, b)",
      "a == b",
      "np.equal(a, b).all()",
      "a.equals(b)"
    ]
  },
  {
    "q": "How can you create a structured NumPy array with fields of different data types?",
    "c": null,
    "o": [
      "Using `np.dtype` with a dictionary of field names and types",
      "Using `np.array_split()` with types",
      "Using `np.mixedtype()`",
      "Using `np.set_struct()`"
    ]
  },
  {
    "q": "What does the `keepdims` argument do in functions like `np.sum()`?",
    "c": null,
    "o": [
      "Preserves the reduced axis as dimension with size 1",
      "Prevents broadcasting from happening",
      "Forces in-place computation",
      "Keeps original array unchanged"
    ]
  },
  {
    "q": "What will this return: `np.random.choice(np.arange(5), size=3, replace=False)`?",
    "c": null,
    "o": [
      "3 unique values from 0 to 4",
      "3 random values, possibly repeated, from 0 to 4",
      "Values only between 1 and 3",
      "All 5 values from 0 to 4"
    ]
  },
  {
    "q": "Which expression is equivalent to the matrix trace (sum of diagonal elements) of a 2D NumPy array?",
    "c": null,
    "o": [
      "np.trace(arr)",
      "np.diagonal(arr).sum()",
      "np.sum(arr[:,0])",
      "np.linalg.trace(arr)"
    ]
  },
  {
    "q": "What will be the output of the following operation involving `.T`?",
    "c": "import numpy as np\na = np.array([[1, 2], [3, 4]])\nprint(a.T[0])",
    "o": [
      "[1 3]",
      "[1 2]",
      "[2 4]",
      "[3 4]"
    ]
  },
  {
    "q": "Which of the following methods will return the number of dimensions in a NumPy array?",
    "c": "import numpy as np\na = np.array([[1, 2], [3, 4]])",
    "o": [
      "a.ndim",
      "a.shape",
      "np.rank(a)",
      "a.dim"
    ]
  },
  {
    "q": "How does `np.isclose(a, b)` differ from `a == b`?",
    "c": null,
    "o": [
      "`np.isclose` allows tolerance in floating-point comparison",
      "`a == b` uses broadcasting, `isclose` does not",
      "`isclose` only works on integers",
      "`a == b` returns scalars only"
    ]
  },
  {
    "q": "What is the result of the following code with boolean indexing?",
    "c": "import numpy as np\na = np.array([1, 2, 3, 4])\nprint(a[a > 2])",
    "o": [
      "[3 4]",
      "[1 2]",
      "[1 2 3]",
      "[2 3 4]"
    ]
  },
  {
    "q": "What will be the shape of the array returned by `np.zeros((2, 0, 3))`?",
    "c": null,
    "o": [
      "(2, 0, 3)",
      "(0,)",
      "(2, 3)",
      "ValueError"
    ]
  },
  {
    "q": "Which function would you use to apply a rolling mean on a NumPy array with a fixed window?",
    "c": null,
    "o": [
      "Use `np.convolve` with appropriate mode",
      "`np.rolling_mean`",
      "`np.lib.windowed_mean`",
      "`np.sliding_average`"
    ]
  },
  {
    "q": "What is the effect of `np.clip(a, 0, 10)`?",
    "c": null,
    "o": [
      "Limits all values in `a` to the range [0, 10]",
      "Removes values less than 0 and greater than 10",
      "Normalizes `a` to between 0 and 10",
      "Shifts the mean of `a` to 10"
    ]
  },
  {
    "q": "Which of the following functions is *not* an alias or form of ufunc?",
    "c": null,
    "o": [
      "np.histogram",
      "np.add",
      "np.subtract",
      "np.multiply"
    ]
  },
  {
    "q": "Which NumPy function stacks arrays along a new axis?",
    "c": "import numpy as np\na = np.array([1, 2])\nb = np.array([3, 4])",
    "o": [
      "np.stack((a, b))",
      "np.vstack((a, b))",
      "np.hstack((a, b))",
      "np.concatenate((a, b))"
    ]
  },
  {
    "q": "Why is `np.einsum` considered powerful in NumPy?",
    "c": null,
    "o": [
      "It allows optimized and readable specification of complex tensor operations",
      "It only works for Einstein summation convention",
      "It is slower but clearer than dot or matmul",
      "It replaces all ufuncs in NumPy"
    ]
  },
  {
    "q": "What is the output shape of the following matrix multiplication?",
    "c": "import numpy as np\nA = np.ones((4, 2))\nB = np.ones((2, 5))\nC = A @ B\nprint(C.shape)",
    "o": [
      "(4, 5)",
      "(2, 2)",
      "(4, 2)",
      "(5, 5)"
    ]
  },
  {
    "q": "Which of the following methods is most efficient for applying a function element-wise on a large NumPy array?",
    "c": null,
    "o": [
      "Using NumPy ufuncs or vectorized operations",
      "Using a for-loop",
      "Using map() with lambda",
      "Using list comprehension"
    ]
  },
  {
    "q": "What does the `axis=1` parameter do in `np.sum(arr, axis=1)` for a 2D array?",
    "c": null,
    "o": [
      "Sums across columns (i.e., row-wise sum)",
      "Sums down rows (i.e., column-wise sum)",
      "Returns diagonal elements",
      "Flattens the array before summing"
    ]
  },
  {
    "q": "Which method can be used to check if any element in a NumPy array is `NaN`?",
    "c": null,
    "o": [
      "np.isnan(arr).any()",
      "np.isnan(arr).all()",
      "arr.has_nan()",
      "np.any_nan(arr)"
    ]
  },
  {
    "q": "What happens when you multiply two boolean NumPy arrays with `*`?",
    "c": "import numpy as np\na = np.array([True, False, True])\nb = np.array([False, False, True])\nprint(a * b)",
    "o": [
      "[False False  True]",
      "[0 1 1]",
      "[True True True]",
      "[1 0 1]"
    ]
  },
  {
    "q": "What is the shape of the array returned by `np.r_[[1, 2], [3, 4]]`?",
    "c": null,
    "o": [
      "(4,)",
      "(2, 2)",
      "(1, 4)",
      "(2,)"
    ]
  },
  {
    "q": "Which of the following best describes the role of `np.broadcast_to()`?",
    "c": null,
    "o": [
      "Expands an array to a given shape without copying data",
      "Repeats array elements along a new axis",
      "Pads the array with zeros to fit a new shape",
      "Copies values into a new array with repeated shape"
    ]
  },
  {
    "q": "What does `np.allclose(a, b)` do?",
    "c": null,
    "o": [
      "Returns True if all corresponding elements are equal within a tolerance",
      "Returns True if arrays `a` and `b` are exactly the same",
      "Returns an array of element-wise closeness",
      "Compares shapes and returns a boolean"
    ]
  },
  {
    "q": "How do you ensure that a NumPy array is C-contiguous?",
    "c": null,
    "o": [
      "Use `np.ascontiguousarray()`",
      "Use `arr.copy(order='F')`",
      "Use `arr.reshape()` only",
      "Use `arr.flags.writeable = True`"
    ]
  },
  {
    "q": "Which of the following returns the inverse of a square matrix in NumPy?",
    "c": null,
    "o": [
      "np.linalg.inv(arr)",
      "np.inverse(arr)",
      "np.linalg.solve(arr)",
      "np.reciprocal(arr)"
    ]
  },
  {
    "q": "What will the following code return regarding strides?",
    "c": "import numpy as np\nx = np.array([[1, 2, 3], [4, 5, 6]], dtype=np.int32)\nprint(x.strides)",
    "o": [
      "(12, 4)",
      "(4, 12)",
      "(8, 4)",
      "(4, 8)"
    ]
  },
  {
    "q": "Which function performs a dot product along the last axis of `a` and the second-to-last of `b`?",
    "c": null,
    "o": [
      "np.tensordot(a, b, axes=1)",
      "np.dot(a, b)",
      "np.inner(a, b)",
      "np.outer(a, b)"
    ]
  },
  {
    "q": "How would you efficiently extract only the unique rows from a 2D NumPy array?",
    "c": null,
    "o": [
      "np.unique(arr, axis=0)",
      "np.set(arr, axis=0)",
      "np.unique(arr)",
      "np.sort(arr, axis=0)"
    ]
  },
  {
    "q": "What is a possible reason for `np.may_share_memory(a, b)` returning True?",
    "c": null,
    "o": [
      "Arrays `a` and `b` may point to overlapping memory blocks",
      "Arrays are equal",
      "Arrays were created from different sources",
      "It guarantees they share all memory"
    ]
  },
  {
    "q": "Which of the following uses `fancy indexing`?",
    "c": "import numpy as np\na = np.array([10, 20, 30, 40])\nprint(a[[1, 3]])",
    "o": [
      "[20 40]",
      "[10 30]",
      "[1 3]",
      "IndexError"
    ]
  },
  {
    "q": "Which NumPy function returns the indices of the non-zero elements in an array?",
    "c": "import numpy as np\na = np.array([0, 1, 0, 3])",
    "o": [
      "np.nonzero(a)",
      "np.where(a == 0)",
      "np.argwhere(a)",
      "np.flatnonzero(a == 0)"
    ]
  },
  {
    "q": "What is the most memory-efficient way to stack arrays vertically without copying?",
    "c": null,
    "o": [
      "Use `np.vstack` only when input arrays share memory layout",
      "Use `np.stack`",
      "Use `np.concatenate` always",
      "It's not possible without copying"
    ]
  },
  {
    "q": "What is returned by `np.linspace(1, 3, 5, endpoint=False)`?",
    "c": null,
    "o": [
      "[1.  1.4 1.8 2.2 2.6]",
      "[1.  1.5 2.  2.5 3. ]",
      "[1.  1.4 1.8 2.2 2.6]",
      "[1.  1.4 1.8 2.2]"
    ]
  },
  {
    "q": "Which attribute of a NumPy array tells if it's stored in column-major (Fortran-style) order?",
    "c": null,
    "o": [
      "arr.flags.f_contiguous",
      "arr.flags.c_style",
      "arr.layout",
      "arr.stride_order"
    ]
  },
  {
    "q": "What is the purpose of `np.nditer()`?",
    "c": null,
    "o": [
      "Efficient iterator for multi-dimensional arrays with control over traversal order",
      "Only used for 1D iteration",
      "Automatically parallelizes iteration",
      "Iterates over dtype definitions"
    ]
  },
  {
    "q": "What is the output shape of the following NumPy operation using broadcasting?",
    "c": "import numpy as np\n\nA = np.ones((3, 1))\nB = np.ones((1, 4))\nC = A + B\nprint(C.shape)",
    "o": [
      "(3, 4)",
      "(1, 1)",
      "(3, 1)",
      "(1, 4)"
    ]
  },
  {
    "q": "Which NumPy function is most efficient for applying an operation over an entire array without writing an explicit loop?",
    "c": null,
    "o": [
      "np.vectorize",
      "np.apply_along_axis",
      "np.frompyfunc",
      "np.iterate"
    ]
  },
  {
    "q": "In NumPy, what does the function `np.einsum('ij,jk->ik', A, B)` do?",
    "c": null,
    "o": [
      "Matrix multiplication",
      "Element-wise multiplication",
      "Transpose of A and B",
      "Dot product with broadcasting"
    ]
  },
  {
    "q": "Which NumPy method modifies the shape of an array without changing its data (view, not a copy), if possible?",
    "c": null,
    "o": [
      "reshape",
      "resize",
      "flatten",
      "ravel"
    ]
  },
  {
    "q": "What will be the result of the following code snippet?",
    "c": "import numpy as np\narr = np.arange(8).reshape(2,2,2)\nprint(arr[1, ..., 1])",
    "o": [
      "[5 7]",
      "[1 3]",
      "[2 3]",
      "[6 7]"
    ]
  },
  {
    "q": "Which function is used to generate a reproducible sequence of random numbers in NumPy?",
    "c": null,
    "o": [
      "np.random.seed",
      "np.random.set_random_state",
      "np.random.initialize",
      "np.random.reseed"
    ]
  },
  {
    "q": "How does NumPy internally store arrays for fast element access?",
    "c": null,
    "o": [
      "Contiguous block of memory (row-major or column-major)",
      "Hash table",
      "Linked list",
      "Binary tree"
    ]
  },
  {
    "q": "Which method is preferred for memory-efficient computation on large NumPy arrays?",
    "c": null,
    "o": [
      "Vectorization using ufuncs",
      "Using Python loops",
      "Creating many temporary arrays",
      "Copying arrays during operations"
    ]
  },
  {
    "q": "What will be the output of the following NumPy slicing operation?",
    "c": "import numpy as np\narr = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])\nprint(arr[:2, 1:])",
    "o": [
      "[[20 30]\n [50 60]]",
      "[[10 20]\n [40 50]]",
      "[[30 20]\n [60 50]]",
      "[[50 60]\n [80 90]]"
    ]
  },
  {
    "q": "Which of the following NumPy operations returns a view instead of a copy (when possible)?",
    "c": null,
    "o": [
      "arr[1:3]",
      "arr.copy()",
      "np.array(arr)",
      "np.append(arr, [1, 2])"
    ]
  },
  {
    "q": "What does the `axis=1` parameter mean in the NumPy function `np.sum(arr, axis=1)`?",
    "c": null,
    "o": [
      "Sum along columns (i.e., row-wise sum)",
      "Sum along rows (i.e., column-wise sum)",
      "Flatten and sum",
      "Ignore the axis and return the total sum"
    ]
  },
  {
    "q": "What is the shape of the array after executing `np.expand_dims(np.array([1,2,3]), axis=1)`?",
    "c": null,
    "o": [
      "(3, 1)",
      "(1, 3)",
      "(3,)",
      "(1, 1, 3)"
    ]
  },
  {
    "q": "Which function is most appropriate for efficiently generating an identity matrix in NumPy?",
    "c": null,
    "o": [
      "np.eye",
      "np.identity",
      "np.ones",
      "np.diagflat"
    ]
  },
  {
    "q": "What will `np.dot(np.array([1, 2]), np.array([3, 4]))` return?",
    "c": null,
    "o": [
      "11",
      "[3 8]",
      "[1 2 3 4]",
      "7"
    ]
  },
  {
    "q": "Which of the following statements about NumPy broadcasting is true?",
    "c": null,
    "o": [
      "Smaller arrays are stretched automatically to match the shape of the larger array during operations.",
      "Broadcasting requires both arrays to have the exact same shape.",
      "Broadcasting only works for 1D arrays.",
      "Broadcasting throws an error unless explicitly enabled."
    ]
  },
  {
    "q": "How can you select only the even elements from a NumPy array?",
    "c": "import numpy as np\narr = np.arange(10)\n# Select even elements",
    "o": [
      "arr[arr % 2 == 0]",
      "arr[arr % 2]",
      "arr[::2]",
      "arr[arr % 2 != 0]"
    ]
  },
  {
    "q": "What will be the result of the following code involving reshaping?",
    "c": "import numpy as np\narr = np.arange(12)\nreshaped = arr.reshape((3, 2, 2))\nprint(reshaped[1][1][0])",
    "o": [
      "6",
      "4",
      "8",
      "5"
    ]
  },
  {
    "q": "What does the `np.may_share_memory(a, b)` function determine?",
    "c": null,
    "o": [
      "Whether arrays `a` and `b` might share memory",
      "Whether `a` and `b` are the same shape",
      "Whether `a` and `b` have equal values",
      "Whether `a` and `b` are sorted"
    ]
  },
  {
    "q": "Which NumPy function can be used to stack arrays in sequence vertically (row wise)?",
    "c": null,
    "o": [
      "np.vstack",
      "np.hstack",
      "np.dstack",
      "np.stack(axis=1)"
    ]
  },
  {
    "q": "What is the output of the following advanced indexing operation?",
    "c": "import numpy as np\narr = np.array([[10, 20], [30, 40], [50, 60]])\nprint(arr[[0, 2], [1, 0]])",
    "o": [
      "[20 50]",
      "[10 50]",
      "[10 60]",
      "[20 60]"
    ]
  },
  {
    "q": "What does `arr.flags['C_CONTIGUOUS']` return in NumPy?",
    "c": null,
    "o": [
      "Whether the array is stored in row-major (C-style) order",
      "Whether the array is contiguous in column-major order",
      "Whether the array is 1-dimensional",
      "Whether the array has been flattened"
    ]
  },
  {
    "q": "Which operation flattens a NumPy array without copying it (if possible)?",
    "c": null,
    "o": [
      "arr.ravel()",
      "arr.flatten()",
      "np.reshape(arr, -1).copy()",
      "np.copy(arr).reshape(-1)"
    ]
  },
  {
    "q": "Which NumPy method is used for returning unique elements and optionally their counts?",
    "c": null,
    "o": [
      "np.unique(arr, return_counts=True)",
      "np.sort(arr)",
      "np.setdiff1d(arr)",
      "np.intersect1d(arr)"
    ]
  },
  {
    "q": "If `arr.shape = (4,5,6)`, what will `arr.transpose(1, 0, 2).shape` return?",
    "c": null,
    "o": [
      "(5, 4, 6)",
      "(4, 6, 5)",
      "(6, 4, 5)",
      "(6, 5, 4)"
    ]
  },
  {
    "q": "What is the result of the following operation involving broadcasting?",
    "c": "import numpy as np\na = np.array([[1], [2], [3]])\nb = np.array([4, 5, 6])\nprint(a + b)",
    "o": [
      "[[5 6 7]\n [6 7 8]\n [7 8 9]]",
      "[[5 6 7]]",
      "[[5]\n [7]\n [9]]",
      "[[4 5 6]\n [4 5 6]\n [4 5 6]]"
    ]
  },
  {
    "q": "Which of the following will result in a view and NOT a copy of the original array?",
    "c": "import numpy as np\narr = np.array([1, 2, 3, 4])",
    "o": [
      "arr[1:3]",
      "arr + 1",
      "arr.copy()",
      "np.array(arr)"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "import numpy as np\narr = np.arange(16).reshape(4, 4)\nprint(arr[::2, 1::2])",
    "o": [
      "[[ 1  3]\n [ 9 11]]",
      "[[ 2  4]\n [10 12]]",
      "[[ 1  3]\n [13 15]]",
      "[[ 0  2]\n [ 8 10]]"
    ]
  },
  {
    "q": "What will be the output of the following expression involving `np.where()`?",
    "c": "import numpy as np\na = np.array([10, 20, 30, 40])\nb = np.array([1, 0, 1, 0])\nprint(np.where(b, a, -1))",
    "o": [
      "[10 -1 30 -1]",
      "[1 0 1 0]",
      "[10 20 30 40]",
      "[-1 -1 -1 -1]"
    ]
  },
  {
    "q": "Which of the following operations can be used to efficiently reverse a NumPy array `a`?",
    "c": null,
    "o": [
      "a[::-1]",
      "np.flipud(a.T)",
      "np.sort(a)[::-1]",
      "a.reverse()"
    ]
  },
  {
    "q": "Which method provides a memory-efficient way to create large arrays filled with zeros?",
    "c": null,
    "o": [
      "np.zeros(shape, dtype)",
      "np.empty(shape, dtype)",
      "np.full(shape, 0)",
      "np.array([0]*size)"
    ]
  },
  {
    "q": "What is the correct way to compute the covariance matrix of a 2D NumPy array `X`?",
    "c": null,
    "o": [
      "np.cov(X, rowvar=False)",
      "np.corrcoef(X)",
      "np.dot(X.T, X)",
      "np.var(X)"
    ]
  },
  {
    "q": "Which of the following functions is most suitable for generating values from a standard normal distribution?",
    "c": null,
    "o": [
      "np.random.randn()",
      "np.random.randint()",
      "np.random.random()",
      "np.linspace()"
    ]
  },
  {
    "q": "What will be the shape of the array after executing the following code?",
    "c": "import numpy as np\narr = np.array([[1, 2], [3, 4], [5, 6]])\nreshaped = arr.reshape(2, 3)",
    "o": [
      "(2, 3)",
      "(3, 2)",
      "(6,)",
      "(1, 6)"
    ]
  },
  {
    "q": "What does the following slicing return?",
    "c": "import numpy as np\narr = np.array([10, 20, 30, 40, 50])\nprint(arr[1:-1:2])",
    "o": [
      "[20 40]",
      "[10 30 50]",
      "[20 30 40]",
      "[20 30]"
    ]
  },
  {
    "q": "Which NumPy function returns unique elements and also their counts?",
    "c": "import numpy as np\na = np.array([1, 2, 2, 3, 3, 3])\nprint(np.unique(a, return_counts=True))",
    "o": [
      "(array([1, 2, 3]), array([1, 2, 3]))",
      "[1 2 3]",
      "{1:1, 2:2, 3:3}",
      "(array([1, 2, 3]), array([3, 2, 1]))"
    ]
  },
  {
    "q": "What will be printed by this NumPy boolean indexing example?",
    "c": "import numpy as np\na = np.array([10, 15, 20, 25])\nprint(a[a > 15])",
    "o": [
      "[20 25]",
      "[10 15]",
      "[15 20 25]",
      "[10 15 20 25]"
    ]
  },
  {
    "q": "Which function is used to save a NumPy array to a binary file?",
    "c": null,
    "o": [
      "np.save()",
      "np.write()",
      "np.store()",
      "np.dump()"
    ]
  },
  {
    "q": "What is the output shape of `np.dot(a, b)` if `a` has shape (2, 3) and `b` has shape (3, 4)?",
    "c": null,
    "o": [
      "(2, 4)",
      "(2, 3)",
      "(3, 3)",
      "(3, 4)"
    ]
  },
  {
    "q": "Which NumPy function is used to compute the cumulative sum of an array?",
    "c": null,
    "o": [
      "np.cumsum()",
      "np.sum()",
      "np.add.accumulate()",
      "np.total()"
    ]
  },
  {
    "q": "How can you create a 1D array with values ranging from 0 to 9?",
    "c": null,
    "o": [
      "np.arange(10)",
      "np.linspace(0, 9)",
      "np.array(range(0,10,2))",
      "np.range(10)"
    ]
  },
  {
    "q": "What will be the result of the following code snippet?",
    "c": "import numpy as np\na = np.array([[1, 2], [3, 4]])\nb = np.array([[5, 6], [7, 8]])\nprint(np.concatenate((a, b), axis=0))",
    "o": [
      "[[1 2]\n [3 4]\n [5 6]\n [7 8]]",
      "[[1 2 5 6]\n [3 4 7 8]]",
      "[[1 2 3 4]\n [5 6 7 8]]",
      "[[1 2 7 8]\n [3 4 5 6]]"
    ]
  },
  {
    "q": "What does `np.zeros((3, 2))` return?",
    "c": null,
    "o": [
      "A 3x2 array filled with 0.0",
      "A 3x2 array filled with 1.0",
      "A 2x3 array filled with 0.0",
      "A 3x2 array filled with null"
    ]
  },
  {
    "q": "Which of the following functions creates an identity matrix?",
    "c": null,
    "o": [
      "np.eye()",
      "np.identity()",
      "np.ones()",
      "np.matrix()"
    ]
  },
  {
    "q": "What is the correct way to flatten a NumPy array?",
    "c": "import numpy as np\na = np.array([[1, 2], [3, 4]])",
    "o": [
      "a.flatten()",
      "a.reshape(-1, 1)",
      "a.to_list()",
      "a.ravel(1)"
    ]
  },
  {
    "q": "What does `np.argmax()` return when applied to a 1D array?",
    "c": "arr = np.array([10, 20, 15, 5])",
    "o": [
      "1",
      "20",
      "[1]",
      "2"
    ]
  },
  {
    "q": "Which function would you use to round each element of a NumPy array to the nearest integer?",
    "c": null,
    "o": [
      "np.rint()",
      "np.roundup()",
      "np.floor()",
      "np.int()"
    ]
  },
  {
    "q": "What is the use of `np.where()` function?",
    "c": null,
    "o": [
      "To return elements based on a condition",
      "To sort an array",
      "To reshape an array",
      "To join two arrays"
    ]
  },
  {
    "q": "How do you check for NaN values in a NumPy array?",
    "c": "arr = np.array([1, np.nan, 3])",
    "o": [
      "np.isnan(arr)",
      "np.isnull(arr)",
      "arr == NaN",
      "arr.nan()"
    ]
  },
  {
    "q": "What will `np.linspace(0, 5, 6)` return?",
    "c": null,
    "o": [
      "[0. 1. 2. 3. 4. 5.]",
      "[0 1 2 3 4 5]",
      "[0. 0.5 1.0 1.5 2.0 2.5]",
      "[0 5 10 15 20 25]"
    ]
  },
  {
    "q": "Which NumPy function returns the number of dimensions of an array?",
    "c": "a = np.array([[1, 2, 3], [4, 5, 6]])",
    "o": [
      "a.ndim",
      "a.shape",
      "a.size",
      "len(a)"
    ]
  },
  {
    "q": "What will be the output of `np.sum([[0, 1], [0, 5]], axis=0)`?",
    "c": null,
    "o": [
      "[0 6]",
      "[0 1 0 5]",
      "[1 5]",
      "[0 1 5 0]"
    ]
  },
  {
    "q": "What will `np.dot([2, 3], [4, 5])` return?",
    "c": null,
    "o": [
      "23",
      "[8 15]",
      "26",
      "Invalid operation"
    ]
  },
  {
    "q": "How to generate a 2x3 array of random floats in [0.0, 1.0)?",
    "c": null,
    "o": [
      "np.random.rand(2, 3)",
      "np.random.randint(2, 3)",
      "np.random.random((2, 3)) * 1.0",
      "np.random.uniform(2, 3)"
    ]
  },
  {
    "q": "Which of the following reshapes an array to 1D?",
    "c": "arr = np.array([[1, 2], [3, 4]])",
    "o": [
      "arr.reshape(-1)",
      "arr.reshape(1)",
      "arr.flatten(1)",
      "arr.to_1d()"
    ]
  },
  {
    "q": "How can you transpose a NumPy array?",
    "c": "a = np.array([[1, 2], [3, 4]])",
    "o": [
      "a.T",
      "a.transpose()",
      "np.transpose(a)",
      "All of the above"
    ]
  },
  {
    "q": "Which method removes a dimension of size 1 from a NumPy array?",
    "c": "a = np.array([[[1, 2, 3]]])",
    "o": [
      "np.squeeze(a)",
      "np.reshape(a, -1)",
      "np.flatten(a)",
      "np.pop(a)"
    ]
  },
  {
    "q": "What will be the result of broadcasting in `np.array([1, 2, 3]) + np.array([[1], [2], [3]])`?",
    "c": null,
    "o": [
      "[[2 3 4] [3 4 5] [4 5 6]]",
      "[2 4 6]",
      "[[2] [4] [6]]",
      "BroadcastingError"
    ]
  },
  {
    "q": "Which of the following creates a 3x3 identity matrix?",
    "c": null,
    "o": [
      "np.eye(3)",
      "np.identity(3,3)",
      "np.ones((3,3))",
      "np.diag(np.ones(3))"
    ]
  },
  {
    "q": "What does `np.argmax(a, axis=0)` return?",
    "c": "a = np.array([[1, 3], [2, 1]])",
    "o": [
      "[1 0]",
      "[0 1]",
      "1",
      "[2 3]"
    ]
  },
  {
    "q": "Which NumPy function returns the standard deviation of an array?",
    "c": null,
    "o": [
      "np.std()",
      "np.variance()",
      "np.mean()",
      "np.deviation()"
    ]
  },
  {
    "q": "What is the shape of the array created by `np.zeros((3,1,4))`?",
    "c": null,
    "o": [
      "(3, 1, 4)",
      "(3, 4)",
      "(3, 4, 1)",
      "(1, 3, 4)"
    ]
  },
  {
    "q": "How do you compute the cumulative sum of elements in an array?",
    "c": "arr = np.array([1, 2, 3])",
    "o": [
      "np.cumsum(arr)",
      "np.sum(arr)",
      "np.accumulate(arr)",
      "arr.sum()"
    ]
  },
  {
    "q": "What is returned by `np.where(arr > 2)`?",
    "c": "arr = np.array([1, 2, 3, 4])",
    "o": [
      "(array([2, 3]),)",
      "[3 4]",
      "array([2, 3])",
      "Boolean array"
    ]
  },
  {
    "q": "Which function shuffles a NumPy array in-place?",
    "c": null,
    "o": [
      "np.random.shuffle()",
      "np.shuffle()",
      "np.random.permutation()",
      "np.shuffle_array()"
    ]
  },
  {
    "q": "What does `np.dot(A, B)` compute when A is of shape (2, 3) and B is of shape (3, 4)?",
    "c": null,
    "o": [
      "A matrix of shape (2, 4)",
      "A matrix of shape (3, 2)",
      "A matrix of shape (4, 3)",
      "It raises a ValueError"
    ]
  },
  {
    "q": "What is the difference between `np.dot()` and `np.matmul()` in NumPy?",
    "c": null,
    "o": [
      "`np.matmul()` supports broadcasting, `np.dot()` does not",
      "`np.dot()` is faster than `np.matmul()`",
      "Both are identical in all use cases",
      "`np.dot()` supports more dimensions than `np.matmul()`"
    ]
  },
  {
    "q": "Which NumPy function will return the inverse of a square matrix?",
    "c": null,
    "o": [
      "np.linalg.inv()",
      "np.inverse()",
      "np.inv()",
      "np.linalg.solve()"
    ]
  },
  {
    "q": "What does `np.linalg.eig()` return?",
    "c": null,
    "o": [
      "Eigenvalues and eigenvectors",
      "Only eigenvalues",
      "Only eigenvectors",
      "Singular values"
    ]
  },
  {
    "q": "How can you solve a system of linear equations Ax = b using NumPy?",
    "c": null,
    "o": [
      "np.linalg.solve(A, b)",
      "np.solve(A, b)",
      "np.linalg.inv(A, b)",
      "np.linalg.eig(A, b)"
    ]
  },
  {
    "q": "Which function returns the pseudoinverse of a matrix?",
    "c": null,
    "o": [
      "np.linalg.pinv()",
      "np.pseudo_inverse()",
      "np.linalg.inv()",
      "np.inverse()"
    ]
  },
  {
    "q": "What will be the output shape of `np.matmul(np.ones((5, 1)), np.ones((1, 3)))`?",
    "c": null,
    "o": [
      "(5, 3)",
      "(1, 1)",
      "(3, 5)",
      "(5,)"
    ]
  },
  {
    "q": "Which operation does `@` perform in NumPy?",
    "c": null,
    "o": [
      "Matrix multiplication",
      "Element-wise multiplication",
      "Dot product of vectors only",
      "Bitwise AND"
    ]
  },
  {
    "q": "What is the time complexity of NumPy's `np.sort()` for 1D arrays?",
    "c": null,
    "o": [
      "O(n log n)",
      "O(n)",
      "O(n^2)",
      "O(log n)"
    ]
  },
  {
    "q": "Which method is used in NumPy to compute the singular value decomposition (SVD) of a matrix?",
    "c": null,
    "o": [
      "np.linalg.svd()",
      "np.svd()",
      "np.linalg.decompose()",
      "np.linalg.eig()"
    ]
  },
  {
    "q": "What is the output of `np.allclose([0.1 + 0.2], [0.3])`?",
    "c": null,
    "o": [
      "True",
      "False",
      "Raises TypeError",
      "Raises ValueError"
    ]
  },
  {
    "q": "Which of the following best describes broadcasting in NumPy?",
    "c": null,
    "o": [
      "Implicit expansion of arrays for element-wise operations",
      "Compressing array dimensions automatically",
      "Copying arrays to match shapes",
      "Flattening arrays automatically"
    ]
  },
  {
    "q": "Which function finds the least-squares solution to a linear matrix equation in NumPy?",
    "c": null,
    "o": [
      "np.linalg.lstsq()",
      "np.linalg.solve()",
      "np.linalg.inv()",
      "np.linalg.eig()"
    ]
  },
  {
    "q": "What does `np.where(condition)` return if only the condition is passed?",
    "c": null,
    "o": [
      "Indices of elements where condition is True",
      "Boolean mask array",
      "Modified array based on condition",
      "Array filled with zeros"
    ]
  },
  {
    "q": "Which function computes the QR decomposition of a matrix in NumPy?",
    "c": null,
    "o": [
      "np.linalg.qr()",
      "np.linalg.decompose()",
      "np.linalg.qrd()",
      "np.qr()"
    ]
  },
  {
    "q": "What does the `keepdims=True` parameter do in functions like `np.sum()`?",
    "c": null,
    "o": [
      "Preserves reduced dimensions with size 1",
      "Ignores NaNs",
      "Prevents broadcasting",
      "Removes all dimensions of size 1"
    ]
  },
  {
    "q": "What is the result of `np.dot(A, B)` when A is shape (2, 3) and B is shape (3, 4)?",
    "c": null,
    "o": [
      "An array of shape (2, 4)",
      "An array of shape (3, 3)",
      "An array of shape (4, 2)",
      "It raises a ValueError"
    ]
  },
  {
    "q": "Which NumPy function returns the strides of an array?",
    "c": null,
    "o": [
      "array.strides",
      "np.strides(array)",
      "np.get_strides(array)",
      "array.get_stride()"
    ]
  },
  {
    "q": "What does `np.may_share_memory(a, b)` check?",
    "c": null,
    "o": [
      "If arrays `a` and `b` share memory",
      "If arrays have the same shape",
      "If arrays are shallow copies",
      "If arrays point to the same object"
    ]
  },
  {
    "q": "Which function computes the inverse of a matrix in NumPy?",
    "c": null,
    "o": [
      "np.linalg.inv()",
      "np.inverse()",
      "np.linalg.inverse()",
      "np.inv()"
    ]
  },
  {
    "q": "What is the memory layout order when `np.array()` is given `order='F'`?",
    "c": null,
    "o": [
      "Column-major (Fortran-style)",
      "Row-major (C-style)",
      "Memory-efficient",
      "Reversed indexing"
    ]
  },
  {
    "q": "Which NumPy function returns the cumulative product of array elements?",
    "c": null,
    "o": [
      "np.cumprod()",
      "np.prod()",
      "np.cumsum()",
      "np.multiply.accumulate()"
    ]
  },
  {
    "q": "In NumPy, which function computes the Moore-Penrose pseudo-inverse of a matrix?",
    "c": null,
    "o": [
      "np.linalg.pinv()",
      "np.linalg.inv()",
      "np.linalg.solve()",
      "np.pseudo_inverse()"
    ]
  },
  {
    "q": "What is the difference between `np.array_equal(a, b)` and `np.allclose(a, b)`?",
    "c": null,
    "o": [
      "`array_equal` checks exact equality; `allclose` allows tolerance",
      "No difference",
      "`allclose` checks shape only",
      "`array_equal` checks closeness within tolerance"
    ]
  },
  {
    "q": "What does the `np.einsum('ij,jk->ik', A, B)` function perform?",
    "c": null,
    "o": [
      "Matrix multiplication of A and B",
      "Element-wise multiplication",
      "Dot product of vectors",
      "Outer product of A and B"
    ]
  },
  {
    "q": "Which function can be used to find the condition number of a matrix?",
    "c": null,
    "o": [
      "np.linalg.cond()",
      "np.linalg.det()",
      "np.linalg.norm()",
      "np.cond()"
    ]
  },
  {
    "q": "What will `np.seterr(divide='ignore')` do?",
    "c": null,
    "o": [
      "Suppress warnings for divide-by-zero errors",
      "Disable all error messages",
      "Raises an exception on division",
      "Automatically fix divide errors"
    ]
  },
  {
    "q": "Which function returns the Cholesky decomposition of a matrix?",
    "c": null,
    "o": [
      "np.linalg.cholesky()",
      "np.linalg.qr()",
      "np.linalg.lu()",
      "np.linalg.decompose()"
    ]
  },
  {
    "q": "What does `np.lib.stride_tricks.as_strided()` allow?",
    "c": null,
    "o": [
      "View the array with modified strides (advanced slicing)",
      "Convert an array into a string",
      "Change shape without copying",
      "Get the strides in reverse"
    ]
  },
  {
    "q": "What is the default behavior of `np.copy()`?",
    "c": null,
    "o": [
      "Performs a deep copy",
      "Creates a shallow copy",
      "Returns a view",
      "Performs no copy if possible"
    ]
  },
  {
    "q": "How can you find eigenvalues of a matrix using NumPy?",
    "c": null,
    "o": [
      "np.linalg.eigvals()",
      "np.linalg.values()",
      "np.eigen()",
      "np.linalg.ev()"
    ]
  },
  {
    "q": "Which NumPy function calculates the Kronecker product of two arrays?",
    "c": null,
    "o": [
      "np.kron()",
      "np.kronecker()",
      "np.outer()",
      "np.tile()"
    ]
  },
  {
    "q": "What does `np.isfortran(arr)` check for in a NumPy array?",
    "c": null,
    "o": [
      "Whether the array is stored in column-major order",
      "If the array uses Fortran indexing (1-based)",
      "Whether the array is compatible with Fortran compilers",
      "If the array is aligned to a Fortran memory block"
    ]
  },
  {
    "q": "What is a key feature of NumPy's `recarray`?",
    "c": null,
    "o": [
      "Allows attribute-style access to fields of structured arrays",
      "Recursively flattens nested arrays",
      "Used only in recursion-based operations",
      "For recording operations like profiling"
    ]
  },
  {
    "q": "Which NumPy function creates a masked array?",
    "c": null,
    "o": [
      "np.ma.array()",
      "np.masked_array()",
      "np.ma.create()",
      "np.ma.mask()"
    ]
  },
  {
    "q": "Which flag of a NumPy array tells if it's writeable?",
    "c": null,
    "o": [
      "arr.flags.writeable",
      "arr.flags.writable",
      "arr.flags.editable",
      "arr.flags.modifiable"
    ]
  },
  {
    "q": "Which function is used to define a structured dtype with field names and types?",
    "c": null,
    "o": [
      "np.dtype([('field1', np.int32), ('field2', np.float64)])",
      "np.structured()",
      "np.def_dtype({'field1': int, 'field2': float})",
      "np.create_struct([int, float])"
    ]
  },
  {
    "q": "What does `np.may_share_memory(a, b)` return?",
    "c": null,
    "o": [
      "True if arrays a and b might share memory",
      "True if arrays a and b are the same object",
      "False if arrays have different shapes",
      "False if arrays are write-protected"
    ]
  },
  {
    "q": "What is the purpose of `np.nditer()`?",
    "c": null,
    "o": [
      "Efficient multi-dimensional iteration with flexible control",
      "Iterate over 1D arrays only",
      "Vectorized operations over structured arrays",
      "Iterate over masked elements only"
    ]
  },
  {
    "q": "How can you check the alignment of a NumPy array's data?",
    "c": null,
    "o": [
      "Using arr.ctypes.data and pointer arithmetic",
      "Using arr.strides directly",
      "Calling arr.alignment()",
      "Checking arr.memory_block"
    ]
  },
  {
    "q": "What does `np.broadcast_to()` do differently from regular broadcasting?",
    "c": null,
    "o": [
      "Returns a read-only view with a broadcasted shape",
      "Creates a new array with copied data",
      "Modifies the shape of the array in-place",
      "Broadcasts along the axis with largest stride"
    ]
  },
  {
    "q": "Which NumPy object allows subclassing and overriding of array behavior?",
    "c": null,
    "o": [
      "numpy.ndarray",
      "numpy.array_like",
      "numpy.GenericArray",
      "numpy.ABCArray"
    ]
  },
  {
    "q": "How can you make a memory-efficient array of timestamps using NumPy?",
    "c": null,
    "o": [
      "Use `np.datetime64` dtype",
      "Store as Python datetime objects",
      "Use float arrays and convert later",
      "Use string-formatted dates"
    ]
  },
  {
    "q": "Which method can help identify overlapping memory in two arrays?",
    "c": null,
    "o": [
      "np.shares_memory(a, b)",
      "np.same_data_block(a, b)",
      "np.overlap(a, b)",
      "np.array_overlap(a, b)"
    ]
  },
  {
    "q": "What is the purpose of `arr.__array_interface__`?",
    "c": null,
    "o": [
      "To expose low-level memory details for C-level interoperability",
      "To enable broadcasting in custom subclasses",
      "To override NumPy operator behavior",
      "To ensure dtype consistency when casting arrays"
    ]
  },
  {
    "q": "Which NumPy function generates a view with a custom memory stride?",
    "c": null,
    "o": [
      "np.lib.stride_tricks.as_strided()",
      "np.custom_stride()",
      "np.reshape_with_stride()",
      "np.memory_view()"
    ]
  },
  {
    "q": "Which NumPy type efficiently stores boolean masks?",
    "c": null,
    "o": [
      "np.bool_",
      "np.int8",
      "np.uint1",
      "np.bitarray"
    ]
  },
  {
    "q": "What will happen if you try to write to a NumPy array created from a Python bytes object?",
    "c": null,
    "o": [
      "Raises ValueError: assignment destination is read-only",
      "Converts to writable array automatically",
      "Writes are silently ignored",
      "Only the shape attribute is changed"
    ]
  },
  {
    "q": "What is the primary purpose of NumPy's `MaskedArray`?",
    "c": null,
    "o": [
      "To handle missing or invalid entries in numerical arrays",
      "To mask specific dimensions from broadcasting",
      "To apply bitwise masking for security",
      "To perform lazy loading of array elements"
    ]
  },
  {
    "q": "Which of the following is a valid way to create a structured array with named fields?",
    "c": null,
    "o": [
      "np.array([(1, 2.0)], dtype=[('x', 'i4'), ('y', 'f4')])",
      "np.structured_array([1, 2], fields=['x', 'y'])",
      "np.named_array([1, 2], names=['x', 'y'])",
      "np.dtype_array([('x', 1), ('y', 2.0)])"
    ]
  },
  {
    "q": "What is the result of comparing `np.nan == np.nan`?",
    "c": null,
    "o": [
      "False",
      "True",
      "Raises a ValueError",
      "Depends on dtype"
    ]
  },
  {
    "q": "Which NumPy method ensures that an array is stored in aligned memory for SIMD?",
    "c": null,
    "o": [
      "np.require(array, requirements=['ALIGNED'])",
      "np.align(array)",
      "np.optimize(array)",
      "np.ensure_alignment(array)"
    ]
  },
  {
    "q": "How can you set a specific field in all elements of a structured array?",
    "c": null,
    "o": [
      "arr['field_name'] = new_value",
      "arr.field_name[:] = new_value",
      "arr.set_field('field_name', new_value)",
      "arr[:].field_name = new_value"
    ]
  },
  {
    "q": "Which NumPy dtype allows a single array to store both integers and floats per row?",
    "c": null,
    "o": [
      "Structured dtype",
      "Mixed dtype",
      "Hybrid dtype",
      "Polytype array"
    ]
  },
  {
    "q": "Which function is best to create arrays for very large datasets with minimal initialization overhead?",
    "c": null,
    "o": [
      "np.empty()",
      "np.zeros()",
      "np.full()",
      "np.default_array()"
    ]
  },
  {
    "q": "What does `np.isnat()` check for?",
    "c": null,
    "o": [
      "Checks for 'Not a Time' values in datetime arrays",
      "Checks for zero-length strings",
      "Checks for uninitialized fields in structured arrays",
      "Checks for non-aligned memory blocks"
    ]
  },
  {
    "q": "What will be the shape of the result of `np.ones((3,1)) + np.ones((1,4))`?",
    "c": null,
    "o": [
      "(3, 4)",
      "(1, 1)",
      "(4, 3)",
      "BroadcastingError"
    ]
  },
  {
    "q": "Which of the following will return a view instead of a copy?",
    "c": null,
    "o": [
      "arr[::2]",
      "arr[[0, 2]]",
      "arr[arr > 5]",
      "arr + 1"
    ]
  },
  {
    "q": "Which NumPy flag determines if an array is stored in C-contiguous order?",
    "c": null,
    "o": [
      "arr.flags['C_CONTIGUOUS']",
      "arr.flags['ROW_MAJOR']",
      "arr.layout == 'C'",
      "arr.memory == 'C_CONTIGUOUS'"
    ]
  },
  {
    "q": "What is the difference between `np.flat` and `np.ravel()`?",
    "c": null,
    "o": [
      "`flat` returns an iterator, `ravel()` returns an array view",
      "`flat` returns a copy, `ravel()` returns an iterator",
      "Both return views",
      "`flat` and `ravel()` are aliases"
    ]
  },
  {
    "q": "Which of these is *not* a valid use of NumPy’s advanced indexing?",
    "c": null,
    "o": [
      "arr[[0,1], [2,3]] = 10",
      "arr[[0,1]][[1,0]]",
      "arr[0:2][[0,1]]",
      "arr[[True, False]]"
    ]
  },
  {
    "q": "How do you ensure reproducibility in NumPy’s random number generation?",
    "c": null,
    "o": [
      "Use `np.random.default_rng(seed)`",
      "Set `np.random.reproducible=True`",
      "Call `np.seed(seed)`",
      "Disable stochastic mode"
    ]
  },
  {
    "q": "What does the `np.datetime64('2024-01') + np.timedelta64(2, 'M')` return?",
    "c": null,
    "o": [
      "A date two calendar months after January 2024",
      "Adds 60 days",
      "Raises TypeError",
      "Depends on leap year"
    ]
  },
  {
    "q": "Which of these NumPy objects can be used to broadcast multiple arrays together?",
    "c": null,
    "o": [
      "np.broadcast()",
      "np.zip()",
      "np.stack()",
      "np.join()"
    ]
  },
  {
    "q": "Which NumPy function allows you to view the same data with a different shape without copying it?",
    "c": null,
    "o": [
      "np.reshape",
      "np.resize",
      "np.copy",
      "np.clone"
    ]
  },
  {
    "q": "What does the `np.lib.stride_tricks.as_strided()` function primarily help with?",
    "c": null,
    "o": [
      "Efficient windowed views of arrays",
      "Expanding array memory",
      "Masking arrays",
      "Faster broadcasting"
    ]
  },
  {
    "q": "Which NumPy feature allows you to create arrays with named fields like records?",
    "c": null,
    "o": [
      "Structured arrays",
      "Masked arrays",
      "Object arrays",
      "Type arrays"
    ]
  },
  {
    "q": "What is the use of `np.ma.masked_array`?",
    "c": null,
    "o": [
      "To hide invalid or missing data",
      "To create readonly arrays",
      "To enforce data types",
      "To reduce memory usage"
    ]
  },
  {
    "q": "What does `arr.astype(np.float32, copy=False)` do?",
    "c": null,
    "o": [
      "Converts dtype to float32 if needed without copying if not necessary",
      "Forces float32 conversion with guaranteed copy",
      "Does nothing",
      "Returns a masked array"
    ]
  },
  {
    "q": "Which method gives a flattened 1D view without copying if possible?",
    "c": null,
    "o": [
      "ravel()",
      "flatten()",
      "reshape(-1)",
      "flat()"
    ]
  },
  {
    "q": "What is a valid way to reverse an array `a`?",
    "c": null,
    "o": [
      "a[::-1]",
      "a.reverse()",
      "np.reverse(a)",
      "a[::-1, ::-1]"
    ]
  },
  {
    "q": "Which dtype can store Python objects inside a NumPy array?",
    "c": null,
    "o": [
      "dtype=object",
      "dtype=any",
      "dtype=str",
      "dtype=auto"
    ]
  },
  {
    "q": "What is the result shape of broadcasting an array of shape (3,1) with one of shape (1,4)?",
    "c": null,
    "o": [
      "(3, 4)",
      "(3, 1, 4)",
      "(4, 3)",
      "(3,)"
    ]
  },
  {
    "q": "Which flag tells whether an array is stored in a single, C-contiguous segment of memory?",
    "c": null,
    "o": [
      "a.flags['C_CONTIGUOUS']",
      "a.is_contiguous",
      "a.flags['OWNDATA']",
      "a.contiguous"
    ]
  },
  {
    "q": "What does `np.einsum('ij,jk->ik', A, B)` compute?",
    "c": null,
    "o": [
      "Matrix multiplication of A and B",
      "Element-wise multiplication",
      "Transpose of A",
      "Sum of A and B"
    ]
  },
  {
    "q": "Which NumPy function checks if two arrays share the same memory block?",
    "c": null,
    "o": [
      "np.shares_memory(a, b)",
      "np.same_memory(a, b)",
      "np.equal_memory(a, b)",
      "np.overlaps(a, b)"
    ]
  },
  {
    "q": "What happens when you compare `np.datetime64('2023-01') < np.datetime64('2023-01-01')`?",
    "c": null,
    "o": [
      "Raises TypeError due to mismatched units",
      "Returns True",
      "Returns False",
      "Raises ValueError"
    ]
  },
  {
    "q": "How do you specify a NumPy array that holds dates with only year and month precision?",
    "c": null,
    "o": [
      "np.array(['2023-08'], dtype='datetime64[M]')",
      "np.array(['2023-08'], dtype='datetime64[D]')",
      "np.array(['2023-08'], dtype='date64')",
      "np.array(['2023-08'], dtype='datetime64[Y]')"
    ]
  },
  {
    "q": "What will `np.broadcast_to([1,2,3], (3,3))` return?",
    "c": null,
    "o": [
      "A 3x3 array with each row as [1,2,3]",
      "A 3x3 identity matrix",
      "A diagonal array",
      "An error"
    ]
  },
  {
    "q": "Which attribute determines whether a NumPy array owns its data?",
    "c": null,
    "o": [
      "a.flags['OWNDATA']",
      "a.is_owner",
      "a.base",
      "a.data_source"
    ]
  },
  {
    "q": "What is the result of `np.empty((2, 2))`?",
    "c": null,
    "o": [
      "Uninitialized array with arbitrary values",
      "Array of zeros",
      "Array of NaNs",
      "Array filled with ones"
    ]
  },
  {
    "q": "Which method is recommended for element-wise conditional operations in NumPy?",
    "c": null,
    "o": [
      "np.where",
      "np.cond",
      "np.choose",
      "np.ifelse"
    ]
  },
  {
    "q": "What does the following NumPy code output?",
    "c": "import numpy as np\narr = np.array([[1, 2], [3, 4]])\nprint(arr[[0, 1], [1, 0]])",
    "o": [
      "array([2, 3])",
      "array([1, 4])",
      "array([2, 1])",
      "array([[2, 1]])"
    ]
  },
  {
    "q": "Which of the following best describes a structured array in NumPy?",
    "c": null,
    "o": [
      "An array with fields of different datatypes",
      "A reshaped version of a regular ndarray",
      "A subclass of ndarray with additional metadata",
      "An array used in SciPy sparse matrix operations"
    ]
  },
  {
    "q": "What does the `.flags` attribute in a NumPy array provide?",
    "c": null,
    "o": [
      "Information about the memory layout of the array",
      "Access to global configuration settings",
      "Whether the array has masked elements",
      "The default dtype of the array"
    ]
  },
  {
    "q": "Which memory order ensures C-style row-major layout in NumPy?",
    "c": null,
    "o": [
      "'C'",
      "'F'",
      "'A'",
      "'K'"
    ]
  },
  {
    "q": "How does NumPy internally handle broadcasting in terms of memory usage?",
    "c": null,
    "o": [
      "It does not allocate extra memory but creates views with adjusted strides",
      "It duplicates the data along new dimensions",
      "It uses masked arrays to optimize performance",
      "It compresses data using run-length encoding"
    ]
  },
  {
    "q": "Which NumPy function allows creation of a masked array from a regular array and a mask?",
    "c": null,
    "o": [
      "np.ma.array()",
      "np.mask()",
      "np.ma.masked()",
      "np.create_masked_array()"
    ]
  },
  {
    "q": "Which of the following is a benefit of using Cython with NumPy arrays?",
    "c": null,
    "o": [
      "Significant speedups by avoiding Python overhead in loops",
      "Automatic parallel execution of all NumPy code",
      "Conversion of NumPy arrays into pandas Series",
      "Direct GPU acceleration"
    ]
  },
  {
    "q": "What is the result of the following type casting in NumPy?",
    "c": "import numpy as np\narr = np.array([1.2, 3.4, 5.6])\nprint(arr.astype(np.int32))",
    "o": [
      "array([1, 3, 5])",
      "array([1.0, 3.0, 5.0])",
      "array([2, 4, 6])",
      "array([1, 2, 3])"
    ]
  },
  {
    "q": "Which of the following statements is true about `np.copy()`?",
    "c": null,
    "o": [
      "It always returns a new array in memory",
      "It returns a view unless forced",
      "It modifies the original array in-place",
      "It creates a reference with updated dtype"
    ]
  },
  {
    "q": "How can you check if two NumPy arrays share the same memory?",
    "c": null,
    "o": [
      "Use np.shares_memory(array1, array2)",
      "Use array1 is array2",
      "Compare their base attributes",
      "Check dtype and shape equality"
    ]
  },
  {
    "q": "Which function in NumPy checks if two arrays share the same memory block?",
    "c": null,
    "o": [
      "np.may_share_memory",
      "np.same_memory",
      "np.is_shared",
      "np.equal_memory"
    ]
  },
  {
    "q": "What is the role of the `out` parameter in many NumPy universal functions?",
    "c": null,
    "o": [
      "It allows writing the output to a preallocated array to avoid extra memory allocation.",
      "It displays the result to the console.",
      "It converts the output to a list.",
      "It specifies which array to overwrite."
    ]
  },
  {
    "q": "Which NumPy function would you use to return the indices that would sort an array?",
    "c": null,
    "o": [
      "np.argsort",
      "np.sort",
      "np.order",
      "np.sorted_index"
    ]
  },
  {
    "q": "Which of the following NumPy functions computes the cumulative product of array elements over a given axis?",
    "c": null,
    "o": [
      "np.cumprod",
      "np.prod",
      "np.cumsum",
      "np.accumulate"
    ]
  },
  {
    "q": "Which of the following correctly describes the effect of setting `np.seterr(all='raise')`?",
    "c": null,
    "o": [
      "Raises an error when any floating-point exception occurs.",
      "Ignores all floating-point errors.",
      "Automatically fixes all floating-point exceptions.",
      "Replaces NaNs with zeros automatically."
    ]
  },
  {
    "q": "In NumPy, what is the effect of calling `np.linalg.matrix_power(A, -1)`?",
    "c": null,
    "o": [
      "It computes the inverse of matrix A.",
      "It raises each element of A to power -1.",
      "It returns an identity matrix of the same shape.",
      "It raises an error because the exponent is negative."
    ]
  },
  {
    "q": "What is the purpose of `np.lib.stride_tricks.as_strided()`?",
    "c": null,
    "o": [
      "To create a view on an array with a different shape and strides without copying data.",
      "To permute the array dimensions randomly.",
      "To make a memory-safe deep copy of the array.",
      "To create a padded version of the array."
    ]
  },
  {
    "q": "How can you combine multiple conditions in a NumPy array efficiently without using Python's `and`, `or`?",
    "c": "\narr = np.array([1, 2, 3, 4, 5])\nmask = (arr > 2) & (arr < 5)\n",
    "o": [
      "Using `&` and `|` with parentheses around each condition.",
      "Using `and` and `or` directly between conditions.",
      "Using `np.and_` without parentheses.",
      "Using `&&` and `||` operators."
    ]
  },
  {
    "q": "Which method efficiently converts a NumPy array into a memory-mapped file?",
    "c": null,
    "o": [
      "np.memmap",
      "np.savez",
      "np.write_array",
      "np.dump"
    ]
  },
  {
    "q": "Which NumPy function provides the total bytes consumed by the elements of an array?",
    "c": null,
    "o": [
      "nbytes",
      "itemsize",
      "size",
      "memory_size"
    ]
  },
  {
    "q": "Which function can help determine if two NumPy arrays share memory?",
    "c": null,
    "o": [
      "np.may_share_memory",
      "np.shares_memory",
      "np.memory_overlap",
      "np.same_buffer"
    ]
  },
  {
    "q": "What is the purpose of `np.broadcast_to()`?",
    "c": null,
    "o": [
      "It explicitly broadcasts an array to a given shape without copying data.",
      "It reshapes an array and fills new elements with zeros.",
      "It creates a deep copy of an array for safe broadcasting.",
      "It reverses the effects of broadcasting."
    ]
  },
  {
    "q": "What is a key feature of structured arrays in NumPy?",
    "c": null,
    "o": [
      "They allow heterogeneous data types within a single array.",
      "They are faster than regular arrays for numerical computation.",
      "They automatically align data for broadcasting.",
      "They support only float and integer data types."
    ]
  },
  {
    "q": "How do you define a structured NumPy array with fields `name` (string) and `score` (float)?",
    "c": "np.array([('Alice', 9.5)], dtype=[('name', 'U10'), ('score', 'f4')])",
    "o": [
      "A structured array with two fields: a Unicode string and a 32-bit float",
      "A regular 2D array of strings and floats",
      "An array of tuples stored as strings",
      "A multi-indexed array with names and scores"
    ]
  },
  {
    "q": "Which NumPy type can handle invalid or missing data elements?",
    "c": null,
    "o": [
      "Masked arrays",
      "Memory-mapped arrays",
      "Universal functions",
      "Structured arrays"
    ]
  },
  {
    "q": "Which of the following statements about `np.vectorize` is TRUE?",
    "c": null,
    "o": [
      "It provides a Python-level loop and is not truly vectorized.",
      "It compiles the function into native code for high performance.",
      "It improves performance significantly using SIMD.",
      "It only works with functions returning scalar floats."
    ]
  },
  {
    "q": "What is a primary advantage of memory-mapped NumPy arrays?",
    "c": null,
    "o": [
      "They allow manipulation of arrays larger than RAM by mapping disk files.",
      "They reduce the need for broadcasting in arithmetic operations.",
      "They enable masking and handling of missing values.",
      "They make arrays immutable and thread-safe."
    ]
  },
  {
    "q": "Which NumPy function converts a Pandas Series to a NumPy array without copying data?",
    "c": null,
    "o": [
      "series.to_numpy(copy=False)",
      "series.values.copy()",
      "np.asarray(series.copy())",
      "np.array(series, copy=True)"
    ]
  },
  {
    "q": "In NumPy, what does the `np.lib.stride_tricks.as_strided` function allow?",
    "c": null,
    "o": [
      "Creating views with a custom stride pattern, often for advanced windowing.",
      "Copying arrays with strides to new memory blocks.",
      "Automatically reshaping arrays for broadcasting.",
      "Padding arrays with constant values."
    ]
  },
  {
    "q": "What happens if you slice a NumPy array and then modify the slice?",
    "c": null,
    "o": [
      "The original array is modified as well due to shared memory.",
      "Only the slice is modified; the original remains unchanged.",
      "It raises a ValueError unless `copy()` is used.",
      "The slice is independent unless `view()` is called."
    ]
  },
  {
    "q": "Which attribute of a NumPy `ufunc` tells how many input arguments it expects?",
    "c": null,
    "o": [
      "nin",
      "nargs",
      "ninputs",
      "nparameters"
    ]
  },
  {
    "q": "What is the primary purpose of `np.nditer()`?",
    "c": null,
    "o": [
      "Efficient multi-dimensional iteration with control over order and buffering",
      "Apply universal functions on multiple arrays",
      "Reshape arrays with memory optimization",
      "Convert structured arrays to flat arrays"
    ]
  },
  {
    "q": "Which flag in `np.nditer()` allows modifying the values during iteration?",
    "c": null,
    "o": [
      "'readwrite'",
      "'buffered'",
      "'external_loop'",
      "'c_index'"
    ]
  },
  {
    "q": "Which slicing operation returns a **view**, not a copy?",
    "c": null,
    "o": [
      "a[1:5]",
      "a[[1,2,3]]",
      "a[a > 0]",
      "a.reshape(-1)"
    ]
  },
  {
    "q": "Which of these methods ensures that two arrays are stored **contiguously in memory**?",
    "c": null,
    "o": [
      "np.ascontiguousarray",
      "np.copy",
      "np.ravel",
      "np.flatten"
    ]
  },
  {
    "q": "In broadcasting, what shape will result from combining arrays of shape (1, 5) and (3, 1)?",
    "c": null,
    "o": [
      "(3, 5)",
      "(1, 1)",
      "(3, 1, 5)",
      "(3, 3)"
    ]
  },
  {
    "q": "Which of these uses **memory views** without duplicating data?",
    "c": null,
    "o": [
      "a.T",
      "a.flatten()",
      "np.copy(a)",
      "a.tolist()"
    ]
  },
  {
    "q": "Which method gives the **same memory layout** as C arrays?",
    "c": null,
    "o": [
      "order='C'",
      "order='F'",
      "order='A'",
      "order='K'"
    ]
  },
  {
    "q": "How can you create a **non-contiguous view** of an array?",
    "c": null,
    "o": [
      "Using slicing with steps (e.g., a[::2])",
      "Using np.copy()",
      "Using a.tolist()",
      "Using np.array_split()"
    ]
  },
  {
    "q": "Which keyword in `np.einsum` allows optimization for speed and memory?",
    "c": null,
    "o": [
      "optimize=True",
      "fast=True",
      "use_blas=True",
      "efficient=True"
    ]
  },
  {
    "q": "What is the purpose of a structured array in NumPy?",
    "c": null,
    "o": [
      "To store heterogeneous data types in a single ndarray",
      "To compress memory layout using sparse representations",
      "To accelerate matrix multiplications",
      "To store masked arrays efficiently"
    ]
  },
  {
    "q": "What is the result of broadcasting arrays of shape (3, 1) and (3,)?",
    "c": null,
    "o": [
      "ValueError: shapes not aligned for broadcasting",
      "(3, 3)",
      "(3, 1)",
      "(1, 3)"
    ]
  },
  {
    "q": "Which NumPy function creates a masked array from an ndarray?",
    "c": null,
    "o": [
      "np.ma.masked_array",
      "np.create_mask",
      "np.masked_view",
      "np.ma.array_mask"
    ]
  },
  {
    "q": "What is the output shape of `np.outer(np.ones(2), np.ones(3))`?",
    "c": "print(np.outer(np.ones(2), np.ones(3)).shape)",
    "o": [
      "(2, 3)",
      "(3, 2)",
      "(2, 2)",
      "(3, 3)"
    ]
  },
  {
    "q": "Which NumPy method is used to check if two arrays **share memory**?",
    "c": null,
    "o": [
      "np.shares_memory",
      "np.memory_shared",
      "np.is_view",
      "np.same_storage"
    ]
  },
  {
    "q": "What will `np.broadcast_to(np.array([1, 2]), (3, 2))` do?",
    "c": null,
    "o": [
      "Broadcast the array to shape (3, 2) without copying data",
      "Copy and expand the array to shape (3, 2)",
      "Fail due to incompatible shape",
      "Transpose the array before broadcasting"
    ]
  },
  {
    "q": "Which method flattens an array but always returns a **copy**?",
    "c": null,
    "o": [
      "flatten()",
      "ravel()",
      "reshape(-1)",
      "view()"
    ]
  },
  {
    "q": "Which statement about `np.memmap` is true?",
    "c": null,
    "o": [
      "It enables memory-mapped file I/O for large arrays",
      "It compresses arrays into byte arrays",
      "It encrypts arrays on disk",
      "It copies arrays directly into cache memory"
    ]
  },
  {
    "q": "Which function can create a new dtype composed of named fields?",
    "c": null,
    "o": [
      "np.dtype",
      "np.structured_type",
      "np.make_struct",
      "np.set_dtype"
    ]
  },
  {
    "q": "What does `np.fromfunction(lambda i, j: i * j, (3, 3))` return?",
    "c": "np.fromfunction(lambda i, j: i * j, (3, 3), dtype=int)",
    "o": [
      "A 3x3 multiplication table using indices",
      "A 3x3 identity matrix",
      "An array of zeros",
      "An array filled with random values"
    ]
  },
  {
    "q": "Which flag in NumPy determines whether an array is stored in row-major (C-style) order?",
    "c": null,
    "o": [
      "a.flags['C_CONTIGUOUS']",
      "a.flags['FORTRAN']",
      "a.order",
      "a.is_row_major"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "a = np.array([1, 2, 3], dtype='>i4')\na.byteswap(inplace=True)\nprint(a[0])",
    "o": [
      "50331648",
      "1",
      "Error due to byte order",
      "0"
    ]
  },
  {
    "q": "What will `np.copy(a)` do when `a` is a NumPy array?",
    "c": null,
    "o": [
      "Create a deep copy of the array",
      "Return a view of the array",
      "Copy only structure, not data",
      "Change the memory order to Fortran"
    ]
  },
  {
    "q": "Which of the following will return a view, not a copy?",
    "c": null,
    "o": [
      "a[::2]",
      "a.copy()",
      "a.reshape(-1).copy()",
      "np.array(a)"
    ]
  },
  {
    "q": "What is the main benefit of specifying `order='F'` when creating a NumPy array?",
    "c": null,
    "o": [
      "Optimizes operations for column-major storage, often used in Fortran",
      "Ensures zero-copy slicing",
      "Compresses the array",
      "Enables GPU acceleration"
    ]
  },
  {
    "q": "What does `np.lib.stride_tricks.as_strided` allow you to do?",
    "c": null,
    "o": [
      "Manipulate array strides to create advanced views",
      "Pad arrays with strides",
      "Encrypt arrays using stride operations",
      "Align array elements in memory"
    ]
  },
  {
    "q": "What is the dtype of this structured array?",
    "c": "a = np.array([(1, 2.0)], dtype=[('x', 'i4'), ('y', 'f4')])\nprint(a.dtype)",
    "o": [
      "[('x', '<i4'), ('y', '<f4')]",
      "[int, float]",
      "[('x', int), ('y', float)]",
      "[('x', 'f4'), ('y', 'i4')]"
    ]
  },
  {
    "q": "What does `np.result_type(3, np.array([1.0]))` return?",
    "c": null,
    "o": [
      "dtype('float64')",
      "dtype('int32')",
      "dtype('object')",
      "dtype('complex128')"
    ]
  },
  {
    "q": "What happens when you multiply a (3,1) array with a (1,3) array in NumPy?",
    "c": null,
    "o": [
      "A (3,3) array is created using broadcasting rules",
      "An error is thrown",
      "A scalar is returned",
      "A (1,1) array is returned"
    ]
  },
  {
    "q": "Which attribute stores the number of bytes each element of a NumPy array consumes?",
    "c": null,
    "o": [
      "itemsize",
      "nbytes",
      "dtype.size",
      "memory"
    ]
  },
  {
    "q": "What does the `aligned` keyword in a NumPy dtype ensure?",
    "c": null,
    "o": [
      "Each field is stored with proper memory alignment as per C structs",
      "All fields are stored in ascending memory order",
      "All fields must be the same type",
      "It ensures byte swapping is disabled"
    ]
  },
  {
    "q": "Which NumPy function allows you to safely loop over multiple arrays with broadcasting?",
    "c": null,
    "o": [
      "np.nditer",
      "np.vectorize",
      "np.broadcast_arrays",
      "np.broadcast_to"
    ]
  },
  {
    "q": "What does `np.ma.masked_array([1, 2, 3], mask=[0, 1, 0])` return?",
    "c": null,
    "o": [
      "[1, --, 3]",
      "[1, 2, 3]",
      "[--, 2, --]",
      "Raises a ValueError"
    ]
  },
  {
    "q": "Which of the following will NOT result in a copy of the array?",
    "c": null,
    "o": [
      "a.T (transpose)",
      "a.flatten()",
      "a.copy()",
      "np.array(a)"
    ]
  },
  {
    "q": "What is the purpose of `np.seterr(divide='ignore')`?",
    "c": null,
    "o": [
      "Suppress warnings on division by zero",
      "Disable runtime errors on all math operations",
      "Prevent array overflow",
      "Ignore shape mismatch in broadcasting"
    ]
  },
  {
    "q": "If `a.shape = (2, 3)` and `b.shape = (3,)`, what will `a + b` result in?",
    "c": null,
    "o": [
      "Broadcasting will result in shape (2, 3)",
      "Raises ValueError: shapes not aligned",
      "Results in shape (3, 2)",
      "Performs matrix multiplication"
    ]
  },
  {
    "q": "What is `np.broadcast_shapes((3, 1), (1, 4))`?",
    "c": null,
    "o": [
      "(3, 4)",
      "(3, 1, 4)",
      "(4, 3)",
      "Raises an error"
    ]
  },
  {
    "q": "How many bytes does the following array consume: `a = np.ones((4, 4), dtype=np.complex128)`?",
    "c": null,
    "o": [
      "512",
      "128",
      "256",
      "64"
    ]
  },
  {
    "q": "Which is true about `np.isfortran(array)`?",
    "c": null,
    "o": [
      "Returns True if array is stored in column-major order",
      "Returns True if dtype is Fortran-compatible",
      "Returns False for all multidimensional arrays",
      "Raises TypeError for 1D arrays"
    ]
  },
  {
    "q": "Which function can be used to test if a NumPy array is a view of another?",
    "c": null,
    "o": [
      "np.shares_memory",
      "np.array_equal",
      "np.is_view",
      "np.check_view"
    ]
  },
  {
    "q": "What does `np.lib.stride_tricks.as_strided` allow you to do?",
    "c": null,
    "o": [
      "Create a view with a custom shape and strides without copying data",
      "Pad an array to match a desired shape",
      "Randomly shuffle the strides of an array",
      "Transpose an array along arbitrary axes"
    ]
  },
  {
    "q": "If `a = np.array([[1, 2], [3, 4]])`, what is `a.strides` likely to return on a 64-bit system?",
    "c": null,
    "o": [
      "(16, 8)",
      "(8, 16)",
      "(2, 1)",
      "(1, 2)"
    ]
  },
  {
    "q": "Which of the following correctly handles NaNs when computing the mean?",
    "c": null,
    "o": [
      "np.nanmean(arr)",
      "np.mean(arr, nan_policy='omit')",
      "np.avg(arr, skipna=True)",
      "arr.mean(nan='ignore')"
    ]
  },
  {
    "q": "How can you define a structured dtype with an integer and a float field in NumPy?",
    "c": null,
    "o": [
      "np.dtype([('x', np.int32), ('y', np.float64)])",
      "{'x': int, 'y': float}",
      "np.dtype({'names':['x','y'], 'formats':['i4','f8']})",
      "Both 1 and 3"
    ]
  },
  {
    "q": "What is true about the `.base` attribute of a NumPy array?",
    "c": null,
    "o": [
      "It references the original object from which the array was derived if it's a view",
      "It always points to `None`",
      "It tells whether an array is sorted",
      "It returns the type of array elements"
    ]
  },
  {
    "q": "Which of the following is NOT a valid universal function (ufunc) in NumPy?",
    "c": null,
    "o": [
      "np.reduce_add",
      "np.add",
      "np.logical_and",
      "np.sqrt"
    ]
  },
  {
    "q": "What does `np.may_share_memory(a, b)` do?",
    "c": null,
    "o": [
      "Checks if two arrays might share memory (including overlapping views)",
      "Guarantees shared memory detection",
      "Checks if arrays are stored in the same cache line",
      "Only works for contiguous arrays"
    ]
  },
  {
    "q": "Which technique improves performance by minimizing memory allocations in repeated operations?",
    "c": null,
    "o": [
      "Using out= parameter in ufuncs",
      "Enabling copy mode on every operation",
      "Always converting arrays to float64",
      "Avoiding slicing and broadcasting"
    ]
  },
  {
    "q": "What is the result of `np.set_printoptions(precision=3)`?",
    "c": null,
    "o": [
      "Limits the number of digits shown after the decimal to 3 when printing",
      "Restricts array size to 3 elements",
      "Rounds array values to nearest 3",
      "Forces all floats to be 3.0"
    ]
  },
  {
    "q": "Which of the following describes NumPy broadcasting rules?",
    "c": null,
    "o": [
      "Trailing dimensions are compared from right to left, and are compatible when equal or one of them is 1",
      "All dimensions must be exactly the same",
      "Only 1D arrays can be broadcasted",
      "Dimensions must increase linearly"
    ]
  },
  {
    "q": "What is the effect of `np.ravel(a, order='F')`?",
    "c": null,
    "o": [
      "Flattens the array in column-major (Fortran-style) order",
      "Returns a transposed copy of the array",
      "Sorts the array in-place",
      "Creates a view with reversed strides"
    ]
  },
  {
    "q": "Which of the following methods guarantees a copy of a NumPy array?",
    "c": null,
    "o": [
      "np.copy(arr)",
      "arr.flatten()",
      "arr[:]",
      "np.asarray(arr)"
    ]
  },
  {
    "q": "Which is true about masked arrays in NumPy (`np.ma`)?",
    "c": null,
    "o": [
      "They allow you to hide specific elements without modifying the data",
      "They replace NaNs automatically",
      "They only support integer data types",
      "They are always contiguous in memory"
    ]
  },
  {
    "q": "What happens when you slice a NumPy array?",
    "c": null,
    "o": [
      "A view is returned, sharing the same data",
      "A deep copy is always created",
      "Data is reshuffled",
      "Memory is duplicated for safety"
    ]
  },
  {
    "q": "What does `arr.T` do?",
    "c": null,
    "o": [
      "Returns a transposed view of `arr`",
      "Sorts `arr` by rows",
      "Creates a tensor from `arr`",
      "Creates a time-based index"
    ]
  },
  {
    "q": "What will be the shape of broadcasting result for arrays with shapes (3,1,4) and (1,5,1)?",
    "c": null,
    "o": [
      "(3, 5, 4)",
      "(3, 1, 1)",
      "(1, 5, 4)",
      "Broadcasting error"
    ]
  },
  {
    "q": "Which of the following is **not** a correct way to select the last column of a 2D array `arr`?",
    "c": null,
    "o": [
      "arr[:, -0]",
      "arr[:, -1]",
      "arr[:, arr.shape[1] - 1]",
      "arr[..., -1]"
    ]
  },
  {
    "q": "Which NumPy function can be used to force alignment and memory layout when defining a structured array?",
    "c": null,
    "o": [
      "np.dtype(..., align=True)",
      "np.array(..., force_align=True)",
      "np.structured_array(..., align=True)",
      "np.dtype(..., layout='aligned')"
    ]
  },
  {
    "q": "What is a key difference between `np.array_equal(a, b)` and `np.allclose(a, b)`?",
    "c": null,
    "o": [
      "`array_equal` requires exact equality; `allclose` allows for tolerance",
      "`allclose` checks shapes only",
      "`array_equal` compares only data types",
      "`allclose` ignores NaN values"
    ]
  },
  {
    "q": "What is the purpose of `np.indices((2,3))`?",
    "c": null,
    "o": [
      "Returns a grid of indices for a 2x3 array",
      "Creates a meshgrid of values",
      "Returns the flat index for each value",
      "Sorts the array along both axes"
    ]
  },
  {
    "q": "Which of the following will result in a singular matrix error in `np.linalg.inv()`?",
    "c": null,
    "o": [
      "A matrix with determinant 0",
      "A matrix with negative values",
      "Any non-square matrix",
      "A matrix containing NaNs"
    ]
  },
  {
    "q": "What is the result of `np.random.randint(0, 10, (2, 3, 1)) + np.arange(3)`?",
    "c": null,
    "o": [
      "Broadcasting error due to shape mismatch",
      "Shape (2, 3, 3)",
      "Shape (2, 3, 1)",
      "Shape (2, 3)"
    ]
  },
  {
    "q": "What does `np.einsum('ij,jk->ik', A, B)` compute?",
    "c": null,
    "o": [
      "Matrix multiplication equivalent to `A @ B`",
      "Element-wise multiplication",
      "Transpose of A then dot with B",
      "Kronecker product"
    ]
  },
  {
    "q": "Which function gives the eigenvalues of a square matrix in NumPy?",
    "c": null,
    "o": [
      "np.linalg.eigvals()",
      "np.linalg.inv()",
      "np.linalg.solve()",
      "np.linalg.svd()"
    ]
  },
  {
    "q": "Which attribute gives you the number of bytes consumed by one element in a NumPy array?",
    "c": null,
    "o": [
      "itemsize",
      "nbytes",
      "dtype.bytes",
      "element_size"
    ]
  },
  {
    "q": "What is true about `np.mgrid[0:3, 0:2]`?",
    "c": null,
    "o": [
      "Creates a meshgrid-like 2D grid of shape (2, 3, 2)",
      "Returns 2 separate arrays like `meshgrid`",
      "Works only on 1D ranges",
      "Is deprecated in favor of `np.meshgrid`"
    ]
  },
  {
    "q": "Which of the following ensures deterministic output from `np.random.seed()`?",
    "c": null,
    "o": [
      "It sets the state of the random number generator",
      "It returns a fixed list of integers",
      "It locks the global seed for all threads",
      "It creates a new RNG object every call"
    ]
  },
  {
    "q": "What does `np.broadcast_to([1,2,3], (3,3))` do?",
    "c": null,
    "o": [
      "Repeats the original 1D array into 3 rows",
      "Raises an error if the shape is not aligned",
      "Creates a 3D array of shape (3,3,3)",
      "Appends zeros to fit the shape"
    ]
  },
  {
    "q": "How does NumPy treat a negative stride, such as in `arr[::-1]`?",
    "c": null,
    "o": [
      "It reverses the array along the specified axis",
      "It trims off the first element",
      "It flips the dtype",
      "It returns only odd-indexed values"
    ]
  },
  {
    "q": "Which method in `np.linalg` can be used for solving overdetermined systems using least squares?",
    "c": null,
    "o": [
      "np.linalg.lstsq()",
      "np.linalg.solve()",
      "np.linalg.pinv()",
      "np.linalg.inv()"
    ]
  },
  {
    "q": "What is the result of `np.char.add(['Hello', 'Hi'], ['World', 'There'])`?",
    "c": null,
    "o": [
      "['HelloWorld', 'HiThere']",
      "['Hello World', 'Hi There']",
      "['Hello', 'Hi']",
      "Raises TypeError"
    ]
  },
  {
    "q": "In NumPy, what does `arr.flags['C_CONTIGUOUS']` check for?",
    "c": null,
    "o": [
      "If the array is stored in row-major (C-style) order",
      "If the array is stored in column-major (Fortran-style) order",
      "If the array contains contiguous memory block regardless of order",
      "If array is sorted"
    ]
  },
  {
    "q": "Which function returns the memory offset between elements of a NumPy array?",
    "c": null,
    "o": [
      "arr.strides",
      "arr.shape",
      "arr.itemsize",
      "arr.nbytes"
    ]
  },
  {
    "q": "What is the purpose of `np.ma.masked_array()`?",
    "c": null,
    "o": [
      "To allow arrays with missing or invalid entries",
      "To create multi-dimensional masks",
      "To apply boolean indexing",
      "To transpose masked arrays"
    ]
  },
  {
    "q": "What is a key feature of a structured NumPy array?",
    "c": null,
    "o": [
      "Each element can be a record with multiple fields of different data types",
      "It stores only integer values efficiently",
      "It is optimized for matrix multiplication",
      "It automatically aligns all fields"
    ]
  },
  {
    "q": "Which of the following can be used to convert a flat index to coordinates in a multi-dimensional array?",
    "c": null,
    "o": [
      "np.unravel_index()",
      "np.ravel()",
      "np.reshape()",
      "np.flatnonzero()"
    ]
  },
  {
    "q": "What will `np.squeeze(np.zeros((1,3,1,4)))` return?",
    "c": null,
    "o": [
      "An array of shape (3,4)",
      "An array of shape (1,3,1,4)",
      "An array of shape (1,3,4)",
      "An array of shape (3,1,4)"
    ]
  },
  {
    "q": "Which of the following uses `np.lib.stride_tricks.as_strided()` properly?",
    "c": null,
    "o": [
      "To create a view of overlapping windows over an array",
      "To add padding to an array",
      "To transpose without copy",
      "To convert a mask into a view"
    ]
  },
  {
    "q": "What is returned by `np.fromiter((x*x for x in range(5)), dtype=int)`?",
    "c": null,
    "o": [
      "[0 1 4 9 16]",
      "[1 2 3 4 5]",
      "[0 1 2 3 4]",
      "[0. 1. 4. 9. 16.]"
    ]
  },
  {
    "q": "Which statement about `np.reshape()` and `np.resize()` is true?",
    "c": null,
    "o": [
      "`reshape()` never changes data, `resize()` can pad or trim data",
      "`resize()` is faster than `reshape()`",
      "`reshape()` always creates a copy",
      "`resize()` returns a view"
    ]
  },
  {
    "q": "What will be the shape of the result of `np.broadcast(np.array([1, 2, 3]), np.array([[1], [2], [3]])).shape`?",
    "c": null,
    "o": [
      "(3, 3)",
      "(3, 1)",
      "(1, 3)",
      "(3,)"
    ]
  },
  {
    "q": "Which NumPy function helps to define a custom scalar type with multiple fields?",
    "c": null,
    "o": [
      "np.dtype()",
      "np.record()",
      "np.type()",
      "np.typedef()"
    ]
  },
  {
    "q": "In NumPy, what is the output of `np.isclose([1.0, 2.0], [1.0, 2.0000001])`?",
    "c": null,
    "o": [
      "[ True  True]",
      "[ True False]",
      "[ False False]",
      "[ False  True]"
    ]
  },
  {
    "q": "Which of the following will return a memory view, not a copy?",
    "c": null,
    "o": [
      "arr[::2]",
      "arr.flatten()",
      "arr.copy()",
      "np.concatenate([arr])"
    ]
  },
  {
    "q": "How can you compute the outer product of two vectors `a` and `b` in NumPy?",
    "c": null,
    "o": [
      "np.outer(a, b)",
      "np.dot(a, b)",
      "np.cross(a, b)",
      "np.multiply(a, b)"
    ]
  },
  {
    "q": "What will `np.array([np.nan, 1, 2]) == np.nan` return?",
    "c": null,
    "o": [
      "[False False False]",
      "[ True False False]",
      "[nan False False]",
      "Error"
    ]
  },
  {
    "q": "Which NumPy function returns the indices of the upper triangle of an array?",
    "c": null,
    "o": [
      "np.triu_indices()",
      "np.upper_triangle()",
      "np.triangle_upper()",
      "np.diag_indices()"
    ]
  },
  {
    "q": "How does `np.vectorize()` work internally?",
    "c": null,
    "o": [
      "Applies a Python loop under the hood",
      "Compiles the function to C",
      "Uses true SIMD parallelism",
      "Runs with GPU acceleration"
    ]
  },
  {
    "q": "What does `np.seterr(all='ignore')` do?",
    "c": null,
    "o": [
      "Suppresses warnings for floating-point errors",
      "Ignores all NumPy function calls",
      "Forces all errors to raise exceptions",
      "Disables broadcasting"
    ]
  },
  {
    "q": "What does `np.take(arr, [0, 2, 4])` do?",
    "c": null,
    "o": [
      "Selects elements at indices 0, 2, and 4",
      "Deletes elements 0, 2, and 4",
      "Reverses the array",
      "Slices the array from 0 to 4"
    ]
  },
  {
    "q": "What does the `out` parameter in many NumPy ufuncs do?",
    "c": null,
    "o": [
      "Stores the result in the provided array without allocating new memory",
      "Outputs the function logs to a file",
      "Returns the output as a generator",
      "Forces the function to return a tuple"
    ]
  },
  {
    "q": "Which NumPy attribute checks whether an array is stored in row-major (C-style) order?",
    "c": null,
    "o": [
      "arr.flags['C_CONTIGUOUS']",
      "arr.order == 'C'",
      "arr.layout == 'row'",
      "arr.c_order"
    ]
  },
  {
    "q": "What is a potential consequence of chaining NumPy operations like `a + b + c` instead of using `np.add` with `out=`?",
    "c": null,
    "o": [
      "It may create temporary arrays and increase memory usage",
      "It runs in-place and may overwrite inputs",
      "It changes array shape unexpectedly",
      "It causes type casting errors"
    ]
  },
  {
    "q": "Which of the following can define a structured array in NumPy?",
    "c": null,
    "o": [
      "np.array([(1, 2.0)], dtype=[('x', 'i4'), ('y', 'f4')])",
      "np.array([1, 2], dtype='struc')",
      "np.array({'x': 1, 'y': 2.0})",
      "np.structured_array([(1,2)])"
    ]
  },
  {
    "q": "What does `np.random.default_rng()` return?",
    "c": null,
    "o": [
      "A Generator instance with improved reproducibility",
      "The legacy RandomState",
      "A uniform float between 0 and 1",
      "A deprecated warning message"
    ]
  },
  {
    "q": "Which of these statements about broadcasting is FALSE?",
    "c": null,
    "o": [
      "Broadcasting works only if the shapes are equal",
      "A (3, 1) array can broadcast with a (1, 4) array",
      "Broadcasting doesn't copy data",
      "Broadcasting expands dimensions virtually"
    ]
  },
  {
    "q": "Which function would help reduce a 2D array to a 1D array by flattening it row-wise?",
    "c": null,
    "o": [
      "arr.ravel()",
      "arr.flatten('F')",
      "arr.reshape((1, -1))",
      "arr.compress()"
    ]
  },
  {
    "q": "Which NumPy function returns cumulative product of elements?",
    "c": null,
    "o": [
      "np.cumprod()",
      "np.prodstep()",
      "np.accumulate()",
      "np.multiproduct()"
    ]
  },
  {
    "q": "How can you ensure reproducibility in NumPy random number generation?",
    "c": null,
    "o": [
      "Use `np.random.seed()` or `default_rng(seed)`",
      "Enable `np.random.debug()`",
      "Avoid random operations",
      "Use only `randint` functions"
    ]
  },
  {
    "q": "Which of the following slices does NOT return a view of the original array?",
    "c": null,
    "o": [
      "arr[::-1]",
      "arr.flatten()",
      "arr[:, 1]",
      "arr[::2]"
    ]
  },
  {
    "q": "Which of the following best describes a masked array in NumPy?",
    "c": null,
    "o": [
      "An array with certain entries marked as invalid or missing",
      "An array where all elements are hidden from output",
      "An encrypted array for secure computation",
      "An array used only for machine learning masks"
    ]
  },
  {
    "q": "Which NumPy function allows manipulation of array strides without copying data?",
    "c": null,
    "o": [
      "np.lib.stride_tricks.as_strided()",
      "np.copy_with_strides()",
      "np.adjust_strides()",
      "np.stride_view()"
    ]
  },
  {
    "q": "What does a memory-mapped array in NumPy allow you to do?",
    "c": null,
    "o": [
      "Access arrays stored on disk as if in memory",
      "Share arrays between GPU and CPU",
      "Store arrays as compressed zip",
      "Automatically back up arrays to the cloud"
    ]
  },
  {
    "q": "Which of these correctly defines a NumPy object array?",
    "c": null,
    "o": [
      "np.array([1, 'a', [3,4]], dtype=object)",
      "np.object_array([1,2])",
      "np.array.object([1,2])",
      "np.array([1,2], object=True)"
    ]
  },
  {
    "q": "Which of the following operations will **not** preserve the data type of a NumPy array?",
    "c": null,
    "o": [
      "Using astype() with a different type",
      "Indexing with slices",
      "Reshaping",
      "Transposing"
    ]
  },
  {
    "q": "What happens when two arrays with incompatible shapes are used in a binary operation?",
    "c": null,
    "o": [
      "ValueError: operands could not be broadcast together",
      "Arrays are automatically resized",
      "Operation is silently skipped",
      "They are both flattened and operated element-wise"
    ]
  },
  {
    "q": "What is the main benefit of using `np.recarray` over structured arrays?",
    "c": null,
    "o": [
      "Allows field access via attributes (e.g., arr.field)",
      "Faster computation",
      "Better memory usage",
      "Support for GPU acceleration"
    ]
  },
  {
    "q": "What does `np.isclose(a, b)` return?",
    "c": null,
    "o": [
      "Boolean array indicating element-wise numerical closeness",
      "Array of differences",
      "Exact match comparison",
      "RMS error between arrays"
    ]
  },
  {
    "q": "Which parameter of `np.loadtxt()` skips rows at the beginning of a file?",
    "c": null,
    "o": [
      "skiprows",
      "header",
      "offset",
      "start_line"
    ]
  },
  {
    "q": "What does the `.base` attribute of a NumPy array refer to?",
    "c": null,
    "o": [
      "The original array from which a view was derived",
      "The base memory address of the array",
      "The default dtype of the array",
      "The backup copy of the array in cache"
    ]
  },
  {
    "q": "Which of the following broadcasting shapes is valid for multiplying arrays of shape (3,1,5) and (1,4,1)?",
    "c": null,
    "o": [
      "(3,4,5)",
      "(3,1,1)",
      "(1,4,5)",
      "(3,4,1)"
    ]
  },
  {
    "q": "What is the output shape of np.dot(A, B) if A is shape (3, 2) and B is shape (2, 4)?",
    "c": null,
    "o": [
      "(3, 4)",
      "(2, 2)",
      "(3, 2)",
      "(4, 3)"
    ]
  },
  {
    "q": "Which NumPy method would you use to check whether an array is stored in C-contiguous memory layout?",
    "c": null,
    "o": [
      "arr.flags['C_CONTIGUOUS']",
      "arr.is_c_contiguous()",
      "np.is_c_layout(arr)",
      "arr.layout == 'C'"
    ]
  },
  {
    "q": "Which indexing method returns a view instead of a copy?",
    "c": null,
    "o": [
      "Slicing (e.g., arr[2:5])",
      "Advanced indexing with a list",
      "Boolean indexing",
      "Fancy indexing with np.ix_"
    ]
  },
  {
    "q": "Which ufunc method allows you to accumulate results across an array?",
    "c": null,
    "o": [
      "np.add.accumulate()",
      "np.add.reduceat()",
      "np.add.outer()",
      "np.add.parallel()"
    ]
  },
  {
    "q": "What does `np.linalg.matrix_rank()` return?",
    "c": null,
    "o": [
      "The rank (number of linearly independent rows/columns) of a matrix",
      "The eigenvalue of a matrix",
      "The index of the largest row",
      "The determinant of a matrix"
    ]
  },
  {
    "q": "Which of the following functions computes the Moore–Penrose pseudoinverse?",
    "c": null,
    "o": [
      "np.linalg.pinv()",
      "np.linalg.inv()",
      "np.linalg.solve()",
      "np.linalg.eigvals()"
    ]
  },
  {
    "q": "Which NumPy function is best suited for element-wise logical XOR?",
    "c": null,
    "o": [
      "np.logical_xor()",
      "np.bitwise_xor()",
      "np.xor()",
      "np.exclusive_or()"
    ]
  },
  {
    "q": "What is the result of np.unique(arr, return_counts=True)?",
    "c": null,
    "o": [
      "A tuple of unique values and their counts",
      "An array with duplicates removed",
      "Sorted array of original elements",
      "Indices of unique values"
    ]
  },
  {
    "q": "Which of the following NumPy functions can help avoid overflow in exponential calculations?",
    "c": null,
    "o": [
      "np.logaddexp()",
      "np.exp_safe()",
      "np.clip_exp()",
      "np.exp_protect()"
    ]
  },
  {
    "q": "Which NumPy module allows for creating views with custom strides, often used in window-based operations?",
    "c": null,
    "o": [
      "np.lib.stride_tricks",
      "np.viewtools",
      "np.custom_views",
      "np.advanced_strides"
    ]
  },
  {
    "q": "What does `arr.base is not None` indicate in NumPy?",
    "c": null,
    "o": [
      "The array is a view of another array",
      "The array is stored in Fortran order",
      "The array has been reshaped in place",
      "The array is a copy from a .txt file"
    ]
  },
  {
    "q": "Which NumPy function allows you to treat structured arrays like a database table with named fields?",
    "c": null,
    "o": [
      "np.recarray",
      "np.tableview",
      "np.structarray",
      "np.dtype.view()"
    ]
  },
  {
    "q": "What is the result of `np.array([1, 2, 3])[np.array([True, False])]`?",
    "c": null,
    "o": [
      "[1]",
      "[True, False]",
      "[1, 3]",
      "Raises IndexError"
    ]
  },
  {
    "q": "Which function provides more precision when computing sum of large floating-point arrays?",
    "c": null,
    "o": [
      "np.sum(..., dtype=np.float64)",
      "np.kahan_sum()",
      "np.precise_sum()",
      "np.float_sum()"
    ]
  },
  {
    "q": "What does `np.shares_memory(a, b)` check?",
    "c": null,
    "o": [
      "Whether arrays a and b share any memory location",
      "Whether a and b are equal",
      "Whether a and b are both C-contiguous",
      "Whether a and b point to the same object"
    ]
  },
  {
    "q": "Which attribute of a NumPy array gives the number of bytes for one element?",
    "c": null,
    "o": [
      "itemsize",
      "nbytes",
      "dtype.bytes",
      "size.bytes"
    ]
  },
  {
    "q": "What will be the shape of the output of np.cumsum(np.ones((3,3)), axis=1)?",
    "c": null,
    "o": [
      "(3, 3)",
      "(1, 3)",
      "(3, 1)",
      "(9,)"
    ]
  },
  {
    "q": "Which operation is most likely to result in a memory copy rather than a view?",
    "c": null,
    "o": [
      "Fancy indexing using an integer list",
      "Basic slicing with colon operator",
      "Transpose with .T",
      "Reshape to compatible shape"
    ]
  },
  {
    "q": "What does `np.seterr(divide='ignore')` do?",
    "c": null,
    "o": [
      "Suppresses divide-by-zero warnings",
      "Raises divide-by-zero errors",
      "Ignores all types of errors",
      "Changes NaN output to 0"
    ]
  },
  {
    "q": "Which attribute tells whether a NumPy array is stored in a single, contiguous block of memory (either C or Fortran-style)?",
    "c": null,
    "o": [
      "a.flags['CONTIGUOUS']",
      "a.memory_layout",
      "a.is_contiguous",
      "a.contiguous"
    ]
  },
  {
    "q": "What does `np.may_share_memory(a, b)` do compared to `np.shares_memory(a, b)`?",
    "c": null,
    "o": [
      "It’s faster but may give false positives",
      "It’s slower but always accurate",
      "It checks shape compatibility only",
      "It forces memory sharing between arrays"
    ]
  },
  {
    "q": "Which function returns both the unique elements and the indices that reconstruct the input array?",
    "c": null,
    "o": [
      "np.unique(arr, return_inverse=True)",
      "np.setdiff1d(arr)",
      "np.sort(arr, return_index=True)",
      "np.reconstruct(arr)"
    ]
  },
  {
    "q": "What happens if you set an element in a NumPy view created by slicing?",
    "c": null,
    "o": [
      "The original array is also modified",
      "A new copy is created",
      "Only the view is updated",
      "It raises an error"
    ]
  },
  {
    "q": "Which of the following functions can be used to perform a dot product but also supports stacked matrices (batch dot)?",
    "c": null,
    "o": [
      "np.matmul",
      "np.dot",
      "np.inner",
      "np.outer"
    ]
  },
  {
    "q": "What is a key difference between `np.dot` and `np.matmul`?",
    "c": null,
    "o": [
      "`np.matmul` respects broadcasting rules for higher dimensions",
      "`np.dot` returns a scalar only",
      "`np.dot` works only with 2D arrays",
      "`np.matmul` is deprecated"
    ]
  },
  {
    "q": "What is the output shape of `np.broadcast_arrays(np.ones((1, 3)), np.ones((3, 1)))`?",
    "c": null,
    "o": [
      "(3, 3)",
      "(1, 3)",
      "(3, 1)",
      "Raises ValueError"
    ]
  },
  {
    "q": "Which slicing method guarantees a copy, not a view?",
    "c": null,
    "o": [
      "Fancy indexing like a[[0, 2]]",
      "Slicing like a[1:3]",
      "Using ellipsis like a[...]",
      "Boolean masking with a[a > 0]"
    ]
  },
  {
    "q": "What does `np.r_[:5, 10:15]` produce?",
    "c": null,
    "o": [
      "[ 0  1  2  3  4 10 11 12 13 14]",
      "[5, 10]",
      "[0 10]",
      "Raises SyntaxError"
    ]
  },
  {
    "q": "Which NumPy operation can lead to integer overflow if used without type promotion?",
    "c": null,
    "o": [
      "np.prod(np.array([2]*100), dtype=np.int32)",
      "np.sum(arr)",
      "np.mean(arr)",
      "np.median(arr)"
    ]
  },
  {
    "q": "Which function is best for reproducibility when generating random numbers in modern NumPy versions?",
    "c": null,
    "o": [
      "np.random.default_rng(seed)",
      "np.random.seed(seed)",
      "np.random.RandomState(seed)",
      "np.random.init(seed)"
    ]
  },
  {
    "q": "Which of the following returns the number of bytes consumed by a NumPy array's data buffer?",
    "c": null,
    "o": [
      "a.nbytes",
      "a.itemsize",
      "a.size",
      "sys.getsizeof(a)"
    ]
  },
  {
    "q": "What is the result of `np.linalg.matrix_rank(np.zeros((4, 4)))`?",
    "c": null,
    "o": [
      "0",
      "1",
      "4",
      "Raises an error"
    ]
  },
  {
    "q": "What will `np.random.randint(5, size=(2, 2, 2))` return?",
    "c": null,
    "o": [
      "A 3D array of random integers from 0 to 4",
      "A 2D array with shape (5, 5)",
      "Only 5 integers",
      "An error due to wrong size format"
    ]
  },
  {
    "q": "Which is true about the result of `np.einsum('ij,jk->ik', A, B)`?",
    "c": null,
    "o": [
      "It performs matrix multiplication",
      "It returns the inverse of A and B",
      "It returns element-wise multiplication",
      "It reshapes A and B to 1D"
    ]
  },
  {
    "q": "What is the output of `np.isfortran(np.array([[1, 2], [3, 4]], order='F'))`?",
    "c": null,
    "o": [
      "True",
      "False",
      "Depends on system architecture",
      "Raises an error"
    ]
  },
  {
    "q": "Which attribute tells you if a NumPy array is writable?",
    "c": null,
    "o": [
      "a.flags.writeable",
      "a.is_writeable",
      "a.can_edit",
      "a.mutable"
    ]
  },
  {
    "q": "Which of the following is NOT a valid value for the `axis` parameter in `np.sum()` for a 2D array?",
    "c": null,
    "o": [
      "2",
      "0",
      "1",
      "-1"
    ]
  },
  {
    "q": "What is returned by `np.triu(np.ones((3, 3)), k=1)`?",
    "c": null,
    "o": [
      "Upper triangle excluding diagonal",
      "Lower triangle only",
      "Diagonal only",
      "Identity matrix"
    ]
  },
  {
    "q": "Which of the following will **not** broadcast successfully with `a.shape = (3, 1)`?",
    "c": null,
    "o": [
      "b.shape = (3,)",
      "b.shape = (1, 4)",
      "b.shape = (3, 4)",
      "b.shape = (2, 3)"
    ]
  },
  {
    "q": "What is the correct way to define a structured dtype with fields `name` (string), `age` (int), and `weight` (float)?",
    "c": null,
    "o": [
      "np.dtype([('name', 'U10'), ('age', 'i4'), ('weight', 'f4')])",
      "np.dtype([('name', str), ('age', int), ('weight', float)])",
      "np.dtype({'name': 'U10', 'age': 'i4', 'weight': 'f4'})",
      "np.dtype(('name', 'age', 'weight'))"
    ]
  },
  {
    "q": "How do you access the `age` field from a structured NumPy array `arr`?",
    "c": null,
    "o": [
      "arr['age']",
      "arr.age",
      "arr.get('age')",
      "arr[:, 'age']"
    ]
  },
  {
    "q": "What is the primary purpose of a masked array in NumPy?",
    "c": null,
    "o": [
      "To handle invalid or missing data",
      "To improve performance",
      "To hide dimensions of large arrays",
      "To encrypt array elements"
    ]
  },
  {
    "q": "How do you create a masked array from a list `[1, 2, -999, 4]` where `-999` represents missing data?",
    "c": null,
    "o": [
      "np.ma.masked_equal([1, 2, -999, 4], -999)",
      "np.masked_array([1, 2, -999, 4], -999)",
      "np.ma.masked_where([1, 2, -999, 4] == -999)",
      "np.ma.hide([1, 2, -999, 4], mask=-999)"
    ]
  },
  {
    "q": "What will `np.ma.mean(np.ma.masked_equal([1, 2, -999, 4], -999))` return?",
    "c": null,
    "o": [
      "2.333...",
      "7",
      "-999",
      "Error"
    ]
  },
  {
    "q": "Which of the following sparse formats is best for fast arithmetic and matrix-vector operations?",
    "c": null,
    "o": [
      "CSR (Compressed Sparse Row)",
      "COO (Coordinate Format)",
      "LIL (List of Lists)",
      "DOK (Dictionary of Keys)"
    ]
  },
  {
    "q": "How do you convert a dense NumPy matrix `A` to a sparse CSR matrix?",
    "c": null,
    "o": [
      "scipy.sparse.csr_matrix(A)",
      "A.to_sparse()",
      "np.sparse.CSR(A)",
      "scipy.sparse.sparsify(A, format='csr')"
    ]
  },
  {
    "q": "What is the default dtype of the mask in a NumPy masked array?",
    "c": null,
    "o": [
      "bool",
      "int",
      "float",
      "object"
    ]
  },
  {
    "q": "Which of the following supports row slicing efficiently in sparse matrices?",
    "c": null,
    "o": [
      "LIL",
      "COO",
      "CSR",
      "BSR"
    ]
  },
  {
    "q": "In a structured NumPy array, what does `arr.itemsize` return?",
    "c": null,
    "o": [
      "The total bytes per element, including all fields",
      "The size of one field only",
      "The number of fields",
      "The size of the first element"
    ]
  },
  {
    "q": "Which function is used to create a memory-mapped array in NumPy?",
    "c": null,
    "o": [
      "np.memmap()",
      "np.memory_map()",
      "np.mapmem()",
      "np.loadmap()"
    ]
  },
  {
    "q": "What mode must be used with `np.memmap` to create a file if it doesn’t exist and allow writing?",
    "c": null,
    "o": [
      "'w+'",
      "'r'",
      "'w'",
      "'c'"
    ]
  },
  {
    "q": "Which of the following operations is **not** supported directly on memory-mapped arrays?",
    "c": null,
    "o": [
      "Reshaping without copying",
      "Slicing",
      "Arithmetic operations",
      "Direct in-place editing"
    ]
  },
  {
    "q": "In NumPy broadcasting, which shapes are compatible: (3, 1, 4) and (1, 5, 1)?",
    "c": null,
    "o": [
      "Yes, result shape is (3, 5, 4)",
      "No, incompatible shapes",
      "Yes, result shape is (1, 5, 4)",
      "Yes, result shape is (3, 1, 1)"
    ]
  },
  {
    "q": "What does `np.fft.fft([1, 0, 0, 0])` return?",
    "c": null,
    "o": [
      "[1.+0.j 1.+0.j 1.+0.j 1.+0.j]",
      "[1.+0.j 0.+0.j 0.+0.j 0.+0.j]",
      "[0.+0.j 1.+0.j 0.+0.j 0.+0.j]",
      "[1.+0.j -1.+0.j 1.+0.j -1.+0.j]"
    ]
  },
  {
    "q": "Which function is used to fit a polynomial to data in NumPy?",
    "c": null,
    "o": [
      "np.polyfit()",
      "np.polynomial.fit()",
      "np.polycurve()",
      "np.polynomial.regression()"
    ]
  },
  {
    "q": "How do you evaluate the polynomial `p(x) = x^2 + 2x + 1` using NumPy’s `polyval`?",
    "c": null,
    "o": [
      "np.polyval([1, 2, 1], x)",
      "np.polyval([1, 1, 2], x)",
      "np.polyval([2, 1, 1], x)",
      "np.polyval(x, [1, 2, 1])"
    ]
  },
  {
    "q": "What is the output type of `np.datetime64('2023-01-01') - np.datetime64('2022-12-30')`?",
    "c": null,
    "o": [
      "numpy.timedelta64",
      "int",
      "float",
      "datetime.timedelta"
    ]
  },
  {
    "q": "How can you convert a NumPy datetime64 object to a Python datetime object?",
    "c": null,
    "o": [
      ".astype(datetime.datetime)",
      ".to_datetime()",
      ".datetime()",
      ".convert(datetime)"
    ]
  },
  {
    "q": "What is the frequency unit of `np.timedelta64(1, 'W')`?",
    "c": null,
    "o": [
      "Week",
      "Working day",
      "Window",
      "Wednesday"
    ]
  },
  {
    "q": "What is the purpose of `np.lib.stride_tricks.as_strided()`?",
    "c": null,
    "o": [
      "To create a view with custom strides",
      "To transpose an array efficiently",
      "To reshape an array in-place",
      "To copy data using specific memory alignment"
    ]
  },
  {
    "q": "Which of the following statements is TRUE about `as_strided()`?",
    "c": null,
    "o": [
      "It can expose overlapping memory and must be used cautiously",
      "It always returns a copy",
      "It increases memory usage due to duplication",
      "It prevents slicing of the resulting array"
    ]
  },
  {
    "q": "How do you define a structured dtype with a float and a 10-character string?",
    "c": null,
    "o": [
      "np.dtype([('score', 'f8'), ('name', 'S10')])",
      "np.dtype({'score': float, 'name': str})",
      "np.dtype('f8, S10')",
      "np.dtype(['score', float], ['name', str])"
    ]
  },
  {
    "q": "Which function is used to mask invalid or missing data in NumPy?",
    "c": null,
    "o": [
      "np.ma.masked_array()",
      "np.set_mask()",
      "np.nanmask()",
      "np.create_masked()"
    ]
  },
  {
    "q": "What does `np.ma.masked_array([1, 2, 3], mask=[0, 1, 0])` return?",
    "c": null,
    "o": [
      "[1 -- 3]",
      "[-- 2 --]",
      "[1 2 3]",
      "[1 1 1]"
    ]
  },
  {
    "q": "Which linear algebra function returns both eigenvalues and eigenvectors?",
    "c": null,
    "o": [
      "np.linalg.eig()",
      "np.linalg.svd()",
      "np.linalg.det()",
      "np.linalg.inv()"
    ]
  },
  {
    "q": "What is the shape of U in SVD if A is a 5x3 matrix: `U, S, V = np.linalg.svd(A)`?",
    "c": null,
    "o": [
      "(5, 5)",
      "(5, 3)",
      "(3, 3)",
      "(3, 5)"
    ]
  },
  {
    "q": "Which NumPy function returns a view with fields reordered by offset?",
    "c": null,
    "o": [
      "np.lib.recfunctions.repack_fields()",
      "np.reorder_fields()",
      "np.lib.structured.sort_fields()",
      "np.reshape_fields_by_offset()"
    ]
  },
  {
    "q": "What is the result of `np.linalg.matrix_rank(np.zeros((5, 5)))`?",
    "c": null,
    "o": [
      "0",
      "1",
      "5",
      "Undefined"
    ]
  },
  {
    "q": "Which of these operations is unsafe with memory-mapped arrays?",
    "c": null,
    "o": [
      "In-place reshaping with different strides",
      "Slicing across multiple dimensions",
      "Arithmetic with broadcasting",
      "Saving via `np.save()`"
    ]
  },
  {
    "q": "What is the result of broadcasting arrays with shapes (3, 1) and (1, 4)?",
    "c": null,
    "o": [
      "(3, 4)",
      "(4, 3)",
      "(3, 1, 4)",
      "Error: incompatible shapes"
    ]
  },
  {
    "q": "What does `arr.flags['C_CONTIGUOUS']` check in a NumPy array?",
    "c": null,
    "o": [
      "Whether the array is stored in row-major order",
      "Whether the array is writable",
      "If array was created using copy",
      "If array contains only integers"
    ]
  },
  {
    "q": "Which advanced indexing technique will NOT preserve the shape of the original array?",
    "c": null,
    "o": [
      "Boolean indexing",
      "Slice indexing",
      "Ellipsis indexing",
      "None of the above"
    ]
  },
  {
    "q": "Given `a = np.arange(9).reshape(3, 3)`, what is `a[[0, 2], [1, 1]]`?",
    "c": null,
    "o": [
      "[1 7]",
      "[3 3]",
      "[0 2]",
      "Error: invalid indexing"
    ]
  },
  {
    "q": "What does `np.may_share_memory(a, b)` return?",
    "c": null,
    "o": [
      "True if `a` and `b` might share the same memory",
      "Always True for views",
      "False if arrays are equal",
      "True only if they are the same object"
    ]
  },
  {
    "q": "Which statement is TRUE about structured arrays?",
    "c": null,
    "o": [
      "They can store multiple datatypes per row",
      "They are always 1D",
      "They cannot be sliced",
      "They are only used for strings"
    ]
  },
  {
    "q": "What does `np.empty((2, 2), dtype='U3')` create?",
    "c": null,
    "o": [
      "2x2 uninitialized array of 3-character Unicode strings",
      "2x2 array filled with empty strings",
      "Error due to uninitialized Unicode",
      "2x2 array with dtype object"
    ]
  },
  {
    "q": "Which function checks if all elements in an array are finite (not NaN or Inf)?",
    "c": null,
    "o": [
      "np.isfinite()",
      "np.isvalid()",
      "np.finite()",
      "np.isnan().all()"
    ]
  },
  {
    "q": "What is the default memory layout of NumPy arrays?",
    "c": null,
    "o": [
      "Row-major (C-style)",
      "Column-major (Fortran-style)",
      "Depends on input data",
      "Platform dependent"
    ]
  },
  {
    "q": "What is the result of `np.array(['1.0', '2.0'], dtype=np.float32).dtype`?",
    "c": null,
    "o": [
      "float32",
      "str",
      "object",
      "float64"
    ]
  },
  {
    "q": "What does the `.strides` attribute of a NumPy array represent?",
    "c": null,
    "o": [
      "Number of bytes to step in each dimension",
      "Shape of the array",
      "Index of the last element",
      "Number of dimensions"
    ]
  },
  {
    "q": "What will `np.array([1, 2, 3], dtype='f4').astype('i8')` do?",
    "c": null,
    "o": [
      "Convert float32 to int64",
      "Convert float32 to float64",
      "Raise a casting error",
      "Create an object array"
    ]
  },
  {
    "q": "Which operation does NOT trigger a copy of a NumPy array?",
    "c": null,
    "o": [
      "Slicing",
      "Transposing with `.T`",
      "Using `astype()`",
      "Adding a scalar"
    ]
  },
  {
    "q": "Which of the following indicates a masked array in NumPy?",
    "c": null,
    "o": [
      "`np.ma.array()`",
      "`np.masked_array()`",
      "`np.array(mask=True)`",
      "`np.array(..., mask=True)`"
    ]
  },
  {
    "q": "Which dtype will occupy the most memory?",
    "c": null,
    "o": [
      "`np.dtype([('a', 'i4'), ('b', 'f8')])`",
      "`np.int64`",
      "`np.float32`",
      "`np.bool_`"
    ]
  },
  {
    "q": "How to check if two arrays share the exact same memory buffer?",
    "c": null,
    "o": [
      "`np.shares_memory(a, b)`",
      "`a.base is b.base`",
      "`np.may_share_memory(a, b)`",
      "`np.memory_check(a, b)`"
    ]
  },
  {
    "q": "Which NumPy function returns all unique values in a 1D array?",
    "c": null,
    "o": [
      "`np.unique()`",
      "`np.setdiff1d()`",
      "`np.intersect1d()`",
      "`np.union1d()`"
    ]
  },
  {
    "q": "Which of the following does NOT affect the result of `np.dot()`?",
    "c": null,
    "o": [
      "Array memory layout (C vs Fortran)",
      "Array shape",
      "Data type",
      "The order of arguments"
    ]
  },
  {
    "q": "What will `np.zeros((2,2), dtype=[('x', 'i4'), ('y', 'f4')])['y'].dtype` be?",
    "c": null,
    "o": [
      "`float32`",
      "`int32`",
      "`object`",
      "`structured`"
    ]
  },
  {
    "q": "Which of the following is true about `np.nan`?",
    "c": null,
    "o": [
      "`np.nan != np.nan` is True",
      "`np.nan == np.nan` is True",
      "`np.isnan(np.nan)` is False",
      "`np.nan > np.inf` is True"
    ]
  },
  {
    "q": "What does `np.fromfunction(lambda i, j: i + j, (3, 3), dtype=int)` return?",
    "c": null,
    "o": [
      "A 3x3 array where each element is the sum of its row and column indices",
      "A 3x3 identity matrix",
      "An array of all ones",
      "Raises an error due to lambda function"
    ]
  },
  {
    "q": "Which of these NumPy functions can construct an array from an iterator?",
    "c": null,
    "o": [
      "`np.fromiter()`",
      "`np.fromfunction()`",
      "`np.array()`",
      "`np.asarray()`"
    ]
  },
  {
    "q": "What is the output dtype of `np.array([1, 2.5, True])`?",
    "c": null,
    "o": [
      "`float64`",
      "`int32`",
      "`bool`",
      "`object`"
    ]
  },
  {
    "q": "Which NumPy method is most memory-efficient for large-scale array generation?",
    "c": null,
    "o": [
      "`np.fromiter()`",
      "`np.append()`",
      "`np.concatenate()`",
      "`np.array()`"
    ]
  },
  {
    "q": "What will `np.broadcast(np.array([1, 2]), np.array([[1], [2]])).shape` be?",
    "c": null,
    "o": [
      "(2, 2)",
      "(2, 1)",
      "(1, 2)",
      "Raises ValueError"
    ]
  },
  {
    "q": "Which operation is equivalent to matrix multiplication `A @ B` for 2D arrays?",
    "c": null,
    "o": [
      "`np.matmul(A, B)`",
      "`np.multiply(A, B)`",
      "`np.outer(A, B)`",
      "`np.cross(A, B)`"
    ]
  },
  {
    "q": "Which function computes the Moore-Penrose pseudoinverse in NumPy?",
    "c": null,
    "o": [
      "`np.linalg.pinv()`",
      "`np.linalg.inv()`",
      "`np.linalg.solve()`",
      "`np.linalg.det()`"
    ]
  },
  {
    "q": "Which method avoids a copy when flattening a NumPy array, if possible?",
    "c": null,
    "o": [
      "`np.ravel()`",
      "`np.flatten()`",
      "`np.reshape(-1)`",
      "`np.view()`"
    ]
  },
  {
    "q": "Which NumPy type should be used for arbitrary precision integer operations?",
    "c": null,
    "o": [
      "`object`",
      "`int64`",
      "`uint64`",
      "`float128`"
    ]
  },
  {
    "q": "Which method converts a 1D array into a column vector without copying?",
    "c": null,
    "o": [
      "`arr[:, np.newaxis]`",
      "`np.reshape(arr, (-1, 1)).copy()`",
      "`np.column_stack(arr)`",
      "`np.stack([arr])`"
    ]
  },
  {
    "q": "What is the purpose of `np.lib.stride_tricks.as_strided()`?",
    "c": null,
    "o": [
      "To create a view of an array with custom strides",
      "To change the shape of an array without copying",
      "To compute strides of any array",
      "To iterate over arrays with multiple indices"
    ]
  },
  {
    "q": "Which NumPy module supports handling arrays with missing or invalid entries?",
    "c": null,
    "o": [
      "`numpy.ma`",
      "`numpy.errstate`",
      "`numpy.nan`",
      "`numpy.fillna`"
    ]
  },
  {
    "q": "What does `np.random.choice(a=[1, 2], size=5, replace=False)` do?",
    "c": null,
    "o": [
      "Raises an error if `size > len(a)`",
      "Always returns `[1, 2, 1, 2, 1]`",
      "Selects with replacement even if specified false",
      "Performs Bernoulli sampling"
    ]
  },
  {
    "q": "Which function would you use for element-wise multiplication of complex conjugates?",
    "c": null,
    "o": [
      "`np.vdot()`",
      "`np.dot()`",
      "`np.multiply()`",
      "`np.conj()`"
    ]
  },
  {
    "q": "What will `np.array([('a', 2), ('b', 3)], dtype=[('x', 'U1'), ('y', 'i4')])['x']` return?",
    "c": null,
    "o": [
      "`array(['a', 'b'], dtype='<U1')`",
      "`array([2, 3], dtype=int32)`",
      "`array(['x', 'x'])`",
      "`array([('a', 2), ('b', 3)], dtype=[('x','U1'),('y','i4')])`"
    ]
  },
  {
    "q": "Which of the following is `True` for `np.isclose([1.0, 2.0], [1.0, 2.001], rtol=1e-3)`?",
    "c": null,
    "o": [
      "`array([ True, False])`",
      "`array([ True, True])`",
      "`array([ False, True])`",
      "`array([ False, False])`"
    ]
  },
  {
    "q": "What does `np.ptp(array)` return?",
    "c": null,
    "o": [
      "Range (max - min) of array",
      "Product of array elements",
      "Padded transpose",
      "Peak to probability ratio"
    ]
  },
  {
    "q": "Which is `True` about `np.histogram()` and `np.bincount()`?",
    "c": null,
    "o": [
      "`bincount()` only works with non-negative integers",
      "`histogram()` is faster than `bincount()` always",
      "`bincount()` can accept weights and bins",
      "`histogram()` only works for 1D arrays with integers"
    ]
  },
  {
    "q": "What is the default behavior of `np.unique()`?",
    "c": null,
    "o": [
      "Sorts and removes duplicates",
      "Returns original array",
      "Removes duplicates only if array is sorted",
      "Returns counts of all elements only"
    ]
  },
  {
    "q": "What will `np.seterr(divide='ignore')['divide']` return?",
    "c": null,
    "o": [
      "`'warn'` (previous value before ignore)",
      "`'ignore'` (newly set value)",
      "`None`",
      "`Raises TypeError`"
    ]
  },
  {
    "q": "What is the output shape of `np.broadcast(np.array([1, 2]), np.array([[1], [2], [3]])).shape`?",
    "c": null,
    "o": [
      "(3, 2)",
      "(2, 3)",
      "(2, 1)",
      "(1, 2, 3)"
    ]
  },
  {
    "q": "Which of the following operations modifies the array in-place?",
    "c": null,
    "o": [
      "`arr *= 2`",
      "`arr = arr * 2`",
      "`np.multiply(arr, 2)`",
      "`arr.copy() * 2`"
    ]
  },
  {
    "q": "How can you ensure a NumPy array is C-contiguous?",
    "c": null,
    "o": [
      "`np.ascontiguousarray(arr)`",
      "`arr.flags.f_contiguous`",
      "`np.copyto(arr, order='F')`",
      "`np.setflags(write=True)`"
    ]
  },
  {
    "q": "What will `arr[[True, False, True]]` do on a 1D array of size 3?",
    "c": null,
    "o": [
      "Select elements at index 0 and 2",
      "Throw an error",
      "Return a mask array",
      "Return all elements"
    ]
  },
  {
    "q": "Which of the following allows conditional replacement of elements?",
    "c": null,
    "o": [
      "`np.where(arr > 0, arr, 0)`",
      "`np.choose(arr)`",
      "`np.select(arr > 0)`",
      "`arr[arr > 0] = 0`"
    ]
  },
  {
    "q": "What does `np.r_[[1,2],[3,4]]` do?",
    "c": null,
    "o": [
      "`Concatenates arrays row-wise`",
      "`Concatenates arrays column-wise`",
      "`Generates a range from 1 to 4`",
      "`Creates a 2D matrix`"
    ]
  },
  {
    "q": "Which flag tells whether a NumPy array is stored in Fortran-contiguous order?",
    "c": null,
    "o": [
      "`arr.flags.f_contiguous`",
      "`arr.flags.writeable`",
      "`arr.flags.c_contiguous`",
      "`arr.isfortran`"
    ]
  },
  {
    "q": "What is the role of `np.take(arr, indices)`?",
    "c": null,
    "o": [
      "`Returns elements at given indices, supports broadcasting`",
      "`Returns a view into the original array`",
      "`Performs slicing from start to index`",
      "`Replaces elements at indices`"
    ]
  },
  {
    "q": "Which function ensures two arrays have the same shape for broadcasting?",
    "c": null,
    "o": [
      "`np.broadcast_arrays()`",
      "`np.match_shape()`",
      "`np.pad_shape()`",
      "`np.replicate()`"
    ]
  },
  {
    "q": "What does `arr.T` represent in NumPy?",
    "c": null,
    "o": [
      "`The transposed view of the array`",
      "`Copies the array and transposes`",
      "`Applies only to 1D arrays`",
      "`Turns array into 3D`"
    ]
  },
  {
    "q": "What is the purpose of `np.lib.stride_tricks.as_strided()`?",
    "c": null,
    "o": [
      "Create a view with a custom shape and strides",
      "Copy array into a new shape",
      "Convert array to Fortran order",
      "Pad array to match another"
    ]
  },
  {
    "q": "Which function is used to create a masked array in NumPy?",
    "c": null,
    "o": [
      "`np.ma.array()`",
      "`np.mask_array()`",
      "`np.ma.masked()`",
      "`np.create_mask()`"
    ]
  },
  {
    "q": "What does the `np.squeeze()` function do?",
    "c": null,
    "o": [
      "Removes axes of size 1",
      "Reshapes array to 1D",
      "Fills masked values",
      "Flattens array in-place"
    ]
  },
  {
    "q": "Which NumPy function can be used to stack 1D arrays as rows into a 2D array?",
    "c": null,
    "o": [
      "`np.row_stack()`",
      "`np.dstack()`",
      "`np.column_stack()`",
      "`np.vsplit()`"
    ]
  },
  {
    "q": "What is a structured array in NumPy?",
    "c": null,
    "o": [
      "An array with compound data types (like records)",
      "A reshaped multidimensional array",
      "An array with sorted values",
      "A padded array"
    ]
  },
  {
    "q": "What happens when reshaping an array using `arr.shape = new_shape`?",
    "c": null,
    "o": [
      "The array is reshaped in-place if possible",
      "A new array is returned",
      "An error is always raised",
      "It flattens and reshapes"
    ]
  },
  {
    "q": "Which of the following is true for `np.flatiter`?",
    "c": null,
    "o": [
      "Provides a flat iterator over an array",
      "Creates a flattened copy of the array",
      "Used for reshaping arrays",
      "Returns a transposed iterator"
    ]
  },
  {
    "q": "How does NumPy internally handle memory layout for arrays?",
    "c": null,
    "o": [
      "Using strides and data buffers",
      "Storing each dimension as a list",
      "Flattening and storing as CSV",
      "Using native Python lists"
    ]
  },
  {
    "q": "Which function can fill a masked array with a specified value?",
    "c": null,
    "o": [
      "`np.ma.filled()`",
      "`np.ma.replace()`",
      "`np.ma.assign()`",
      "`np.mask_fill()`"
    ]
  },
  {
    "q": "How can you test if a NumPy array shares memory with another?",
    "c": null,
    "o": [
      "`np.shares_memory(arr1, arr2)`",
      "`np.is_view(arr1, arr2)`",
      "`np.memory_link(arr1, arr2)`",
      "`np.same_data(arr1, arr2)`"
    ]
  },
  {
    "q": "Which condition must be satisfied for broadcasting to work between two arrays?",
    "c": null,
    "o": [
      "Trailing dimensions must be equal or 1",
      "Arrays must have the same number of dimensions",
      "Arrays must be square",
      "Only the first dimension must match"
    ]
  },
  {
    "q": "What does `np.where(condition, x, y)` return?",
    "c": null,
    "o": [
      "Elements from `x` where condition is True, else from `y`",
      "Boolean array indicating where condition is True",
      "Only elements of `x`",
      "Indices of True elements"
    ]
  },
  {
    "q": "What is the difference between `.copy()` and just assigning a NumPy array to another variable?",
    "c": null,
    "o": [
      "Assignment shares memory; copy creates new memory",
      "Assignment always creates a deep copy",
      "Both do the same thing",
      "Copy modifies the original array"
    ]
  },
  {
    "q": "What is the result of using boolean indexing on a NumPy array?",
    "c": null,
    "o": [
      "A new array with selected elements",
      "The original array is modified",
      "A boolean mask is returned",
      "None of the above"
    ]
  },
  {
    "q": "Which method allows inserting values into a sorted array while maintaining order?",
    "c": null,
    "o": [
      "`np.searchsorted()`",
      "`np.insert_sorted()`",
      "`np.find_index()`",
      "`np.where_sorted()`"
    ]
  },
  {
    "q": "How does `np.take()` differ from standard indexing?",
    "c": null,
    "o": [
      "It works on flattened input if axis is not specified",
      "It sorts the array",
      "It removes elements from an array",
      "It always copies data"
    ]
  },
  {
    "q": "Which of the following is true about record arrays (`np.recarray`)?",
    "c": null,
    "o": [
      "They allow attribute-style access to fields",
      "They are only used for images",
      "They cannot store heterogeneous types",
      "They must be reshaped into 1D"
    ]
  },
  {
    "q": "Which function flattens a NumPy array in row-major (C-style) order?",
    "c": null,
    "o": [
      "`np.ravel(order='C')`",
      "`np.flatten(order='F')`",
      "`np.reshape(-1)`",
      "`np.unroll()`"
    ]
  },
  {
    "q": "Which statement is true about advanced indexing using integer arrays?",
    "c": null,
    "o": [
      "It returns a copy of the data",
      "It always returns a view",
      "It flattens the original array",
      "It sorts the array"
    ]
  },
  {
    "q": "What is returned by `np.nonzero()` when applied to a 2D array?",
    "c": null,
    "o": [
      "A tuple of arrays for each dimension containing indices of non-zero elements",
      "A boolean array mask",
      "A list of non-zero elements",
      "A flattened array"
    ]
  },
  {
    "q": "What does `np.random.choice(a, size, replace=False)` do?",
    "c": null,
    "o": [
      "Randomly selects `size` unique elements from `a`",
      "Generates numbers from a normal distribution",
      "Always selects the same elements",
      "Sorts array `a` randomly"
    ]
  },
  {
    "q": "Which NumPy function computes the determinant of a matrix?",
    "c": null,
    "o": [
      "`np.linalg.det()`",
      "`np.matrix.det()`",
      "`np.det()`",
      "`np.determinant()`"
    ]
  },
  {
    "q": "Which function returns an identity matrix of given size?",
    "c": null,
    "o": [
      "`np.eye()`",
      "`np.identity_matrix()`",
      "`np.ones()`",
      "`np.unit()`"
    ]
  },
  {
    "q": "What does the `order='F'` parameter indicate in reshaping arrays?",
    "c": null,
    "o": [
      "Column-major (Fortran-style) memory order",
      "Floating point precision",
      "Fill with zeros",
      "File-order reshaping"
    ]
  },
  {
    "q": "Which function creates a masked array in NumPy?",
    "c": null,
    "o": [
      "`np.ma.array()`",
      "`np.masked_array()`",
      "`np.array(mask=True)`",
      "`np.array().mask()`"
    ]
  },
  {
    "q": "Which function finds eigenvalues and eigenvectors of a matrix?",
    "c": null,
    "o": [
      "`np.linalg.eig()`",
      "`np.linalg.svd()`",
      "`np.linalg.inv()`",
      "`np.eigen()`"
    ]
  },
  {
    "q": "In a structured NumPy array, how are fields accessed?",
    "c": null,
    "o": [
      "By field name as attribute or dictionary-like key",
      "Only by index",
      "By using `.field()` method",
      "Fields cannot be accessed"
    ]
  },
  {
    "q": "What is the result of `np.isclose([1.0, 2.0], [1.0, 2.001], atol=0.01)`?",
    "c": null,
    "o": [
      "[True, True]",
      "[True, False]",
      "[False, True]",
      "[False, False]"
    ]
  },
  {
    "q": "Which attribute tells if an array shares memory with another?",
    "c": null,
    "o": [
      "`np.may_share_memory()`",
      "`.is_view()`",
      "`.base()`",
      "`np.is_copy()`"
    ]
  },
  {
    "q": "What does `np.set_printoptions(precision=3)` affect?",
    "c": null,
    "o": [
      "Number of decimals shown when printing arrays",
      "Rounding of all float values",
      "Prints only 3 elements",
      "Sets float64 globally"
    ]
  },
  {
    "q": "Which condition must be met for two NumPy arrays to be broadcast-compatible?",
    "c": null,
    "o": [
      "The dimensions are equal or one of them is 1",
      "Both arrays must have the same shape",
      "The larger array must be square",
      "Only 1D arrays are allowed"
    ]
  },
  {
    "q": "What will `np.random.seed(42)` do?",
    "c": null,
    "o": [
      "Set the random number generator to a fixed state",
      "Increase the randomness",
      "Prevent use of `np.random`",
      "Reset all NumPy arrays"
    ]
  },
  {
    "q": "What is the result of `a[np.array([True, False, True])]` where `a = np.array([10, 20, 30])`?",
    "c": null,
    "o": [
      "[10, 30]",
      "[10, 20]",
      "[True, False, True]",
      "Error"
    ]
  },
  {
    "q": "Which statement about `np.view()` is correct?",
    "c": null,
    "o": [
      "It creates a new array sharing the same memory",
      "It always makes a deep copy",
      "It returns the array's shape only",
      "It detaches the array from memory"
    ]
  },
  {
    "q": "What does `np.linalg.pinv()` return?",
    "c": null,
    "o": [
      "Moore-Penrose pseudoinverse of a matrix",
      "Inverse of a square matrix",
      "Projection matrix",
      "Randomized inverse"
    ]
  },
  {
    "q": "What does `np.nditer()` do?",
    "c": null,
    "o": [
      "Creates an efficient multi-dimensional iterator",
      "Creates new array with n dimensions",
      "Returns dot product of vectors",
      "Creates a mask for iteration"
    ]
  },
  {
    "q": "Which of the following can modify array elements in-place?",
    "c": null,
    "o": [
      "Using `.flat` or `np.nditer` with `op_flags=['readwrite']`",
      "Using `np.copy()`",
      "Using `np.array()`",
      "Using `np.repeat()`"
    ]
  },
  {
    "q": "What happens when a float array is used as an index?",
    "c": null,
    "o": [
      "Raises an IndexError",
      "Performs floor division",
      "Casts floats to ints",
      "Selects random indices"
    ]
  },
  {
    "q": "What is the purpose of `np.clip(array, min, max)`?",
    "c": null,
    "o": [
      "Limits array values between `min` and `max`",
      "Sorts the array",
      "Crops the array shape",
      "Slices array from `min` to `max` index"
    ]
  },
  {
    "q": "What does `np.allclose(a, b)` return?",
    "c": null,
    "o": [
      "True if all elements in `a` and `b` are approximately equal",
      "True if arrays `a` and `b` are exactly the same",
      "True if shapes match",
      "True if `a` is larger than `b`"
    ]
  },
  {
    "q": "What is a key benefit of NumPy's `ufunc` objects?",
    "c": null,
    "o": [
      "They operate element-wise and support broadcasting",
      "They replace all Python functions",
      "They create 3D arrays by default",
      "They only work with integers"
    ]
  },
  {
    "q": "Which of the following is true about `np.strides`?",
    "c": null,
    "o": [
      "It defines the number of bytes to step in each dimension",
      "It returns the number of elements in an array",
      "It calculates the dot product",
      "It tells if the array is sorted"
    ]
  },
  {
    "q": "What is the output of `np.zeros((2,), dtype=[('x', 'i4'), ('y', 'f4')])`?",
    "c": null,
    "o": [
      "An array of structured records with fields 'x' and 'y'",
      "An array with only float values",
      "A 2x2 matrix of zeros",
      "Invalid syntax"
    ]
  },
  {
    "q": "Which method allows selective updates using a boolean mask?",
    "c": null,
    "o": [
      "`array[mask] = new_values`",
      "`np.select(mask, array)`",
      "`np.choose()`",
      "`np.fill_diagonal()`"
    ]
  },
  {
    "q": "What is a view in NumPy?",
    "c": null,
    "o": [
      "A new array that shares the same data buffer",
      "An exact deep copy of an array",
      "A JSON representation of an array",
      "A visualization of the array shape"
    ]
  },
  {
    "q": "What does `np.mgrid[0:5, 0:5]` return?",
    "c": null,
    "o": [
      "A dense multi-dimensional mesh grid",
      "A 1D array from 0 to 5",
      "Random integers in range",
      "A masked array"
    ]
  },
  {
    "q": "What does `np.set_printoptions(precision=2)` do?",
    "c": null,
    "o": [
      "Changes decimal display precision for arrays",
      "Rounds all values permanently",
      "Saves array to CSV",
      "Sets max number of array rows"
    ]
  },
  {
    "q": "Which function returns the index of maximum value along an axis?",
    "c": null,
    "o": [
      "`np.argmax()`",
      "`np.maxindex()`",
      "`np.find_max()`",
      "`np.topk()`"
    ]
  },
  {
    "q": "What is `np.isclose(a, b)` used for?",
    "c": null,
    "o": [
      "Element-wise comparison allowing small tolerance",
      "Returns True if arrays are equal in shape",
      "Checks if all values are integers",
      "Rounds both arrays"
    ]
  },
  {
    "q": "What does `np.unique(array, return_counts=True)` return?",
    "c": null,
    "o": [
      "Unique elements and their frequencies",
      "Only sorted unique elements",
      "Boolean array of duplicates",
      "Index of unique items"
    ]
  },
  {
    "q": "Which NumPy module provides functions for working with polynomial series?",
    "c": null,
    "o": [
      "`np.polynomial`",
      "`np.polyfit`",
      "`np.math`",
      "`np.linalg.poly`"
    ]
  },
  {
    "q": "What is the result of `np.char.find(['apple', 'banana'], 'a')`?",
    "c": null,
    "o": [
      "[0 1]",
      "[1 1]",
      "[0 0]",
      "[True, False]"
    ]
  },
  {
    "q": "What happens when you reshape an array to a shape that does not match the number of elements?",
    "c": null,
    "o": [
      "ValueError is raised",
      "It pads with zeros",
      "It reshapes with truncation",
      "It broadcasts to fit the shape"
    ]
  },
  {
    "q": "Which broadcasting rule is correct?",
    "c": null,
    "o": [
      "A trailing dimension of size 1 can match any size",
      "Shapes must be identical",
      "Smaller arrays must always be flattened",
      "The first axis must match exactly"
    ]
  },
  {
    "q": "What does `np.ravel_multi_index(([1,2,3],[3,2,1]), (4,4))` return?",
    "c": null,
    "o": [
      "[7 10 13]",
      "[3 2 1]",
      "[1 2 3]",
      "[16 18 20]"
    ]
  },
  {
    "q": "What does `np.squeeze(np.array([[[1], [2], [3]]]))` return?",
    "c": null,
    "o": [
      "[1 2 3]",
      "[[1], [2], [3]]",
      "[[1 2 3]]",
      "[[1 2], [3 0]]"
    ]
  },
  {
    "q": "Which of the following is true for `np.take()`?",
    "c": null,
    "o": [
      "It returns elements from an array using indices",
      "It removes the specified index",
      "It splits an array into parts",
      "It reshapes the array using index pattern"
    ]
  },
  {
    "q": "What is the purpose of `np.put()`?",
    "c": null,
    "o": [
      "Replaces specific indices with given values",
      "Returns unique items from an array",
      "Saves the array to a file",
      "Extracts subarrays"
    ]
  },
  {
    "q": "What will `np.char.upper(['hello', 'world'])` output?",
    "c": null,
    "o": [
      "['HELLO' 'WORLD']",
      "['hello' 'world']",
      "['Hello' 'World']",
      "['HELLO WORLD']"
    ]
  },
  {
    "q": "What is the shape of `np.ones((3,1)) + np.arange(4)`?",
    "c": null,
    "o": [
      "(3, 4)",
      "(4, 3)",
      "(3, 1)",
      "(1, 4)"
    ]
  },
  {
    "q": "Which of the following NumPy types supports field names like a dictionary?",
    "c": null,
    "o": [
      "Structured arrays",
      "Masked arrays",
      "Recarrays",
      "Multidimensional arrays"
    ]
  },
  {
    "q": "What does `np.random.normal(0, 1, (2,3)).shape` return?",
    "c": null,
    "o": [
      "(2, 3)",
      "(3, 2)",
      "(6,)",
      "(1, 6)"
    ]
  },
  {
    "q": "What does `np.fromfunction(lambda i, j: i == j, (3, 3))` produce?",
    "c": null,
    "o": [
      "An identity matrix",
      "A matrix of ones",
      "A diagonal matrix with increasing values",
      "A matrix of zeros"
    ]
  },
  {
    "q": "Which of the following is true about NumPy’s `strides`?",
    "c": null,
    "o": [
      "They define the number of bytes to step in each dimension",
      "They are always equal across axes",
      "They control the random seed",
      "They are used to define dtypes"
    ]
  },
  {
    "q": "What is the result of `np.dot([[1, 2]], [[3], [4]])`?",
    "c": null,
    "o": [
      "[[11]]",
      "[[3, 4], [6, 8]]",
      "[[7]]",
      "[[1, 2, 3, 4]]"
    ]
  },
  {
    "q": "Which function sets elements of an array conditionally?",
    "c": null,
    "o": [
      "`np.where()`",
      "`np.pick()`",
      "`np.filter()`",
      "`np.choose()`"
    ]
  },
  {
    "q": "What does `np.linalg.inv()` compute?",
    "c": null,
    "o": [
      "Matrix inverse",
      "Matrix determinant",
      "Matrix transpose",
      "Matrix eigenvalues"
    ]
  },
  {
    "q": "Which function helps view the same data with a different dtype?",
    "c": null,
    "o": [
      "`np.ndarray.view()`",
      "`np.reshape()`",
      "`np.astype()`",
      "`np.copyto()`"
    ]
  },
  {
    "q": "How to generate a reproducible random array?",
    "c": null,
    "o": [
      "`np.random.seed(42); np.random.rand(3)`",
      "`np.set_random_seed(42); np.rand(3)`",
      "`np.random_state(42); np.random(3)`",
      "`np.fixed_seed(42); np.random.rand(3)`"
    ]
  },
  {
    "q": "Which function returns evenly spaced values in log scale?",
    "c": null,
    "o": [
      "`np.logspace()`",
      "`np.linspace()`",
      "`np.arange(log=True)`",
      "`np.geomspace()`"
    ]
  },
  {
    "q": "Which of the following will broadcast successfully: shapes (3,1) and (1,4)?",
    "c": null,
    "o": [
      "Yes, result shape will be (3, 4)",
      "No, shapes are incompatible",
      "Yes, result shape will be (1, 1)",
      "Only if both are square matrices"
    ]
  },
  {
    "q": "What does `np.may_share_memory(a, b)` check for?",
    "c": null,
    "o": [
      "Whether two arrays share the same data block in memory",
      "If arrays are equal in content",
      "Whether arrays are deep copies",
      "If arrays are from the same dtype"
    ]
  },
  {
    "q": "What is the main benefit of using `np.memmap`?",
    "c": null,
    "o": [
      "Works with data too large to fit in RAM",
      "Faster than regular arrays",
      "Encrypts array data",
      "Enables GPU acceleration"
    ]
  },
  {
    "q": "Which of the following expressions flattens a 2D array into a 1D array without copying?",
    "c": null,
    "o": [
      "`a.ravel()`",
      "`a.flatten()`",
      "`np.reshape(a, -1).copy()`",
      "`a.flat`"
    ]
  },
  {
    "q": "What does `a[::2, 1:3]` mean?",
    "c": null,
    "o": [
      "Every 2nd row, columns 1 and 2",
      "All rows, every 2nd column between 1 and 3",
      "Columns 1 to 3 of every row",
      "Rows 2 to end, columns 1 to 3"
    ]
  },
  {
    "q": "Which of the following is a valid use of `np.einsum()`?",
    "c": null,
    "o": [
      "`np.einsum('ij,jk->ik', A, B)` for matrix multiplication",
      "`np.einsum('i+j->ij', A, B)` for broadcasting addition",
      "`np.einsum('ii->i', A)` for extracting diagonal",
      "`np.einsum('i->i+j', A)` for reshaping"
    ]
  },
  {
    "q": "Which parameter in `np.array()` prevents making a copy if not needed?",
    "c": null,
    "o": [
      "`copy=False`",
      "`nocopy=True`",
      "`reuse=True`",
      "`force=False`"
    ]
  },
  {
    "q": "Which of the following techniques helps reduce memory usage for large integer arrays?",
    "c": null,
    "o": [
      "Using `dtype=np.int8` or `int16`",
      "Always converting to `float64`",
      "Enabling garbage collection",
      "Storing in compressed `.npz` format only"
    ]
  },
  {
    "q": "What does `np.seterr(divide='ignore')` do?",
    "c": null,
    "o": [
      "Suppresses divide-by-zero warnings",
      "Prevents all NumPy exceptions",
      "Raises errors on all arithmetic operations",
      "Disables overflow handling"
    ]
  },
  {
    "q": "Which of the following expressions will select odd rows of a 2D array?",
    "c": null,
    "o": [
      "`a[1::2]`",
      "`a[:, 1::2]`",
      "`a[::2]`",
      "`a[1:2]`"
    ]
  },
  {
    "q": "Which NumPy module handles arrays with missing or invalid entries gracefully?",
    "c": null,
    "o": [
      "`numpy.ma`",
      "`numpy.nan`",
      "`numpy.incomplete`",
      "`numpy.mask`"
    ]
  },
  {
    "q": "How does `np.lexsort((b, a))` sort values?",
    "c": null,
    "o": [
      "Sorts by `a` first, then by `b` for tie-breaking",
      "Sorts by `b` first, then by `a`",
      "Sorts descending by `a` and `b`",
      "Sorts by combined values of `a` and `b`"
    ]
  },
  {
    "q": "What does the `np.fromfunction` method do?",
    "c": null,
    "o": [
      "Constructs an array by executing a function over coordinate grids",
      "Generates an array from another array",
      "Imports functions from NumPy modules",
      "Creates arrays using lambdas only"
    ]
  },
  {
    "q": "How can you reverse a NumPy array `a` in-place?",
    "c": null,
    "o": [
      "`a[:] = a[::-1]`",
      "`a = a.reverse()`",
      "`np.reverse(a)`",
      "`a[::-1] = a`"
    ]
  },
  {
    "q": "Which function returns indices that would sort an array?",
    "c": null,
    "o": [
      "`np.argsort()`",
      "`np.sort_index()`",
      "`np.sorted()`",
      "`np.order()`"
    ]
  },
  {
    "q": "How can you create a structured NumPy array with fields `name` and `score`?",
    "c": null,
    "o": [
      "`np.array([('Tom', 80)], dtype=[('name','U10'), ('score','i4')])`",
      "`np.struct([name, score])`",
      "`np.array(('Tom', 80), dtype='object')`",
      "`np.array([name='Tom', score=80])`"
    ]
  },
  {
    "q": "Which function computes a histogram of values efficiently?",
    "c": null,
    "o": [
      "`np.histogram()`",
      "`np.bincount()`",
      "`np.bucket()`",
      "`np.sort_bins()`"
    ]
  },
  {
    "q": "What does `np.squeeze()` do?",
    "c": null,
    "o": [
      "Removes axes with length 1",
      "Reduces memory footprint",
      "Compresses array data",
      "Sorts array elements"
    ]
  },
  {
    "q": "What is the result of broadcasting arrays of shape (5, 1) and (1, 7)?",
    "c": null,
    "o": [
      "Shape (5, 7)",
      "Shape (1, 1)",
      "Shape (7, 5)",
      "Raises ValueError"
    ]
  },
  {
    "q": "How does NumPy represent complex numbers internally?",
    "c": null,
    "o": [
      "As pairs of 64-bit floats (real and imaginary)",
      "Using float128 numbers only",
      "As a single float per complex number",
      "As objects of type `complex128` in Python list"
    ]
  },
  {
    "q": "Which attribute gives the number of bytes consumed by one element in a NumPy array?",
    "c": null,
    "o": [
      "`itemsize`",
      "`nbytes`",
      "`elementsize`",
      "`sizeof`"
    ]
  },
  {
    "q": "How can you check if two NumPy arrays share the same memory?",
    "c": null,
    "o": [
      "`np.may_share_memory(a, b)`",
      "`np.same_memory(a, b)`",
      "`a.base is b.base`",
      "`np.memory_equal(a, b)`"
    ]
  },
  {
    "q": "What does `np.empty((2, 2))` return?",
    "c": null,
    "o": [
      "Uninitialized array with arbitrary values",
      "Array filled with zeros",
      "Array filled with NaNs",
      "Raises an error"
    ]
  },
  {
    "q": "Which NumPy function can repeat elements of an array multiple times?",
    "c": null,
    "o": [
      "`np.repeat()`",
      "`np.tile()`",
      "`np.copy()`",
      "`np.duplicate()`"
    ]
  },
  {
    "q": "Which flag of a NumPy array shows if it is stored in row-major order?",
    "c": null,
    "o": [
      "`a.flags['C_CONTIGUOUS']`",
      "`a.flags['ROW_MAJOR']`",
      "`a.layout == 'C'`",
      "`a.memory_order == 'C'`"
    ]
  },
  {
    "q": "Which function computes the cumulative product of array elements?",
    "c": null,
    "o": [
      "`np.cumprod()`",
      "`np.product()`",
      "`np.cumsum()`",
      "`np.accumulate()`"
    ]
  },
  {
    "q": "Which of the following is `True` about `np.matrix`?",
    "c": null,
    "o": [
      "It's always 2D and is discouraged in favor of `ndarray`",
      "It supports sparse operations by default",
      "It replaces all NumPy arrays",
      "It is recommended for new code"
    ]
  },
  {
    "q": "What does `a.T` do for a NumPy array `a`?",
    "c": null,
    "o": [
      "Returns the transpose of the array",
      "Returns a reversed copy",
      "Returns the shape",
      "Returns a tiled version"
    ]
  },
  {
    "q": "Which NumPy function generates coordinate matrices from coordinate vectors?",
    "c": null,
    "o": [
      "`np.meshgrid()`",
      "`np.grid()`",
      "`np.coords()`",
      "`np.generate_grid()`"
    ]
  },
  {
    "q": "What does `np.set_printoptions(precision=3)` do?",
    "c": null,
    "o": [
      "Limits float display to 3 decimal places",
      "Limits array size to 3 elements",
      "Rounds all values in memory",
      "Sets array shape to 3 columns"
    ]
  },
  {
    "q": "Which of the following creates a view rather than a copy in NumPy?",
    "c": null,
    "o": [
      "`a[1:]`",
      "`a.copy()`",
      "`np.array(a)`",
      "`a + 0`"
    ]
  },
  {
    "q": "What is the purpose of the `.strides` attribute in a NumPy array?",
    "c": null,
    "o": [
      "Shows the number of bytes to step in each dimension",
      "Indicates memory layout (row or column major)",
      "Counts the number of elements",
      "Defines shape of the array"
    ]
  },
  {
    "q": "Which NumPy function creates a structured array?",
    "c": null,
    "o": [
      "`np.zeros(3, dtype=[('x', int), ('y', float)])`",
      "`np.structure([int, float])`",
      "`np.array((int, float))`",
      "`np.init_structured()`"
    ]
  },
  {
    "q": "What does broadcasting mean in NumPy?",
    "c": null,
    "o": [
      "Extending arrays with smaller dimensions to match larger ones",
      "Sending arrays to external devices",
      "Reducing dimensions",
      "Copying arrays across processes"
    ]
  },
  {
    "q": "Which NumPy function returns the pseudo-inverse of a matrix?",
    "c": null,
    "o": [
      "`np.linalg.pinv()`",
      "`np.linalg.inv()`",
      "`np.inverse()`",
      "`np.matrix_inverse()`"
    ]
  },
  {
    "q": "What happens if you try to broadcast a (3, 1) and (4,) array together?",
    "c": null,
    "o": [
      "Raises `ValueError` due to incompatible shapes",
      "Result is shape (3, 4)",
      "Automatically transposes one of the arrays",
      "Returns scalar output"
    ]
  },
  {
    "q": "What is the output of `np.diag([1, 2, 3])`?",
    "c": null,
    "o": [
      "A 3x3 matrix with 1,2,3 on the diagonal",
      "An array of shape (3,)",
      "A diagonal sum",
      "An identity matrix"
    ]
  },
  {
    "q": "Which method is used to stack arrays vertically?",
    "c": null,
    "o": [
      "`np.vstack()`",
      "`np.hstack()`",
      "`np.concat(axis=1)`",
      "`np.stack_vertical()`"
    ]
  },
  {
    "q": "What is returned by `np.triu(np.ones((3,3)))`?",
    "c": null,
    "o": [
      "Upper triangle of a 3x3 matrix of ones",
      "Lower triangle of ones",
      "All zeros",
      "Identity matrix"
    ]
  },
  {
    "q": "What does `np.argsort()` return?",
    "c": null,
    "o": [
      "Indices that would sort the array",
      "Sorted values",
      "Indices of non-zero elements",
      "Cumulative sorted values"
    ]
  },
  {
    "q": "What is the output shape of `np.dot((3,), (3,))`?",
    "c": null,
    "o": [
      "Scalar",
      "(3, 3)",
      "(1,)",
      "Raises an error"
    ]
  },
  {
    "q": "Which of the following indicates C-contiguous memory layout in NumPy?",
    "c": null,
    "o": [
      "`a.flags['C_CONTIGUOUS'] == True`",
      "`a.layout == 'C'`",
      "`a.memory_order == 'row'`",
      "`a.is_c_layout()`"
    ]
  },
  {
    "q": "What is the difference between `.flat` and `.ravel()`?",
    "c": null,
    "o": [
      "`.flat` returns an iterator, `.ravel()` returns a view or copy",
      "`.flat` always returns a copy",
      "`.ravel()` modifies the original array",
      "They are identical"
    ]
  },
  {
    "q": "Which NumPy function computes the QR decomposition of a matrix?",
    "c": null,
    "o": [
      "`np.linalg.qr()`",
      "`np.qr_decompose()`",
      "`np.linalg.decompose()`",
      "`np.decomp.qr()`"
    ]
  },
  {
    "q": "Which indexing technique allows selecting elements with boolean arrays?",
    "c": null,
    "o": [
      "Masking",
      "Slicing",
      "Ellipsis indexing",
      "Memory mapping"
    ]
  },
  {
    "q": "What is the correct result of `np.array([1,2,3])[np.array([True, False, True])]`?",
    "c": null,
    "o": [
      "[1, 3]",
      "[1, 2]",
      "[True, False, True]",
      "Raises an error"
    ]
  },
  {
    "q": "What will be the result of `np.array([[1,2],[3,4]]) @ np.array([[2],[1]])`?",
    "c": null,
    "o": [
      "[[4], [10]]",
      "[[5], [7]]",
      "[[2, 2], [3, 1]]",
      "Raises a ValueError"
    ]
  },
  {
    "q": "Which function checks if two arrays share memory?",
    "c": null,
    "o": [
      "`np.may_share_memory()`",
      "`np.shares_memory()`",
      "`np.memory_overlap()`",
      "`np.same_storage()`"
    ]
  },
  {
    "q": "What is `np.squeeze()` used for?",
    "c": null,
    "o": [
      "Removes single-dimensional entries from shape",
      "Compresses the array values",
      "Flattens the array",
      "Applies L2 normalization"
    ]
  },
  {
    "q": "Which of these is used for memory-mapped file access in NumPy?",
    "c": null,
    "o": [
      "`np.memmap()`",
      "`np.mapfile()`",
      "`np.memoryfile()`",
      "`np.filemap()`"
    ]
  },
  {
    "q": "Which data structure allows NumPy arrays to have fields with different data types?",
    "c": null,
    "o": [
      "Structured arrays",
      "Object arrays",
      "Masked arrays",
      "Jagged arrays"
    ]
  },
  {
    "q": "What is the result of `np.broadcast_shapes((3,1), (1,4))`?",
    "c": null,
    "o": [
      "(3, 4)",
      "(1, 3, 4)",
      "(3, 1, 4)",
      "Raises an error"
    ]
  },
  {
    "q": "Which method creates a view of an array with a new shape without copying data?",
    "c": null,
    "o": [
      "reshape()",
      "resize()",
      "copy()",
      "reshape(copy=False)"
    ]
  },
  {
    "q": "What does `np.isclose(a, b)` do?",
    "c": null,
    "o": [
      "Checks if values in `a` and `b` are approximately equal",
      "Checks if arrays are the same shape",
      "Returns elementwise equality",
      "Checks for NaNs only"
    ]
  },
  {
    "q": "Which NumPy function is best for generating samples from a normal distribution?",
    "c": null,
    "o": [
      "np.random.normal()",
      "np.random.randn()",
      "np.normal()",
      "np.distribution.normal()"
    ]
  },
  {
    "q": "How can you define a structured dtype with an integer and a float field?",
    "c": null,
    "o": [
      "np.dtype([('x', int), ('y', float)])",
      "np.structured([int, float])",
      "np.dtype((int, float))",
      "np.struct([int, float])"
    ]
  },
  {
    "q": "What does `np.median()` compute?",
    "c": null,
    "o": [
      "The middle value of the sorted array",
      "The average of all elements",
      "The mode of values",
      "The minimum and maximum"
    ]
  },
  {
    "q": "Which attribute shows the byte offset of each field in a structured array?",
    "c": null,
    "o": [
      "dtype.fields",
      "dtype.offsets",
      "dtype.shape",
      "dtype.bytes"
    ]
  },
  {
    "q": "Which function returns the indices that would sort an array?",
    "c": null,
    "o": [
      "np.argsort()",
      "np.sort()",
      "np.order()",
      "np.indexsort()"
    ]
  },
  {
    "q": "Which function evaluates if any element in the array is True?",
    "c": null,
    "o": [
      "np.any()",
      "np.all()",
      "np.exists()",
      "np.some()"
    ]
  },
  {
    "q": "What does the `order='F'` parameter do in `np.array()`?",
    "c": null,
    "o": [
      "Stores the array in column-major (Fortran-style) order",
      "Forces float conversion",
      "Creates a flattened array",
      "Sorts the array"
    ]
  },
  {
    "q": "Which of these functions can return both values and indices of maximum elements?",
    "c": null,
    "o": [
      "np.argmax() and np.max()",
      "np.max() only",
      "np.argmax() only",
      "np.maximum()"
    ]
  },
  {
    "q": "Which NumPy object allows handling invalid entries like NaNs without removing them?",
    "c": null,
    "o": [
      "MaskedArray",
      "StructuredArray",
      "TypedArray",
      "VoidArray"
    ]
  },
  {
    "q": "What will `np.random.choice([10, 20, 30], p=[0.7, 0.2, 0.1])` return?",
    "c": null,
    "o": [
      "Random element from list with weighted probabilities",
      "Random permutation of the list",
      "All elements multiplied by probabilities",
      "Raises an error"
    ]
  },
  {
    "q": "Which NumPy function ensures reproducible random numbers?",
    "c": null,
    "o": [
      "np.random.seed()",
      "np.set_random_state()",
      "np.random.shuffle()",
      "np.random.stabilize()"
    ]
  },
  {
    "q": "What is the difference between `np.copy()` and simple assignment (`=`)?",
    "c": null,
    "o": [
      "`np.copy()` creates a new array in memory",
      "Both do the same thing",
      "`=` creates a deep copy",
      "`np.copy()` creates a reference"
    ]
  },
  {
    "q": "Which attribute helps determine if an array is writable?",
    "c": null,
    "o": [
      "flags.writeable",
      "dtype.writable",
      "array.mutable",
      "array.can_write"
    ]
  },
  {
    "q": "Which function allows combining multiple boolean conditions?",
    "c": null,
    "o": [
      "np.logical_and()",
      "np.and_()",
      "np.bitwise_and()",
      "np.combine()"
    ]
  },
  {
    "q": "What does `np.set_printoptions(precision=3)` affect?",
    "c": null,
    "o": [
      "Controls decimal precision in output display",
      "Changes floating-point arithmetic precision",
      "Reduces memory usage",
      "Rounds data permanently"
    ]
  },
  {
    "q": "Which NumPy function returns the unique elements of an array along with their counts?",
    "c": null,
    "o": [
      "np.unique(..., return_counts=True)",
      "np.distinct()",
      "np.set()",
      "np.counter()"
    ]
  },
  {
    "q": "Which indexing method returns a **view** instead of a **copy** in NumPy?",
    "c": null,
    "o": [
      "Slice indexing (e.g., a[1:4])",
      "Fancy indexing (e.g., a[[1,3]])",
      "Boolean indexing",
      "a.copy()"
    ]
  },
  {
    "q": "What does `np.einsum('ij,jk->ik', A, B)` compute?",
    "c": null,
    "o": [
      "Matrix multiplication of A and B",
      "Element-wise multiplication",
      "Matrix addition",
      "Kronecker product"
    ]
  },
  {
    "q": "Which of the following can change the shape of an array without copying data?",
    "c": null,
    "o": [
      "np.reshape() with compatible shape",
      "np.resize()",
      "np.copy()",
      "np.concatenate()"
    ]
  },
  {
    "q": "Which of the following statements about broadcasting is TRUE?",
    "c": null,
    "o": [
      "Broadcasting compares array shapes from the trailing dimensions",
      "Arrays must have the same shape",
      "Broadcasting always increases memory usage",
      "Only 1D arrays can be broadcast"
    ]
  },
  {
    "q": "Which NumPy function inverts a square matrix?",
    "c": null,
    "o": [
      "np.linalg.inv()",
      "np.invert()",
      "np.matrix_inverse()",
      "np.transpose()"
    ]
  },
  {
    "q": "How can you calculate the dot product of two vectors in NumPy?",
    "c": null,
    "o": [
      "np.dot(a, b)",
      "a * b",
      "np.multiply(a, b)",
      "np.add(a, b)"
    ]
  },
  {
    "q": "Which method checks whether two NumPy arrays occupy the same memory?",
    "c": null,
    "o": [
      "np.may_share_memory()",
      "np.same_memory()",
      "np.check_buffer()",
      "np.array_equal()"
    ]
  },
  {
    "q": "Which argument of `np.array()` forces a copy even if input is already an array?",
    "c": null,
    "o": [
      "copy=True",
      "force_copy=True",
      "force=True",
      "deep=True"
    ]
  },
  {
    "q": "What does `np.dot(A, B.T)` do when A and B are 2D arrays?",
    "c": null,
    "o": [
      "Computes dot product of A and transpose of B",
      "Performs element-wise multiplication",
      "Adds A and B",
      "Computes dot product of transpose of A and B"
    ]
  },
  {
    "q": "Which function flattens an array without copying it (if possible)?",
    "c": null,
    "o": [
      "ravel()",
      "flatten()",
      "reshape(-1)",
      "unroll()"
    ]
  },
  {
    "q": "Which NumPy function is used to create a memory-mapped array from a binary file?",
    "c": null,
    "o": [
      "np.memmap()",
      "np.binary_map()",
      "np.mapfile()",
      "np.filearray()"
    ]
  },
  {
    "q": "Which of the following best describes `np.empty((2,2))`?",
    "c": null,
    "o": [
      "Creates an uninitialized 2x2 array with arbitrary values",
      "Creates a 2x2 array with zeros",
      "Creates a 2x2 array with ones",
      "Raises an error"
    ]
  },
  {
    "q": "What does `arr.strides` return in NumPy?",
    "c": null,
    "o": [
      "Number of bytes to step in each dimension when traversing an array",
      "Step sizes used in slicing",
      "Memory address of the array",
      "Shape of the array"
    ]
  },
  {
    "q": "What does the `np.ma` module provide in NumPy?",
    "c": null,
    "o": [
      "Support for masked arrays with invalid/missing values",
      "Matrix algebra routines",
      "Meta attributes for arrays",
      "Multi-dimensional FFT functions"
    ]
  },
  {
    "q": "What is a structured array in NumPy?",
    "c": null,
    "o": [
      "An array with multiple named fields of different data types",
      "A reshaped 2D array",
      "An array with strict type enforcement",
      "A read-only array"
    ]
  },
  {
    "q": "Which of the following is TRUE about NumPy views?",
    "c": null,
    "o": [
      "Modifying a view modifies the original array",
      "Views always copy data",
      "Views only work on 1D arrays",
      "Views allocate new memory"
    ]
  },
  {
    "q": "Which is the most memory-efficient way to perform element-wise operations on two large arrays?",
    "c": null,
    "o": [
      "Use in-place operations like `a += b`",
      "Use Python loops",
      "Use list comprehensions",
      "Convert to lists before operation"
    ]
  },
  {
    "q": "Which NumPy attribute tells you if an array is C-contiguous?",
    "c": null,
    "o": [
      "arr.flags['C_CONTIGUOUS']",
      "arr.is_c_order",
      "arr.layout == 'C'",
      "arr.memory['c']"
    ]
  },
  {
    "q": "What does `np.frombuffer()` do?",
    "c": null,
    "o": [
      "Creates an array from a Python buffer without copying the data",
      "Loads an array from file",
      "Creates an array from another array",
      "Buffers a NumPy array to disk"
    ]
  },
  {
    "q": "Which function can be used to iterate efficiently over large arrays with automatic broadcasting?",
    "c": null,
    "o": [
      "np.nditer()",
      "np.iter()",
      "np.iterator()",
      "np.array_iter()"
    ]
  },
  {
    "q": "What happens if two arrays are broadcast together but have incompatible shapes?",
    "c": null,
    "o": [
      "ValueError is raised",
      "Smaller array is automatically resized",
      "Array with fewer dimensions is padded with zeros",
      "Arrays are silently ignored"
    ]
  },
  {
    "q": "Which function converts a flat index into a tuple of coordinate indices in a given shape?",
    "c": null,
    "o": [
      "np.unravel_index()",
      "np.index_flat()",
      "np.flatten_index()",
      "np.tuple_index()"
    ]
  },
  {
    "q": "Which NumPy method allows you to assign a specific byte order to a dtype?",
    "c": null,
    "o": [
      "dtype.newbyteorder()",
      "dtype.set_endian()",
      "np.byteorder()",
      "np.setdtype_endian()"
    ]
  },
  {
    "q": "What is the output of `np.array([1+2j, 3+4j]).real`?",
    "c": null,
    "o": [
      "[1. 3.]",
      "[2. 4.]",
      "[1+2j 3+4j]",
      "Raises an error"
    ]
  },
  {
    "q": "Which of the following is TRUE about advanced indexing in NumPy?",
    "c": null,
    "o": [
      "It always returns a copy of the data",
      "It modifies the original array in-place",
      "It can only be used with slices",
      "It can only be used on 1D arrays"
    ]
  },
  {
    "q": "What is the result of using `np.reshape()` with `-1` as one of the dimensions?",
    "c": null,
    "o": [
      "Automatically infers that dimension",
      "Raises an error",
      "Creates a jagged array",
      "Flattens the array"
    ]
  },
  {
    "q": "What is the default memory layout used by NumPy arrays?",
    "c": null,
    "o": [
      "Row-major (C-style)",
      "Column-major (Fortran-style)",
      "Zigzag order",
      "Linked list structure"
    ]
  },
  {
    "q": "Which NumPy function allows you to split an array based on an index array?",
    "c": null,
    "o": [
      "np.split()",
      "np.index_split()",
      "np.array_split()",
      "np.cut()"
    ]
  },
  {
    "q": "What will `np.isfortran()` check for a NumPy array?",
    "c": null,
    "o": [
      "Whether the array is stored in column-major order",
      "Whether the array contains only float values",
      "Whether the array was created in Fortran",
      "Whether the array is one-dimensional"
    ]
  },
  {
    "q": "Which of the following NumPy types can represent structured data?",
    "c": null,
    "o": [
      "np.dtype({'names': ['x', 'y'], 'formats': ['f4', 'f4']})",
      "np.object_",
      "np.float128",
      "np.struct_"
    ]
  }
]