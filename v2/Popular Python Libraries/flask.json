[
  {
    "q": "Which decorator is used to define a route in Flask?",
    "c": null,
    "o": [
      "@app.route",
      "@route.app",
      "@flask.route",
      "@url.route"
    ]
  },
  {
    "q": "What HTTP methods are handled by default when no methods are specified in @app.route?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "Which function is used to render HTML templates in Flask?",
    "c": null,
    "o": [
      "render_template",
      "render_html",
      "show_template",
      "display_html"
    ]
  },
  {
    "q": "What syntax is used in Jinja2 templates to insert variables?",
    "c": null,
    "o": [
      "{{ variable }}",
      "[[ variable ]]",
      "<% variable %>",
      "{% variable %}"
    ]
  },
  {
    "q": "How do you access form data in Flask from a POST request?",
    "c": null,
    "o": [
      "request.form",
      "request.data",
      "request.query",
      "request.get"
    ]
  },
  {
    "q": "How can you get query parameters from a URL in Flask?",
    "c": null,
    "o": [
      "request.args",
      "request.query",
      "request.form",
      "request.json"
    ]
  },
  {
    "q": "Which module helps build REST APIs in Flask using class-based views?",
    "c": null,
    "o": [
      "flask_restful",
      "flask_api",
      "flask_request",
      "flask_http"
    ]
  },
  {
    "q": "Which Flask extension is used to work with SQL databases?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-Database",
      "Flask-DB",
      "Flask-ORM"
    ]
  },
  {
    "q": "Which extension is used for handling web forms in Flask?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Forms",
      "Flask-Validate",
      "Flask-Formify"
    ]
  },
  {
    "q": "Which tool is commonly used to deploy Flask apps in production?",
    "c": null,
    "o": [
      "Gunicorn",
      "Werkzeug",
      "Flask-Run",
      "Jinja2"
    ]
  },
  {
    "q": "Which of the following is used to create a login system in Flask?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Auth",
      "Flask-Users",
      "Flask-Signin"
    ]
  },
  {
    "q": "Which of the following is used to run a Flask app using WSGI servers?",
    "c": null,
    "o": [
      "WSGI",
      "HTTPServer",
      "AppServer",
      "FlaskRunner"
    ]
  },
  {
    "q": "Which method is used to get JSON data from a request body?",
    "c": null,
    "o": [
      "request.get_json()",
      "request.json_data()",
      "request.body.json()",
      "request.json()"
    ]
  },
  {
    "q": "Which file is commonly used to define Docker settings for a Flask app?",
    "c": null,
    "o": [
      "Dockerfile",
      "docker.txt",
      "docker.json",
      "flask_docker.yml"
    ]
  },
  {
    "q": "What is the default port Flask runs on when using app.run()?",
    "c": null,
    "o": [
      "5000",
      "8000",
      "8080",
      "3000"
    ]
  },
  {
    "q": "Which function starts the Flask development server?",
    "c": null,
    "o": [
      "app.run()",
      "app.start()",
      "flask.run()",
      "run.app()"
    ]
  },
  {
    "q": "Which of the following is used to import Flask in your Python file?",
    "c": null,
    "o": [
      "from flask import Flask",
      "import flask.core",
      "from flask_app import Flask",
      "import Flask"
    ]
  },
  {
    "q": "Which Jinja2 syntax is used to write control structures like loops and conditionals?",
    "c": null,
    "o": [
      "{% ... %}",
      "{{ ... }}",
      "[[ ... ]]",
      "<% ... %>"
    ]
  },
  {
    "q": "What is the purpose of Flask's Blueprint feature?",
    "c": null,
    "o": [
      "Organize routes into reusable components",
      "Style HTML templates",
      "Connect to the database",
      "Configure the app settings"
    ]
  },
  {
    "q": "How do you define a variable route in Flask for a user ID?",
    "c": null,
    "o": [
      "/user/<int:id>",
      "/user/{id}",
      "/user/?id=",
      "/user/[id]"
    ]
  },
  {
    "q": "Which method is used in Flask to redirect users to a different route?",
    "c": null,
    "o": [
      "redirect()",
      "url_redirect()",
      "goto()",
      "navigate()"
    ]
  },
  {
    "q": "Which function is used to generate a URL from a route function name?",
    "c": null,
    "o": [
      "url_for()",
      "get_url()",
      "route_url()",
      "link_to()"
    ]
  },
  {
    "q": "Where should your HTML templates be stored for Flask to find them by default?",
    "c": null,
    "o": [
      "templates folder",
      "static folder",
      "views folder",
      "html folder"
    ]
  },
  {
    "q": "In Flask-WTF, what is used to define form fields?",
    "c": null,
    "o": [
      "WTForms classes",
      "HTML input tags",
      "request.form dictionary",
      "render_form() function"
    ]
  },
  {
    "q": "Which of the following is true about `request.method` in Flask?",
    "c": null,
    "o": [
      "It tells whether the request is GET, POST, etc.",
      "It contains the path of the route",
      "It provides access to form data",
      "It contains the response object"
    ]
  },
  {
    "q": "Which file type is commonly used for Flask configuration settings?",
    "c": null,
    "o": [
      ".py",
      ".cfg",
      ".json",
      ".ini"
    ]
  },
  {
    "q": "In a Flask app, where should static files like CSS and JavaScript be placed?",
    "c": null,
    "o": [
      "static folder",
      "templates folder",
      "assets folder",
      "media folder"
    ]
  },
  {
    "q": "What does the `debug=True` argument do in `app.run()`?",
    "c": null,
    "o": [
      "Enables auto-reload and better error messages",
      "Increases the server speed",
      "Disables security warnings",
      "Redirects logs to a file"
    ]
  },
  {
    "q": "What does `request.files` allow you to access in Flask?",
    "c": null,
    "o": [
      "Uploaded files",
      "Session variables",
      "Template content",
      "Database records"
    ]
  },
  {
    "q": "Which of these is a common WSGI server used with Flask for production?",
    "c": null,
    "o": [
      "Gunicorn",
      "SQLite",
      "Werkzeug",
      "Jinja2"
    ]
  },
  {
    "q": "What does the 'methods' argument in @app.route specify?",
    "c": null,
    "o": [
      "Which HTTP methods the route should accept",
      "The file type of the route",
      "The route’s priority",
      "Whether the route is secure"
    ]
  },
  {
    "q": "What type of value does `request.args.get('name')` return?",
    "c": null,
    "o": [
      "String",
      "Integer",
      "List",
      "Boolean"
    ]
  },
  {
    "q": "What happens if you do not specify `methods=['POST']` in a route and send a POST request?",
    "c": null,
    "o": [
      "You get a 405 Method Not Allowed error",
      "It defaults to GET and processes it anyway",
      "It accepts the request but ignores the data",
      "It returns a 200 OK with empty content"
    ]
  },
  {
    "q": "Which HTTP status code typically indicates a successful POST creation?",
    "c": null,
    "o": [
      "201",
      "200",
      "404",
      "500"
    ]
  },
  {
    "q": "Which function in Flask is used to abort a request with an error code?",
    "c": null,
    "o": [
      "abort()",
      "stop_request()",
      "error()",
      "raise_error()"
    ]
  },
  {
    "q": "What is the purpose of Flask’s `url_for()` function?",
    "c": null,
    "o": [
      "To generate a URL for a given view function",
      "To return the current URL path",
      "To get a route from a string",
      "To build an API endpoint"
    ]
  },
  {
    "q": "Which Flask extension is commonly used for database migration?",
    "c": null,
    "o": [
      "Flask-Migrate",
      "Flask-Upgrade",
      "Flask-Schema",
      "Flask-DBMove"
    ]
  },
  {
    "q": "Which of the following command runs a Flask app in debug mode?",
    "c": null,
    "o": [
      "FLASK_ENV=development flask run",
      "flask debug run",
      "flask dev start",
      "python -m flask --debug"
    ]
  },
  {
    "q": "How can you secure a route so that only logged-in users can access it in Flask-Login?",
    "c": null,
    "o": [
      "@login_required",
      "@authenticated",
      "@secure_route",
      "@user_only"
    ]
  },
  {
    "q": "What is the default HTTP status code for a successful GET request?",
    "c": null,
    "o": [
      "200",
      "201",
      "404",
      "500"
    ]
  },
  {
    "q": "What is returned by `jsonify()` in Flask?",
    "c": null,
    "o": [
      "A JSON response object",
      "A plain string",
      "An HTML template",
      "A request object"
    ]
  },
  {
    "q": "In a Flask app, how do you handle file uploads?",
    "c": null,
    "o": [
      "Using request.files and saving the file",
      "Using request.args and downloading the file",
      "With request.download()",
      "By writing to static/ folder directly"
    ]
  },
  {
    "q": "Which folder is Flask configured to serve static files from by default?",
    "c": null,
    "o": [
      "static",
      "assets",
      "media",
      "resources"
    ]
  },
  {
    "q": "What is the purpose of `@app.before_request` in Flask?",
    "c": null,
    "o": [
      "To run code before each request",
      "To run code after each request",
      "To define GET routes",
      "To set static file paths"
    ]
  },
  {
    "q": "Which function is used to send a JSON response in Flask?",
    "c": null,
    "o": [
      "jsonify()",
      "render_json()",
      "send_json()",
      "output_json()"
    ]
  },
  {
    "q": "What does the `@app.route('/')` decorator do in Flask?",
    "c": null,
    "o": [
      "Defines the route for the home page",
      "Redirects to another page",
      "Specifies the template location",
      "Registers a blueprint"
    ]
  },
  {
    "q": "Which method should be used in a form to securely send sensitive data like passwords?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What is the correct way to pass data to a Jinja2 template in Flask?",
    "c": "render_template('home.html', username='Alice')",
    "o": [
      "username='Alice'",
      "user='Alice'",
      "data='Alice'",
      "params='Alice'"
    ]
  },
  {
    "q": "Which of the following is the correct way to create a Flask app instance?",
    "c": "from flask import Flask\napp = Flask(__name__)",
    "o": [
      "Flask(__name__)",
      "Flask(app)",
      "FlaskApp()",
      "AppFlask()"
    ]
  },
  {
    "q": "Which Flask extension is used for user session management and login functionality?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Sessions",
      "Flask-Security",
      "Flask-Auth"
    ]
  },
  {
    "q": "Which tag in Jinja2 is used to write if-else conditions?",
    "c": null,
    "o": [
      "{% if ... %}",
      "{{ if ... }}",
      "[[ if ... ]]",
      "<% if ... %>"
    ]
  },
  {
    "q": "Which function can be used to flash messages in Flask?",
    "c": null,
    "o": [
      "flash()",
      "alert()",
      "notify()",
      "show_message()"
    ]
  },
  {
    "q": "Which of these is true about `request.form.get('field')`?",
    "c": null,
    "o": [
      "It safely gets a field value from submitted form data",
      "It gets a field value from query parameters",
      "It fetches a field from the database",
      "It gets the value from a JSON object"
    ]
  },
  {
    "q": "What does `@app.errorhandler(404)` do?",
    "c": null,
    "o": [
      "Handles 404 Not Found errors",
      "Blocks all 404 errors from being raised",
      "Ignores broken links",
      "Redirects all 404 errors to index.html"
    ]
  },
  {
    "q": "Which of the following commands creates a virtual environment in Python?",
    "c": null,
    "o": [
      "python -m venv venv",
      "flask init env",
      "python flask --venv",
      "create_venv flask"
    ]
  },
  {
    "q": "Which port number will this Flask app run on?",
    "c": "app.run(port=8080)",
    "o": [
      "8080",
      "5000",
      "8000",
      "3000"
    ]
  },
  {
    "q": "Which Flask object is used to access the incoming request data?",
    "c": null,
    "o": [
      "request",
      "form",
      "data",
      "submit"
    ]
  },
  {
    "q": "What is the default template engine used by Flask?",
    "c": null,
    "o": [
      "Jinja2",
      "Mako",
      "Mustache",
      "EJS"
    ]
  },
  {
    "q": "What is the use of `app.config` in Flask?",
    "c": null,
    "o": [
      "To set or access application configuration variables",
      "To define route URLs",
      "To register blueprints",
      "To start the server"
    ]
  },
  {
    "q": "Which command is used to install Flask?",
    "c": null,
    "o": [
      "pip install flask",
      "flask install",
      "pip install FlaskApp",
      "python -m flask install"
    ]
  },
  {
    "q": "What is the role of `__name__` when creating a Flask app?",
    "c": null,
    "o": [
      "It helps Flask determine the root path of the app",
      "It is the route name for the app",
      "It defines the server name",
      "It imports all templates"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a POST route in Flask?",
    "c": "from flask import Flask\napp = Flask(__name__)\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    return 'Submitted'",
    "o": [
      "methods=['POST']",
      "type='POST'",
      "method='post'",
      "post=True"
    ]
  },
  {
    "q": "Which Jinja2 syntax is used to loop through items in a template?",
    "c": null,
    "o": [
      "{% for item in list %}",
      "{{ for item in list }}",
      "<% for item in list %>",
      "for item in list:"
    ]
  },
  {
    "q": "What will the following route return when accessed?",
    "c": "from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return 'Welcome!'",
    "o": [
      "Welcome!",
      "Home Page",
      "None",
      "404 Not Found"
    ]
  },
  {
    "q": "What will `request.method == 'POST'` check?",
    "c": null,
    "o": [
      "If the request was made using the POST method",
      "If form data exists",
      "If the user is logged in",
      "If a route was registered as POST"
    ]
  },
  {
    "q": "Which tool is commonly used to containerize Flask apps?",
    "c": null,
    "o": [
      "Docker",
      "Gunicorn",
      "SQLAlchemy",
      "Postman"
    ]
  },
  {
    "q": "Which is the correct way to access JSON data sent in a request?",
    "c": null,
    "o": [
      "request.get_json()",
      "request.json_data",
      "request.body.json",
      "request.read_json()"
    ]
  },
  {
    "q": "How do you return a 404 error manually in Flask?",
    "c": null,
    "o": [
      "abort(404)",
      "raise(404)",
      "return 404",
      "error(404)"
    ]
  },
  {
    "q": "What type of response does Flask send when you return a dictionary?",
    "c": "return {\"message\": \"success\"}",
    "o": [
      "JSON",
      "HTML",
      "Plain text",
      "XML"
    ]
  },
  {
    "q": "What keyword is used in Flask to import incoming request data?",
    "c": null,
    "o": [
      "request",
      "data",
      "input",
      "submit"
    ]
  },
  {
    "q": "Where should you place a CSS file in a Flask app?",
    "c": null,
    "o": [
      "static folder",
      "templates folder",
      "css folder",
      "assets folder"
    ]
  },
  {
    "q": "Which function in Flask-WTF protects forms from CSRF attacks?",
    "c": null,
    "o": [
      "csrf_token",
      "auth_token",
      "form_token",
      "session_key"
    ]
  },
  {
    "q": "What is returned by `url_for('home')` if the route is defined as @app.route('/home')?",
    "c": "from flask import Flask, url_for\napp = Flask(__name__)\n\n@app.route('/home')\ndef home():\n    return 'Home Page'",
    "o": [
      "/home",
      "home",
      "/url/home",
      "url/home"
    ]
  },
  {
    "q": "Which function in Flask-Login returns the current logged-in user?",
    "c": null,
    "o": [
      "current_user",
      "logged_user",
      "get_user",
      "user_logged"
    ]
  },
  {
    "q": "What is the purpose of the `static_url_path` argument in Flask?",
    "c": null,
    "o": [
      "It changes the URL prefix for static files",
      "It hides static files from public access",
      "It defines the base route for templates",
      "It logs file requests"
    ]
  },
  {
    "q": "What does `@app.route('/about')` do in a Flask app?",
    "c": null,
    "o": [
      "Maps the '/about' URL to a function",
      "Creates a new HTML template",
      "Redirects the user to the homepage",
      "Starts the Flask app"
    ]
  },
  {
    "q": "Which of the following is used to protect form submissions in Flask-WTF?",
    "c": null,
    "o": [
      "CSRF token",
      "JWT token",
      "OAuth token",
      "API key"
    ]
  },
  {
    "q": "Which folder is typically used to store images and JavaScript files in a Flask app?",
    "c": null,
    "o": [
      "static",
      "templates",
      "resources",
      "views"
    ]
  },
  {
    "q": "Which command runs the Flask development server?",
    "c": null,
    "o": [
      "flask run",
      "python run.py",
      "run flask",
      "start flask"
    ]
  },
  {
    "q": "In Flask, which object is used to create form fields with Flask-WTF?",
    "c": null,
    "o": [
      "FlaskForm",
      "FormField",
      "FieldForm",
      "FormControl"
    ]
  },
  {
    "q": "Which function from Flask is used to send an HTTP redirect response?",
    "c": null,
    "o": [
      "redirect()",
      "goto()",
      "navigate()",
      "send_to()"
    ]
  },
  {
    "q": "How do you create a RESTful resource using Flask-RESTful?",
    "c": null,
    "o": [
      "By extending the Resource class",
      "By using the APIRoute decorator",
      "By creating an app blueprint",
      "By calling restify()"
    ]
  },
  {
    "q": "Which of these functions is used to render dynamic content using a template?",
    "c": null,
    "o": [
      "render_template()",
      "show_template()",
      "load_html()",
      "render_view()"
    ]
  },
  {
    "q": "What is the main purpose of using Blueprints in Flask?",
    "c": null,
    "o": [
      "To modularize an application into components",
      "To define a color theme for the website",
      "To add logging support",
      "To write SQL queries"
    ]
  },
  {
    "q": "Which of the following is a valid Flask HTTP method?",
    "c": null,
    "o": [
      "PUT",
      "FETCH",
      "HEADERS",
      "CONNECTS"
    ]
  },
  {
    "q": "Which parameter should you use with `app.run()` to enable debug mode?",
    "c": null,
    "o": [
      "debug=True",
      "dev=True",
      "run_debug=True",
      "mode='debug'"
    ]
  },
  {
    "q": "What does `request.args.get('page')` return?",
    "c": null,
    "o": [
      "The value of the 'page' query parameter",
      "The page number of the request",
      "The name of the template page",
      "The current route URL"
    ]
  },
  {
    "q": "Which status code is returned by default for a successful Flask route?",
    "c": null,
    "o": [
      "200",
      "302",
      "201",
      "401"
    ]
  },
  {
    "q": "Which Flask method is used to load environment variables?",
    "c": null,
    "o": [
      "app.config.from_envvar()",
      "load_env()",
      "os.load_env()",
      "config.env.load()"
    ]
  },
  {
    "q": "What does `render_template('index.html')` do?",
    "c": null,
    "o": [
      "Renders the HTML file named index.html",
      "Returns a JSON object",
      "Redirects to index.html",
      "Saves the template to disk"
    ]
  },
  {
    "q": "What will `request.args.get('q')` retrieve in a Flask app?",
    "c": null,
    "o": [
      "Value of query parameter 'q' from the URL",
      "Form field named 'q'",
      "JSON field named 'q'",
      "Session variable 'q'"
    ]
  },
  {
    "q": "Which of these is a correct way to check if the current request is a POST request?",
    "c": null,
    "o": [
      "if request.method == 'POST':",
      "if request.type == 'POST':",
      "if request.is_post():",
      "if request.form.method == 'POST':"
    ]
  },
  {
    "q": "What is the purpose of the `static_url_path` argument in Flask?",
    "c": null,
    "o": [
      "To change the URL used to access static files",
      "To define where HTML templates are stored",
      "To store uploaded media files",
      "To create custom routes for Blueprints"
    ]
  },
  {
    "q": "How do you return an HTML file named 'main.html' with a variable called 'name'?",
    "c": null,
    "o": [
      "render_template('main.html', name='John')",
      "render('main.html', name='John')",
      "template('main.html', {'name': 'John'})",
      "return_html('main.html', 'John')"
    ]
  },
  {
    "q": "In Flask, what does `app.config['DEBUG'] = True` enable?",
    "c": null,
    "o": [
      "Auto-reload and detailed error messages",
      "Faster database access",
      "File caching",
      "HTTPS redirection"
    ]
  },
  {
    "q": "Which Flask extension provides SQL database integration?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-MySQL",
      "Flask-DBConnect",
      "Flask-DataEngine"
    ]
  },
  {
    "q": "Which function is used to return a redirect response to another endpoint?",
    "c": null,
    "o": [
      "redirect()",
      "route_to()",
      "send_to()",
      "goto_page()"
    ]
  },
  {
    "q": "What does `request.files['file']` return?",
    "c": null,
    "o": [
      "The uploaded file object",
      "A static file",
      "A string filename",
      "An HTML form tag"
    ]
  },
  {
    "q": "Which Flask feature helps divide an app into reusable modules?",
    "c": null,
    "o": [
      "Blueprints",
      "Layouts",
      "Views",
      "Components"
    ]
  },
  {
    "q": "What kind of data does `request.get_json()` expect?",
    "c": null,
    "o": [
      "A JSON body in the incoming request",
      "URL query parameters",
      "HTML form fields",
      "Uploaded files"
    ]
  },
  {
    "q": "How do you create a login-required page using Flask-Login?",
    "c": null,
    "o": [
      "@login_required",
      "@require_login",
      "@secure_page",
      "@authenticated"
    ]
  },
  {
    "q": "What does the Flask `abort(403)` function do?",
    "c": null,
    "o": [
      "Immediately stop the request and return a 403 Forbidden response",
      "Pause the request until authenticated",
      "Raise a Python exception",
      "Log out the user"
    ]
  },
  {
    "q": "Where should you store uploaded files in a Flask app?",
    "c": null,
    "o": [
      "A custom directory defined by app.config['UPLOAD_FOLDER']",
      "Inside the templates folder",
      "In the static folder",
      "In the root Flask app file"
    ]
  },
  {
    "q": "Which method is used to retrieve an environment variable in Python?",
    "c": null,
    "o": [
      "os.getenv('VAR_NAME')",
      "env.get('VAR_NAME')",
      "os.env('VAR_NAME')",
      "getenv('VAR_NAME')"
    ]
  },
  {
    "q": "What is the purpose of a `.env` file in a Flask project?",
    "c": null,
    "o": [
      "To store environment-specific settings like secret keys",
      "To save user form input data",
      "To define app routes",
      "To load HTML templates"
    ]
  },
  {
    "q": "Which of the following is the default host for a Flask app when using app.run()?",
    "c": null,
    "o": [
      "127.0.0.1",
      "localhost",
      "0.0.0.0",
      "192.168.0.1"
    ]
  },
  {
    "q": "What is the correct way to define multiple HTTP methods for a route?",
    "c": "from flask import Flask\napp = Flask(__name__)\n\n@app.route('/submit', methods=['GET', 'POST'])\ndef submit():\n    return 'Submitted'",
    "o": [
      "methods=['GET', 'POST']",
      "route_methods=['GET', 'POST']",
      "http_methods='get post'",
      "type=['GET','POST']"
    ]
  },
  {
    "q": "Which command shows installed Flask extensions?",
    "c": null,
    "o": [
      "pip freeze",
      "flask list",
      "flask info",
      "python flask --show"
    ]
  },
  {
    "q": "How do you access form input named 'email' in Flask?",
    "c": null,
    "o": [
      "request.form['email']",
      "form.email.value",
      "request.email",
      "request.input('email')"
    ]
  },
  {
    "q": "What does `session` in Flask allow you to do?",
    "c": null,
    "o": [
      "Store data between requests for a user",
      "Handle file uploads",
      "Log SQL queries",
      "Track server logs"
    ]
  },
  {
    "q": "What is required in the HTML form to submit data via POST?",
    "c": null,
    "o": [
      "method='post'",
      "post=True",
      "action='POST'",
      "type='post'"
    ]
  },
  {
    "q": "What is the purpose of `FlaskForm` from Flask-WTF?",
    "c": null,
    "o": [
      "To create form classes with built-in validation",
      "To load templates",
      "To manage user login",
      "To create REST APIs"
    ]
  },
  {
    "q": "Which file do you typically use to list all dependencies in a Flask project?",
    "c": null,
    "o": [
      "requirements.txt",
      "dependencies.py",
      "install_list.txt",
      "app.config"
    ]
  },
  {
    "q": "What does `app.secret_key` provide in Flask?",
    "c": null,
    "o": [
      "Enables session and CSRF protection",
      "Defines the server route key",
      "Encrypts database connections",
      "Sets the login password"
    ]
  },
  {
    "q": "What will `{{ name.upper() }}` do in a Jinja2 template?",
    "c": null,
    "o": [
      "Display the variable name in uppercase",
      "Show the length of name",
      "Display the original string",
      "Render HTML elements"
    ]
  },
  {
    "q": "What is the purpose of using `request.headers` in Flask?",
    "c": null,
    "o": [
      "To access HTTP request headers",
      "To define route parameters",
      "To load static files",
      "To set browser cookies"
    ]
  },
  {
    "q": "In Flask, how do you register a Blueprint?",
    "c": "from flask import Flask\nfrom my_blueprint import bp\napp = Flask(__name__)\napp.register_blueprint(bp)",
    "o": [
      "app.register_blueprint(bp)",
      "bp.init_app(app)",
      "app.use(bp)",
      "bp.activate(app)"
    ]
  },
  {
    "q": "Which HTTP method is typically used for deleting resources?",
    "c": null,
    "o": [
      "DELETE",
      "REMOVE",
      "ERASE",
      "CANCEL"
    ]
  },
  {
    "q": "What does `@app.before_first_request` do?",
    "c": null,
    "o": [
      "Runs the decorated function before the first request is processed",
      "Runs code before each request",
      "Sets environment variables",
      "Cleans up after each request"
    ]
  },
  {
    "q": "What is the purpose of `@app.teardown_appcontext`?",
    "c": null,
    "o": [
      "To execute cleanup after the app context ends",
      "To run code before any request",
      "To reload routes",
      "To kill the app server"
    ]
  },
  {
    "q": "Which of the following is used to add a delay or timeout in Flask?",
    "c": "import time\ntime.sleep(2)",
    "o": [
      "time.sleep(2)",
      "flask.wait(2)",
      "pause(2)",
      "delay(2)"
    ]
  },
  {
    "q": "Which of the following would allow access to route parameters in Flask?",
    "c": "from flask import Flask\napp = Flask(__name__)\n\n@app.route('/user/<name>')\ndef user(name):\n    return f'Hello {name}'",
    "o": [
      "<name>",
      "{name}",
      ":name",
      "$name"
    ]
  },
  {
    "q": "Which of the following is true about Flask?",
    "c": null,
    "o": [
      "Flask is a micro web framework for Python",
      "Flask requires JavaScript to work",
      "Flask can only be used with MySQL",
      "Flask is not suitable for APIs"
    ]
  },
  {
    "q": "Which HTTP method is typically used to update existing data?",
    "c": null,
    "o": [
      "PUT",
      "GET",
      "OPTIONS",
      "HEAD"
    ]
  },
  {
    "q": "Which environment variable is used to set the Flask app for running?",
    "c": null,
    "o": [
      "FLASK_APP",
      "APP_FLASK",
      "RUN_FLASK",
      "FLASK_RUN"
    ]
  },
  {
    "q": "How do you create a redirect to a route named 'dashboard'?",
    "c": null,
    "o": [
      "redirect(url_for('dashboard'))",
      "goto('dashboard')",
      "route_to('dashboard')",
      "app.redirect('dashboard')"
    ]
  },
  {
    "q": "Which of the following functions returns a response object in Flask?",
    "c": null,
    "o": [
      "make_response()",
      "render_response()",
      "return_response()",
      "create_response()"
    ]
  },
  {
    "q": "Which keyword is used to define a class-based resource in Flask-RESTful?",
    "c": null,
    "o": [
      "class",
      "def",
      "resource",
      "view"
    ]
  },
  {
    "q": "What file extension is typically used for HTML templates in Flask?",
    "c": null,
    "o": [
      ".html",
      ".htm",
      ".jinja",
      ".tpl"
    ]
  },
  {
    "q": "Which Flask extension helps in writing reusable forms with validation?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-FormKit",
      "Flask-Validator",
      "Flask-Forms"
    ]
  },
  {
    "q": "How do you return plain text from a Flask route?",
    "c": "return 'This is plain text'",
    "o": [
      "'This is plain text'",
      "<html>Plain</html>",
      "render_template('text.html')",
      "jsonify('Plain text')"
    ]
  },
  {
    "q": "What is a common HTTP status code returned when a user is unauthorized?",
    "c": null,
    "o": [
      "401",
      "200",
      "404",
      "500"
    ]
  },
  {
    "q": "What is the purpose of `app.config['SQLALCHEMY_DATABASE_URI']`?",
    "c": null,
    "o": [
      "It sets the database connection string",
      "It defines the secret key",
      "It enables debugging",
      "It logs all queries"
    ]
  },
  {
    "q": "What is the correct way to apply a route to multiple methods including GET and POST?",
    "c": "app.route('/login', methods=['GET', 'POST'])",
    "o": [
      "methods=['GET', 'POST']",
      "method='GET, POST'",
      "type=POST",
      "accepts=['GET', 'POST']"
    ]
  },
  {
    "q": "Which Flask object is used to access cookies?",
    "c": null,
    "o": [
      "request.cookies",
      "response.cookies",
      "app.cookies",
      "session.cookies"
    ]
  },
  {
    "q": "Which of the following will render an HTML template in Flask?",
    "c": null,
    "o": [
      "render_template('index.html')",
      "load_html('index.html')",
      "app.show('index.html')",
      "template('index.html')"
    ]
  },
  {
    "q": "Which function is used to return a JSON response in Flask?",
    "c": null,
    "o": [
      "jsonify()",
      "json()",
      "to_json()",
      "response_json()"
    ]
  },
  {
    "q": "Which of the following HTTP methods is idempotent?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PATCH",
      "CONNECT"
    ]
  },
  {
    "q": "What is the default port used by Flask’s built-in development server?",
    "c": null,
    "o": [
      "5000",
      "8000",
      "8080",
      "3000"
    ]
  },
  {
    "q": "How do you access URL query parameters in Flask?",
    "c": null,
    "o": [
      "request.args",
      "request.form",
      "request.query",
      "request.values"
    ]
  },
  {
    "q": "Which Jinja2 syntax is used for writing control statements like loops?",
    "c": null,
    "o": [
      "{% ... %}",
      "{{ ... }}",
      "[[ ... ]]",
      "(( ... ))"
    ]
  },
  {
    "q": "Which Flask extension is typically used to handle user authentication?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Security",
      "Flask-OAuth",
      "Flask-Auth"
    ]
  },
  {
    "q": "What is the purpose of Gunicorn when deploying Flask apps?",
    "c": null,
    "o": [
      "It runs Flask apps in a production WSGI server",
      "It auto-generates API routes",
      "It manages form validation",
      "It handles session storage"
    ]
  },
  {
    "q": "Which method in Flask-WTF is used to check if a form is submitted and valid?",
    "c": null,
    "o": [
      "form.validate_on_submit()",
      "form.is_valid()",
      "form.check_submit()",
      "form.submitted()"
    ]
  },
  {
    "q": "What is required to enable CSRF protection in Flask-WTF?",
    "c": null,
    "o": [
      "Setting a secret key",
      "Using SQLite",
      "Enabling debug mode",
      "Disabling POST requests"
    ]
  },
  {
    "q": "Which HTTP method is used to partially update a resource?",
    "c": null,
    "o": [
      "PATCH",
      "PUT",
      "POST",
      "GET"
    ]
  },
  {
    "q": "What command can be used to install Flask?",
    "c": null,
    "o": [
      "pip install Flask",
      "flask install",
      "python install flask",
      "flask setup"
    ]
  },
  {
    "q": "What is the correct way to start a basic Flask app?",
    "c": "from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return 'Hello World'\n\nif __name__ == '__main__':\n    app.run()",
    "o": [
      "app.run()",
      "run(app)",
      "start(app)",
      "launch(app)"
    ]
  },
  {
    "q": "Which function is used to dynamically generate URLs in Flask?",
    "c": null,
    "o": [
      "url_for()",
      "path_of()",
      "link_to()",
      "route_to()"
    ]
  },
  {
    "q": "Which Flask method allows handling file uploads?",
    "c": null,
    "o": [
      "request.files",
      "request.upload",
      "request.attach",
      "request.stream"
    ]
  },
  {
    "q": "Which Flask component handles form data submitted using POST method?",
    "c": null,
    "o": [
      "request.form",
      "request.args",
      "request.json",
      "request.data"
    ]
  },
  {
    "q": "Which of the following is used to organize routes in a modular Flask app?",
    "c": null,
    "o": [
      "Blueprint",
      "Group",
      "Router",
      "Package"
    ]
  },
  {
    "q": "In Flask, what does the `@app.route('/')` decorator do?",
    "c": null,
    "o": [
      "Maps the URL '/' to a function",
      "Starts the Flask server",
      "Returns HTML content",
      "Defines a blueprint"
    ]
  },
  {
    "q": "Which Jinja2 syntax is used to display a variable's value in a template?",
    "c": null,
    "o": [
      "{{ variable }}",
      "[[ variable ]]",
      "{% variable %}",
      "<% variable %>"
    ]
  },
  {
    "q": "Which Flask method is used to serve static files like CSS or JS?",
    "c": null,
    "o": [
      "url_for('static', filename='style.css')",
      "static_file('style.css')",
      "render_static('style.css')",
      "static('style.css')"
    ]
  },
  {
    "q": "What is the default name for the folder where Flask looks for templates?",
    "c": null,
    "o": [
      "templates",
      "html",
      "views",
      "pages"
    ]
  },
  {
    "q": "Which of the following is true about `Flask-SQLAlchemy`?",
    "c": null,
    "o": [
      "It is an ORM for Flask applications",
      "It is a templating engine",
      "It validates user inputs",
      "It handles cookies in Flask"
    ]
  },
  {
    "q": "Which keyword is used to define a class-based API resource in Flask-RESTful?",
    "c": null,
    "o": [
      "Resource",
      "Route",
      "Controller",
      "Model"
    ]
  },
  {
    "q": "Which method is used to render templates with variables in Flask?",
    "c": null,
    "o": [
      "render_template()",
      "send_template()",
      "return_html()",
      "load_html()"
    ]
  },
  {
    "q": "Which object in Flask holds information about the current web request?",
    "c": null,
    "o": [
      "request",
      "session",
      "app",
      "form"
    ]
  },
  {
    "q": "In Flask, which decorator is used to define routes?",
    "c": null,
    "o": [
      "@app.route",
      "@flask.view",
      "@route.app",
      "@flask.route"
    ]
  },
  {
    "q": "Which keyword is used to run a Flask application only when the script is run directly?",
    "c": null,
    "o": [
      "__name__ == '__main__'",
      "__file__ == '__main__'",
      "__script__ == 'main'",
      "run == True"
    ]
  },
  {
    "q": "What does Flask’s debug mode do?",
    "c": null,
    "o": [
      "Enables live code reloading and detailed error messages",
      "Prevents the app from running",
      "Encrypts user data",
      "Creates a production-ready server"
    ]
  },
  {
    "q": "Which method is used to retrieve JSON data from a Flask request?",
    "c": null,
    "o": [
      "request.get_json()",
      "request.json()",
      "request.read_json()",
      "request.data.json()"
    ]
  },
  {
    "q": "Which file type is used to define Docker configurations for a Flask app?",
    "c": null,
    "o": [
      "Dockerfile",
      "docker.txt",
      "flask.yml",
      "setup.docker"
    ]
  },
  {
    "q": "Which HTTP method is typically used to retrieve data in Flask routes?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "In Flask, which object is used to store session data?",
    "c": null,
    "o": [
      "session",
      "request",
      "form",
      "config"
    ]
  },
  {
    "q": "What must you import to use Flask-WTF forms?",
    "c": null,
    "o": [
      "FlaskForm from flask_wtf",
      "FormHandler from flask_forms",
      "WTForm from flask_wt",
      "FormBuilder from wtflib"
    ]
  },
  {
    "q": "Which of the following can be used to protect routes for authenticated users only?",
    "c": null,
    "o": [
      "@login_required",
      "@authenticated_only",
      "@require_login",
      "@user_protected"
    ]
  },
  {
    "q": "In Jinja2, which syntax is used to include another HTML file?",
    "c": null,
    "o": [
      "{% include 'header.html' %}",
      "{{ include 'header.html' }}",
      "[[ include 'header.html' ]]",
      "<% include 'header.html' %>"
    ]
  },
  {
    "q": "Which of the following Flask extensions helps with form validation and CSRF protection?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Forms",
      "Flask-Validate",
      "Flask-Request"
    ]
  },
  {
    "q": "Which of these statements is true about Blueprints in Flask?",
    "c": null,
    "o": [
      "They allow structuring apps into reusable modules",
      "They are used to create templates",
      "They are Flask’s ORM feature",
      "They are a way to define environment variables"
    ]
  },
  {
    "q": "In Flask, how can you specify a route that only accepts POST requests?",
    "c": "from flask import Flask\napp = Flask(__name__)\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    return 'Form submitted'",
    "o": [
      "methods=['POST']",
      "type='POST'",
      "method='POST'",
      "accepts=['POST']"
    ]
  },
  {
    "q": "Which function in Flask is used to abort a request with a specific HTTP status code?",
    "c": null,
    "o": [
      "abort()",
      "reject()",
      "fail()",
      "exit()"
    ]
  },
  {
    "q": "Which Flask command enables debugging and auto-reloading?",
    "c": null,
    "o": [
      "app.run(debug=True)",
      "app.debug_mode()",
      "flask.enable_debug()",
      "app.auto_reload()"
    ]
  },
  {
    "q": "What must be set in Flask to use sessions securely?",
    "c": null,
    "o": [
      "app.secret_key",
      "app.session_timeout",
      "app.enable_sessions",
      "app.session_key"
    ]
  },
  {
    "q": "Which HTTP status code indicates a successful POST request that created a resource?",
    "c": null,
    "o": [
      "201",
      "200",
      "204",
      "400"
    ]
  },
  {
    "q": "How do you access form field values submitted via POST in Flask?",
    "c": "from flask import request\nname = request.form['username']",
    "o": [
      "request.form['username']",
      "request.get('username')",
      "request.input['username']",
      "request.fields['username']"
    ]
  },
  {
    "q": "Which function should be called to register a blueprint in Flask?",
    "c": null,
    "o": [
      "app.register_blueprint()",
      "app.use_blueprint()",
      "app.include()",
      "app.add_module()"
    ]
  },
  {
    "q": "Which option correctly initializes a Flask app?",
    "c": null,
    "o": [
      "app = Flask(__name__)",
      "app = flask.App()",
      "app = NewFlask()",
      "app = FlaskApp()"
    ]
  },
  {
    "q": "Which of the following is used to start a Flask development server?",
    "c": null,
    "o": [
      "flask run",
      "python start.py",
      "flask start",
      "python flask.py"
    ]
  },
  {
    "q": "In Flask, what is the correct way to return a JSON response?",
    "c": "from flask import jsonify\n\n@app.route('/api')\ndef api():\n    return jsonify({'message': 'Hello'})",
    "o": [
      "jsonify()",
      "json()",
      "make_json()",
      "to_json()"
    ]
  },
  {
    "q": "What is the default port used when running a Flask app with `flask run`?",
    "c": null,
    "o": [
      "5000",
      "8000",
      "3000",
      "8080"
    ]
  },
  {
    "q": "What type of object is used to group related views and routes in Flask?",
    "c": null,
    "o": [
      "Blueprint",
      "Component",
      "RouteGroup",
      "Controller"
    ]
  },
  {
    "q": "What does the `request.args` object contain in Flask?",
    "c": null,
    "o": [
      "Query parameters from the URL",
      "Form data from a POST request",
      "Uploaded file contents",
      "JSON body of the request"
    ]
  },
  {
    "q": "In Flask, which folder is conventionally used for storing static files like CSS and JS?",
    "c": null,
    "o": [
      "static",
      "public",
      "assets",
      "media"
    ]
  },
  {
    "q": "What is the purpose of `Flask-Login`?",
    "c": null,
    "o": [
      "Managing user authentication",
      "Form validation",
      "Database operations",
      "Debugging Flask apps"
    ]
  },
  {
    "q": "Which HTTP method is used when a user submits a form?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "Which environment variable is used to specify the Flask app for the `flask run` command?",
    "c": null,
    "o": [
      "FLASK_APP",
      "FLASK_RUN",
      "APP_START",
      "FLASK_PATH"
    ]
  },
  {
    "q": "Which function is used to handle 404 errors in Flask?",
    "c": null,
    "o": [
      "errorhandler(404)",
      "handle404()",
      "on_error(404)",
      "not_found()"
    ]
  },
  {
    "q": "How do you define a route that accepts both GET and POST methods?",
    "c": "from flask import Flask\napp = Flask(__name__)\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    return 'Login Page'",
    "o": [
      "methods=['GET', 'POST']",
      "type=['GET', 'POST']",
      "accepts=['GET', 'POST']",
      "mode=['GET', 'POST']"
    ]
  },
  {
    "q": "What is the purpose of `render_template()` in Flask?",
    "c": null,
    "o": [
      "Render an HTML file using Jinja2 templates",
      "Return JSON response",
      "Access static files",
      "Redirect to another URL"
    ]
  },
  {
    "q": "Which extension helps connect Flask apps to SQL databases easily?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-Database",
      "Flask-ORM",
      "Flask-Data"
    ]
  },
  {
    "q": "Which tool can be used to run Flask apps in production environments?",
    "c": null,
    "o": [
      "Gunicorn",
      "Werkzeug",
      "Jinja2",
      "SQLAlchemy"
    ]
  },
  {
    "q": "How can you redirect a user to another route in Flask?",
    "c": "from flask import redirect, url_for\n\n@app.route('/go-home')\ndef go_home():\n    return redirect(url_for('home'))",
    "o": [
      "redirect(url_for('home'))",
      "url_for('home')",
      "goto('home')",
      "return 'home'"
    ]
  },
  {
    "q": "Which Flask object is used to access JSON data sent in a request body?",
    "c": "from flask import request\n\ndata = request.get_json()",
    "o": [
      "request.get_json()",
      "request.json_data()",
      "request.body_json()",
      "request.read_json()"
    ]
  },
  {
    "q": "Which folder is commonly used to store Jinja2 HTML templates in a Flask project?",
    "c": null,
    "o": [
      "templates",
      "views",
      "html",
      "pages"
    ]
  },
  {
    "q": "What is the purpose of `url_for()` in Flask?",
    "c": null,
    "o": [
      "Generate the URL for a specific route",
      "Create a new route",
      "Start the Flask server",
      "Redirect users to an external site"
    ]
  },
  {
    "q": "What is the purpose of the `__name__` variable in Flask?",
    "c": "from flask import Flask\n\napp = Flask(__name__)",
    "o": [
      "Indicates the name of the current module",
      "Stores the name of the Flask app",
      "Loads environment variables",
      "Defines app secret key"
    ]
  },
  {
    "q": "Which command activates debug mode in a Flask application?",
    "c": null,
    "o": [
      "app.run(debug=True)",
      "flask start debug",
      "app.enable_debug()",
      "debug(app)"
    ]
  },
  {
    "q": "In Flask, which method would you use to check the current HTTP method of a request?",
    "c": "from flask import request\n\nif request.method == 'POST':\n    pass",
    "o": [
      "request.method",
      "request.type",
      "request.http_method",
      "request.get_method()"
    ]
  },
  {
    "q": "Which method should be used to get form data from a POST request?",
    "c": "from flask import request\n\nusername = request.form['username']",
    "o": [
      "request.form['username']",
      "request.data['username']",
      "request.query['username']",
      "request.input['username']"
    ]
  },
  {
    "q": "Which statement correctly defines a Flask route for the URL '/about'?",
    "c": null,
    "o": [
      "@app.route('/about')",
      "@app.url('/about')",
      "@route('/about')",
      "@app.path('/about')"
    ]
  },
  {
    "q": "Which function is used to initialize a Flask-WTF form class?",
    "c": null,
    "o": [
      "__init__",
      "start_form",
      "open_form",
      "form_init"
    ]
  },
  {
    "q": "Which function is used to run a Flask app?",
    "c": "from flask import Flask\napp = Flask(__name__)\n\nif __name__ == '__main__':\n    app.run()",
    "o": [
      "app.run()",
      "app.execute()",
      "flask.start()",
      "run_flask()"
    ]
  },
  {
    "q": "What is the result of accessing `request.args['id']`?",
    "c": null,
    "o": [
      "It retrieves the 'id' value from the URL query string",
      "It gets the form field named 'id'",
      "It parses JSON from the request body",
      "It returns the HTTP status code"
    ]
  },
  {
    "q": "Which Flask extension is specifically used to handle user logins and sessions?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-WTF",
      "Flask-Security",
      "Flask-Auth"
    ]
  },
  {
    "q": "In Jinja2 templates, how do you print the value of a variable named `username`?",
    "c": null,
    "o": [
      "{{ username }}",
      "[[ username ]]",
      "{% username %}",
      "<%= username %>"
    ]
  },
  {
    "q": "What is the role of `csrf_token` in Flask-WTF forms?",
    "c": null,
    "o": [
      "To prevent Cross-Site Request Forgery attacks",
      "To handle login authentication",
      "To encrypt form data",
      "To route form data to a specific function"
    ]
  },
  {
    "q": "Which environment variable is used to enable Flask debug mode?",
    "c": null,
    "o": [
      "FLASK_DEBUG=1",
      "DEBUG=True",
      "ENABLE_DEBUG=1",
      "FLASK_DEV=on"
    ]
  },
  {
    "q": "What does `@app.route('/')` do in a Flask application?",
    "c": null,
    "o": [
      "It maps the '/' URL to a function",
      "It starts the Flask app",
      "It declares a global variable",
      "It initializes a database"
    ]
  },
  {
    "q": "Which of the following HTTP methods is considered safe and idempotent?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What is the correct way to include a static CSS file in a Flask template?",
    "c": "<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">",
    "o": [
      "{{ url_for('static', filename='style.css') }}",
      "{{ static('style.css') }}",
      "{% static 'style.css' %}",
      "{{ get_static('style.css') }}"
    ]
  },
  {
    "q": "In Flask, which decorator is used to create a new route?",
    "c": null,
    "o": [
      "@app.route()",
      "@flask.route()",
      "@route.app()",
      "@url.route()"
    ]
  },
  {
    "q": "What type of responses can `render_template()` return?",
    "c": null,
    "o": [
      "HTML",
      "JSON",
      "XML",
      "YAML"
    ]
  },
  {
    "q": "Which method in Flask-WTF is used to validate form input?",
    "c": "form = MyForm()\nif form.validate_on_submit():\n    # process form",
    "o": [
      "validate_on_submit()",
      "is_valid()",
      "form_check()",
      "validate_now()"
    ]
  },
  {
    "q": "Which Flask extension provides ORM capabilities for interacting with databases?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-ORM",
      "Flask-DB",
      "Flask-DataModel"
    ]
  },
  {
    "q": "What does the `methods` argument in `@app.route()` specify?",
    "c": "@app.route('/submit', methods=['GET', 'POST'])",
    "o": [
      "Allowed HTTP methods for the route",
      "The method name of the function",
      "Database operations",
      "Jinja2 template inheritance"
    ]
  },
  {
    "q": "Which command installs Flask using pip?",
    "c": null,
    "o": [
      "pip install Flask",
      "pip install flask-app",
      "flask install",
      "install Flask"
    ]
  },
  {
    "q": "How do you pass a variable from a Flask route to a template?",
    "c": "return render_template('hello.html', name='Alice')",
    "o": [
      "Using `render_template()` with keyword arguments",
      "By modifying the HTML file",
      "Through a global variable",
      "Using `redirect()`"
    ]
  },
  {
    "q": "What is `request.form` used for in Flask?",
    "c": null,
    "o": [
      "To access form data from POST requests",
      "To fetch query parameters from URL",
      "To read request headers",
      "To access the session object"
    ]
  },
  {
    "q": "Which Flask extension is used for secure form handling and CSRF protection?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Forms",
      "Flask-CSRF",
      "Flask-Secure"
    ]
  },
  {
    "q": "Which method in Flask is used to send users to a different route or URL?",
    "c": null,
    "o": [
      "redirect()",
      "send_to()",
      "goto()",
      "navigate()"
    ]
  },
  {
    "q": "Which of the following allows you to group multiple routes together in Flask?",
    "c": null,
    "o": [
      "Blueprint",
      "Template",
      "Package",
      "Module"
    ]
  },
  {
    "q": "In a Flask REST API, what does the `@api.resource('/items')` decorator do?",
    "c": null,
    "o": [
      "It maps the '/items' route to a Resource class",
      "It renders a Jinja2 template",
      "It defines a static file route",
      "It sets a configuration key"
    ]
  },
  {
    "q": "What does the `render_template()` function do in Flask?",
    "c": null,
    "o": [
      "Renders an HTML template with dynamic content",
      "Executes SQL queries",
      "Validates user inputs",
      "Sends static files to the client"
    ]
  },
  {
    "q": "Which Flask extension simplifies user authentication?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-SQLAlchemy",
      "Flask-WTF",
      "Flask-RESTful"
    ]
  },
  {
    "q": "What is the correct way to access a URL parameter in a Flask route?",
    "c": "@app.route('/user/<username>')\ndef show_user(username):\n    return f\"Hello, {username}\"",
    "o": [
      "<username>",
      ":username",
      "{username}",
      "$username"
    ]
  },
  {
    "q": "Which of the following is NOT a valid HTTP method in Flask?",
    "c": null,
    "o": [
      "FETCH",
      "GET",
      "POST",
      "PUT"
    ]
  },
  {
    "q": "Which function is used to redirect a user to another route in Flask?",
    "c": null,
    "o": [
      "redirect()",
      "send_to()",
      "navigate()",
      "route()"
    ]
  },
  {
    "q": "In Flask, how do you enable cross-origin requests?",
    "c": null,
    "o": [
      "Using Flask-CORS extension",
      "Enable allow_origin in app.run()",
      "By default, it is enabled",
      "Use `flask.enable_cors()`"
    ]
  },
  {
    "q": "Which data structure is used by `request.args` in Flask?",
    "c": null,
    "o": [
      "ImmutableMultiDict",
      "Dictionary",
      "List",
      "Set"
    ]
  },
  {
    "q": "What is the main use of Flask’s `Blueprint` feature?",
    "c": null,
    "o": [
      "To organize related routes and code",
      "To create HTML templates",
      "To manage the app’s configuration",
      "To connect to a database"
    ]
  },
  {
    "q": "Which Flask method is used to define a REST API resource?",
    "c": null,
    "o": [
      "api.add_resource()",
      "api.define_route()",
      "app.add_api()",
      "app.create_resource()"
    ]
  },
  {
    "q": "How do you retrieve a JSON object from a POST request in Flask?",
    "c": "from flask import request\n\ndata = request.get_json()",
    "o": [
      "request.get_json()",
      "request.post_data()",
      "request.json_body()",
      "request.retrieve_json()"
    ]
  },
  {
    "q": "What type of file is typically used to define environment variables for Flask apps?",
    "c": null,
    "o": [
      ".env",
      ".cfg",
      ".json",
      ".txt"
    ]
  },
  {
    "q": "In Flask, which key is used to configure a secret key for sessions and CSRF protection?",
    "c": null,
    "o": [
      "SECRET_KEY",
      "APP_SECRET",
      "CSRF_KEY",
      "FLASK_KEY"
    ]
  },
  {
    "q": "Which Flask extension helps with form creation and validation?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Login",
      "Flask-CORS",
      "Flask-RESTful"
    ]
  },
  {
    "q": "Which method in Flask runs the development server?",
    "c": "if __name__ == '__main__':\n    app.run()",
    "o": [
      "app.run()",
      "flask.serve()",
      "start_flask()",
      "run_server()"
    ]
  },
  {
    "q": "What is the default port for a Flask development server?",
    "c": null,
    "o": [
      "5000",
      "8000",
      "3000",
      "8080"
    ]
  },
  {
    "q": "Which Flask module is required to handle incoming request data?",
    "c": null,
    "o": [
      "flask.request",
      "flask.session",
      "flask.data",
      "flask.input"
    ]
  },
  {
    "q": "What will the following Flask route return?",
    "c": "@app.route('/test')\ndef test():\n    return 'Testing!'",
    "o": [
      "Testing!",
      "Template not found",
      "Method not allowed",
      "Syntax error"
    ]
  },
  {
    "q": "What is the purpose of `@login_required` in Flask-Login?",
    "c": null,
    "o": [
      "It restricts access to logged-in users",
      "It logs the user in automatically",
      "It registers a user",
      "It logs the user out"
    ]
  },
  {
    "q": "Which HTTP method is typically used to submit a form?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What does the following code do in Flask?",
    "c": "@app.route('/hello/<name>')\ndef hello(name):\n    return f\"Hello, {name}!\"",
    "o": [
      "It returns a personalized greeting using the name from the URL",
      "It returns a static message",
      "It raises a 404 error",
      "It renders an HTML file"
    ]
  },
  {
    "q": "How do you start the Flask development server from the command line?",
    "c": null,
    "o": [
      "flask run",
      "python flask",
      "flask start",
      "run flask"
    ]
  },
  {
    "q": "In Flask, how is the session data stored by default?",
    "c": null,
    "o": [
      "Client-side in a secure cookie",
      "Server-side in memory",
      "In a database",
      "In a temporary file"
    ]
  },
  {
    "q": "Which statement is used to connect SQLAlchemy to a database?",
    "c": "app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///example.db'",
    "o": [
      "SQLALCHEMY_DATABASE_URI",
      "DATABASE_URI",
      "DATABASE_URL",
      "SQL_DATABASE_URL"
    ]
  },
  {
    "q": "Which of the following functions is used to include variables in a Jinja2 template?",
    "c": "<p>Hello, {{ user }}!</p>",
    "o": [
      "{{ user }}",
      "{% user %}",
      "(( user ))",
      "<< user >>"
    ]
  },
  {
    "q": "What is the use of `Flask(__name__)`?",
    "c": null,
    "o": [
      "It creates the Flask application instance",
      "It imports the Flask library",
      "It registers routes",
      "It sets up configuration variables"
    ]
  },
  {
    "q": "What is the correct way to access a query string parameter named `page`?",
    "c": "page = request.args.get('page')",
    "o": [
      "request.args.get('page')",
      "request.form.get('page')",
      "request.json['page']",
      "request.data.page"
    ]
  },
  {
    "q": "Which function is used in Flask to return a JSON response?",
    "c": null,
    "o": [
      "jsonify()",
      "json()",
      "to_json()",
      "response.json()"
    ]
  },
  {
    "q": "What is the default debug mode setting in Flask?",
    "c": null,
    "o": [
      "False",
      "True",
      "Enabled",
      "None"
    ]
  },
  {
    "q": "Which Flask extension is typically used for building REST APIs?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-JWT",
      "Flask-Session",
      "Flask-DB"
    ]
  },
  {
    "q": "What is needed to run a Flask app using Gunicorn?",
    "c": null,
    "o": [
      "gunicorn app:app",
      "run app.py",
      "flask serve gunicorn",
      "flask gunicorn start"
    ]
  },
  {
    "q": "Which symbol is used in Jinja2 to write control structures like if or for loops?",
    "c": null,
    "o": [
      "{% %}",
      "{{ }}",
      "[[ ]]",
      "<< >>"
    ]
  },
  {
    "q": "Which file is commonly used to store environment variables for Flask apps?",
    "c": null,
    "o": [
      ".env",
      "config.json",
      "settings.py",
      "app.yaml"
    ]
  },
  {
    "q": "What is `url_for()` used for in Flask?",
    "c": null,
    "o": [
      "To generate URLs for routes",
      "To store request data",
      "To define app settings",
      "To send POST requests"
    ]
  },
  {
    "q": "Which method returns form data submitted via POST in Flask?",
    "c": null,
    "o": [
      "request.form",
      "request.args",
      "request.json",
      "request.headers"
    ]
  },
  {
    "q": "Which file extension is commonly used for HTML templates in Flask?",
    "c": null,
    "o": [
      ".html",
      ".jinja",
      ".tpl",
      ".txt"
    ]
  },
  {
    "q": "Which HTTP method is used by default when accessing a Flask route?",
    "c": "@app.route('/')\ndef home():\n    return 'Welcome!'",
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "Where should HTML template files be placed in a Flask project?",
    "c": null,
    "o": [
      "templates/",
      "static/",
      "html/",
      "views/"
    ]
  },
  {
    "q": "Where should CSS and JS files be stored in a Flask app?",
    "c": null,
    "o": [
      "static/",
      "assets/",
      "media/",
      "resources/"
    ]
  },
  {
    "q": "How do you define multiple HTTP methods for a Flask route?",
    "c": "@app.route('/submit', methods=['GET', 'POST'])\ndef submit():\n    pass",
    "o": [
      "methods=['GET', 'POST']",
      "method='GET,POST'",
      "http=['GET', 'POST']",
      "route.methods = ['GET', 'POST']"
    ]
  },
  {
    "q": "Which Flask class is used to define a resource in Flask-RESTful?",
    "c": null,
    "o": [
      "Resource",
      "API",
      "Endpoint",
      "Handler"
    ]
  },
  {
    "q": "Which status code is returned by default when a Flask route executes successfully?",
    "c": null,
    "o": [
      "200",
      "201",
      "404",
      "500"
    ]
  },
  {
    "q": "Which of the following will correctly run a Flask app in debug mode?",
    "c": null,
    "o": [
      "app.run(debug=True)",
      "app.run(debug_mode=True)",
      "flask.run(debug='yes')",
      "run(debug=True)"
    ]
  },
  {
    "q": "Which object in Flask holds cookies, headers, and request data?",
    "c": null,
    "o": [
      "request",
      "session",
      "response",
      "render"
    ]
  },
  {
    "q": "How do you return a custom status code with a response in Flask?",
    "c": "return 'Created', 201",
    "o": [
      "return 'Created', 201",
      "response.status = 201",
      "return status(201)",
      "send(201, 'Created')"
    ]
  },
  {
    "q": "Which of these is used to run multiple processes of a Flask app in production?",
    "c": null,
    "o": [
      "Gunicorn",
      "Werkzeug",
      "SQLite",
      "pipenv"
    ]
  },
  {
    "q": "Which decorator is used to define a route in Flask?",
    "c": null,
    "o": [
      "@app.route",
      "@app.url",
      "@route.app",
      "@flask.route"
    ]
  },
  {
    "q": "How do you pass data from Flask to a template?",
    "c": "return render_template('index.html', name='Alice')",
    "o": [
      "Using keyword arguments in render_template()",
      "Using session variables",
      "Through app.config",
      "Using request.form"
    ]
  },
  {
    "q": "Which built-in Flask function is used to redirect users to another URL?",
    "c": null,
    "o": [
      "redirect()",
      "navigate()",
      "send()",
      "url_redirect()"
    ]
  },
  {
    "q": "Which HTTP method is **not** commonly used with HTML forms?",
    "c": null,
    "o": [
      "DELETE",
      "POST",
      "GET",
      "PUT"
    ]
  },
  {
    "q": "What does the following Flask code do?",
    "c": "@app.route('/data', methods=['POST'])\ndef data():\n    return request.json['key']",
    "o": [
      "Accesses a key from posted JSON data",
      "Accesses a key from the query string",
      "Renders a form",
      "Returns a static string"
    ]
  },
  {
    "q": "What is `flash()` used for in Flask?",
    "c": null,
    "o": [
      "To show a one-time message to the user",
      "To send files to the browser",
      "To handle form submissions",
      "To refresh the page"
    ]
  },
  {
    "q": "In Flask-WTF, what does `csrf_token` protect against?",
    "c": null,
    "o": [
      "Cross-site request forgery",
      "Syntax errors",
      "SQL injections",
      "File upload issues"
    ]
  },
  {
    "q": "Which of the following is a valid way to define a Flask blueprint?",
    "c": "bp = Blueprint('admin', __name__, url_prefix='/admin')",
    "o": [
      "Blueprint('admin', __name__, url_prefix='/admin')",
      "Blueprint(url='/admin')",
      "Flask.Blueprint('/admin')",
      "FlaskGroup('admin')"
    ]
  },
  {
    "q": "Which command is used to install Flask via pip?",
    "c": null,
    "o": [
      "pip install flask",
      "pip flask install",
      "flask install",
      "install flask"
    ]
  },
  {
    "q": "Where are static files like CSS and images typically placed in a Flask app?",
    "c": null,
    "o": [
      "static/",
      "templates/",
      "assets/",
      "public/"
    ]
  },
  {
    "q": "Which function in Flask is used to handle form validation with Flask-WTF?",
    "c": "if form.validate_on_submit():",
    "o": [
      "form.validate_on_submit()",
      "form.submit()",
      "form.check()",
      "form.validate()"
    ]
  },
  {
    "q": "What is the use of `app.config['SECRET_KEY']` in a Flask application?",
    "c": null,
    "o": [
      "To secure sessions and protect against CSRF",
      "To set the app name",
      "To define the database URL",
      "To configure logging"
    ]
  },
  {
    "q": "Which of the following is NOT a valid HTTP method?",
    "c": null,
    "o": [
      "FETCH",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "Which tool can be used to build Docker containers for a Flask app?",
    "c": null,
    "o": [
      "Docker",
      "Gunicorn",
      "Flask-CLI",
      "Nginx"
    ]
  },
  {
    "q": "Which function is used to serve an uploaded file to the client in Flask?",
    "c": null,
    "o": [
      "send_file()",
      "send_data()",
      "serve_file()",
      "return_file()"
    ]
  },
  {
    "q": "What is the purpose of `render_template()` in Flask?",
    "c": null,
    "o": [
      "To render HTML files using Jinja2",
      "To start the Flask server",
      "To define a route",
      "To handle form submissions"
    ]
  },
  {
    "q": "Which of these is used to run a Flask app using Gunicorn?",
    "c": null,
    "o": [
      "gunicorn app:app",
      "python gunicorn app.py",
      "flask gunicorn app",
      "app run gunicorn"
    ]
  },
  {
    "q": "Which Flask extension helps with database ORM support?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-Login",
      "Flask-WTF",
      "Flask-Mail"
    ]
  },
  {
    "q": "How do you access query parameters in Flask?",
    "c": "value = request.args.get('param')",
    "o": [
      "request.args.get()",
      "request.json.get()",
      "request.form.get()",
      "request.param.get()"
    ]
  },
  {
    "q": "What will the following route return?",
    "c": "@app.route('/')\ndef index():\n    return 'Hello Flask!'",
    "o": [
      "Hello Flask!",
      "Index Page",
      "HTML Template",
      "None"
    ]
  },
  {
    "q": "Which of the following Flask tools is used for user session management?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-SQLAlchemy",
      "Flask-RESTful",
      "Flask-Session"
    ]
  },
  {
    "q": "What kind of files can be rendered using `render_template()`?",
    "c": null,
    "o": [
      "HTML",
      "CSS",
      "PDF",
      "TXT"
    ]
  },
  {
    "q": "What is the default port Flask runs on?",
    "c": null,
    "o": [
      "5000",
      "8080",
      "3000",
      "80"
    ]
  },
  {
    "q": "Which of the following is true about `request.form`?",
    "c": null,
    "o": [
      "It contains data submitted through HTML forms using POST",
      "It contains URL parameters",
      "It holds static file content",
      "It parses JSON payloads"
    ]
  },
  {
    "q": "What is the role of `__name__` in `Flask(__name__)`?",
    "c": null,
    "o": [
      "To determine the root path of the app",
      "To set the app name in logs",
      "To start the Flask server",
      "To create a default route"
    ]
  },
  {
    "q": "What will `request.method` return in a route handling both GET and POST?",
    "c": "@app.route('/submit', methods=['GET', 'POST'])\ndef submit():\n    return request.method",
    "o": [
      "The method used in the HTTP request",
      "The route path",
      "The form values",
      "The status code"
    ]
  },
  {
    "q": "Which of these can be used to run a Flask app inside a Docker container?",
    "c": null,
    "o": [
      "Dockerfile",
      "flask.env",
      "virtualenv",
      "appimage"
    ]
  },
  {
    "q": "What does `@login_required` decorator do in Flask-Login?",
    "c": null,
    "o": [
      "Restricts access to routes for authenticated users only",
      "Creates a new user",
      "Saves login form data",
      "Initializes the login system"
    ]
  },
  {
    "q": "Which of these is used to store configuration values in a Flask app?",
    "c": null,
    "o": [
      "app.config",
      "request.config",
      "session.config",
      "render.config"
    ]
  },
  {
    "q": "Which command starts the Flask development server from the terminal?",
    "c": null,
    "o": [
      "flask run",
      "python flask start",
      "flask.start()",
      "run flask"
    ]
  },
  {
    "q": "Which object in Flask is used to access incoming request data?",
    "c": null,
    "o": [
      "request",
      "response",
      "session",
      "render_template"
    ]
  },
  {
    "q": "Which of the following can be used to define multiple routes for a single function?",
    "c": "@app.route('/')\n@app.route('/home')\ndef home():\n    return 'Welcome!'",
    "o": [
      "Using multiple @app.route decorators",
      "Defining the route in a list",
      "Using app.route with multiple arguments",
      "Calling route() multiple times"
    ]
  },
  {
    "q": "Which Flask extension is used for creating REST APIs easily?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-API",
      "Flask-CRUD",
      "Flask-Admin"
    ]
  },
  {
    "q": "Which of the following directory names is used by Flask to store HTML templates?",
    "c": null,
    "o": [
      "templates",
      "html",
      "static",
      "views"
    ]
  },
  {
    "q": "How can you get JSON data from a request in Flask?",
    "c": "data = request.get_json()",
    "o": [
      "request.get_json()",
      "request.json_data()",
      "request.data_json()",
      "request.fetch_json()"
    ]
  },
  {
    "q": "What is returned by Flask routes?",
    "c": null,
    "o": [
      "A response string or object",
      "A route object",
      "An HTML file directly",
      "A URL path"
    ]
  },
  {
    "q": "What does `url_for()` do in Flask?",
    "c": null,
    "o": [
      "Generates a URL to a view function",
      "Returns the current page’s URL",
      "Forwards the request to another app",
      "Redirects to an external site"
    ]
  },
  {
    "q": "Which HTTP method is typically used for submitting a login form?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What does `request.files` handle in Flask?",
    "c": null,
    "o": [
      "File uploads from forms",
      "Static file serving",
      "Template file access",
      "Reading files from disk"
    ]
  },
  {
    "q": "In Flask, what does the `@app.route('/hello/<name>')` do?",
    "c": null,
    "o": [
      "Captures a variable part of the URL",
      "Sets a default page name",
      "Registers a static URL",
      "Handles POST requests only"
    ]
  },
  {
    "q": "What is the output of `request.method` if a form is submitted using GET?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "None"
    ]
  },
  {
    "q": "What is the purpose of a Flask Blueprint?",
    "c": null,
    "o": [
      "To organize related routes and views",
      "To create database tables",
      "To style the UI",
      "To define HTTP headers"
    ]
  },
  {
    "q": "Which of these can be used to run a Flask app in production?",
    "c": null,
    "o": [
      "Gunicorn",
      "Flask run",
      "Python shell",
      "Flask CLI debug"
    ]
  },
  {
    "q": "How do you protect a route so only logged-in users can access it?",
    "c": null,
    "o": [
      "@login_required",
      "@require_auth",
      "@protected_route",
      "@secure"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "from flask import Flask\napp = Flask(__name__)\nprint(app.name)",
    "o": [
      "__main__",
      "Flask",
      "app",
      "None"
    ]
  },
  {
    "q": "Which folder is commonly used in Flask to serve CSS, JS, and image files?",
    "c": null,
    "o": [
      "static",
      "media",
      "assets",
      "resources"
    ]
  },
  {
    "q": "Which of the following returns a redirect response in Flask?",
    "c": null,
    "o": [
      "redirect()",
      "forward()",
      "send()",
      "render_template()"
    ]
  },
  {
    "q": "Which Flask object is used to manage user sessions?",
    "c": null,
    "o": [
      "session",
      "request",
      "app",
      "form"
    ]
  },
  {
    "q": "What is the main benefit of using Jinja2 in Flask?",
    "c": null,
    "o": [
      "Dynamic content rendering in HTML templates",
      "Faster server startup",
      "Managing database queries",
      "Creating RESTful APIs"
    ]
  },
  {
    "q": "What is the default HTTP method allowed by Flask routes?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "Which HTTP method is used to request data from a server?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "PATCH"
    ]
  },
  {
    "q": "What would `request.form['email']` return?",
    "c": null,
    "o": [
      "Value of input with name='email' in a submitted form",
      "Email of the current user",
      "Email from query parameters",
      "Email in session data"
    ]
  },
  {
    "q": "Which Flask extension is commonly used for form handling and validation?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Forms",
      "Flask-Inputs",
      "Flask-Validate"
    ]
  },
  {
    "q": "How can you set a secret key for sessions in Flask?",
    "c": "app = Flask(__name__)\napp.secret_key = 'mysecret'",
    "o": [
      "app.secret_key",
      "session.key",
      "flask.key",
      "request.secret"
    ]
  },
  {
    "q": "Which function is used to define an API resource in Flask-RESTful?",
    "c": null,
    "o": [
      "Resource",
      "API",
      "Endpoint",
      "Blueprint"
    ]
  },
  {
    "q": "What does `app.run(debug=True)` do?",
    "c": null,
    "o": [
      "Enables live-reload and detailed error pages",
      "Disables all logging",
      "Runs the app on port 8080",
      "Enables HTTPS only"
    ]
  },
  {
    "q": "Which function is used to include one template inside another in Jinja2?",
    "c": null,
    "o": [
      "include",
      "render",
      "insert",
      "import"
    ]
  },
  {
    "q": "Which keyword in Jinja2 is used to create code blocks that child templates can override?",
    "c": null,
    "o": [
      "block",
      "section",
      "define",
      "template"
    ]
  },
  {
    "q": "Which of these is used to install Flask?",
    "c": null,
    "o": [
      "pip install flask",
      "flask install",
      "python flask",
      "install flask app"
    ]
  },
  {
    "q": "Which of these can be used to serve a Flask app in production with WSGI?",
    "c": null,
    "o": [
      "Gunicorn",
      "Werkzeug",
      "SQLite",
      "PyJWT"
    ]
  },
  {
    "q": "Which function is used to render an HTML page using a template in Flask?",
    "c": null,
    "o": [
      "render_template()",
      "render_html()",
      "load_template()",
      "show_page()"
    ]
  },
  {
    "q": "What type of parameter is used in a URL like `/user/<username>` in Flask?",
    "c": null,
    "o": [
      "Dynamic route parameter",
      "Static route",
      "Query string",
      "Form input"
    ]
  },
  {
    "q": "What is the correct way to get a query parameter in Flask?",
    "c": "name = request.args.get('name')",
    "o": [
      "request.args.get('name')",
      "request.query.get('name')",
      "request.form['name']",
      "request.param('name')"
    ]
  },
  {
    "q": "What is the purpose of `Flask(__name__)` when initializing an app?",
    "c": null,
    "o": [
      "To help Flask find templates and static files",
      "To create a secret key",
      "To configure the database",
      "To register all routes"
    ]
  },
  {
    "q": "Which statement is true about the `session` object in Flask?",
    "c": null,
    "o": [
      "It allows storing data across requests for a user",
      "It stores data permanently in a database",
      "It logs user activity",
      "It stores cookies only for admin users"
    ]
  },
  {
    "q": "Which directive is used to extend a base template in Jinja2?",
    "c": null,
    "o": [
      "{% extends 'base.html' %}",
      "{% include 'base.html' %}",
      "{% inherit 'base.html' %}",
      "{% copy 'base.html' %}"
    ]
  },
  {
    "q": "What is the default port Flask runs on?",
    "c": null,
    "o": [
      "5000",
      "8080",
      "80",
      "3000"
    ]
  },
  {
    "q": "Which of the following is used to handle file uploads in Flask?",
    "c": null,
    "o": [
      "request.files",
      "request.uploads",
      "request.data",
      "request.media"
    ]
  },
  {
    "q": "Which file is commonly used to define a Docker image for a Flask app?",
    "c": null,
    "o": [
      "Dockerfile",
      "flask.yml",
      "requirements.txt",
      "image.config"
    ]
  },
  {
    "q": "What is the purpose of `Flask-SQLAlchemy`?",
    "c": null,
    "o": [
      "To interact with relational databases using ORM",
      "To style HTML templates",
      "To handle form validation",
      "To create REST APIs"
    ]
  },
  {
    "q": "What will the following route return?",
    "c": "@app.route('/')\ndef index():\n    return 'Hello Flask!'",
    "o": [
      "Hello Flask!",
      "Flask App",
      "Welcome Page",
      "HTML Template"
    ]
  },
  {
    "q": "Which of these is the correct way to handle both GET and POST methods in a Flask route?",
    "c": "@app.route('/submit', methods=['GET', 'POST'])",
    "o": [
      "methods=['GET', 'POST']",
      "request_type=['GET', 'POST']",
      "allow=['GET', 'POST']",
      "type=['GET', 'POST']"
    ]
  },
  {
    "q": "Which function allows redirection to another route in Flask?",
    "c": null,
    "o": [
      "redirect()",
      "transfer()",
      "go_to()",
      "switch_route()"
    ]
  },
  {
    "q": "What does `flash()` do in Flask?",
    "c": null,
    "o": [
      "Stores a message to be shown to the user",
      "Creates a pop-up window",
      "Restarts the server",
      "Uploads a file"
    ]
  },
  {
    "q": "What is the purpose of `url_for()` in Flask?",
    "c": null,
    "o": [
      "Generates a URL to a route using the function name",
      "Returns current URL path",
      "Redirects to a route",
      "Imports URLs from templates"
    ]
  },
  {
    "q": "Which object is used to access JSON data sent in a POST request?",
    "c": null,
    "o": [
      "request.get_json()",
      "request.data.json()",
      "request.body()",
      "request.get_data()"
    ]
  },
  {
    "q": "Which HTTP method is typically used to send form data in a secure way?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "PATCH"
    ]
  },
  {
    "q": "What is the purpose of `@app.route('/path')` in Flask?",
    "c": null,
    "o": [
      "Defines a URL endpoint and links it to a function",
      "Creates a template folder",
      "Initializes a database",
      "Defines HTTP headers"
    ]
  },
  {
    "q": "In a Jinja2 template, which syntax is used for outputting a variable?",
    "c": null,
    "o": [
      "{{ variable }}",
      "{# variable #}",
      "{% variable %}",
      "<% variable %>"
    ]
  },
  {
    "q": "What type of file is usually placed inside the `templates` folder?",
    "c": null,
    "o": [
      "HTML files",
      "Python files",
      "CSS files",
      "Database files"
    ]
  },
  {
    "q": "What does `@login_required` decorator from Flask-Login do?",
    "c": null,
    "o": [
      "Restricts access to authenticated users only",
      "Logs a user in",
      "Redirects to registration",
      "Shows the login form"
    ]
  },
  {
    "q": "Which environment variable is often set to tell Flask to run in debug mode?",
    "c": null,
    "o": [
      "FLASK_DEBUG",
      "DEBUG_MODE",
      "FLASK_RUN",
      "APP_ENV"
    ]
  },
  {
    "q": "What does `db.create_all()` do in Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "Creates database tables based on models",
      "Inserts sample data",
      "Runs database migrations",
      "Deletes old data"
    ]
  },
  {
    "q": "How do you install Flask-Login?",
    "c": null,
    "o": [
      "pip install flask-login",
      "pip install flask_login",
      "pip add flask-login",
      "flask install login"
    ]
  },
  {
    "q": "What does `form.validate_on_submit()` check in Flask-WTF?",
    "c": null,
    "o": [
      "If form is submitted and passes all validations",
      "If form is in GET mode",
      "If a template is loaded",
      "If a file is uploaded"
    ]
  },
  {
    "q": "What kind of response does Flask's `jsonify()` produce?",
    "c": null,
    "o": [
      "A JSON response with proper MIME type",
      "A plain string",
      "An HTML template",
      "A redirect URL"
    ]
  },
  {
    "q": "What happens if you try to access a route that is not defined in Flask?",
    "c": null,
    "o": [
      "A 404 Not Found error is returned",
      "The server restarts",
      "An empty page is shown",
      "The default template is loaded"
    ]
  },
  {
    "q": "What command is used to run a Flask app from the terminal?",
    "c": null,
    "o": [
      "flask run",
      "python start.py",
      "start flask",
      "flask start"
    ]
  },
  {
    "q": "Where do you typically define Flask-WTF forms?",
    "c": null,
    "o": [
      "In a separate Python file, often called forms.py",
      "In HTML templates",
      "Inside config.py",
      "Directly in the database model"
    ]
  },
  {
    "q": "Which Flask tool is most helpful for handling form CSRF protection?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Login",
      "Flask-Migrate",
      "Flask-SQLAlchemy"
    ]
  },
  {
    "q": "Which of the following methods is used to redirect a user to another page in Flask?",
    "c": null,
    "o": [
      "redirect()",
      "url_for()",
      "go_to()",
      "navigate()"
    ]
  },
  {
    "q": "In Flask, what is the purpose of `@app.before_request`?",
    "c": null,
    "o": [
      "To run a function before each request",
      "To handle HTTP errors",
      "To set route permissions",
      "To manage session timeout"
    ]
  },
  {
    "q": "Which of the following is a correct way to specify allowed HTTP methods for a Flask route?",
    "c": "@app.route('/submit', methods=['POST'])",
    "o": [
      "methods=['POST']",
      "type='POST'",
      "http_method='POST'",
      "allow='POST'"
    ]
  },
  {
    "q": "Where are static files (like CSS and JS) placed in a Flask project?",
    "c": null,
    "o": [
      "In the static folder",
      "In the templates folder",
      "In the app folder",
      "In the config folder"
    ]
  },
  {
    "q": "Which of the following correctly imports Flask?",
    "c": null,
    "o": [
      "from flask import Flask",
      "import Flask",
      "from Flask import app",
      "import flask.Flask"
    ]
  },
  {
    "q": "What is the file extension of Jinja2 templates used in Flask?",
    "c": null,
    "o": [
      ".html",
      ".jinja2",
      ".tpl",
      ".flask"
    ]
  },
  {
    "q": "Which command is used to install Flask via pip?",
    "c": null,
    "o": [
      "pip install flask",
      "flask install",
      "install flask",
      "pip add flask"
    ]
  },
  {
    "q": "Which of these is used in Flask to generate URLs for functions?",
    "c": null,
    "o": [
      "url_for()",
      "generate_url()",
      "make_link()",
      "href()"
    ]
  },
  {
    "q": "What kind of error will Flask return if a route does not exist?",
    "c": null,
    "o": [
      "404",
      "403",
      "500",
      "401"
    ]
  },
  {
    "q": "Which function can be used to stop the current request and return a custom error?",
    "c": null,
    "o": [
      "abort()",
      "fail()",
      "stop()",
      "error()"
    ]
  },
  {
    "q": "What should be returned by a route function in Flask?",
    "c": null,
    "o": [
      "A response (like a string or template)",
      "A template file path",
      "Only a dictionary",
      "A URL path"
    ]
  },
  {
    "q": "What does `@app.after_request` decorator do?",
    "c": null,
    "o": [
      "Executes a function after each request is processed",
      "Runs before any route is executed",
      "Sets up database tables",
      "Renders the home page"
    ]
  },
  {
    "q": "In Flask, what does `request.form` return?",
    "c": null,
    "o": [
      "Data submitted via POST form",
      "Data in JSON format",
      "Query string values",
      "Current URL"
    ]
  },
  {
    "q": "Which of the following is a Flask extension for working with web forms?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Mail",
      "Flask-Migrate",
      "Flask-Uploads"
    ]
  },
  {
    "q": "Which statement best describes Flask?",
    "c": null,
    "o": [
      "A lightweight web framework for Python",
      "A JavaScript UI framework",
      "A static site generator",
      "A machine learning library"
    ]
  },
  {
    "q": "Which Flask object is used to access query parameters in a URL?",
    "c": null,
    "o": [
      "request.args",
      "request.form",
      "request.json",
      "request.files"
    ]
  },
  {
    "q": "What does `render_template()` do in Flask?",
    "c": null,
    "o": [
      "Renders an HTML file using Jinja2 templates",
      "Converts Python to HTML",
      "Starts the Flask server",
      "Creates a database"
    ]
  },
  {
    "q": "In Flask, which folder typically contains the HTML templates?",
    "c": null,
    "o": [
      "templates",
      "static",
      "html",
      "views"
    ]
  },
  {
    "q": "Which decorator is used to define a route in Flask?",
    "c": null,
    "o": [
      "@app.route",
      "@route.app",
      "@flask.route",
      "@url.route"
    ]
  },
  {
    "q": "Which method in Flask is used to handle file uploads?",
    "c": null,
    "o": [
      "request.files",
      "request.upload",
      "request.get_file",
      "request.send_file"
    ]
  },
  {
    "q": "Which command is used to install Flask-RESTful?",
    "c": null,
    "o": [
      "pip install flask-restful",
      "pip install FlaskRest",
      "pip install restful",
      "flask install restful"
    ]
  },
  {
    "q": "What is the default port on which a Flask app runs?",
    "c": null,
    "o": [
      "5000",
      "8000",
      "3000",
      "8080"
    ]
  },
  {
    "q": "Which Flask extension helps in managing user sessions and logins?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Auth",
      "Flask-WTF",
      "Flask-Session"
    ]
  },
  {
    "q": "Which object provides access to cookies in Flask?",
    "c": null,
    "o": [
      "request.cookies",
      "session.cookies",
      "app.cookies",
      "flask.cookies"
    ]
  },
  {
    "q": "How can you send data in JSON format in a Flask response?",
    "c": null,
    "o": [
      "jsonify(data)",
      "render_json(data)",
      "send_json(data)",
      "return_json(data)"
    ]
  },
  {
    "q": "In Jinja2, how do you write a for loop to display items in a list?",
    "c": "{% for item in items %} {{ item }} {% endfor %}",
    "o": [
      "{% for item in items %} {{ item }} {% endfor %}",
      "{{ for item in items }}",
      "{% loop items %} {{ item }} {% endloop %}",
      "{% each item in items %} {{ item }} {% endeach %}"
    ]
  },
  {
    "q": "What Flask command can set the application entry point?",
    "c": null,
    "o": [
      "export FLASK_APP=app.py",
      "set_app(app.py)",
      "flask entry app.py",
      "flask define app.py"
    ]
  },
  {
    "q": "How do you import the `request` object from Flask?",
    "c": null,
    "o": [
      "from flask import request",
      "import request from flask",
      "from request import flask",
      "import flask.request"
    ]
  },
  {
    "q": "What is required to enable CSRF protection in Flask-WTF?",
    "c": null,
    "o": [
      "A secret key must be set",
      "Database must be connected",
      "Enable debug mode",
      "Use HTTPS only"
    ]
  },
  {
    "q": "Which of the following is used to define a Flask Blueprint?",
    "c": null,
    "o": [
      "Blueprint('name', __name__)",
      "Flask.Blueprint('name')",
      "app.create_blueprint('name')",
      "flask.route_group('name')"
    ]
  },
  {
    "q": "Which function is used to start a Flask application?",
    "c": null,
    "o": [
      "app.run()",
      "flask.start()",
      "run.app()",
      "start_flask()"
    ]
  },
  {
    "q": "How do you access form data submitted via POST in Flask?",
    "c": null,
    "o": [
      "request.form",
      "request.args",
      "request.data",
      "request.json"
    ]
  },
  {
    "q": "Which HTTP method is used by default in a Flask route if not specified?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What is the correct way to return an HTML page from a route in Flask?",
    "c": null,
    "o": [
      "return render_template('index.html')",
      "return 'index.html'",
      "render('index.html')",
      "display_template('index.html')"
    ]
  },
  {
    "q": "Which of the following statements creates a Flask app instance?",
    "c": null,
    "o": [
      "app = Flask(__name__)",
      "Flask = app()",
      "create Flask(app)",
      "app = new Flask()"
    ]
  },
  {
    "q": "Which of the following HTTP methods is commonly used to send form data to a server?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What is the purpose of `debug=True` in `app.run(debug=True)`?",
    "c": null,
    "o": [
      "To enable automatic reload and error debugging",
      "To connect to a database",
      "To hide error messages",
      "To disable user sessions"
    ]
  },
  {
    "q": "Which Jinja2 syntax is used to print a variable in a template?",
    "c": null,
    "o": [
      "{{ variable }}",
      "{% variable %}",
      "[[ variable ]]",
      "<% variable %>"
    ]
  },
  {
    "q": "Which function in Flask can be used to redirect a user to another route?",
    "c": null,
    "o": [
      "redirect()",
      "send_to()",
      "navigate()",
      "url_redirect()"
    ]
  },
  {
    "q": "Which Flask module provides support for building RESTful APIs?",
    "c": null,
    "o": [
      "flask_restful",
      "flask_wtf",
      "flask_sqlalchemy",
      "flask_login"
    ]
  },
  {
    "q": "How do you define a route in Flask that handles both GET and POST methods?",
    "c": "@app.route('/submit', methods=['GET', 'POST'])",
    "o": [
      "@app.route('/submit', methods=['GET', 'POST'])",
      "@app.route('/submit', type=['GET', 'POST'])",
      "@route('/submit', ['GET', 'POST'])",
      "@route('/submit', method='GET|POST')"
    ]
  },
  {
    "q": "What Flask object can be used to access JSON data from a request?",
    "c": null,
    "o": [
      "request.get_json()",
      "request.json_data()",
      "request.fetch_json()",
      "request.retrieve_json()"
    ]
  },
  {
    "q": "What is the correct file name used by Flask to detect the main application file?",
    "c": null,
    "o": [
      "app.py",
      "main.py",
      "flask_app.py",
      "run.py"
    ]
  },
  {
    "q": "Which Jinja2 statement is used for conditional logic in a template?",
    "c": null,
    "o": [
      "{% if %}",
      "{{ if }}",
      "[% if %]",
      "{# if #}"
    ]
  },
  {
    "q": "Which of the following Flask extensions helps with database ORM?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-WTF",
      "Flask-RESTful",
      "Flask-Mail"
    ]
  },
  {
    "q": "What does the `url_for()` function do in Flask?",
    "c": null,
    "o": [
      "Generates a URL for the given endpoint",
      "Defines a new route",
      "Redirects to an external site",
      "Returns raw HTML content"
    ]
  },
  {
    "q": "Which folder in a Flask project is typically used to store static files like CSS and JS?",
    "c": null,
    "o": [
      "static",
      "templates",
      "public",
      "assets"
    ]
  },
  {
    "q": "Which object in Flask is used to create a session?",
    "c": null,
    "o": [
      "session",
      "request",
      "response",
      "app"
    ]
  },
  {
    "q": "Which Flask extension simplifies form creation and validation?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Form",
      "Flask-Validator",
      "Flask-Forms"
    ]
  },
  {
    "q": "Which HTTP status code does Flask return by default if not specified?",
    "c": null,
    "o": [
      "200",
      "404",
      "302",
      "500"
    ]
  },
  {
    "q": "What does `@app.route('/')` define in Flask?",
    "c": null,
    "o": [
      "The home or root URL",
      "A static file path",
      "A 404 error page",
      "A login page"
    ]
  },
  {
    "q": "What is the purpose of `flash()` in Flask?",
    "c": null,
    "o": [
      "To display one-time messages to users",
      "To clear browser cache",
      "To send HTTP redirects",
      "To log users out"
    ]
  },
  {
    "q": "Which method sends data in the URL query string?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "Which command runs a Flask app from the terminal (Linux/macOS)?",
    "c": null,
    "o": [
      "export FLASK_APP=app.py && flask run",
      "flask start app.py",
      "python flask app.py",
      "flask server start"
    ]
  },
  {
    "q": "Which HTTP method is idempotent and used for fetching data?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PATCH",
      "OPTIONS"
    ]
  },
  {
    "q": "How do you set up a virtual environment for a Flask project?",
    "c": null,
    "o": [
      "python -m venv env",
      "pip install flask-env",
      "flask create env",
      "python flask env"
    ]
  },
  {
    "q": "Which WSGI server is commonly used to deploy Flask applications in production?",
    "c": null,
    "o": [
      "Gunicorn",
      "SQLite",
      "Postman",
      "Flask-WTF"
    ]
  },
  {
    "q": "In Flask templates, how do you include another HTML file?",
    "c": null,
    "o": [
      "{% include 'file.html' %}",
      "{% load 'file.html' %}",
      "{{ include('file.html') }}",
      "{% use 'file.html' %}"
    ]
  },
  {
    "q": "Which object in Flask allows you to set cookies in a response?",
    "c": null,
    "o": [
      "response.set_cookie()",
      "request.set_cookie()",
      "app.set_cookie()",
      "session.set_cookie()"
    ]
  },
  {
    "q": "Which of the following is true about Blueprint in Flask?",
    "c": null,
    "o": [
      "It helps in organizing routes in a modular way",
      "It defines the structure of a database",
      "It stores configuration variables",
      "It manages user authentication"
    ]
  },
  {
    "q": "Which of the following will create a URL route that handles dynamic usernames?",
    "c": null,
    "o": [
      "@app.route('/user/<username>')",
      "@app.route('/user/username')",
      "@app.route('/user/<str:username>')",
      "@route('/user/<username>')"
    ]
  },
  {
    "q": "Which object in Flask helps you retrieve URL query parameters?",
    "c": null,
    "o": [
      "request.args",
      "request.form",
      "request.json",
      "request.data"
    ]
  },
  {
    "q": "Which HTTP method should be used to update data on a server?",
    "c": null,
    "o": [
      "PUT",
      "GET",
      "OPTIONS",
      "CONNECT"
    ]
  },
  {
    "q": "Which statement correctly adds a new RESTful resource in Flask-RESTful?",
    "c": null,
    "o": [
      "api.add_resource(MyResource, '/myresource')",
      "api.route(MyResource, '/myresource')",
      "add.resource(api, '/myresource')",
      "api.create(MyResource, '/myresource')"
    ]
  },
  {
    "q": "Which Flask extension would you use to manage user logins and sessions?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Security",
      "Flask-WTF",
      "Flask-RESTful"
    ]
  },
  {
    "q": "Which keyword is used to create a custom error handler in Flask?",
    "c": null,
    "o": [
      "@app.errorhandler",
      "@app.error",
      "@app.on_error",
      "@errorhandler"
    ]
  },
  {
    "q": "How would you pass a variable `name` to a Flask template?",
    "c": null,
    "o": [
      "render_template('index.html', name=name)",
      "render('index.html', name)",
      "display('index.html', name)",
      "return_template('index.html', name)"
    ]
  },
  {
    "q": "What does the `request.method` return inside a route function?",
    "c": null,
    "o": [
      "The HTTP method used (GET, POST, etc.)",
      "The current URL",
      "The server status",
      "The user’s IP address"
    ]
  },
  {
    "q": "What is the default port when running a Flask development server?",
    "c": null,
    "o": [
      "5000",
      "8080",
      "8000",
      "3000"
    ]
  },
  {
    "q": "Which function in Flask is used to generate a full URL to a route using its endpoint name?",
    "c": null,
    "o": [
      "url_for()",
      "route_to()",
      "get_url()",
      "link_to()"
    ]
  },
  {
    "q": "Which command installs Flask via pip?",
    "c": null,
    "o": [
      "pip install Flask",
      "install flask",
      "pip flask install",
      "python install Flask"
    ]
  },
  {
    "q": "What does the `render_template()` function do?",
    "c": null,
    "o": [
      "Renders an HTML file using Jinja2",
      "Saves a template to the disk",
      "Converts HTML to PDF",
      "Returns plain text"
    ]
  },
  {
    "q": "Which of the following is a feature of Flask Blueprints?",
    "c": null,
    "o": [
      "Helps organize a Flask app into modules",
      "Used only for rendering templates",
      "Only handles static files",
      "Used for CSS styling"
    ]
  },
  {
    "q": "Where do you usually place your HTML template files in a Flask project?",
    "c": null,
    "o": [
      "templates folder",
      "static folder",
      "views folder",
      "routes folder"
    ]
  },
  {
    "q": "Which extension helps integrate Flask with SQL databases using ORM?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-WTF",
      "Flask-RESTful",
      "Flask-Mail"
    ]
  },
  {
    "q": "Which directive is used in Jinja2 templates to write a for loop?",
    "c": null,
    "o": [
      "{% for item in list %}",
      "{{ for item in list }}",
      "<% for item in list %>",
      "[% for item in list %]"
    ]
  },
  {
    "q": "How do you check the type of request (GET or POST) in a Flask view function?",
    "c": null,
    "o": [
      "request.method",
      "request.type",
      "request.action",
      "request.header"
    ]
  },
  {
    "q": "Which method is used to retrieve form data sent via POST in Flask?",
    "c": null,
    "o": [
      "request.form",
      "request.data",
      "request.args",
      "request.query"
    ]
  },
  {
    "q": "What does `@login_required` do in Flask-Login?",
    "c": null,
    "o": [
      "Prevents access to routes for non-authenticated users",
      "Creates a login form",
      "Logs the user out",
      "Automatically logs in the user"
    ]
  },
  {
    "q": "In Flask-WTF, what is CSRF protection used for?",
    "c": null,
    "o": [
      "Prevent unauthorized form submissions",
      "Style the form using CSS",
      "Validate JavaScript inside forms",
      "Add login fields automatically"
    ]
  },
  {
    "q": "Which Flask method is used to return JSON responses?",
    "c": null,
    "o": [
      "jsonify()",
      "to_json()",
      "return_json()",
      "make_json()"
    ]
  },
  {
    "q": "Where do you typically define database models when using Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "In a class that inherits from db.Model",
      "Inside the templates folder",
      "As a dictionary object",
      "In a static JSON file"
    ]
  },
  {
    "q": "Which of the following is true about Docker in context of Flask?",
    "c": null,
    "o": [
      "Docker can be used to containerize Flask apps",
      "Docker is a Flask extension",
      "Docker runs only with Gunicorn",
      "Docker is required to run Flask apps locally"
    ]
  },
  {
    "q": "Which file is typically used to define the Flask application object?",
    "c": null,
    "o": [
      "app.py",
      "routes.html",
      "index.json",
      "config.env"
    ]
  },
  {
    "q": "Which function is used to redirect a user to another route in Flask?",
    "c": null,
    "o": [
      "redirect()",
      "go_to()",
      "forward()",
      "navigate()"
    ]
  },
  {
    "q": "How do you define a custom error page for 404 in Flask?",
    "c": null,
    "o": [
      "@app.errorhandler(404)",
      "@app.route('/404')",
      "@app.route.error(404)",
      "@app.handler(404)"
    ]
  },
  {
    "q": "What does `request.json` return?",
    "c": null,
    "o": [
      "The parsed JSON data sent in a request body",
      "The full HTML page as JSON",
      "The raw bytes of the file",
      "The user’s session cookie"
    ]
  },
  {
    "q": "What does the `flask run` command do?",
    "c": null,
    "o": [
      "Starts the Flask development server",
      "Installs Flask",
      "Creates a Flask project",
      "Deploys Flask to production"
    ]
  },
  {
    "q": "Which function is used to initialize the Flask application?",
    "c": null,
    "o": [
      "Flask(__name__)",
      "create_flask()",
      "init_flask()",
      "FlaskApp()"
    ]
  },
  {
    "q": "What is the role of WSGI in Flask?",
    "c": null,
    "o": [
      "It acts as an interface between the web server and the Flask app",
      "It compiles Flask templates",
      "It secures the database connection",
      "It is used to validate API responses"
    ]
  },
  {
    "q": "Which decorator is used to define a route in Flask?",
    "c": null,
    "o": [
      "@app.route()",
      "@flask.route()",
      "@route.app()",
      "@app.router()"
    ]
  },
  {
    "q": "What does `request.args.get('name')` retrieve?",
    "c": null,
    "o": [
      "A query parameter named 'name'",
      "A form field named 'name'",
      "A JSON field named 'name'",
      "A cookie named 'name'"
    ]
  },
  {
    "q": "Which folder is typically used to serve static files in a Flask project?",
    "c": null,
    "o": [
      "static",
      "templates",
      "resources",
      "assets"
    ]
  },
  {
    "q": "Which method should be used to submit form data securely in Flask?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "Which keyword is used in Jinja2 to display the value of a variable?",
    "c": null,
    "o": [
      "{{ variable }}",
      "{% variable %}",
      "[[ variable ]]",
      "<< variable >>"
    ]
  },
  {
    "q": "Which object handles client requests in Flask?",
    "c": null,
    "o": [
      "request",
      "client",
      "input",
      "http"
    ]
  },
  {
    "q": "Which Flask extension helps with form validation?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-SQLAlchemy",
      "Flask-RESTful",
      "Flask-Mail"
    ]
  },
  {
    "q": "How do you connect a Flask app to a database using SQLAlchemy?",
    "c": null,
    "o": [
      "app.config['SQLALCHEMY_DATABASE_URI'] = 'db_url'",
      "app.set_db_uri('db_url')",
      "app.database.connect('db_url')",
      "app.db_uri = 'db_url'"
    ]
  },
  {
    "q": "Which Flask component is used to return an HTML response?",
    "c": null,
    "o": [
      "render_template()",
      "send_html()",
      "make_response()",
      "render_html()"
    ]
  },
  {
    "q": "What is the purpose of Gunicorn when deploying a Flask app?",
    "c": null,
    "o": [
      "It is a WSGI server used to serve Flask in production",
      "It compiles Python code",
      "It manages database migrations",
      "It validates user sessions"
    ]
  },
  {
    "q": "What kind of design pattern does Flask use?",
    "c": null,
    "o": [
      "MVC (Model-View-Controller)",
      "MTV (Model-Template-View)",
      "MVVM (Model-View-ViewModel)",
      "Observer Pattern"
    ]
  },
  {
    "q": "Which method sends data as a query string in a URL?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "PATCH"
    ]
  },
  {
    "q": "What does `request.files` return in Flask?",
    "c": null,
    "o": [
      "Uploaded files from a form",
      "Cookies from the request",
      "Header values",
      "Query string parameters"
    ]
  },
  {
    "q": "What is the main use of `url_for()` in Flask?",
    "c": null,
    "o": [
      "To dynamically build a URL for a given endpoint",
      "To redirect a user to another site",
      "To validate input URLs",
      "To parse JSON from URLs"
    ]
  },
  {
    "q": "Which tool helps you containerize and run Flask apps consistently?",
    "c": null,
    "o": [
      "Docker",
      "Kubernetes",
      "Postman",
      "Nginx"
    ]
  },
  {
    "q": "Which command initializes a basic Flask project if you are using the CLI?",
    "c": null,
    "o": [
      "flask --app app run",
      "flask startproject",
      "flask init",
      "flask install app"
    ]
  },
  {
    "q": "What is the default port on which Flask runs in development mode?",
    "c": null,
    "o": [
      "5000",
      "8000",
      "8080",
      "3000"
    ]
  },
  {
    "q": "Which HTML tag is used in Flask templates to submit a form?",
    "c": null,
    "o": [
      "<form>",
      "<submit>",
      "<input type='submit'>",
      "<post>"
    ]
  },
  {
    "q": "What does `request.form.get('email')` retrieve?",
    "c": null,
    "o": [
      "The value of the 'email' field from a submitted form",
      "The value of a query string",
      "A cookie value",
      "A header from the request"
    ]
  },
  {
    "q": "Which extension allows integration of Flask with relational databases using ORM?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-Login",
      "Flask-WTF",
      "Flask-Mail"
    ]
  },
  {
    "q": "What does `render_template('index.html')` do?",
    "c": null,
    "o": [
      "Renders the 'index.html' file using the Jinja2 template engine",
      "Returns a JSON response",
      "Redirects the user to index.html",
      "Generates a new template file"
    ]
  },
  {
    "q": "Which object provides access to session data in Flask?",
    "c": null,
    "o": [
      "session",
      "request.session",
      "flask_session",
      "auth"
    ]
  },
  {
    "q": "Which command can be used to install Flask using pip?",
    "c": null,
    "o": [
      "pip install flask",
      "flask install",
      "python install flask",
      "flask setup"
    ]
  },
  {
    "q": "What does the `jsonify()` function in Flask do?",
    "c": null,
    "o": [
      "Converts Python dictionaries to JSON responses",
      "Parses a JSON string into Python",
      "Creates a Jinja2 HTML file",
      "Loads a form"
    ]
  },
  {
    "q": "Where are HTML template files typically stored in a Flask project?",
    "c": null,
    "o": [
      "templates",
      "static",
      "public",
      "html"
    ]
  },
  {
    "q": "Which file is commonly used to define configuration values in Flask?",
    "c": null,
    "o": [
      "config.py",
      "settings.json",
      "env.txt",
      "flask.ini"
    ]
  },
  {
    "q": "In Flask, how do you return a 404 error manually?",
    "c": null,
    "o": [
      "abort(404)",
      "raise 404",
      "return 404",
      "error(404)"
    ]
  },
  {
    "q": "How do you start the Flask development server?",
    "c": null,
    "o": [
      "flask run",
      "flask dev",
      "python runserver",
      "start flask"
    ]
  },
  {
    "q": "In Flask, which statement defines allowed HTTP methods for a route?",
    "c": null,
    "o": [
      "@app.route('/submit', methods=['GET', 'POST'])",
      "@app.route('/submit', allow_methods=['GET', 'POST'])",
      "@app.route('/submit').methods = ['GET', 'POST']",
      "@route('/submit', http=['GET', 'POST'])"
    ]
  },
  {
    "q": "Which Flask extension helps with user authentication?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-WTF",
      "Flask-Admin",
      "Flask-JWT"
    ]
  },
  {
    "q": "Which HTTP method is typically used to retrieve data from a server?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "Which function in Flask redirects the user to another route?",
    "c": null,
    "o": [
      "redirect()",
      "goto()",
      "forward()",
      "navigate()"
    ]
  },
  {
    "q": "Which file extension is commonly used for Jinja2 template files?",
    "c": null,
    "o": [
      ".html",
      ".jinja",
      ".jinja2",
      ".tmpl"
    ]
  },
  {
    "q": "In Flask, where are CSS, JavaScript, and image files typically stored?",
    "c": null,
    "o": [
      "static",
      "assets",
      "public",
      "resources"
    ]
  },
  {
    "q": "Which object is used to access JSON data from a POST request?",
    "c": null,
    "o": [
      "request.json",
      "request.args",
      "request.form",
      "request.headers"
    ]
  },
  {
    "q": "Which tool is commonly used to run Flask apps in production?",
    "c": null,
    "o": [
      "Gunicorn",
      "Postman",
      "Werkzeug",
      "SQLite"
    ]
  },
  {
    "q": "What is the purpose of the `@app.route` decorator?",
    "c": null,
    "o": [
      "To bind a URL to a view function",
      "To start the Flask server",
      "To serve static files",
      "To initialize templates"
    ]
  },
  {
    "q": "Which command builds a Docker image from a Dockerfile?",
    "c": null,
    "o": [
      "docker build",
      "docker run",
      "docker make",
      "docker install"
    ]
  },
  {
    "q": "What is the correct syntax to include a template inside another in Jinja2?",
    "c": null,
    "o": [
      "{% include 'header.html' %}",
      "{{ include 'header.html' }}",
      "<% include 'header.html' %>",
      "{% insert 'header.html' %}"
    ]
  },
  {
    "q": "Which Flask extension provides tools for building REST APIs?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-Login",
      "Flask-WTF",
      "Flask-Mail"
    ]
  },
  {
    "q": "What does `@login_required` do in Flask-Login?",
    "c": null,
    "o": [
      "It restricts access to authenticated users only",
      "It creates a login page",
      "It logs the user in automatically",
      "It logs the user out"
    ]
  },
  {
    "q": "Which Flask extension provides CSRF protection in forms?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-RESTful",
      "Flask-SocketIO",
      "Flask-Caching"
    ]
  },
  {
    "q": "What does the `app.run()` method do?",
    "c": null,
    "o": [
      "Starts the Flask development server",
      "Creates the application object",
      "Stops the server",
      "Reloads the app"
    ]
  },
  {
    "q": "Which Jinja2 statement is used to write control structures like if-else?",
    "c": null,
    "o": [
      "{% %}",
      "{{ }}",
      "[[ ]]",
      "(() )"
    ]
  },
  {
    "q": "What does the following snippet return in Flask?",
    "c": "return jsonify({\"status\": \"ok\"})",
    "o": [
      "A JSON response",
      "An HTML page",
      "A plain text string",
      "A template"
    ]
  },
  {
    "q": "Which keyword is used in Jinja2 to loop through items in a list?",
    "c": null,
    "o": [
      "for",
      "loop",
      "each",
      "iterate"
    ]
  },
  {
    "q": "Which folder name is automatically recognized by Flask to serve static files?",
    "c": null,
    "o": [
      "static",
      "public",
      "assets",
      "media"
    ]
  },
  {
    "q": "What is the role of `@app.route('/')` in Flask?",
    "c": null,
    "o": [
      "It defines the function to run at the root URL",
      "It initializes the Flask app",
      "It connects to the database",
      "It sets the app's name"
    ]
  },
  {
    "q": "Which method allows you to send data securely from a form?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "PATCH"
    ]
  },
  {
    "q": "In Flask, `request.args.get('name')` is used to access:",
    "c": null,
    "o": [
      "Query parameters",
      "Form data",
      "JSON data",
      "Headers"
    ]
  },
  {
    "q": "What is the purpose of Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "Database ORM support",
      "Form validation",
      "User authentication",
      "Template rendering"
    ]
  },
  {
    "q": "Which command runs a container in Docker?",
    "c": null,
    "o": [
      "docker run",
      "docker start",
      "docker go",
      "docker open"
    ]
  },
  {
    "q": "Which Flask object represents the current HTTP request?",
    "c": null,
    "o": [
      "request",
      "response",
      "session",
      "form"
    ]
  },
  {
    "q": "In Flask, what does `{{ user.name }}` do in a template?",
    "c": null,
    "o": [
      "Displays the name attribute of the user object",
      "Defines a variable",
      "Comments out the line",
      "Includes another template"
    ]
  },
  {
    "q": "Which of the following is a valid way to define a route in Flask?",
    "c": null,
    "o": [
      "@app.route('/home')",
      "@flask.route('/home')",
      "@route('/home')",
      "@app.url('/home')"
    ]
  },
  {
    "q": "Which of the following returns a JSON response in Flask?",
    "c": "from flask import jsonify\n\n@app.route('/api')\ndef api():\n    return jsonify({'message': 'success'})",
    "o": [
      "jsonify({'message': 'success'})",
      "render_template('api.html')",
      "return 'success'",
      "return {'message': 'success'}"
    ]
  },
  {
    "q": "Which object is used in Flask to store data between requests for a user?",
    "c": null,
    "o": [
      "session",
      "request",
      "form",
      "cookie"
    ]
  },
  {
    "q": "What is the use of `flask_wtf.FlaskForm`?",
    "c": null,
    "o": [
      "To define forms with validation",
      "To log in users",
      "To create models",
      "To send emails"
    ]
  },
  {
    "q": "Which HTTP method is typically used to update existing data?",
    "c": null,
    "o": [
      "PUT",
      "GET",
      "POST",
      "DELETE"
    ]
  },
  {
    "q": "Which method in Flask is used to render an HTML template?",
    "c": null,
    "o": [
      "render_template",
      "render_html",
      "load_template",
      "serve_html"
    ]
  },
  {
    "q": "Which module must be imported to use `Flask` in your application?",
    "c": null,
    "o": [
      "from flask import Flask",
      "import flask.core",
      "from flask_app import FlaskApp",
      "import flask_server"
    ]
  },
  {
    "q": "How do you specify that a route should only accept POST requests?",
    "c": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    return 'Posted!'",
    "o": [
      "methods=['POST']",
      "method='POST'",
      "accepts='POST'",
      "type='POST'"
    ]
  },
  {
    "q": "Which Flask extension is best suited for managing user sessions and authentication?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-WTF",
      "Flask-Mail",
      "Flask-Migrate"
    ]
  },
  {
    "q": "What does the `request.form` object contain?",
    "c": null,
    "o": [
      "Form data from POST requests",
      "Query parameters",
      "Uploaded files",
      "JSON payloads"
    ]
  },
  {
    "q": "Which of the following can be used to group routes in Flask?",
    "c": null,
    "o": [
      "Blueprints",
      "Routers",
      "Modules",
      "Packages"
    ]
  },
  {
    "q": "What does `render_template('index.html')` do?",
    "c": null,
    "o": [
      "Renders an HTML file using Jinja2",
      "Redirects to a new route",
      "Returns JSON data",
      "Compiles JavaScript"
    ]
  },
  {
    "q": "Which HTTP method is typically used to delete a resource on the server?",
    "c": null,
    "o": [
      "DELETE",
      "POST",
      "PATCH",
      "PUT"
    ]
  },
  {
    "q": "What does `{{ title }}` mean in a Jinja2 template?",
    "c": null,
    "o": [
      "It outputs the value of the `title` variable",
      "It defines a variable",
      "It adds a comment",
      "It includes a script"
    ]
  },
  {
    "q": "Where do you place HTML templates in a Flask project?",
    "c": null,
    "o": [
      "templates folder",
      "static folder",
      "html folder",
      "pages folder"
    ]
  },
  {
    "q": "Which command installs Flask via pip?",
    "c": null,
    "o": [
      "pip install flask",
      "install flask",
      "python -m flask install",
      "flask setup"
    ]
  },
  {
    "q": "Which extension helps integrate SQL databases using ORM in Flask?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-Migrate",
      "Flask-ORM",
      "Flask-DB"
    ]
  },
  {
    "q": "What does `url_for('index')` do in Flask?",
    "c": null,
    "o": [
      "Returns the URL for the 'index' view function",
      "Renders the index template",
      "Redirects to home",
      "Creates a new route"
    ]
  },
  {
    "q": "Which method returns a redirect response in Flask?",
    "c": null,
    "o": [
      "redirect()",
      "send_to()",
      "goto()",
      "transfer()"
    ]
  },
  {
    "q": "What type of file is typically used for Docker configuration?",
    "c": null,
    "o": [
      "Dockerfile",
      "docker.config",
      "docker.yml",
      "Docker.run"
    ]
  },
  {
    "q": "In Flask-RESTful, which class is typically used to define API resources?",
    "c": null,
    "o": [
      "Resource",
      "API",
      "Route",
      "Handler"
    ]
  },
  {
    "q": "What is the purpose of the `methods` argument in a route decorator?",
    "c": null,
    "o": [
      "To specify which HTTP methods the route will accept",
      "To add middleware to the route",
      "To handle template rendering",
      "To define route priority"
    ]
  },
  {
    "q": "Which Flask extension is commonly used for form handling and CSRF protection?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Forms",
      "Flask-Input",
      "Flask-Guard"
    ]
  },
  {
    "q": "What does the `@app.route('/login')` decorator do?",
    "c": null,
    "o": [
      "Maps the `/login` URL to a view function",
      "Starts the Flask app in debug mode",
      "Connects to the database",
      "Imports the login module"
    ]
  },
  {
    "q": "Which function in Flask is used to create a response that redirects to another URL?",
    "c": null,
    "o": [
      "redirect",
      "go_to",
      "navigate",
      "reroute"
    ]
  },
  {
    "q": "Which folder is used in Flask to store files like CSS, JavaScript, and images?",
    "c": null,
    "o": [
      "static",
      "media",
      "assets",
      "resources"
    ]
  },
  {
    "q": "In Flask, which object is used to handle incoming JSON payloads?",
    "c": null,
    "o": [
      "request.get_json()",
      "request.form_json()",
      "request.json_data()",
      "request.get_data()"
    ]
  },
  {
    "q": "How do you access a specific field from a form using Flask's request object?",
    "c": null,
    "o": [
      "request.form['field_name']",
      "request.get['field_name']",
      "form['field_name']",
      "request.query['field_name']"
    ]
  },
  {
    "q": "Which command is used to start a Flask app using Gunicorn?",
    "c": null,
    "o": [
      "gunicorn app:app",
      "flask gunicorn run",
      "gunicorn run app",
      "start app gunicorn"
    ]
  },
  {
    "q": "Which statement correctly registers a Blueprint in a Flask application?",
    "c": "from flask import Flask\nfrom my_blueprint import bp\n\napp = Flask(__name__)\napp.register_blueprint(bp)",
    "o": [
      "app.register_blueprint(bp)",
      "app.add_blueprint(bp)",
      "app.include(bp)",
      "app.use_blueprint(bp)"
    ]
  },
  {
    "q": "What will `session['username'] = 'admin'` do in a Flask app?",
    "c": null,
    "o": [
      "Store the username in the user's session",
      "Create a new user account",
      "Authenticate the user",
      "Log the user out"
    ]
  },
  {
    "q": "Which built-in development server command runs a Flask app?",
    "c": null,
    "o": [
      "flask run",
      "flask start",
      "run flask",
      "python run"
    ]
  },
  {
    "q": "Which file do you typically create to describe how Docker should build your Flask app?",
    "c": null,
    "o": [
      "Dockerfile",
      "docker-compose.yml",
      "build.txt",
      "requirements.docker"
    ]
  },
  {
    "q": "Which Jinja2 syntax is used to include another template?",
    "c": null,
    "o": [
      "{% include 'header.html' %}",
      "{{ include('header.html') }}",
      "{% use 'header.html' %}",
      "{{ header.html }}"
    ]
  },
  {
    "q": "How do you run a Flask app in debug mode from the terminal?",
    "c": null,
    "o": [
      "FLASK_DEBUG=1 flask run",
      "flask run debug",
      "flask debug start",
      "python -m flask --debug"
    ]
  },
  {
    "q": "Which function is used to return HTML from a view function?",
    "c": null,
    "o": [
      "render_template",
      "return_html",
      "html_response",
      "send_template"
    ]
  },
  {
    "q": "Which method from the `request` object is used to access query parameters in Flask?",
    "c": null,
    "o": [
      "request.args",
      "request.query",
      "request.params",
      "request.query_string"
    ]
  },
  {
    "q": "What does the following Flask code do?",
    "c": "@app.route('/')\ndef home():\n    return 'Welcome!'",
    "o": [
      "Maps the root URL to the home function",
      "Initializes the app",
      "Creates a template",
      "Defines a login route"
    ]
  },
  {
    "q": "What will the following Jinja2 template output?",
    "c": "{% for i in range(2) %}{{ i }} {% endfor %}",
    "o": [
      "0 1 ",
      "1 2 ",
      "0 1 2 ",
      "1 2 3 "
    ]
  },
  {
    "q": "Which Flask extension would you use for integrating a database with models?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-Database",
      "Flask-DBConnect",
      "Flask-Data"
    ]
  },
  {
    "q": "Which HTTP method is used when submitting a form using the POST method?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "PATCH"
    ]
  },
  {
    "q": "What is the correct way to render the template `dashboard.html`?",
    "c": null,
    "o": [
      "render_template('dashboard.html')",
      "render('dashboard.html')",
      "template('dashboard.html')",
      "load_template('dashboard.html')"
    ]
  },
  {
    "q": "What is the use of `Flask-RESTful`?",
    "c": null,
    "o": [
      "To build REST APIs easily with Flask",
      "To handle static files",
      "To create templates",
      "To connect to a database"
    ]
  },
  {
    "q": "What does `request.get_json()` return if the incoming request has JSON content?",
    "c": null,
    "o": [
      "A Python dictionary",
      "A string",
      "An HTML page",
      "None by default"
    ]
  },
  {
    "q": "What is the role of `csrf_token` in Flask-WTF forms?",
    "c": null,
    "o": [
      "It helps protect against CSRF attacks",
      "It encrypts the form data",
      "It tracks user login",
      "It defines field types"
    ]
  },
  {
    "q": "Which function in Flask is used to build a full URL for a given endpoint?",
    "c": null,
    "o": [
      "url_for()",
      "get_url()",
      "endpoint_url()",
      "route_to()"
    ]
  },
  {
    "q": "Which file is automatically picked up when using `flask run`?",
    "c": null,
    "o": [
      "app.py",
      "index.py",
      "main.py",
      "server.py"
    ]
  },
  {
    "q": "Which Flask extension is typically used to migrate database schemas?",
    "c": null,
    "o": [
      "Flask-Migrate",
      "Flask-WTF",
      "Flask-Deploy",
      "Flask-Config"
    ]
  },
  {
    "q": "Which command can be used to create a virtual environment in Python?",
    "c": null,
    "o": [
      "python -m venv env",
      "flask create venv",
      "venv flask init",
      "flask init venv"
    ]
  },
  {
    "q": "In a Dockerfile, which instruction sets the default command to run the Flask app?",
    "c": null,
    "o": [
      "CMD",
      "ENTRYPOINT",
      "RUN",
      "EXPOSE"
    ]
  },
  {
    "q": "What is the default port for Flask’s built-in development server?",
    "c": null,
    "o": [
      "5000",
      "8000",
      "3000",
      "8080"
    ]
  },
  {
    "q": "What is the use of `@app.route('/hello')` in Flask?",
    "c": null,
    "o": [
      "It maps the '/hello' URL to a function",
      "It sends a redirect to '/hello'",
      "It loads a template named hello.html",
      "It adds a middleware to the app"
    ]
  },
  {
    "q": "Which Jinja2 syntax is used to output a variable in HTML?",
    "c": null,
    "o": [
      "{{ variable }}",
      "{% variable %}",
      "<% variable %>",
      "$variable$"
    ]
  },
  {
    "q": "Which of the following is used to run a Flask app from Python script?",
    "c": "if __name__ == '__main__':\n    app.run()",
    "o": [
      "app.run()",
      "flask.start()",
      "run.app()",
      "init.flask()"
    ]
  },
  {
    "q": "Which Flask object is used to handle cookies and sessions?",
    "c": null,
    "o": [
      "session",
      "cookies",
      "request.cookies",
      "flask.cookies"
    ]
  },
  {
    "q": "What is the correct way to access form data in Flask?",
    "c": "name = request.form['name']",
    "o": [
      "request.form['name']",
      "request.input['name']",
      "form.get('name')",
      "request['form']['name']"
    ]
  },
  {
    "q": "Which of the following is true about `render_template()`?",
    "c": null,
    "o": [
      "It renders HTML using Jinja2 templates",
      "It returns a JSON response",
      "It sends a redirect response",
      "It processes form data"
    ]
  },
  {
    "q": "Which Flask extension is used for user authentication?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Auth",
      "Flask-Users",
      "Flask-Security"
    ]
  },
  {
    "q": "Which method is used to retrieve JSON data sent to a Flask endpoint?",
    "c": null,
    "o": [
      "request.get_json()",
      "request.json_data()",
      "request.json()",
      "request.data.json()"
    ]
  },
  {
    "q": "In a Jinja2 template, what does `{% if user %}` do?",
    "c": null,
    "o": [
      "Checks if the user variable exists or is truthy",
      "Imports the user module",
      "Creates a new user session",
      "Loops over the user variable"
    ]
  },
  {
    "q": "Which of the following statements is true about `url_for()` in Flask?",
    "c": null,
    "o": [
      "It generates a URL for a given view function",
      "It redirects to a different view",
      "It renders a template from a URL",
      "It handles URL encoding only"
    ]
  },
  {
    "q": "What is the use of `app.config['SECRET_KEY']` in Flask?",
    "c": null,
    "o": [
      "To secure sessions and forms",
      "To enable logging",
      "To define the debug mode",
      "To set the app title"
    ]
  },
  {
    "q": "Which decorator is used to protect routes using Flask-Login?",
    "c": null,
    "o": [
      "@login_required",
      "@require_login",
      "@secure_route",
      "@auth_required"
    ]
  },
  {
    "q": "What is the correct way to define a route that accepts both GET and POST methods?",
    "c": "@app.route('/submit', methods=['GET', 'POST'])",
    "o": [
      "methods=['GET', 'POST']",
      "request=['GET', 'POST']",
      "method=('GET', 'POST')",
      "http_methods='GET,POST'"
    ]
  },
  {
    "q": "Which extension is used for validating and processing Flask forms?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Forms",
      "Flask-Input",
      "Flask-Check"
    ]
  },
  {
    "q": "What does the `@app.route('/api')` decorator do?",
    "c": null,
    "o": [
      "Maps the '/api' URL to the associated function",
      "Starts a REST API server",
      "Creates an API key",
      "Parses JSON data from request"
    ]
  },
  {
    "q": "What will be the HTTP response for this Flask route?",
    "c": "@app.route('/greet')\ndef greet():\n    return 'Hello, Flask!'",
    "o": [
      "Hello, Flask!",
      "Flask route loaded",
      "Template rendered",
      "None"
    ]
  },
  {
    "q": "Which of the following Flask components is responsible for handling client requests?",
    "c": null,
    "o": [
      "Routes",
      "Templates",
      "Sessions",
      "Static files"
    ]
  },
  {
    "q": "How do you return a JSON response from a Flask route?",
    "c": null,
    "o": [
      "return jsonify(data)",
      "return json(data)",
      "return send_json(data)",
      "return render_json(data)"
    ]
  },
  {
    "q": "What does the `request.method` return in a Flask view?",
    "c": null,
    "o": [
      "The HTTP method used in the request",
      "The name of the route function",
      "The full request URL",
      "The IP address of the client"
    ]
  },
  {
    "q": "What is the purpose of the `debug=True` flag in `app.run()`?",
    "c": null,
    "o": [
      "It enables live code reloading and better error messages",
      "It disables the server logs",
      "It improves security",
      "It limits access to localhost only"
    ]
  },
  {
    "q": "Which of these is a valid Flask extension for form validation and CSRF protection?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-CSRF",
      "Flask-Forms",
      "Flask-Validator"
    ]
  },
  {
    "q": "How do you include another HTML file inside a Jinja2 template?",
    "c": null,
    "o": [
      "{% include 'header.html' %}",
      "{{ include 'header.html' }}",
      "<% include 'header.html' %>",
      "{% load 'header.html' %}"
    ]
  },
  {
    "q": "Which command can be used to install Flask?",
    "c": null,
    "o": [
      "pip install flask",
      "flask install",
      "python flask setup",
      "install flask-package"
    ]
  },
  {
    "q": "Which function is used to log a user in using Flask-Login?",
    "c": null,
    "o": [
      "login_user(user)",
      "start_session(user)",
      "authenticate(user)",
      "user_login(user)"
    ]
  },
  {
    "q": "Which of the following is used to run a Flask app using Gunicorn?",
    "c": null,
    "o": [
      "gunicorn app:app",
      "flask start gunicorn",
      "python app.py --gunicorn",
      "gunicorn run app"
    ]
  },
  {
    "q": "How can you redirect a user to another route in Flask?",
    "c": null,
    "o": [
      "redirect(url_for('function_name'))",
      "render_template('page.html')",
      "return url('function_name')",
      "load_page('function_name')"
    ]
  },
  {
    "q": "Which environment variable is used to set the Flask app?",
    "c": null,
    "o": [
      "FLASK_APP",
      "APP_FLASK",
      "RUN_FLASK",
      "FLASK_RUN"
    ]
  },
  {
    "q": "Which parameter is required in a Flask-WTF form class to enable CSRF?",
    "c": null,
    "o": [
      "csrf = True",
      "token = True",
      "enable_csrf = True",
      "csrf_protect = True"
    ]
  },
  {
    "q": "What is the purpose of Blueprints in Flask?",
    "c": null,
    "o": [
      "To organize routes and logic into reusable components",
      "To load static files",
      "To manage HTML templates",
      "To secure login forms"
    ]
  },
  {
    "q": "Which folder is conventionally used for storing HTML templates in Flask?",
    "c": null,
    "o": [
      "templates",
      "html",
      "views",
      "pages"
    ]
  },
  {
    "q": "What is the correct way to access query parameters in Flask?",
    "c": "search_term = request.args.get('query')",
    "o": [
      "request.args.get('query')",
      "request.query.get('query')",
      "request.get('query')",
      "request.form['query']"
    ]
  },
  {
    "q": "Which of these methods is used to render a Jinja2 template in Flask?",
    "c": null,
    "o": [
      "render_template('template.html')",
      "template_render('template.html')",
      "display('template.html')",
      "view('template.html')"
    ]
  },
  {
    "q": "What does `@app.route('/home')` do in a Flask app?",
    "c": null,
    "o": [
      "It binds the URL '/home' to a function",
      "It creates a new HTML template",
      "It starts the server",
      "It logs the request path"
    ]
  },
  {
    "q": "What is the default port used by Flask’s built-in server?",
    "c": null,
    "o": [
      "5000",
      "8080",
      "80",
      "3000"
    ]
  },
  {
    "q": "Which HTTP method is used when submitting a form with `method='post'`?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "FETCH"
    ]
  },
  {
    "q": "What Flask module is used to define database models?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-Database",
      "Flask-ORM",
      "Flask-Model"
    ]
  },
  {
    "q": "Which command starts the Flask development server using environment variables?",
    "c": null,
    "o": [
      "flask run",
      "python app.py",
      "flask start",
      "run flask"
    ]
  },
  {
    "q": "Which function creates a dynamic URL in Flask templates?",
    "c": null,
    "o": [
      "url_for()",
      "href()",
      "path_to()",
      "get_url()"
    ]
  },
  {
    "q": "Which Flask extension helps you define RESTful API resources?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-API",
      "Flask-Endpoint",
      "Flask-Service"
    ]
  },
  {
    "q": "Where should static files like CSS or JS be placed in a Flask app?",
    "c": null,
    "o": [
      "static",
      "templates",
      "resources",
      "public"
    ]
  },
  {
    "q": "Which class from Flask-WTF is used to create form fields?",
    "c": null,
    "o": [
      "FlaskForm",
      "FormModel",
      "WTFForm",
      "InputForm"
    ]
  },
  {
    "q": "What does Flask use under the hood to route URLs to functions?",
    "c": null,
    "o": [
      "Werkzeug",
      "Jinja2",
      "SQLAlchemy",
      "Marshmallow"
    ]
  },
  {
    "q": "Which function in Flask sends an HTTP redirect?",
    "c": null,
    "o": [
      "redirect()",
      "route_to()",
      "jump()",
      "navigate()"
    ]
  },
  {
    "q": "How do you pass data to a Jinja2 template in Flask?",
    "c": null,
    "o": [
      "render_template('file.html', name='John')",
      "load_template('file.html', name='John')",
      "template('file.html', name='John')",
      "display('file.html', name='John')"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a Flask Blueprint?",
    "c": null,
    "o": [
      "Blueprint('name', __name__)",
      "Flask.Blueprint('name')",
      "Blueprint(app)",
      "app.route_blueprint('name')"
    ]
  },
  {
    "q": "Which of the following decorators is used to define a route in Flask?",
    "c": null,
    "o": [
      "@app.route()",
      "@app.path()",
      "@flask.url()",
      "@route.app()"
    ]
  },
  {
    "q": "How can you access form data sent via POST in Flask?",
    "c": "username = request.form['username']",
    "o": [
      "request.form['username']",
      "request.data['username']",
      "request.query['username']",
      "request.get['username']"
    ]
  },
  {
    "q": "Which Jinja2 syntax is used to output a variable in an HTML template?",
    "c": null,
    "o": [
      "{{ variable }}",
      "[[ variable ]]",
      "{% variable %}",
      "<% variable %>"
    ]
  },
  {
    "q": "What is the default host address when you run a Flask app with `flask run`?",
    "c": null,
    "o": [
      "127.0.0.1",
      "0.0.0.0",
      "localhost:8000",
      "192.168.0.1"
    ]
  },
  {
    "q": "What is the purpose of `jsonify()` in Flask?",
    "c": null,
    "o": [
      "To convert a Python dict into a JSON response",
      "To validate a form",
      "To render an HTML template",
      "To fetch a file from the server"
    ]
  },
  {
    "q": "Which file extension is typically used for Flask templates?",
    "c": null,
    "o": [
      ".html",
      ".jinja",
      ".tpl",
      ".xml"
    ]
  },
  {
    "q": "Which function initializes a database connection in Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "db = SQLAlchemy(app)",
      "connect_db(app)",
      "db.start(app)",
      "init_sql(app)"
    ]
  },
  {
    "q": "Which of these libraries can help you deploy Flask with Docker?",
    "c": null,
    "o": [
      "Dockerfile",
      "DeployFlask",
      "FlaskRun",
      "FlaskDock"
    ]
  },
  {
    "q": "Which HTTP methods are commonly supported in a Flask route?",
    "c": null,
    "o": [
      "GET, POST",
      "GET, PUT",
      "HEAD, TRACE",
      "CONNECT, PATCH"
    ]
  },
  {
    "q": "Which parameter should be passed to `url_for()` to generate a dynamic route?",
    "c": null,
    "o": [
      "The function name",
      "The route string",
      "The template name",
      "The app name"
    ]
  },
  {
    "q": "What is the main use of `Flask-Login`?",
    "c": null,
    "o": [
      "User session management",
      "Form rendering",
      "Database configuration",
      "HTML template styling"
    ]
  },
  {
    "q": "Which of the following commands can be used to create a virtual environment for Flask?",
    "c": null,
    "o": [
      "python -m venv env",
      "flask venv",
      "flask --create-env",
      "create flask env"
    ]
  },
  {
    "q": "Which function loads a user in Flask-Login?",
    "c": null,
    "o": [
      "@login_manager.user_loader",
      "@flask_login.user",
      "@user_loader",
      "@app.user_login"
    ]
  },
  {
    "q": "What should a REST API return as a best practice?",
    "c": null,
    "o": [
      "JSON",
      "HTML",
      "XML",
      "Text file"
    ]
  },
  {
    "q": "Which folder is typically used to store your Flask app's Python code?",
    "c": null,
    "o": [
      "app",
      "core",
      "www",
      "flask_root"
    ]
  },
  {
    "q": "Which of the following methods retrieves JSON data from a request in Flask?",
    "c": "data = request.get_json()",
    "o": [
      "request.get_json()",
      "request.json_data()",
      "request.data.json()",
      "request.get_data('json')"
    ]
  },
  {
    "q": "Which Flask extension is commonly used for CSRF protection and form validation?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Form",
      "Flask-Validate",
      "Flask-Check"
    ]
  },
  {
    "q": "How do you allow multiple HTTP methods for a route in Flask?",
    "c": "@app.route('/submit', methods=['GET', 'POST'])",
    "o": [
      "methods=['GET', 'POST']",
      "method='POST,GET'",
      "allow_methods=['GET','POST']",
      "route(methods='get,post')"
    ]
  },
  {
    "q": "Which command installs Flask using pip?",
    "c": null,
    "o": [
      "pip install Flask",
      "install flask",
      "flask install",
      "pip flask install"
    ]
  },
  {
    "q": "In Flask, what is the correct way to serve a file as a response?",
    "c": null,
    "o": [
      "send_file()",
      "render_file()",
      "file_response()",
      "return_file()"
    ]
  },
  {
    "q": "Where should Jinja2 templates be stored in a Flask project?",
    "c": null,
    "o": [
      "templates",
      "static",
      "html",
      "assets"
    ]
  },
  {
    "q": "Which parameter must be set to True to enable debug mode in Flask?",
    "c": "app.run(debug=True)",
    "o": [
      "debug=True",
      "debugMode=True",
      "run_debug=True",
      "mode='debug'"
    ]
  },
  {
    "q": "Which tool is often used with Flask to run production WSGI servers?",
    "c": null,
    "o": [
      "Gunicorn",
      "Celery",
      "Supervisor",
      "Uvicorn"
    ]
  },
  {
    "q": "How do you define a model using Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "By subclassing db.Model",
      "By importing flask.Model",
      "By calling create_model()",
      "By extending SQL.Model"
    ]
  },
  {
    "q": "Which of the following is used to check if a user is logged in with Flask-Login?",
    "c": null,
    "o": [
      "current_user.is_authenticated",
      "user.is_logged_in",
      "check_user_status()",
      "session.is_active"
    ]
  },
  {
    "q": "Which of the following ports does Gunicorn use by default?",
    "c": null,
    "o": [
      "8000",
      "5000",
      "3000",
      "8080"
    ]
  },
  {
    "q": "Which Flask component is used to group routes and views into reusable modules?",
    "c": null,
    "o": [
      "Blueprint",
      "Router",
      "Module",
      "AppSection"
    ]
  },
  {
    "q": "Which HTTP method should be used for updating existing data?",
    "c": null,
    "o": [
      "PUT",
      "GET",
      "DELETE",
      "HEAD"
    ]
  },
  {
    "q": "Which function allows you to redirect users to a different route in Flask?",
    "c": "return redirect(url_for('home'))",
    "o": [
      "redirect()",
      "forward()",
      "transfer()",
      "navigate()"
    ]
  },
  {
    "q": "Which Flask method is used to handle session management securely?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Sessions",
      "SessionGuard",
      "SecureLogin"
    ]
  },
  {
    "q": "Which HTTP method is typically used to fetch data from a server?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What does the `@app.route('/')` decorator in Flask do?",
    "c": null,
    "o": [
      "Maps the root URL to a view function",
      "Starts the Flask application",
      "Defines a static route",
      "Registers a Blueprint"
    ]
  },
  {
    "q": "Which folder is used to store static assets like CSS and JavaScript in a Flask project?",
    "c": null,
    "o": [
      "static",
      "templates",
      "assets",
      "public"
    ]
  },
  {
    "q": "What is the purpose of `url_for()` in Flask?",
    "c": null,
    "o": [
      "Generates URLs based on function names",
      "Renders a template",
      "Redirects to a URL",
      "Parses JSON data"
    ]
  },
  {
    "q": "How can you retrieve query parameters in a Flask view?",
    "c": "name = request.args.get('name')",
    "o": [
      "request.args.get('name')",
      "request.query.get('name')",
      "request.data['name']",
      "request.get('name')"
    ]
  },
  {
    "q": "Which of the following is a correct way to create a Flask app?",
    "c": "app = Flask(__name__)",
    "o": [
      "Flask(__name__)",
      "Flask.new()",
      "app = CreateFlask()",
      "FlaskApp()"
    ]
  },
  {
    "q": "What is the return type of a Flask route handler?",
    "c": null,
    "o": [
      "String or Response object",
      "Only HTML",
      "Only JSON",
      "Only Template file"
    ]
  },
  {
    "q": "What is the function of `render_template()` in Flask?",
    "c": null,
    "o": [
      "Renders an HTML file using Jinja2",
      "Saves form data",
      "Returns JSON response",
      "Redirects to another page"
    ]
  },
  {
    "q": "Which key is used to access the current user in Flask-Login?",
    "c": null,
    "o": [
      "current_user",
      "active_user",
      "user_data",
      "logged_user"
    ]
  },
  {
    "q": "Which of the following is used to organize large Flask applications?",
    "c": null,
    "o": [
      "Blueprints",
      "Modules",
      "Chunks",
      "Controllers"
    ]
  },
  {
    "q": "Which extension provides integration of SQLAlchemy with Flask?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-ORM",
      "Flask-DB",
      "Flask-Data"
    ]
  },
  {
    "q": "Which of the following is the correct file to define your Flask app for Gunicorn?",
    "c": null,
    "o": [
      "wsgi.py",
      "main.py",
      "run.py",
      "server.py"
    ]
  },
  {
    "q": "Which function returns a 404 error if a resource is not found in Flask?",
    "c": null,
    "o": [
      "abort(404)",
      "error(404)",
      "fail(404)",
      "return_404()"
    ]
  },
  {
    "q": "What must be set in Flask for sessions to work securely?",
    "c": null,
    "o": [
      "SECRET_KEY",
      "SESSION_ENABLED",
      "ALLOW_SESSION",
      "AUTH_KEY"
    ]
  },
  {
    "q": "Which object in Flask helps to define and manage form fields with validation?",
    "c": null,
    "o": [
      "FlaskForm",
      "FormGroup",
      "InputHandler",
      "FormObject"
    ]
  },
  {
    "q": "Which HTTP method is used to send data to the server in a form submission?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "HEAD"
    ]
  },
  {
    "q": "What is the correct way to start a basic Flask app?",
    "c": "if __name__ == '__main__':\n    app.run()",
    "o": [
      "app.run()",
      "start(app)",
      "flask.run()",
      "app.start()"
    ]
  },
  {
    "q": "Which extension helps manage user authentication in Flask?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Auth",
      "Flask-User",
      "LoginManager"
    ]
  },
  {
    "q": "Which built-in Python library is commonly used to parse JSON data in Flask?",
    "c": null,
    "o": [
      "json",
      "flask.json",
      "simplejson",
      "datajson"
    ]
  },
  {
    "q": "Which function should be used to handle redirection in Flask?",
    "c": null,
    "o": [
      "redirect()",
      "route_to()",
      "forward()",
      "go_to()"
    ]
  },
  {
    "q": "How do you pass a variable from a Flask view to a Jinja2 template?",
    "c": "return render_template('hello.html', name='Alice')",
    "o": [
      "render_template('hello.html', name='Alice')",
      "render('hello.html', var='Alice')",
      "render_file('hello.html', data='Alice')",
      "send_template('hello.html', value='Alice')"
    ]
  },
  {
    "q": "What is the name of the object that represents the incoming request in Flask?",
    "c": null,
    "o": [
      "request",
      "incoming",
      "req",
      "client_request"
    ]
  },
  {
    "q": "Which Flask method is used to extract form data sent via POST?",
    "c": "username = request.form['username']",
    "o": [
      "request.form",
      "request.data",
      "request.input",
      "request.values"
    ]
  },
  {
    "q": "Which method is used to connect Flask with a PostgreSQL database using SQLAlchemy?",
    "c": null,
    "o": [
      "Set SQLALCHEMY_DATABASE_URI in config",
      "Use db.connect('postgresql')",
      "Initialize PostgreSQL instance manually",
      "Set DATABASE_URL directly in Python file"
    ]
  },
  {
    "q": "Which function in Flask is used to return a JSON response?",
    "c": null,
    "o": [
      "jsonify()",
      "return_json()",
      "json_response()",
      "make_json()"
    ]
  },
  {
    "q": "What type of file is typically used to configure a Dockerized Flask application?",
    "c": null,
    "o": [
      "Dockerfile",
      "flask_config.py",
      "compose.yml",
      "docker.yaml"
    ]
  },
  {
    "q": "In Flask-WTF, which field type is used for a text input?",
    "c": null,
    "o": [
      "StringField",
      "TextInput",
      "CharField",
      "InputText"
    ]
  },
  {
    "q": "Which of these is NOT a valid HTTP method in Flask routes?",
    "c": null,
    "o": [
      "FETCH",
      "GET",
      "POST",
      "PUT"
    ]
  },
  {
    "q": "How do you add a custom 404 error page in Flask?",
    "c": null,
    "o": [
      "@app.errorhandler(404)",
      "@app.route('/404')",
      "@app.handler(404)",
      "@app.error(404)"
    ]
  },
  {
    "q": "Which method is used to register Blueprints in a Flask app?",
    "c": "app.register_blueprint(auth_blueprint)",
    "o": [
      "app.register_blueprint()",
      "app.add_blueprint()",
      "app.include_blueprint()",
      "app.use_blueprint()"
    ]
  },
  {
    "q": "Which file extension is commonly used for Flask templates?",
    "c": null,
    "o": [
      ".html",
      ".tpl",
      ".jinja",
      ".xml"
    ]
  },
  {
    "q": "Which Flask extension helps handle web forms with validation?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Form",
      "Flask-Validator",
      "Flask-Forms"
    ]
  },
  {
    "q": "What does the `methods` parameter in a Flask route define?",
    "c": null,
    "o": [
      "The HTTP methods the route responds to",
      "The return type of the function",
      "The template file to use",
      "The database model to bind"
    ]
  },
  {
    "q": "How do you get JSON data from a POST request in Flask?",
    "c": "data = request.get_json()",
    "o": [
      "request.get_json()",
      "request.json_data()",
      "request.post_json()",
      "request.JSON()"
    ]
  },
  {
    "q": "Which keyword is used in Jinja2 to write Python-like statements?",
    "c": null,
    "o": [
      "{% %}",
      "{{ }}",
      "[[ ]]",
      "<% %>"
    ]
  },
  {
    "q": "Which folder name is conventionally used to store Jinja2 templates in Flask?",
    "c": null,
    "o": [
      "templates",
      "views",
      "html",
      "jinja"
    ]
  },
  {
    "q": "Which of the following helps in separating large Flask applications into modular parts?",
    "c": null,
    "o": [
      "Blueprints",
      "Modules",
      "Templates",
      "Scripts"
    ]
  },
  {
    "q": "Which HTTP method is typically used to update existing data in RESTful APIs?",
    "c": null,
    "o": [
      "PUT",
      "GET",
      "POST",
      "DELETE"
    ]
  },
  {
    "q": "What will `request.form` return when no data is submitted?",
    "c": null,
    "o": [
      "An empty ImmutableMultiDict",
      "None",
      "An error",
      "A string"
    ]
  },
  {
    "q": "What does `@login_required` do in Flask-Login?",
    "c": null,
    "o": [
      "Restricts access to logged-in users",
      "Logs in a user automatically",
      "Registers a user",
      "Redirects to the login page always"
    ]
  },
  {
    "q": "How do you access the currently logged-in user in Flask-Login?",
    "c": null,
    "o": [
      "current_user",
      "request.user",
      "get_user()",
      "session.user"
    ]
  },
  {
    "q": "Which extension is used to connect Flask with a database using ORM?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-Database",
      "Flask-ORM",
      "Flask-Connector"
    ]
  },
  {
    "q": "What is the command to install Flask using pip?",
    "c": null,
    "o": [
      "pip install Flask",
      "install flask",
      "python -m flask install",
      "flask init"
    ]
  },
  {
    "q": "Which Flask component allows reuse of code for multiple routes with shared logic?",
    "c": null,
    "o": [
      "Blueprints",
      "Components",
      "Controllers",
      "Modules"
    ]
  },
  {
    "q": "Which command is used to start a Flask development server from the terminal?",
    "c": null,
    "o": [
      "flask run",
      "python flask",
      "run flask",
      "flask start"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a Flask route?",
    "c": null,
    "o": [
      "@app.route('/')",
      "@app.mapping('/')",
      "@app.path('/')",
      "@app.url('/')"
    ]
  },
  {
    "q": "Which of the following methods is used to submit form data as query parameters?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "Which function from Flask is used to render a template?",
    "c": null,
    "o": [
      "render_template()",
      "show_template()",
      "display_template()",
      "template()"
    ]
  },
  {
    "q": "In Flask, what does `request.args` allow access to?",
    "c": null,
    "o": [
      "Query parameters from the URL",
      "Form fields",
      "JSON payloads",
      "Route variables"
    ]
  },
  {
    "q": "Where should static files like CSS and JavaScript be stored in a Flask app?",
    "c": null,
    "o": [
      "static/",
      "templates/",
      "assets/",
      "resources/"
    ]
  },
  {
    "q": "How can you create a RESTful resource with Flask-RESTful?",
    "c": null,
    "o": [
      "By inheriting from Resource",
      "By defining a View class",
      "By extending FlaskApp",
      "By using Blueprint directly"
    ]
  },
  {
    "q": "Which keyword in Jinja2 is used for control structures like if-statements?",
    "c": null,
    "o": [
      "{% %}",
      "{{ }}",
      "<% %>",
      "[[ ]]"
    ]
  },
  {
    "q": "Which of the following is used to serve multiple Flask apps under one WSGI server?",
    "c": null,
    "o": [
      "Gunicorn",
      "Jinja2",
      "Flask-WTF",
      "Pytest"
    ]
  },
  {
    "q": "Which Flask object provides access to the current session?",
    "c": null,
    "o": [
      "session",
      "request",
      "user",
      "context"
    ]
  },
  {
    "q": "Which environment variable is commonly used to point to the Flask application?",
    "c": null,
    "o": [
      "FLASK_APP",
      "APP_FLASK",
      "FLASK_ENV",
      "RUN_FLASK"
    ]
  },
  {
    "q": "How does Flask identify a secure form submission in Flask-WTF?",
    "c": null,
    "o": [
      "Using CSRF tokens",
      "Using Captcha fields",
      "Using password hashing",
      "Using session cookies"
    ]
  },
  {
    "q": "In which case will `url_for('home')` be used in Flask?",
    "c": null,
    "o": [
      "To get the URL for the 'home' view function",
      "To define a URL route",
      "To redirect a user to a page",
      "To display a static page"
    ]
  },
  {
    "q": "What is the output format of `jsonify()` in Flask?",
    "c": null,
    "o": [
      "JSON",
      "HTML",
      "Text",
      "XML"
    ]
  },
  {
    "q": "Which HTTP method is typically used for deleting data in RESTful APIs?",
    "c": null,
    "o": [
      "DELETE",
      "REMOVE",
      "ERASE",
      "PUT"
    ]
  },
  {
    "q": "What is the purpose of `Flask(__name__)` when creating an app?",
    "c": null,
    "o": [
      "To help Flask locate resources like templates and static files",
      "To define the app version",
      "To load configuration from a file",
      "To run Flask on a remote server"
    ]
  },
  {
    "q": "Which HTTP method is commonly used when submitting form data securely?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "PATCH"
    ]
  },
  {
    "q": "What is the correct way to start a Flask development server?",
    "c": null,
    "o": [
      "flask run",
      "flask startserver",
      "python run.py",
      "start flask"
    ]
  },
  {
    "q": "Which Flask object is used to access incoming request data?",
    "c": null,
    "o": [
      "request",
      "response",
      "form",
      "session"
    ]
  },
  {
    "q": "What does `Flask-Login` primarily manage?",
    "c": null,
    "o": [
      "User authentication and session management",
      "Database queries",
      "Form rendering",
      "Template inheritance"
    ]
  },
  {
    "q": "What is the purpose of the `@app.route` decorator in Flask?",
    "c": null,
    "o": [
      "To define a URL route for a view function",
      "To create a template",
      "To serve static files",
      "To connect to the database"
    ]
  },
  {
    "q": "In Flask, where should form validation logic typically be handled?",
    "c": null,
    "o": [
      "In the view function or with Flask-WTF",
      "In the HTML template",
      "In the static folder",
      "Inside a database query"
    ]
  },
  {
    "q": "Which Flask extension allows integration with SQL databases using ORM?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-MySQL",
      "Flask-ORM",
      "Flask-Database"
    ]
  },
  {
    "q": "Which method is used to redirect users to another URL in Flask?",
    "c": "return redirect(url_for('home'))",
    "o": [
      "redirect()",
      "go_to()",
      "navigate()",
      "send_to()"
    ]
  },
  {
    "q": "What does `{{ variable }}` do in a Jinja2 template?",
    "c": null,
    "o": [
      "Outputs the value of the variable",
      "Declares a new variable",
      "Runs a function",
      "Creates a comment"
    ]
  },
  {
    "q": "Which of the following is a benefit of using Blueprints in Flask?",
    "c": null,
    "o": [
      "Helps organize application into components",
      "Improves database performance",
      "Adds CSS styling to templates",
      "Validates HTML forms"
    ]
  },
  {
    "q": "What kind of data does `request.json` return?",
    "c": null,
    "o": [
      "A dictionary parsed from JSON",
      "Raw bytes of request body",
      "HTML content",
      "URL string"
    ]
  },
  {
    "q": "Which directive in Jinja2 is used for loops?",
    "c": null,
    "o": [
      "{% for %}",
      "{{ for }}",
      "[[ for ]]",
      "<% for %>"
    ]
  },
  {
    "q": "Which file in a Flask app often contains the app initialization code?",
    "c": null,
    "o": [
      "app.py",
      "main.html",
      "config.txt",
      "index.json"
    ]
  },
  {
    "q": "What does the following Jinja2 code block do?",
    "c": "{% if user %} Hello, {{ user }} {% endif %}",
    "o": [
      "Displays a message if the 'user' variable is defined",
      "Defines a variable named 'user'",
      "Creates a loop",
      "Imports a template"
    ]
  },
  {
    "q": "Which of the following is a production-ready WSGI server for deploying Flask apps?",
    "c": null,
    "o": [
      "Gunicorn",
      "DevServer",
      "Werkzeug",
      "JinjaServer"
    ]
  },
  {
    "q": "Which of the following Flask extensions is used for working with forms and CSRF protection?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Forms",
      "Flask-CSRF",
      "Flask-Validate"
    ]
  },
  {
    "q": "What is the main purpose of using `Blueprints` in a Flask application?",
    "c": null,
    "o": [
      "To modularize large applications",
      "To connect to the database",
      "To manage user sessions",
      "To define API routes only"
    ]
  },
  {
    "q": "Which of these is the correct way to access POST form data in Flask?",
    "c": null,
    "o": [
      "request.form['field']",
      "request.get['field']",
      "form.get('field')",
      "data.form('field')"
    ]
  },
  {
    "q": "What does `render_template('home.html')` do in a Flask view?",
    "c": null,
    "o": [
      "Renders the HTML page named 'home.html'",
      "Redirects to a new route",
      "Displays a plain text response",
      "Saves the template to disk"
    ]
  },
  {
    "q": "In Flask, which object helps track the user's login status across requests?",
    "c": null,
    "o": [
      "session",
      "request",
      "form",
      "json"
    ]
  },
  {
    "q": "Which folder name is Flask configured to use by default for HTML templates?",
    "c": null,
    "o": [
      "templates",
      "html",
      "views",
      "pages"
    ]
  },
  {
    "q": "How can you pass variables from Flask to an HTML template?",
    "c": null,
    "o": [
      "By passing keyword arguments to render_template()",
      "By editing the HTML file directly",
      "Using global variables",
      "Using session only"
    ]
  },
  {
    "q": "Which HTTP method should be used for updating an existing resource in RESTful APIs?",
    "c": null,
    "o": [
      "PUT",
      "POST",
      "GET",
      "PATCH"
    ]
  },
  {
    "q": "Which of the following will correctly extract a JSON body from a request?",
    "c": null,
    "o": [
      "request.get_json()",
      "request.body.json()",
      "request.json.get()",
      "request.parse_json()"
    ]
  },
  {
    "q": "Which Flask extension can be used for managing user authentication?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Session",
      "Flask-Auth",
      "Flask-Users"
    ]
  },
  {
    "q": "What is the purpose of `app.config` in Flask?",
    "c": null,
    "o": [
      "To set configuration variables",
      "To declare routes",
      "To store templates",
      "To run background tasks"
    ]
  },
  {
    "q": "Which tool helps containerize Flask apps for deployment?",
    "c": null,
    "o": [
      "Docker",
      "Jinja2",
      "SQLite",
      "Gunicorn"
    ]
  },
  {
    "q": "How do you import the Flask class in your Python file?",
    "c": null,
    "o": [
      "from flask import Flask",
      "import Flask from flask",
      "import flask.Flask",
      "from Flask import flask"
    ]
  },
  {
    "q": "Which file typically defines the entry point for a Flask application?",
    "c": null,
    "o": [
      "app.py",
      "run.html",
      "template.html",
      "config.json"
    ]
  },
  {
    "q": "What does the `@login_required` decorator do in Flask-Login?",
    "c": null,
    "o": [
      "Restricts access to logged-in users",
      "Creates a login form",
      "Logs the user out",
      "Validates email address"
    ]
  },
  {
    "q": "Which of the following is a WSGI server commonly used to deploy Flask apps in production?",
    "c": null,
    "o": [
      "Gunicorn",
      "Jupyter",
      "Werkzeug",
      "Flask Dev Server"
    ]
  },
  {
    "q": "Which command is used to build a Docker image for a Flask app?",
    "c": null,
    "o": [
      "docker build -t appname .",
      "flask build docker",
      "docker start appname",
      "flask run --docker"
    ]
  },
  {
    "q": "In Flask-Login, which function is used to log in a user after verifying their credentials?",
    "c": null,
    "o": [
      "login_user(user)",
      "start_login(user)",
      "set_user(user)",
      "authenticate(user)"
    ]
  },
  {
    "q": "Which method is used to define RESTful API resources in Flask-RESTful?",
    "c": null,
    "o": [
      "Resource",
      "APIView",
      "Route",
      "Controller"
    ]
  },
  {
    "q": "Which file is typically used to define instructions for building a Docker container?",
    "c": null,
    "o": [
      "Dockerfile",
      "docker-compose.yml",
      "requirements.txt",
      "flask_config.py"
    ]
  },
  {
    "q": "Which Flask extension is designed for building RESTful APIs quickly?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-API",
      "Flask-Blueprints",
      "Flask-HTTP"
    ]
  },
  {
    "q": "What is the purpose of the `csrf_token` in Flask-WTF forms?",
    "c": null,
    "o": [
      "To prevent Cross-Site Request Forgery attacks",
      "To validate email addresses",
      "To log user sessions",
      "To store cookies"
    ]
  },
  {
    "q": "Which of the following commands runs a Flask app using Gunicorn?",
    "c": null,
    "o": [
      "gunicorn app:app",
      "flask run gunicorn",
      "python gunicorn.py",
      "start gunicorn"
    ]
  },
  {
    "q": "What does `docker-compose up` do for a Flask app defined in docker-compose.yml?",
    "c": null,
    "o": [
      "Starts the app and related services in containers",
      "Uploads code to the cloud",
      "Deletes existing Docker containers",
      "Compiles Python code"
    ]
  },
  {
    "q": "What is the purpose of using Blueprints when building RESTful APIs in Flask?",
    "c": null,
    "o": [
      "To group related routes and resources",
      "To validate API data",
      "To style API responses",
      "To store user sessions"
    ]
  },
  {
    "q": "Which WSGI interface does Flask use by default?",
    "c": null,
    "o": [
      "Werkzeug",
      "Gunicorn",
      "Apache",
      "UWSGI"
    ]
  },
  {
    "q": "Which function in Flask-Login is used to protect routes from unauthenticated access?",
    "c": null,
    "o": [
      "@login_required",
      "@secure_route",
      "@check_user",
      "@auth_required"
    ]
  },
  {
    "q": "Where is the Docker image name usually defined when deploying with Docker?",
    "c": null,
    "o": [
      "In the docker build command",
      "Inside the Flask config file",
      "In requirements.txt",
      "In the app.py file"
    ]
  },
  {
    "q": "Which Flask extension integrates SQLAlchemy ORM with Flask?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-ORM",
      "Flask-DB",
      "Flask-SQLite"
    ]
  },
  {
    "q": "Which Flask-WTF component handles form validation rules like `DataRequired()`?",
    "c": null,
    "o": [
      "Validators",
      "Filters",
      "FormFields",
      "Checks"
    ]
  },
  {
    "q": "Which environment variable is commonly set to tell Flask where the app is located?",
    "c": null,
    "o": [
      "FLASK_APP",
      "FLASK_PATH",
      "APP_LOCATION",
      "FLASK_PROJECT"
    ]
  },
  {
    "q": "What does the `login_user()` function do in Flask-Login?",
    "c": null,
    "o": [
      "Logs in a user and stores their session",
      "Validates the user password",
      "Saves the user to the database",
      "Registers a new user"
    ]
  },
  {
    "q": "Which function is used in Flask to define a route inside a Blueprint?",
    "c": null,
    "o": [
      "@blueprint.route()",
      "@app.route()",
      "@route.blueprint()",
      "@flask.route()"
    ]
  },
  {
    "q": "What is the purpose of `__name__` in `Flask(__name__)`?",
    "c": null,
    "o": [
      "To determine the root path of the application",
      "To name the app window",
      "To create a virtual environment",
      "To start the WSGI server"
    ]
  },
  {
    "q": "Which HTTP method is typically used when submitting an HTML form?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What does Flask’s `url_for()` function do?",
    "c": null,
    "o": [
      "Generates URLs for the given endpoint",
      "Defines a route",
      "Parses a query string",
      "Redirects a request"
    ]
  },
  {
    "q": "In Docker, what does the `EXPOSE 5000` instruction in a Dockerfile do?",
    "c": null,
    "o": [
      "Informs that the container listens on port 5000",
      "Starts the Flask app on port 5000",
      "Binds Docker to a virtual network",
      "Blocks port 5000"
    ]
  },
  {
    "q": "Which of the following helps protect a Flask app from CSRF attacks?",
    "c": null,
    "o": [
      "Flask-WTF with CSRF enabled",
      "Flask-Login only",
      "url_for()",
      "render_template()"
    ]
  },
  {
    "q": "Which keyword is used in Flask-WTF to define a required form field?",
    "c": null,
    "o": [
      "validators=[DataRequired()]",
      "required=True",
      "mandatory=True",
      "enforce=True"
    ]
  },
  {
    "q": "Which of the following files is needed to describe Python dependencies for Docker?",
    "c": null,
    "o": [
      "requirements.txt",
      "package.json",
      "docker-compose.yml",
      "Procfile"
    ]
  },
  {
    "q": "In a RESTful Flask API, what does the `delete()` method typically do?",
    "c": null,
    "o": [
      "Removes a resource",
      "Fetches data",
      "Updates a record",
      "Creates a new entry"
    ]
  },
  {
    "q": "Which of these functions is used to terminate a user session in Flask-Login?",
    "c": null,
    "o": [
      "logout_user()",
      "end_session()",
      "remove_login()",
      "clear_user()"
    ]
  },
  {
    "q": "What is the purpose of `docker-compose.yml` in a Flask project?",
    "c": null,
    "o": [
      "To define multi-container setups",
      "To describe app routes",
      "To configure Flask-Login",
      "To render Jinja templates"
    ]
  },
  {
    "q": "Which Python keyword is used to create a class-based resource in Flask-RESTful?",
    "c": null,
    "o": [
      "class",
      "resource",
      "def",
      "function"
    ]
  },
  {
    "q": "In Flask, how do you ensure a form submission came from your site?",
    "c": null,
    "o": [
      "Use CSRF protection with Flask-WTF",
      "Check IP addresses",
      "Use request.args",
      "Enable CORS"
    ]
  },
  {
    "q": "Which command sets the Flask environment to development mode?",
    "c": null,
    "o": [
      "export FLASK_ENV=development",
      "flask env set development",
      "set FLASK_MODE=dev",
      "flask start --env=dev"
    ]
  },
  {
    "q": "In Flask, what is the purpose of the `@app.before_request` decorator?",
    "c": null,
    "o": [
      "To run a function before each request",
      "To define a route",
      "To handle errors",
      "To load configuration"
    ]
  },
  {
    "q": "Which extension would you use to add login and logout functionality to a Flask app?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Security",
      "Flask-Auth",
      "Flask-Session"
    ]
  },
  {
    "q": "How do you specify allowed HTTP methods for a route in Flask?",
    "c": null,
    "o": [
      "Using the methods argument in @app.route()",
      "By naming the route",
      "Through config variables",
      "Using @app.methods() decorator"
    ]
  },
  {
    "q": "Which Flask method is used to return a JSON response from a view?",
    "c": null,
    "o": [
      "jsonify()",
      "render_template()",
      "make_response()",
      "send_json()"
    ]
  },
  {
    "q": "What file name is conventionally used for the main WSGI entry point in a Flask app?",
    "c": null,
    "o": [
      "wsgi.py",
      "app.py",
      "main.py",
      "run.py"
    ]
  },
  {
    "q": "In Docker, what is the purpose of the `CMD` instruction in a Dockerfile?",
    "c": null,
    "o": [
      "Specifies the default command to run when the container starts",
      "Builds the image",
      "Copies files to the container",
      "Exposes a port"
    ]
  },
  {
    "q": "Which function is used to protect Flask routes so only logged-in users can access them?",
    "c": null,
    "o": [
      "@login_required",
      "@auth_only",
      "@protected",
      "@user_only"
    ]
  },
  {
    "q": "How do you register a Blueprint in a Flask app?",
    "c": "app.register_blueprint(my_blueprint)",
    "o": [
      "app.register_blueprint()",
      "app.add_blueprint()",
      "app.include_blueprint()",
      "app.attach_blueprint()"
    ]
  },
  {
    "q": "What does the `request.get_json()` method return in Flask?",
    "c": null,
    "o": [
      "A dictionary parsed from JSON data",
      "A JSON string",
      "Raw request data",
      "A Flask Response object"
    ]
  },
  {
    "q": "Which of the following helps protect Flask forms from Cross-Site Request Forgery (CSRF)?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Login",
      "Flask-SQLAlchemy",
      "Flask-RESTful"
    ]
  },
  {
    "q": "What is the default port Flask’s built-in development server runs on?",
    "c": null,
    "o": [
      "5000",
      "8000",
      "8080",
      "3000"
    ]
  },
  {
    "q": "Which tool is commonly used as a WSGI HTTP server for running Flask in production?",
    "c": null,
    "o": [
      "Gunicorn",
      "Werkzeug",
      "Twisted",
      "FlaskDev"
    ]
  },
  {
    "q": "Which of these is used to specify multiple HTTP methods for a Flask route?",
    "c": null,
    "o": [
      "methods=['GET', 'POST']",
      "allow=['GET', 'POST']",
      "http_methods=['GET', 'POST']",
      "verbs=['GET', 'POST']"
    ]
  },
  {
    "q": "Which file in a Flask project typically contains environment-specific variables?",
    "c": null,
    "o": [
      ".env",
      "config.py",
      "settings.json",
      "app.cfg"
    ]
  },
  {
    "q": "Which Flask extension is commonly used to integrate SQL databases?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-WTF",
      "Flask-Login",
      "Flask-Mail"
    ]
  },
  {
    "q": "Which method is used to retrieve URL query parameters in Flask?",
    "c": null,
    "o": [
      "request.args",
      "request.query",
      "request.get",
      "request.param"
    ]
  },
  {
    "q": "What does `@app.route('/')` do in a Flask application?",
    "c": null,
    "o": [
      "Defines a route for the homepage",
      "Redirects to a login page",
      "Starts the Flask server",
      "Returns a 404 page"
    ]
  },
  {
    "q": "Which of the following is true about Blueprints in Flask?",
    "c": null,
    "o": [
      "They help organize routes into components",
      "They are used to style HTML templates",
      "They encrypt form data",
      "They replace the Flask app object"
    ]
  },
  {
    "q": "Which object is used to access form data submitted via POST in Flask?",
    "c": null,
    "o": [
      "request.form",
      "request.body",
      "request.postdata",
      "request.submit"
    ]
  },
  {
    "q": "What is the role of `render_template()` in Flask?",
    "c": null,
    "o": [
      "Renders an HTML template with Jinja2",
      "Handles user authentication",
      "Returns a JSON response",
      "Parses URL parameters"
    ]
  },
  {
    "q": "Which of these is a valid HTTP method supported by Flask?",
    "c": null,
    "o": [
      "PUT",
      "FETCH",
      "CONNECT",
      "PING"
    ]
  },
  {
    "q": "What is the default host IP when running a Flask app locally?",
    "c": null,
    "o": [
      "127.0.0.1",
      "0.0.0.0",
      "192.168.0.1",
      "localhost"
    ]
  },
  {
    "q": "Which Flask method is used to redirect users to another URL?",
    "c": null,
    "o": [
      "redirect()",
      "send_to()",
      "route_to()",
      "move()"
    ]
  },
  {
    "q": "Which of the following is true about Flask-WTF?",
    "c": null,
    "o": [
      "It simplifies form creation and validation",
      "It connects Flask to MongoDB",
      "It is used to encrypt cookies",
      "It renders templates"
    ]
  },
  {
    "q": "Which command is used to install Flask-Login?",
    "c": null,
    "o": [
      "pip install flask-login",
      "flask install login",
      "pip flask add login",
      "flask-login install"
    ]
  },
  {
    "q": "What is the purpose of the `__init__.py` file in a Flask project folder?",
    "c": null,
    "o": [
      "To make the folder a Python package",
      "To start the Flask server",
      "To store environment variables",
      "To hold Jinja templates"
    ]
  },
  {
    "q": "What is typically included in a Dockerfile for deploying a Flask app?",
    "c": null,
    "o": [
      "Base image, install commands, run command",
      "User login credentials",
      "Browser configuration",
      "Jinja2 macros"
    ]
  },
  {
    "q": "Which of the following is NOT a valid Flask HTTP method decorator?",
    "c": null,
    "o": [
      "@app.route('/path', methods=['POST', 'GET'])",
      "@app.route('/path')",
      "@app.get('/path')",
      "@app.request('/path')"
    ]
  },
  {
    "q": "Which of the following can be used to create RESTful APIs in Flask?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-Forms",
      "Flask-Admin",
      "Flask-CORS"
    ]
  },
  {
    "q": "What is the purpose of Flask-Migrate?",
    "c": null,
    "o": [
      "To handle database schema changes",
      "To transfer files between servers",
      "To backup project files",
      "To migrate user sessions"
    ]
  },
  {
    "q": "Which HTTP method is typically used when submitting a form that modifies server data?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "HEAD"
    ]
  },
  {
    "q": "In a RESTful API built with Flask, what is a common return type for data responses?",
    "c": null,
    "o": [
      "JSON",
      "HTML",
      "XML",
      "CSV"
    ]
  },
  {
    "q": "Which Flask object is used to get the current session data?",
    "c": null,
    "o": [
      "session",
      "request",
      "g",
      "current_app"
    ]
  },
  {
    "q": "What is the function of Flask's `url_for()`?",
    "c": null,
    "o": [
      "Generates a URL for a given endpoint",
      "Returns the server’s IP address",
      "Encodes a URL",
      "Fetches remote content"
    ]
  },
  {
    "q": "Which tool do you typically use to containerize a Flask application?",
    "c": null,
    "o": [
      "Docker",
      "Postman",
      "Git",
      "Gunicorn"
    ]
  },
  {
    "q": "In Flask-RESTful, which class is used to define an API resource?",
    "c": null,
    "o": [
      "Resource",
      "ApiClass",
      "RestView",
      "Endpoint"
    ]
  },
  {
    "q": "Which of the following files is commonly used to list Python dependencies for deployment?",
    "c": null,
    "o": [
      "requirements.txt",
      "dependencies.yaml",
      "modules.json",
      "config.ini"
    ]
  },
  {
    "q": "What is the use of `app.config` in Flask?",
    "c": null,
    "o": [
      "To store configuration variables",
      "To define URL routes",
      "To serve static files",
      "To render templates"
    ]
  },
  {
    "q": "How does Flask identify users across requests?",
    "c": null,
    "o": [
      "Using sessions and cookies",
      "Using global variables",
      "By storing IP addresses",
      "Using user-agent strings"
    ]
  },
  {
    "q": "Which Flask extension helps in validating and securing forms?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Forms",
      "Flask-Schema",
      "Flask-Guard"
    ]
  },
  {
    "q": "What does `request.method` return in Flask?",
    "c": null,
    "o": [
      "The HTTP method used in the request",
      "The URL of the request",
      "The user-agent string",
      "The server's IP"
    ]
  },
  {
    "q": "Which Flask object gives access to the incoming request's headers, data, and method?",
    "c": null,
    "o": [
      "request",
      "session",
      "g",
      "context"
    ]
  },
  {
    "q": "Where do you typically place static files (CSS, JS, images) in a Flask project?",
    "c": null,
    "o": [
      "In the 'static' folder",
      "In the 'assets' folder",
      "In the 'templates' folder",
      "In the 'config' folder"
    ]
  },
  {
    "q": "What is a benefit of using Blueprints in a Flask app?",
    "c": null,
    "o": [
      "Organizes routes into modular components",
      "Improves database speed",
      "Renders dynamic templates faster",
      "Encrypts HTTP responses"
    ]
  },
  {
    "q": "Which Flask extension is typically used for handling user authentication?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-WTF",
      "Flask-Session",
      "Flask-Mail"
    ]
  },
  {
    "q": "What file typically defines the Docker environment for a Flask app?",
    "c": null,
    "o": [
      "Dockerfile",
      "docker-compose.yml",
      "flask.env",
      "Procfile"
    ]
  },
  {
    "q": "Which command is used to run a Flask app using Gunicorn?",
    "c": null,
    "o": [
      "gunicorn app:app",
      "flask run --gunicorn",
      "python gunicorn.py",
      "gunicorn run app.py"
    ]
  },
  {
    "q": "What does the Flask `request.json` attribute return?",
    "c": null,
    "o": [
      "Parsed JSON data from the request body",
      "Form-encoded data",
      "Query parameters",
      "Raw request headers"
    ]
  },
  {
    "q": "Which of the following is a valid way to define a GET route in Flask?",
    "c": "\n@app.route('/home', methods=['GET'])\ndef home():\n    return 'Welcome!'\n",
    "o": [
      "@app.route('/home', methods=['GET'])",
      "@app.route.get('/home')",
      "@app.route('/home', method='GET')",
      "@route('/home', type='GET')"
    ]
  },
  {
    "q": "Which extension helps manage CSRF protection in Flask forms?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-CORS",
      "Flask-RESTful",
      "Flask-Session"
    ]
  },
  {
    "q": "In Flask, what does `{{ variable }}` do in a template?",
    "c": null,
    "o": [
      "Prints the value of the variable",
      "Declares a new variable",
      "Imports a Python module",
      "Registers a new route"
    ]
  },
  {
    "q": "What is the main purpose of WSGI in deploying Flask apps?",
    "c": null,
    "o": [
      "Acts as an interface between web server and Flask app",
      "Encrypts user sessions",
      "Renders HTML pages",
      "Manages Flask routes"
    ]
  },
  {
    "q": "What does the following Flask code snippet do?",
    "c": "\nfrom flask import redirect\n\n@app.route('/old')\ndef old():\n    return redirect('/new')\n",
    "o": [
      "Redirects the user from '/old' to '/new'",
      "Returns a 404 error page",
      "Renders a login form",
      "Saves form data to the database"
    ]
  },
  {
    "q": "What is typically the structure for a Flask Blueprint?",
    "c": null,
    "o": [
      "A reusable group of routes and logic",
      "An encrypted config file",
      "A Docker container",
      "A Jinja2 HTML macro"
    ]
  },
  {
    "q": "In which folder are HTML templates usually stored in a Flask project?",
    "c": null,
    "o": [
      "templates",
      "static",
      "html",
      "views"
    ]
  },
  {
    "q": "Which method is used to define API resources in Flask-RESTful?",
    "c": null,
    "o": [
      "add_resource()",
      "define_resource()",
      "create_endpoint()",
      "add_api()"
    ]
  },
  {
    "q": "What does the Flask `flash()` function do?",
    "c": null,
    "o": [
      "Sends a message to the next rendered template",
      "Logs a message to the console",
      "Triggers a browser alert",
      "Refreshes the page"
    ]
  },
  {
    "q": "Which of these is required to enable sessions in Flask?",
    "c": null,
    "o": [
      "Setting a secret key",
      "Defining routes",
      "Adding a template",
      "Creating a database"
    ]
  },
  {
    "q": "How do you access route variables in Flask?",
    "c": "\n@app.route('/user/<username>')\ndef profile(username):\n    return f\"Hello, {username}\"\n",
    "o": [
      "By including them as function arguments",
      "By using request.args",
      "By calling session.get('username')",
      "By using url_for()"
    ]
  },
  {
    "q": "Which Flask extension is commonly used for integrating databases using ORM?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-DB",
      "Flask-ORM",
      "Flask-Storage"
    ]
  },
  {
    "q": "What is the role of `@app.route()` in Flask?",
    "c": null,
    "o": [
      "Defines the URL endpoint for a view function",
      "Executes middleware logic",
      "Connects to the database",
      "Initializes a template engine"
    ]
  },
  {
    "q": "Which method is used to extract query parameters from a request URL?",
    "c": "\nfrom flask import request\nparams = request.args.get('key')\n",
    "o": [
      "request.args.get()",
      "request.form.get()",
      "request.json.get()",
      "request.url.get()"
    ]
  },
  {
    "q": "What is a use case for using Blueprints in Flask?",
    "c": null,
    "o": [
      "Modularizing large applications",
      "Compressing static files",
      "Speeding up SQL queries",
      "Securing routes with tokens"
    ]
  },
  {
    "q": "What command can be used to install Flask-WTF?",
    "c": null,
    "o": [
      "pip install flask-wtf",
      "pip install flask.wtf",
      "flask install wtf",
      "install flask-wtf"
    ]
  },
  {
    "q": "Which response status code is typically returned when a POST request is successful?",
    "c": null,
    "o": [
      "201",
      "404",
      "301",
      "403"
    ]
  },
  {
    "q": "Which decorator is used in Flask to register a function as an API endpoint using Flask-RESTful?",
    "c": null,
    "o": [
      "@api.resource",
      "@rest.endpoint",
      "@app.route",
      "@api.view"
    ]
  },
  {
    "q": "What does `request.form` provide access to in Flask?",
    "c": null,
    "o": [
      "Form field values submitted in POST request",
      "Uploaded files",
      "Cookies sent by client",
      "Header information"
    ]
  },
  {
    "q": "Which of the following is used to return JSON data from a Flask view?",
    "c": "\nfrom flask import jsonify\n\n@app.route('/api')\ndef api():\n    return jsonify({'key': 'value'})\n",
    "o": [
      "jsonify()",
      "to_json()",
      "response.json()",
      "json.dumps()"
    ]
  },
  {
    "q": "Where should the Dockerfile be placed in a Flask project?",
    "c": null,
    "o": [
      "In the root directory",
      "Inside the static folder",
      "In the templates directory",
      "Under the config folder"
    ]
  },
  {
    "q": "What does the Flask `g` object typically store?",
    "c": null,
    "o": [
      "Global variables for the request context",
      "Global configuration for all routes",
      "Global static file paths",
      "Database schema details"
    ]
  },
  {
    "q": "Which Flask extension helps in cross-origin resource sharing?",
    "c": null,
    "o": [
      "Flask-CORS",
      "Flask-WTF",
      "Flask-RESTful",
      "Flask-Session"
    ]
  },
  {
    "q": "How can you check the current HTTP method in a route function?",
    "c": "\nfrom flask import request\n\n@app.route('/', methods=['GET', 'POST'])\ndef home():\n    return request.method\n",
    "o": [
      "request.method",
      "request.get_method()",
      "method.request()",
      "request.type"
    ]
  },
  {
    "q": "Which of these is NOT a valid HTTP method in Flask routing?",
    "c": null,
    "o": [
      "FETCH",
      "GET",
      "POST",
      "PUT"
    ]
  },
  {
    "q": "Which function in Flask helps generate the URL for a given endpoint?",
    "c": null,
    "o": [
      "url_for",
      "redirect_to",
      "url_path",
      "generate_url"
    ]
  },
  {
    "q": "Which extension provides CSRF protection and form validation in Flask?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-CORS",
      "Flask-Login",
      "Flask-RESTful"
    ]
  },
  {
    "q": "In Flask, how do you access JSON data sent with a POST request?",
    "c": "\nfrom flask import request\n\ndata = request.get_json()\n",
    "o": [
      "request.get_json()",
      "request.form.json()",
      "request.json_data()",
      "request.args.get_json()"
    ]
  },
  {
    "q": "What does Flask-Login help you manage?",
    "c": null,
    "o": [
      "User authentication and sessions",
      "Database migrations",
      "Static file caching",
      "Request throttling"
    ]
  },
  {
    "q": "Which status code means 'Unauthorized' in HTTP?",
    "c": null,
    "o": [
      "401",
      "200",
      "404",
      "301"
    ]
  },
  {
    "q": "What is the main benefit of using Flask Blueprints?",
    "c": null,
    "o": [
      "Modularize large applications",
      "Create templates easily",
      "Auto-generate database models",
      "Connect to external APIs"
    ]
  },
  {
    "q": "What is the role of Gunicorn in Flask deployment?",
    "c": null,
    "o": [
      "Runs the Flask app as a WSGI server",
      "Monitors database performance",
      "Manages background tasks",
      "Provides a GUI for Flask"
    ]
  },
  {
    "q": "Which folder is used to store static files like CSS or JS in Flask?",
    "c": null,
    "o": [
      "static",
      "templates",
      "resources",
      "assets"
    ]
  },
  {
    "q": "What does the `redirect()` function in Flask do?",
    "c": null,
    "o": [
      "Redirects the client to another route or URL",
      "Returns raw JSON data",
      "Saves session data to file",
      "Deletes user cookies"
    ]
  },
  {
    "q": "Which extension is typically used to create REST APIs in Flask?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-WTF",
      "Flask-Session",
      "Flask-OpenAPI"
    ]
  },
  {
    "q": "What must be set in Flask to use sessions securely?",
    "c": null,
    "o": [
      "SECRET_KEY",
      "SESSION_KEY",
      "SECURE_SESSION",
      "ENABLE_COOKIES"
    ]
  },
  {
    "q": "Which method is used to render an HTML template in Flask?",
    "c": null,
    "o": [
      "render_template",
      "render_html",
      "show_template",
      "load_page"
    ]
  },
  {
    "q": "How do you define a route that accepts both GET and POST requests?",
    "c": "\n@app.route('/submit', methods=['GET', 'POST'])\ndef submit():\n    pass\n",
    "o": [
      "@app.route('/submit', methods=['GET', 'POST'])",
      "@app.route('/submit', type=['GET', 'POST'])",
      "@route('/submit', allow=['GET', 'POST'])",
      "@app.route.get_post('/submit')"
    ]
  },
  {
    "q": "Which function in Flask is used to send messages between views and templates?",
    "c": null,
    "o": [
      "flash()",
      "session()",
      "message()",
      "alert()"
    ]
  },
  {
    "q": "In Flask, what does `request.args` provide access to?",
    "c": null,
    "o": [
      "Query parameters from the URL",
      "Form data",
      "Uploaded files",
      "JSON body"
    ]
  },
  {
    "q": "Where are Flask HTML templates usually placed?",
    "c": null,
    "o": [
      "templates",
      "static",
      "html",
      "public"
    ]
  },
  {
    "q": "What is the purpose of Flask's `@login_required` decorator?",
    "c": null,
    "o": [
      "Restricts access to routes for authenticated users only",
      "Redirects all requests to the login page",
      "Hashes user passwords automatically",
      "Creates a login form"
    ]
  },
  {
    "q": "Which function is used to log in a user with Flask-Login?",
    "c": "\nfrom flask_login import login_user\nlogin_user(user)\n",
    "o": [
      "login_user()",
      "authenticate_user()",
      "authorize_user()",
      "user_login()"
    ]
  },
  {
    "q": "What is the default port used when running a Flask app?",
    "c": null,
    "o": [
      "5000",
      "8000",
      "8080",
      "3000"
    ]
  },
  {
    "q": "In Flask-WTF, what does `form.validate_on_submit()` check for?",
    "c": null,
    "o": [
      "Form was submitted and passed validation",
      "Only form submission",
      "Only CSRF token",
      "Only required fields are filled"
    ]
  },
  {
    "q": "Which Flask extension simplifies the creation of REST APIs?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-OpenAPI",
      "Flask-CRUD",
      "Flask-WTForms"
    ]
  },
  {
    "q": "What does `@api.resource('/items')` define in Flask-RESTful?",
    "c": null,
    "o": [
      "A REST API route",
      "A Jinja2 block",
      "A login session",
      "A form object"
    ]
  },
  {
    "q": "What does `docker build -t flask-app .` do?",
    "c": null,
    "o": [
      "Builds a Docker image with the name flask-app",
      "Starts a Flask server",
      "Deploys Flask to a cloud service",
      "Runs the Docker container"
    ]
  },
  {
    "q": "What file is typically used to list Python package dependencies for a Flask app?",
    "c": null,
    "o": [
      "requirements.txt",
      "packages.yaml",
      "config.json",
      "flask.env"
    ]
  },
  {
    "q": "Which object in Flask allows you to access cookies sent by the client?",
    "c": null,
    "o": [
      "request.cookies",
      "request.sessions",
      "request.headers",
      "request.token"
    ]
  },
  {
    "q": "Which HTTP method is generally used to update a resource in a RESTful API?",
    "c": null,
    "o": [
      "PUT",
      "GET",
      "POST",
      "DELETE"
    ]
  },
  {
    "q": "In Flask-WTF, what is the use of `csrf_token`?",
    "c": null,
    "o": [
      "Protects forms from CSRF attacks",
      "Hashes user passwords",
      "Prevents SQL injections",
      "Stores user session"
    ]
  },
  {
    "q": "What is a key requirement for using sessions in Flask?",
    "c": null,
    "o": [
      "Setting a SECRET_KEY",
      "Enabling debug mode",
      "Connecting to a database",
      "Creating a blueprint"
    ]
  },
  {
    "q": "Which directive in a Dockerfile sets the base image?",
    "c": null,
    "o": [
      "FROM",
      "RUN",
      "COPY",
      "CMD"
    ]
  },
  {
    "q": "What does `request.files` allow access to in Flask?",
    "c": null,
    "o": [
      "Uploaded files",
      "Form fields",
      "Query strings",
      "JSON body"
    ]
  },
  {
    "q": "Which object holds the data sent with `application/json` content type in Flask?",
    "c": null,
    "o": [
      "request.get_json()",
      "request.args",
      "request.form",
      "request.values"
    ]
  },
  {
    "q": "What does `request.form` contain in a Flask app?",
    "c": null,
    "o": [
      "Form data submitted via POST",
      "URL query parameters",
      "Uploaded files",
      "JSON request body"
    ]
  },
  {
    "q": "Which Flask extension is commonly used for SQL-based database integration?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-WTF",
      "Flask-Admin",
      "Flask-FormDB"
    ]
  },
  {
    "q": "Which command can run a Flask app in production using Gunicorn?",
    "c": null,
    "o": [
      "gunicorn app:app",
      "python app.py",
      "flask deploy",
      "flask run --production"
    ]
  },
  {
    "q": "What type of response is typically returned from a Flask REST API?",
    "c": null,
    "o": [
      "JSON",
      "HTML",
      "CSS",
      "XML"
    ]
  },
  {
    "q": "Which method in Flask renders templates with dynamic data?",
    "c": "\nfrom flask import render_template\nrender_template(\"home.html\", name=\"Alex\")\n",
    "o": [
      "render_template()",
      "return_template()",
      "show_template()",
      "template_view()"
    ]
  },
  {
    "q": "What does the `@app.route('/')` decorator define in Flask?",
    "c": null,
    "o": [
      "A route for the home page",
      "A login URL",
      "A REST API endpoint",
      "A POST request handler"
    ]
  },
  {
    "q": "Which Flask object lets you send data from a route to an HTML template?",
    "c": null,
    "o": [
      "render_template",
      "redirect",
      "request",
      "url_for"
    ]
  },
  {
    "q": "What is the role of `url_for()` in Flask?",
    "c": null,
    "o": [
      "Generates URLs for routes using function names",
      "Redirects the user to external websites",
      "Validates form data",
      "Creates database queries"
    ]
  },
  {
    "q": "What does the `@app.route('/hello/<name>')` route do?",
    "c": null,
    "o": [
      "Accepts a dynamic parameter called name in the URL",
      "Displays a form for user input",
      "Handles POST requests only",
      "Renders a static HTML page"
    ]
  },
  {
    "q": "Which object in Flask contains HTTP headers, cookies, and form data from the request?",
    "c": null,
    "o": [
      "request",
      "response",
      "app",
      "session"
    ]
  },
  {
    "q": "Which part of a Flask app typically contains HTML with Jinja2 syntax?",
    "c": null,
    "o": [
      "Templates",
      "Static",
      "Config",
      "Routes"
    ]
  },
  {
    "q": "Which Jinja2 syntax is used to output variables in a Flask template?",
    "c": null,
    "o": [
      "{{ variable }}",
      "{% variable %}",
      "[[ variable ]]",
      "<% variable %>"
    ]
  },
  {
    "q": "What is the purpose of `flask run`?",
    "c": null,
    "o": [
      "Starts the Flask development server",
      "Installs Flask globally",
      "Generates API docs",
      "Creates a virtual environment"
    ]
  },
  {
    "q": "What file do you edit to define environment variables for a Flask app in development?",
    "c": null,
    "o": [
      ".env",
      "app.py",
      "config.yml",
      "startup.json"
    ]
  },
  {
    "q": "Which environment variable tells Flask the app entry point?",
    "c": null,
    "o": [
      "FLASK_APP",
      "FLASK_RUN",
      "FLASK_ENV",
      "FLASK_MODE"
    ]
  },
  {
    "q": "Which extension is used for handling web forms in Flask?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Form",
      "Flask-Fields",
      "Flask-FormsKit"
    ]
  },
  {
    "q": "What does `request.args.get('name')` return in Flask?",
    "c": null,
    "o": [
      "Value of the 'name' query parameter",
      "Value of the 'name' cookie",
      "Form field value named 'name'",
      "Header value named 'name'"
    ]
  },
  {
    "q": "In a RESTful API, which HTTP method is used to create a new resource?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What is the purpose of `@app.route('/submit', methods=['POST'])`?",
    "c": null,
    "o": [
      "Defines a route that handles POST requests to /submit",
      "Creates a database table named submit",
      "Redirects to /submit page on load",
      "Registers an HTML form template"
    ]
  },
  {
    "q": "Which of these file types is typically placed in the 'static' folder of a Flask app?",
    "c": null,
    "o": [
      "CSS files",
      "Jinja2 templates",
      "Python scripts",
      "Configuration files"
    ]
  },
  {
    "q": "Which extension is used to manage user sessions and authentication in Flask?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Auth",
      "Flask-Secure",
      "Flask-SessionManager"
    ]
  },
  {
    "q": "What does `app.config['SQLALCHEMY_DATABASE_URI']` define?",
    "c": null,
    "o": [
      "Database connection URL",
      "The name of the table",
      "The primary key of the table",
      "A route for the database"
    ]
  },
  {
    "q": "What is the default method allowed by `@app.route()` if not specified?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What does `{{ name.upper() }}` do in a Jinja2 template?",
    "c": null,
    "o": [
      "Displays the variable 'name' in uppercase",
      "Defines a new variable",
      "Includes a JavaScript file",
      "Renders a list"
    ]
  },
  {
    "q": "Which keyword is used in a Flask Dockerfile to start the Flask server?",
    "c": null,
    "o": [
      "CMD",
      "FROM",
      "EXPOSE",
      "COPY"
    ]
  },
  {
    "q": "Which Jinja2 tag is used for logic like conditions or loops?",
    "c": null,
    "o": [
      "{% ... %}",
      "{{ ... }}",
      "[[ ... ]]",
      "<% ... %>"
    ]
  },
  {
    "q": "What does the `flask run` command do?",
    "c": null,
    "o": [
      "Starts the development server",
      "Creates a production server",
      "Builds a Docker container",
      "Deploys to Heroku"
    ]
  },
  {
    "q": "What is the role of the `@app.route('/api/data')` decorator?",
    "c": null,
    "o": [
      "Maps the URL path to a Python function",
      "Returns static files",
      "Connects to the database",
      "Creates a database table"
    ]
  },
  {
    "q": "Which of the following is a valid way to return a JSON response in Flask?",
    "c": "\nfrom flask import jsonify\nreturn jsonify({'status': 'ok'})\n",
    "o": [
      "jsonify({'status': 'ok'})",
      "return {'status': 'ok'}",
      "response.json({'status': 'ok'})",
      "make_json({'status': 'ok'})"
    ]
  },
  {
    "q": "What is the function of `flask shell`?",
    "c": null,
    "o": [
      "Launches an interactive Python shell with app context",
      "Starts the Flask development server",
      "Builds database migrations",
      "Reloads all templates"
    ]
  },
  {
    "q": "What is the purpose of Flask-RESTful?",
    "c": null,
    "o": [
      "To build REST APIs easily",
      "To handle form validation",
      "To manage SQL databases",
      "To deploy Flask apps"
    ]
  },
  {
    "q": "Which method is used in Flask-WTF to validate a form?",
    "c": null,
    "o": [
      "form.validate_on_submit()",
      "form.is_valid()",
      "form.submit()",
      "form.check_valid()"
    ]
  },
  {
    "q": "Where are Flask templates typically stored?",
    "c": null,
    "o": [
      "templates/ folder",
      "static/ folder",
      "config/ folder",
      "public/ folder"
    ]
  },
  {
    "q": "Which of the following can be used to define a Flask Blueprint?",
    "c": "\nfrom flask import Blueprint\nadmin = Blueprint('admin', __name__)\n",
    "o": [
      "Blueprint('admin', __name__)",
      "Flask('admin')",
      "Route('/admin')",
      "create_blueprint('admin')"
    ]
  },
  {
    "q": "Which statement imports the request object in Flask?",
    "c": null,
    "o": [
      "from flask import request",
      "import flask.request",
      "from flask.http import request",
      "import request from flask"
    ]
  },
  {
    "q": "Which of the following will create a Flask app instance?",
    "c": "\nfrom flask import Flask\napp = Flask(__name__)\n",
    "o": [
      "Flask(__name__)",
      "FlaskApp()",
      "AppFlask()",
      "CreateApp()"
    ]
  },
  {
    "q": "What is the use of `@login_required` in Flask-Login?",
    "c": null,
    "o": [
      "Restricts access to logged-in users",
      "Validates form fields",
      "Encrypts session data",
      "Starts a login server"
    ]
  },
  {
    "q": "In Flask, what does `debug=True` enable?",
    "c": null,
    "o": [
      "Auto-reload and detailed error messages",
      "Faster performance in production",
      "Database synchronization",
      "Static file compression"
    ]
  },
  {
    "q": "Which of the following is the correct way to handle JSON input in a Flask route?",
    "c": "\nfrom flask import request\ndata = request.get_json()\n",
    "o": [
      "request.get_json()",
      "request.form.json()",
      "request.json()",
      "request.data()"
    ]
  },
  {
    "q": "What does the `{{ url_for('home') }}` function do in a Jinja2 template?",
    "c": null,
    "o": [
      "Generates the URL for the 'home' route",
      "Redirects to the home page",
      "Renders the home template",
      "Returns the function object"
    ]
  },
  {
    "q": "Which file is typically used to install Flask dependencies?",
    "c": null,
    "o": [
      "requirements.txt",
      "setup.cfg",
      "package.json",
      "flask.env"
    ]
  },
  {
    "q": "Which directory is used in Flask for storing static assets like CSS and JS?",
    "c": null,
    "o": [
      "static",
      "templates",
      "assets",
      "media"
    ]
  },
  {
    "q": "What happens if you access a Flask route with an unsupported method?",
    "c": null,
    "o": [
      "You get a 405 Method Not Allowed error",
      "You get redirected to home",
      "The request is ignored silently",
      "The server crashes"
    ]
  },
  {
    "q": "How do you pass variables to a Jinja2 template in Flask?",
    "c": "\nreturn render_template('page.html', username='Alex')\n",
    "o": [
      "By passing keyword arguments to render_template()",
      "By assigning global variables",
      "Using query strings only",
      "Via request context only"
    ]
  },
  {
    "q": "What does WSGI stand for in the context of Flask deployment?",
    "c": null,
    "o": [
      "Web Server Gateway Interface",
      "Web Socket Gateway Integration",
      "Web Service Gateway Interpreter",
      "Web Secure Gateway Identifier"
    ]
  },
  {
    "q": "Which HTTP method is typically used to fetch data from the server?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What will `request.form['email']` access in a Flask route?",
    "c": null,
    "o": [
      "The value of the 'email' field submitted via POST",
      "A query parameter named 'email'",
      "The email header",
      "A cookie named 'email'"
    ]
  },
  {
    "q": "In Flask, what is the correct way to redirect a user to a different route?",
    "c": "\nfrom flask import redirect, url_for\nreturn redirect(url_for('home'))\n",
    "o": [
      "redirect(url_for('home'))",
      "redirect('/home')",
      "return 'home'",
      "forward('home')"
    ]
  },
  {
    "q": "Which Flask extension is primarily used for database ORM?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-WTF",
      "Flask-RESTful",
      "Flask-Migrate"
    ]
  },
  {
    "q": "Which of the following is a valid Flask route decorator?",
    "c": null,
    "o": [
      "@app.route('/about')",
      "@route.app('/about')",
      "@flask.route('/about')",
      "@app.view('/about')"
    ]
  },
  {
    "q": "In a Jinja2 template, what does `{{ title }}` do?",
    "c": null,
    "o": [
      "Prints the value of the 'title' variable",
      "Defines a new variable 'title'",
      "Includes a CSS file",
      "Starts a new HTML block"
    ]
  },
  {
    "q": "Which HTTP method is usually used for submitting form data to the server?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PATCH",
      "OPTIONS"
    ]
  },
  {
    "q": "What is returned by `jsonify()` in Flask?",
    "c": null,
    "o": [
      "A JSON response",
      "A rendered HTML template",
      "An HTML form",
      "A database object"
    ]
  },
  {
    "q": "What does `url_for('dashboard', user_id=1)` return?",
    "c": null,
    "o": [
      "A URL to the 'dashboard' route with user_id=1",
      "A JSON response",
      "An HTTP method",
      "An SQL query"
    ]
  },
  {
    "q": "Which of the following command runs a Flask app using Gunicorn?",
    "c": null,
    "o": [
      "gunicorn app:app",
      "python app.py",
      "flask dev-run",
      "flask host"
    ]
  },
  {
    "q": "Which one of these is a common use for Blueprints in Flask?",
    "c": null,
    "o": [
      "To structure large applications",
      "To define database models",
      "To serve static files",
      "To handle form validation"
    ]
  },
  {
    "q": "Where should you store reusable template components in Flask?",
    "c": null,
    "o": [
      "templates/includes/",
      "static/components/",
      "public/partials/",
      "assets/html/"
    ]
  },
  {
    "q": "Which function is used to render an HTML page with variables in Flask?",
    "c": null,
    "o": [
      "render_template()",
      "jsonify()",
      "send_file()",
      "make_response()"
    ]
  },
  {
    "q": "What does `request.method` return inside a route?",
    "c": null,
    "o": [
      "The HTTP method used (e.g., GET or POST)",
      "The name of the view function",
      "The client IP address",
      "The content type of the response"
    ]
  },
  {
    "q": "What is the main purpose of the 'static' folder in Flask?",
    "c": null,
    "o": [
      "To serve files like CSS, JS, and images",
      "To define Flask routes",
      "To contain database schemas",
      "To manage app configuration"
    ]
  },
  {
    "q": "What does `@app.route('/')` define in Flask?",
    "c": null,
    "o": [
      "A route for the homepage",
      "A route for all static files",
      "A wildcard route for all requests",
      "A redirect to the login page"
    ]
  },
  {
    "q": "Which method is used to retrieve query parameters in Flask?",
    "c": "\nfrom flask import request\nname = request.args.get('name')\n",
    "o": [
      "request.args.get('name')",
      "request.form.get('name')",
      "request.json('name')",
      "request.input('name')"
    ]
  },
  {
    "q": "Which HTTP status code means 'Not Found'?",
    "c": null,
    "o": [
      "404",
      "200",
      "500",
      "302"
    ]
  },
  {
    "q": "Which of the following is used to start a Flask development server?",
    "c": null,
    "o": [
      "flask run",
      "python manage.py",
      "flask dev",
      "flask start"
    ]
  },
  {
    "q": "In Jinja2 templates, what does `{% for item in items %}` indicate?",
    "c": null,
    "o": [
      "A for loop to iterate over items",
      "A function call to 'item'",
      "A block of CSS code",
      "A route handler"
    ]
  },
  {
    "q": "Which Flask extension helps in managing user sessions and logins?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-WTF",
      "Flask-Mail",
      "Flask-CORS"
    ]
  },
  {
    "q": "What does `request.json` return if the request body is valid JSON?",
    "c": null,
    "o": [
      "A dictionary of the parsed JSON data",
      "A raw JSON string",
      "A file object",
      "None always"
    ]
  },
  {
    "q": "What is the purpose of Flask-WTF?",
    "c": null,
    "o": [
      "Form validation and CSRF protection",
      "Creating REST APIs",
      "Database migrations",
      "Authentication middleware"
    ]
  },
  {
    "q": "Which parameter in `Flask(__name__)` helps Flask locate templates and static files?",
    "c": null,
    "o": [
      "__name__",
      "__main__",
      "root",
      "static"
    ]
  },
  {
    "q": "How do you include one template inside another in Jinja2?",
    "c": null,
    "o": [
      "{% include 'header.html' %}",
      "{{ include('header.html') }}",
      "{{ load('header.html') }}",
      "{% load 'header.html' %}"
    ]
  },
  {
    "q": "What is the default port Flask runs on when using `flask run`?",
    "c": null,
    "o": [
      "5000",
      "8000",
      "3000",
      "8080"
    ]
  },
  {
    "q": "Which function sends an HTML response to the client in Flask?",
    "c": null,
    "o": [
      "render_template()",
      "jsonify()",
      "make_json()",
      "return_response()"
    ]
  },
  {
    "q": "Which Flask command can be used to enable debug mode from the terminal?",
    "c": null,
    "o": [
      "FLASK_ENV=development flask run",
      "flask debug true",
      "flask --debug run",
      "debug flask app"
    ]
  },
  {
    "q": "What does the `static_url_path` parameter in Flask do?",
    "c": null,
    "o": [
      "Sets the URL prefix for static files",
      "Changes the name of the static folder",
      "Defines the static file extensions",
      "Specifies the default HTML page"
    ]
  },
  {
    "q": "Which of the following can be used to parse incoming JSON data?",
    "c": "\nfrom flask import request\ndata = request.get_json()\n",
    "o": [
      "request.get_json()",
      "request.json()",
      "request.jsonify()",
      "request.fetch_json()"
    ]
  },
  {
    "q": "Which HTTP method is commonly used to update existing resources?",
    "c": null,
    "o": [
      "PUT",
      "GET",
      "HEAD",
      "OPTIONS"
    ]
  },
  {
    "q": "What file extension is typically used for Flask templates?",
    "c": null,
    "o": [
      ".html",
      ".jinja",
      ".flask",
      ".tpl"
    ]
  },
  {
    "q": "Which of the following returns a JSON response from a Flask route?",
    "c": "\nfrom flask import jsonify\nreturn jsonify({'status': 'ok'})\n",
    "o": [
      "jsonify({'status': 'ok'})",
      "render_template({'status': 'ok'})",
      "make_response({'status': 'ok'})",
      "return 'status: ok'"
    ]
  },
  {
    "q": "Which function in Flask is used to generate URLs for routes?",
    "c": null,
    "o": [
      "url_for()",
      "route_to()",
      "get_url()",
      "link_to()"
    ]
  },
  {
    "q": "What is the default folder name for placing static files in a Flask project?",
    "c": null,
    "o": [
      "static",
      "assets",
      "public",
      "media"
    ]
  },
  {
    "q": "What does `request.form['username']` access?",
    "c": null,
    "o": [
      "Form data submitted via POST",
      "URL parameter named 'username'",
      "Header named 'username'",
      "Query string parameter"
    ]
  },
  {
    "q": "Which Flask extension provides CSRF protection for forms?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-RESTful",
      "Flask-Security",
      "Flask-SocketIO"
    ]
  },
  {
    "q": "What does `@app.route('/user/<name>')` allow in Flask?",
    "c": null,
    "o": [
      "A dynamic route that accepts a name parameter",
      "A route only for admin users",
      "A route that returns a JSON response",
      "A catch-all route for errors"
    ]
  },
  {
    "q": "Which keyword is used in Jinja2 templates to write logic like conditions and loops?",
    "c": null,
    "o": [
      "{% %}",
      "{{ }}",
      "[[ ]]",
      "$$ $$"
    ]
  },
  {
    "q": "What is Flask-RESTful primarily used for?",
    "c": null,
    "o": [
      "Creating RESTful APIs",
      "Sending emails",
      "Handling user authentication",
      "Serving static files"
    ]
  },
  {
    "q": "What should you use to pass data to a template in Flask?",
    "c": "\nrender_template('index.html', name='John')\n",
    "o": [
      "render_template('index.html', name='John')",
      "render_template('index.html').name = 'John'",
      "send_template('index.html', 'John')",
      "html_render('index.html', {'name': 'John'})"
    ]
  },
  {
    "q": "Which extension helps in managing user sessions and authentication?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Mail",
      "Flask-Bcrypt",
      "Flask-Cache"
    ]
  },
  {
    "q": "Which of the following is NOT an HTTP method?",
    "c": null,
    "o": [
      "FETCH",
      "PUT",
      "POST",
      "DELETE"
    ]
  },
  {
    "q": "How can you return a 404 error in Flask manually?",
    "c": "\nfrom flask import abort\nabort(404)\n",
    "o": [
      "abort(404)",
      "raise 404",
      "return 404",
      "error(404)"
    ]
  },
  {
    "q": "What will `request.args.get('q')` return?",
    "c": null,
    "o": [
      "The value of the query parameter 'q'",
      "The value of a form input named 'q'",
      "The current URL route",
      "The request method"
    ]
  },
  {
    "q": "Which Flask extension is commonly used for database ORM support?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-DB",
      "Flask-ORM",
      "Flask-Postgres"
    ]
  },
  {
    "q": "What is the purpose of the `render_template()` function in Flask?",
    "c": null,
    "o": [
      "To render HTML templates using Jinja2",
      "To render JSON responses",
      "To log data to console",
      "To handle form submissions"
    ]
  },
  {
    "q": "Which of the following is a correct route definition that handles both GET and POST?",
    "c": "\n@app.route('/submit', methods=['GET', 'POST'])\ndef submit():\n    pass\n",
    "o": [
      "@app.route('/submit', methods=['GET', 'POST'])",
      "@app.route('/submit', type=['GET', 'POST'])",
      "@route('/submit', methods=['GET'])",
      "@app.route('/submit')"
    ]
  },
  {
    "q": "What is the function of `request.method` in Flask?",
    "c": null,
    "o": [
      "To get the HTTP method used in the request",
      "To route the request to a template",
      "To encrypt request data",
      "To store client cookies"
    ]
  },
  {
    "q": "Which command installs Flask via pip?",
    "c": null,
    "o": [
      "pip install Flask",
      "flask install",
      "pip get flask",
      "python install flask"
    ]
  },
  {
    "q": "What is the purpose of the `@app.route()` decorator in Flask?",
    "c": null,
    "o": [
      "To map a URL path to a function",
      "To declare a static file",
      "To initialize the database",
      "To register an extension"
    ]
  },
  {
    "q": "In Flask, where do you place CSS and JS files?",
    "c": null,
    "o": [
      "static folder",
      "templates folder",
      "views folder",
      "public_html folder"
    ]
  },
  {
    "q": "Which Flask method is used to redirect to a different URL?",
    "c": "\nfrom flask import redirect\nreturn redirect('/login')\n",
    "o": [
      "redirect()",
      "forward()",
      "route()",
      "transfer()"
    ]
  },
  {
    "q": "Which method is used to access cookies in a Flask request?",
    "c": "\nfrom flask import request\nrequest.cookies.get('token')\n",
    "o": [
      "request.cookies.get('token')",
      "request.get_cookie('token')",
      "request.headers('token')",
      "request.params['token']"
    ]
  },
  {
    "q": "Which keyword is used in Jinja2 to extend a base HTML layout?",
    "c": null,
    "o": [
      "{% extends 'layout.html' %}",
      "{% import 'layout.html' %}",
      "{% use 'layout.html' %}",
      "{% base 'layout.html' %}"
    ]
  },
  {
    "q": "What does the `debug=True` parameter do in `app.run()`?",
    "c": null,
    "o": [
      "Enables automatic reloading and better error messages",
      "Deploys the app to production",
      "Disables logging",
      "Turns off route checking"
    ]
  },
  {
    "q": "Which of these is used to group related routes in Flask?",
    "c": null,
    "o": [
      "Blueprints",
      "Controllers",
      "Middlewares",
      "Templates"
    ]
  },
  {
    "q": "How can you access JSON data sent in a POST request?",
    "c": "\nfrom flask import request\ndata = request.get_json()\n",
    "o": [
      "request.get_json()",
      "request.form.json()",
      "request.json_data()",
      "request.post.json()"
    ]
  },
  {
    "q": "Which deployment method allows running Flask apps with multiple worker processes?",
    "c": null,
    "o": [
      "Gunicorn",
      "WSGI only",
      "SQLite",
      "PyInstaller"
    ]
  },
  {
    "q": "Which method returns a response object with a specific status code?",
    "c": "\nfrom flask import make_response\nmake_response('Hello', 201)\n",
    "o": [
      "make_response()",
      "return_response()",
      "send()",
      "create_response()"
    ]
  },
  {
    "q": "Which of the following methods is used to handle query parameters in Flask?",
    "c": "\nfrom flask import request\nname = request.args.get('name')\n",
    "o": [
      "request.args.get('name')",
      "request.form.get('name')",
      "request.json.get('name')",
      "request.params.get('name')"
    ]
  },
  {
    "q": "Which HTTP method is typically used for submitting form data?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What does Flask use internally to render templates?",
    "c": null,
    "o": [
      "Jinja2",
      "Mako",
      "Handlebars",
      "Liquid"
    ]
  },
  {
    "q": "Which of the following is true about the `Flask(__name__)` constructor?",
    "c": null,
    "o": [
      "It creates the Flask app instance",
      "It defines a route",
      "It starts the Flask server",
      "It handles database connections"
    ]
  },
  {
    "q": "What does `@login_required` decorator do in Flask-Login?",
    "c": null,
    "o": [
      "Restricts access to authenticated users only",
      "Logs out the current user",
      "Creates a new user",
      "Redirects to the login page always"
    ]
  },
  {
    "q": "Where should you place your HTML template files in a Flask project?",
    "c": null,
    "o": [
      "templates folder",
      "static folder",
      "routes folder",
      "public folder"
    ]
  },
  {
    "q": "What is the purpose of `url_for('home')` in Flask?",
    "c": null,
    "o": [
      "Generates the URL for the 'home' function",
      "Returns the homepage content",
      "Redirects to homepage",
      "Renders 'home.html'"
    ]
  },
  {
    "q": "How do you run a Flask app from the terminal?",
    "c": null,
    "o": [
      "flask run",
      "python flask",
      "run flask",
      "flask start"
    ]
  },
  {
    "q": "What is the default port when running Flask using `flask run`?",
    "c": null,
    "o": [
      "5000",
      "8000",
      "8080",
      "3000"
    ]
  },
  {
    "q": "Which Flask extension is used for form validation and CSRF protection?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Mail",
      "Flask-Migrate",
      "Flask-Cache"
    ]
  },
  {
    "q": "How can you define a dynamic URL that accepts an integer in Flask?",
    "c": "\n@app.route('/item/<int:item_id>')\ndef get_item(item_id):\n    pass\n",
    "o": [
      "@app.route('/item/<int:item_id>')",
      "@app.route('/item/int:item_id')",
      "@route('/item/[int:item_id]')",
      "@route('/item/{item_id:int}')"
    ]
  },
  {
    "q": "Which deployment tool can be used to containerize Flask apps?",
    "c": null,
    "o": [
      "Docker",
      "Nginx",
      "UWSGI",
      "Gunicorn"
    ]
  },
  {
    "q": "What will the following code output in a Jinja2 template?\n{{ 3 + 4 }}",
    "c": "\n{{ 3 + 4 }}\n",
    "o": [
      "7",
      "3 + 4",
      "34",
      "Error"
    ]
  },
  {
    "q": "What type of data does `request.get_json()` return?",
    "c": null,
    "o": [
      "A dictionary",
      "A list",
      "A string",
      "An integer"
    ]
  },
  {
    "q": "What is the role of `app.config['SECRET_KEY']` in Flask?",
    "c": null,
    "o": [
      "To enable secure sessions and CSRF protection",
      "To encrypt the database",
      "To store the app name",
      "To control debug mode"
    ]
  },
  {
    "q": "Which of the following HTTP methods is used to request data from the server?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "Which Flask object is used to access incoming request data?",
    "c": null,
    "o": [
      "request",
      "form",
      "session",
      "input"
    ]
  },
  {
    "q": "In Flask, what does `{{ variable }}` do in a Jinja2 template?",
    "c": null,
    "o": [
      "Prints the value of the variable",
      "Comments out the variable",
      "Escapes the variable",
      "Defines a variable"
    ]
  },
  {
    "q": "Which command sets the environment variable for running a Flask app?",
    "c": null,
    "o": [
      "export FLASK_APP=app.py",
      "set_flask_app app.py",
      "flask set app.py",
      "run_flask app.py"
    ]
  },
  {
    "q": "Which file should contain the Docker instructions to deploy a Flask app?",
    "c": null,
    "o": [
      "Dockerfile",
      "docker-compose.yml",
      "app.yaml",
      "requirements.txt"
    ]
  },
  {
    "q": "Which of these is NOT a valid HTTP method supported by Flask routing?",
    "c": null,
    "o": [
      "FETCH",
      "GET",
      "POST",
      "DELETE"
    ]
  },
  {
    "q": "What does `request.form` contain?",
    "c": null,
    "o": [
      "Form data submitted via POST",
      "Query parameters from the URL",
      "Uploaded file data",
      "JSON body"
    ]
  },
  {
    "q": "What happens if you forget to include `methods=['POST']` in a route that processes a form?",
    "c": null,
    "o": [
      "The route will not accept POST requests",
      "The route will only return 404",
      "The server will crash",
      "The form will automatically switch to GET"
    ]
  },
  {
    "q": "Which Flask extension helps in securing web sessions by managing user logins?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Security",
      "Flask-WTF",
      "Flask-JWT"
    ]
  },
  {
    "q": "What does `{{ url_for('home') }}` output in a Jinja2 template?",
    "c": null,
    "o": [
      "The URL path for the 'home' route",
      "The HTML file named home.html",
      "The title of the homepage",
      "Nothing unless passed from the route"
    ]
  },
  {
    "q": "Which Flask extension is typically used to manage database migrations?",
    "c": null,
    "o": [
      "Flask-Migrate",
      "Flask-WTF",
      "Flask-DB",
      "Flask-ORM"
    ]
  },
  {
    "q": "How is a static file (e.g., CSS) accessed in a Flask template?",
    "c": "\n<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n",
    "o": [
      "{{ url_for('static', filename='style.css') }}",
      "{{ static('style.css') }}",
      "{{ get_file('style.css') }}",
      "{{ load('static/style.css') }}"
    ]
  },
  {
    "q": "What is the purpose of `if __name__ == '__main__'` in a Flask app?",
    "c": null,
    "o": [
      "To run the app only if the script is executed directly",
      "To register all routes",
      "To configure templates",
      "To load environment variables"
    ]
  },
  {
    "q": "Which Flask extension would you use to build a RESTful API?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-WTF",
      "Flask-Login",
      "Flask-Mail"
    ]
  },
  {
    "q": "What will happen if `debug=True` is set in production?",
    "c": null,
    "o": [
      "It may expose sensitive data through error pages",
      "It speeds up the app",
      "It disables logging",
      "It blocks requests from clients"
    ]
  },
  {
    "q": "Which function in Flask is used to redirect the user to a different route?",
    "c": null,
    "o": [
      "redirect()",
      "route()",
      "render_template()",
      "go_to()"
    ]
  },
  {
    "q": "In Flask, how can you define a route that handles both GET and POST methods?",
    "c": "\n@app.route('/submit', methods=['GET', 'POST'])\ndef submit():\n    pass\n",
    "o": [
      "@app.route('/submit', methods=['GET', 'POST'])",
      "@app.route('/submit', allow=['GET', 'POST'])",
      "@route('/submit')",
      "@route('/submit', mode='GET, POST')"
    ]
  },
  {
    "q": "Which extension allows you to interact with a database using ORM in Flask?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-WTF",
      "Flask-Mail",
      "Flask-RESTful"
    ]
  },
  {
    "q": "Which function is used to render HTML templates in Flask?",
    "c": null,
    "o": [
      "render_template()",
      "render_html()",
      "template()",
      "view()"
    ]
  },
  {
    "q": "What is the name of the folder where you should store static files in Flask?",
    "c": null,
    "o": [
      "static",
      "templates",
      "public",
      "assets"
    ]
  },
  {
    "q": "In a Jinja2 template, how do you write a conditional statement?",
    "c": "\n{% if user %}\n  Hello {{ user }}!\n{% else %}\n  Hello Guest!\n{% endif %}\n",
    "o": [
      "{% if user %} ... {% endif %}",
      "{% condition user %} ... {% endcondition %}",
      "{% when user %} ... {% endwhen %}",
      "{{ if user }} ... {{ endif }}"
    ]
  },
  {
    "q": "Which parameter in the Flask route decorator defines the accepted methods?",
    "c": null,
    "o": [
      "methods",
      "type",
      "accept",
      "mode"
    ]
  },
  {
    "q": "What will `request.json` return if the request does not contain JSON?",
    "c": null,
    "o": [
      "None",
      "Empty list",
      "Empty string",
      "Error"
    ]
  },
  {
    "q": "Which of these is used to start a Flask server in development mode?",
    "c": "\nexport FLASK_APP=app.py\nexport FLASK_ENV=development\nflask run\n",
    "o": [
      "export FLASK_ENV=development",
      "set mode=dev",
      "start_flask dev",
      "flask run -dev"
    ]
  },
  {
    "q": "Which of these is true about Flask Blueprints?",
    "c": null,
    "o": [
      "They help organize the app into reusable components",
      "They make the app run faster",
      "They are used only for templating",
      "They are database models"
    ]
  },
  {
    "q": "What does the `@app.route('/')` decorator do?",
    "c": null,
    "o": [
      "Registers a function to respond to the root URL",
      "Starts the server",
      "Creates a login page",
      "Runs the database"
    ]
  },
  {
    "q": "What is required in a Flask app for CSRF protection with Flask-WTF?",
    "c": null,
    "o": [
      "A secret key",
      "A database connection",
      "Session cookies disabled",
      "POST method disallowed"
    ]
  },
  {
    "q": "Which WSGI HTTP server is commonly used to deploy Flask apps in production?",
    "c": null,
    "o": [
      "Gunicorn",
      "Werkzeug",
      "Nginx",
      "Uvicorn"
    ]
  },
  {
    "q": "What is the correct way to get a form value in Flask?",
    "c": "\nname = request.form.get('name')\n",
    "o": [
      "request.form.get('name')",
      "form.name",
      "request.value('name')",
      "form['name']"
    ]
  },
  {
    "q": "Which of the following options is a valid Flask app structure?",
    "c": null,
    "o": [
      "app.py, templates/, static/",
      "index.py, html/, public/",
      "flask/, views/, styles/",
      "server.py, assets/, layouts/"
    ]
  },
  {
    "q": "What does `request.args.get('q')` retrieve in a Flask app?",
    "c": null,
    "o": [
      "A query parameter from the URL",
      "Form data from POST",
      "A cookie value",
      "A file upload"
    ]
  },
  {
    "q": "Which folder is typically used to store Jinja2 templates in a Flask project?",
    "c": null,
    "o": [
      "templates",
      "static",
      "html",
      "views"
    ]
  },
  {
    "q": "What is returned by default from a Flask route?",
    "c": null,
    "o": [
      "HTML response",
      "JSON data",
      "XML document",
      "Binary stream"
    ]
  },
  {
    "q": "Which Flask method is used to return a JSON response?",
    "c": "\nfrom flask import jsonify\nreturn jsonify({'message': 'Hello'})\n",
    "o": [
      "jsonify()",
      "render_json()",
      "to_json()",
      "json.dump()"
    ]
  },
  {
    "q": "Which object in Flask lets you manage user login state?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-WTF",
      "Flask-Mail",
      "Flask-Security"
    ]
  },
  {
    "q": "Which of the following methods is used to protect forms from CSRF in Flask-WTF?",
    "c": null,
    "o": [
      "Adding a CSRF token",
      "Disabling GET requests",
      "Using render_template()",
      "Setting debug to False"
    ]
  },
  {
    "q": "Which command initializes a new virtual environment in Python for Flask?",
    "c": null,
    "o": [
      "python -m venv venv",
      "flask new venv",
      "pip install venv",
      "virtualenv create"
    ]
  },
  {
    "q": "Which HTTP method is usually used to retrieve data from a server?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What is the function of the `url_for()` method in Flask?",
    "c": null,
    "o": [
      "Generates a URL to a Flask route",
      "Redirects a user to a URL",
      "Parses URL parameters",
      "Runs the application"
    ]
  },
  {
    "q": "In Jinja2 templates, which symbol is used for control structures like if and for?",
    "c": null,
    "o": [
      "{% %}",
      "{{ }}",
      "[[ ]]",
      "<< >>"
    ]
  },
  {
    "q": "What type of file does Docker use to define a Flask app container setup?",
    "c": null,
    "o": [
      "Dockerfile",
      "docker.yml",
      "app.docker",
      "container.json"
    ]
  },
  {
    "q": "What does `@login_required` decorator in Flask-Login do?",
    "c": null,
    "o": [
      "Prevents access to a route unless the user is authenticated",
      "Logs the user in automatically",
      "Validates form fields",
      "Encrypts user credentials"
    ]
  },
  {
    "q": "Which of the following is an example of a RESTful route?",
    "c": null,
    "o": [
      "/api/products/1",
      "/home/index.html",
      "/view?id=1",
      "/product_page"
    ]
  },
  {
    "q": "What does `app.run(debug=True)` do in Flask?",
    "c": null,
    "o": [
      "Runs the app in debug mode with auto-reload",
      "Enables HTTPS only",
      "Creates a production server",
      "Runs a REST API automatically"
    ]
  },
  {
    "q": "Which method can be used to pass data from Python to a Jinja2 template?",
    "c": "\nrender_template('index.html', user='Alex')\n",
    "o": [
      "render_template()",
      "pass_context()",
      "template_data()",
      "inject_template()"
    ]
  },
  {
    "q": "Which HTTP method is typically used to submit form data to a Flask app?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What does `request.form` in Flask access?",
    "c": null,
    "o": [
      "Data sent with a POST request",
      "Query parameters from the URL",
      "JSON body of a request",
      "Session variables"
    ]
  },
  {
    "q": "What type of response does `jsonify()` generate in Flask?",
    "c": null,
    "o": [
      "JSON response",
      "HTML response",
      "Text file",
      "Redirect"
    ]
  },
  {
    "q": "Which Flask extension helps in defining RESTful APIs easily?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-WTF",
      "Flask-Migrate",
      "Flask-Mail"
    ]
  },
  {
    "q": "Which symbol is used to insert variables in Jinja2 templates?",
    "c": "\n<h1>Hello {{ name }}!</h1>\n",
    "o": [
      "{{ }}",
      "{% %}",
      "[[ ]]",
      "<< >>"
    ]
  },
  {
    "q": "Which of these commands installs Flask using pip?",
    "c": null,
    "o": [
      "pip install flask",
      "flask install",
      "install flask",
      "python flask install"
    ]
  },
  {
    "q": "Which HTTP method is typically used to delete data via a REST API?",
    "c": null,
    "o": [
      "DELETE",
      "POST",
      "GET",
      "PATCH"
    ]
  },
  {
    "q": "What is the purpose of a Blueprint in Flask?",
    "c": null,
    "o": [
      "To organize routes and code into components",
      "To format template strings",
      "To add static files",
      "To define form validation rules"
    ]
  },
  {
    "q": "Where are uploaded files temporarily stored in a Flask request?",
    "c": null,
    "o": [
      "request.files",
      "request.uploads",
      "request.tempfiles",
      "request.body"
    ]
  },
  {
    "q": "What type of database does Flask-SQLAlchemy support?",
    "c": null,
    "o": [
      "Multiple types like SQLite, PostgreSQL, MySQL",
      "Only SQLite",
      "Only PostgreSQL",
      "Only NoSQL databases"
    ]
  },
  {
    "q": "Which of the following is used to handle login sessions in Flask?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-SQLAlchemy",
      "Flask-RESTful",
      "Flask-CORS"
    ]
  },
  {
    "q": "How do you define a Flask route that includes a dynamic part, like a username?",
    "c": "\n@app.route('/user/<username>')\ndef profile(username):\n    return f\"Hello {username}\"\n",
    "o": [
      "@app.route('/user/<username>')",
      "@app.route('/user/{username}')",
      "@app.route('/user/$username')",
      "@route('/user/<username>')"
    ]
  },
  {
    "q": "Which file format is used to write Docker configuration for Flask apps?",
    "c": null,
    "o": [
      "Dockerfile",
      "docker.yaml",
      "flask.config",
      "container.yml"
    ]
  },
  {
    "q": "What does `request.json` return in Flask?",
    "c": null,
    "o": [
      "Parsed JSON body from the request",
      "Query parameters as JSON",
      "HTML content of the page",
      "Headers of the request"
    ]
  },
  {
    "q": "Which of the following correctly sets up a basic Flask application?",
    "c": "\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return 'Hello World'\n",
    "o": [
      "app = Flask(__name__)",
      "app = Flask.new()",
      "app = flask.app()",
      "Flask = app()"
    ]
  },
  {
    "q": "What is the default port that Flask runs on?",
    "c": null,
    "o": [
      "5000",
      "8000",
      "3000",
      "8080"
    ]
  },
  {
    "q": "Which of the following methods is used to start a Flask app?",
    "c": "\nif __name__ == '__main__':\n    app.run()\n",
    "o": [
      "app.run()",
      "flask.start()",
      "start.app()",
      "run(app)"
    ]
  },
  {
    "q": "In Flask, what is the purpose of `request.method`?",
    "c": null,
    "o": [
      "To check if the request is GET or POST",
      "To redirect to another URL",
      "To start the application",
      "To parse cookies"
    ]
  },
  {
    "q": "Where are static files like CSS and JavaScript stored in a Flask project?",
    "c": null,
    "o": [
      "static",
      "templates",
      "media",
      "resources"
    ]
  },
  {
    "q": "Which Flask extension is commonly used for form handling and validation?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Mail",
      "Flask-RESTful",
      "Flask-CORS"
    ]
  },
  {
    "q": "What will the following Flask route return?",
    "c": "\n@app.route('/')\ndef index():\n    return 'Welcome!'\n",
    "o": [
      "Welcome!",
      "Index Page",
      "None",
      "Error"
    ]
  },
  {
    "q": "Which command is used to install Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "pip install flask-sqlalchemy",
      "pip install FlaskDB",
      "flask install sqlalchemy",
      "pip flask_sqlalchemy install"
    ]
  },
  {
    "q": "What does the `@app.route()` decorator in Flask define?",
    "c": null,
    "o": [
      "A URL route for the app",
      "A database model",
      "A Jinja2 block",
      "A user form"
    ]
  },
  {
    "q": "Which of these is a valid way to handle both GET and POST in a Flask route?",
    "c": "\n@app.route('/submit', methods=['GET', 'POST'])\ndef submit():\n    pass\n",
    "o": [
      "methods=['GET', 'POST']",
      "route='GET,POST'",
      "method='both'",
      "type=['get','post']"
    ]
  },
  {
    "q": "How can you redirect a user to another route in Flask?",
    "c": "\nfrom flask import redirect, url_for\nreturn redirect(url_for('home'))\n",
    "o": [
      "redirect(url_for('home'))",
      "redirect('home')",
      "goto('home')",
      "return url('home')"
    ]
  },
  {
    "q": "What is the purpose of `render_template()` in Flask?",
    "c": null,
    "o": [
      "To render an HTML file with dynamic data",
      "To handle POST requests",
      "To manage cookies",
      "To load static files"
    ]
  },
  {
    "q": "Which Flask method handles uploaded files?",
    "c": "\nfile = request.files['photo']\n",
    "o": [
      "request.files",
      "request.uploads",
      "request.forms",
      "request.content"
    ]
  },
  {
    "q": "Which extension is used in Flask for managing user authentication?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-WTF",
      "Flask-Auth",
      "Flask-Session"
    ]
  },
  {
    "q": "What is the role of the `@app.route('/path')` decorator?",
    "c": null,
    "o": [
      "It maps a URL to a view function",
      "It defines a database model",
      "It registers a new Jinja2 filter",
      "It starts the Flask server"
    ]
  },
  {
    "q": "Which WSGI server is commonly used to run Flask in production?",
    "c": null,
    "o": [
      "Gunicorn",
      "Werkzeug",
      "SQLite",
      "Nginx"
    ]
  },
  {
    "q": "Which directory is commonly used to store Jinja2 HTML templates in a Flask project?",
    "c": null,
    "o": [
      "templates",
      "static",
      "html",
      "resources"
    ]
  },
  {
    "q": "Which Flask function returns a response object from an API endpoint in JSON format?",
    "c": null,
    "o": [
      "jsonify()",
      "render_template()",
      "return_html()",
      "response()"
    ]
  },
  {
    "q": "How do you get query parameters in a Flask request?",
    "c": "\nname = request.args.get('name')\n",
    "o": [
      "request.args.get()",
      "request.query()",
      "request.query_params()",
      "request.get_query()"
    ]
  },
  {
    "q": "Which HTTP method is most commonly used to retrieve data?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "PATCH"
    ]
  },
  {
    "q": "What is the correct way to check if a form was submitted with a POST method in Flask?",
    "c": "\nif request.method == 'POST':\n    pass\n",
    "o": [
      "request.method == 'POST'",
      "request.type == 'POST'",
      "form.method == 'POST'",
      "request.POST"
    ]
  },
  {
    "q": "Which of the following is a benefit of using Flask Blueprints?",
    "c": null,
    "o": [
      "Organizing app code into reusable components",
      "Encrypting form data",
      "Creating admin dashboards",
      "Scheduling background tasks"
    ]
  },
  {
    "q": "In Flask, what is `app.config['SECRET_KEY']` used for?",
    "c": null,
    "o": [
      "Session and form security",
      "Template rendering",
      "Static file linking",
      "Database configuration"
    ]
  },
  {
    "q": "Which of the following functions is used to serve an HTML template in Flask?",
    "c": "\nreturn render_template('index.html')\n",
    "o": [
      "render_template()",
      "template_response()",
      "serve_template()",
      "html_response()"
    ]
  },
  {
    "q": "How do you register a Flask Blueprint?",
    "c": "\napp.register_blueprint(user_routes)\n",
    "o": [
      "app.register_blueprint()",
      "blueprint.add()",
      "app.add_blueprint()",
      "app.attach_route()"
    ]
  },
  {
    "q": "Which keyword is used to define a class-based API resource in Flask-RESTful?",
    "c": "\nclass HelloWorld(Resource):\n    def get(self):\n        return {'message': 'Hello'}\n",
    "o": [
      "Resource",
      "Endpoint",
      "APIClass",
      "Controller"
    ]
  },
  {
    "q": "What is the purpose of `csrf_token` in Flask-WTF forms?",
    "c": null,
    "o": [
      "To protect against Cross-Site Request Forgery attacks",
      "To encrypt passwords",
      "To create session cookies",
      "To perform data validation"
    ]
  },
  {
    "q": "Which statement correctly creates a SQLAlchemy database model?",
    "c": "\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80))\n",
    "o": [
      "class User(db.Model)",
      "class User(Flask.Model)",
      "model User(db)",
      "User extends SQLModel"
    ]
  },
  {
    "q": "Which command can be used to start a Flask application with Gunicorn?",
    "c": null,
    "o": [
      "gunicorn app:app",
      "flask gunicorn start",
      "run app with gunicorn",
      "gunicorn.run(app)"
    ]
  },
  {
    "q": "How can you allow CORS in a Flask API?",
    "c": null,
    "o": [
      "Use Flask-CORS extension",
      "Enable proxy mode",
      "Add SSL certificate",
      "Change request headers manually"
    ]
  },
  {
    "q": "Which of the following will correctly return a 404 error if a resource is not found?",
    "c": "\nfrom flask import abort\nabort(404)\n",
    "o": [
      "abort(404)",
      "raise(404)",
      "error(404)",
      "return 404"
    ]
  },
  {
    "q": "Which HTTP method is used to send data to the server, typically via a form?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "DELETE",
      "PUT"
    ]
  },
  {
    "q": "What does `{{ user.name }}` do inside a Jinja2 template?",
    "c": null,
    "o": [
      "Displays the value of the 'name' attribute of the 'user' object",
      "Creates a user object",
      "Defines a new Jinja2 block",
      "Renders raw HTML"
    ]
  },
  {
    "q": "Which folder typically stores CSS and JavaScript files in a Flask app?",
    "c": null,
    "o": [
      "static",
      "templates",
      "assets",
      "public"
    ]
  },
  {
    "q": "Which object in Flask contains the current user's session data?",
    "c": null,
    "o": [
      "session",
      "request",
      "config",
      "auth"
    ]
  },
  {
    "q": "What does `@login_required` do in a Flask app using Flask-Login?",
    "c": null,
    "o": [
      "Restricts access to authenticated users",
      "Redirects to an external login page",
      "Logs out the current user",
      "Encrypts user credentials"
    ]
  },
  {
    "q": "Which file format is used to define a Docker container configuration?",
    "c": null,
    "o": [
      "Dockerfile",
      "docker.config",
      "container.json",
      "runfile.txt"
    ]
  },
  {
    "q": "How do you create a redirect in Flask?",
    "c": "\nfrom flask import redirect, url_for\nreturn redirect(url_for('home'))\n",
    "o": [
      "redirect()",
      "send_to()",
      "route_to()",
      "transfer()"
    ]
  },
  {
    "q": "What does the `methods` argument in `@app.route()` define?",
    "c": "\n@app.route('/submit', methods=['POST'])\n",
    "o": [
      "Which HTTP methods are accepted",
      "The name of the template to render",
      "The authentication level",
      "The blueprint used"
    ]
  },
  {
    "q": "What will `request.json` return if the incoming request contains a JSON body?",
    "c": null,
    "o": [
      "A dictionary of JSON data",
      "An HTML response",
      "A list of query strings",
      "None of the above"
    ]
  },
  {
    "q": "In Flask-WTF, what is used to define a form field?",
    "c": "\nfrom wtforms import StringField\nname = StringField('Name')\n",
    "o": [
      "StringField",
      "TextField",
      "InputText",
      "FormField"
    ]
  },
  {
    "q": "Which component is used to manage user login sessions in Flask?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-WTF",
      "Flask-Mail",
      "Flask-Migrate"
    ]
  },
  {
    "q": "What does the `db.create_all()` method do in Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "Creates all tables based on models",
      "Creates a backup of the database",
      "Deletes all existing data",
      "Commits all transactions"
    ]
  },
  {
    "q": "What is the purpose of `{{ url_for('static', filename='style.css') }}` in a Jinja2 template?",
    "c": null,
    "o": [
      "Links to a static CSS file",
      "Creates a POST request",
      "Includes a Jinja2 block",
      "Fetches data from the server"
    ]
  },
  {
    "q": "What does the `@app.route('/dashboard')` decorator do?",
    "c": null,
    "o": [
      "Maps the '/dashboard' URL to a view function",
      "Defines a new HTML template",
      "Registers a new blueprint",
      "Adds an API schema"
    ]
  },
  {
    "q": "How can you access a value submitted in a form field named 'email'?",
    "c": "\nemail = request.form['email']\n",
    "o": [
      "request.form['email']",
      "request.query['email']",
      "form.email.value",
      "request.email"
    ]
  },
  {
    "q": "Which Flask extension is commonly used for working with databases using ORM?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-Login",
      "Flask-WTF",
      "Flask-Mail"
    ]
  },
  {
    "q": "Which method is used in Flask to handle file uploads?",
    "c": "\nfile = request.files['profile_picture']\n",
    "o": [
      "request.files",
      "request.uploads",
      "request.docs",
      "request.data"
    ]
  },
  {
    "q": "Which of the following is a valid way to start a Flask application?",
    "c": "\nexport FLASK_APP=app.py\nflask run\n",
    "o": [
      "flask run",
      "python flask.py",
      "start flask",
      "run flask"
    ]
  },
  {
    "q": "Which function is used to render an HTML template in Flask?",
    "c": "\nreturn render_template('home.html')\n",
    "o": [
      "render_template()",
      "render_html()",
      "html_response()",
      "load_template()"
    ]
  },
  {
    "q": "Which environment variable sets debug mode in Flask?",
    "c": null,
    "o": [
      "FLASK_DEBUG",
      "DEBUG_MODE",
      "ENABLE_DEBUG",
      "FLASK_MODE"
    ]
  },
  {
    "q": "What does `Blueprint` allow in Flask?",
    "c": null,
    "o": [
      "Modular structuring of routes and logic",
      "Database backup",
      "Template caching",
      "User authentication"
    ]
  },
  {
    "q": "How do you define a route that accepts both GET and POST methods?",
    "c": "\n@app.route('/login', methods=['GET', 'POST'])\n",
    "o": [
      "@app.route('/login', methods=['GET', 'POST'])",
      "@app.route('/login', allow='GET, POST')",
      "@route('/login', type='GET POST')",
      "@get_post('/login')"
    ]
  },
  {
    "q": "Which keyword is used in Jinja2 to begin a for-loop?",
    "c": null,
    "o": [
      "{% for %}",
      "{{ for }}",
      "[[ for ]]",
      "%%for%%"
    ]
  },
  {
    "q": "What kind of responses does `jsonify()` return in Flask?",
    "c": null,
    "o": [
      "JSON-formatted HTTP responses",
      "Rendered HTML pages",
      "Database results",
      "Plain text strings"
    ]
  },
  {
    "q": "Which of the following is NOT a valid HTTP method used in Flask routes?",
    "c": null,
    "o": [
      "CONNECT",
      "GET",
      "POST",
      "PUT"
    ]
  },
  {
    "q": "Which Flask component helps maintain user sessions across requests?",
    "c": null,
    "o": [
      "session",
      "cookie",
      "token",
      "auth"
    ]
  },
  {
    "q": "Which method in SQLAlchemy commits changes to the database?",
    "c": "\ndb.session.commit()\n",
    "o": [
      "commit()",
      "save()",
      "update()",
      "flush()"
    ]
  },
  {
    "q": "In Flask, what is the purpose of `@app.before_request`?",
    "c": null,
    "o": [
      "Executes code before handling each request",
      "Runs after the request is completed",
      "Used only for API routes",
      "Registers URL blueprints"
    ]
  },
  {
    "q": "What is the correct file extension for Jinja2 template files?",
    "c": null,
    "o": [
      ".html",
      ".j2",
      ".jinja",
      ".tmpl"
    ]
  },
  {
    "q": "What does `request.form.get('username')` return?",
    "c": null,
    "o": [
      "The value of the 'username' field submitted in a form",
      "The cookie named 'username'",
      "The environment variable 'username'",
      "The current route name"
    ]
  },
  {
    "q": "Which function is used to create a Flask application?",
    "c": "\nfrom flask import Flask\napp = Flask(__name__)\n",
    "o": [
      "Flask(__name__)",
      "FlaskApp()",
      "create_app()",
      "init_flask()"
    ]
  },
  {
    "q": "Where should HTML templates be placed in a Flask project?",
    "c": null,
    "o": [
      "templates folder",
      "static folder",
      "html folder",
      "views folder"
    ]
  },
  {
    "q": "Which of the following is used to render dynamic content in Jinja2 templates?",
    "c": null,
    "o": [
      "{{ variable }}",
      "<% variable %>",
      "[[ variable ]]",
      "{= variable =}"
    ]
  },
  {
    "q": "What does Flask's `url_for()` function do?",
    "c": null,
    "o": [
      "Generates a URL for a given view function",
      "Redirects to an external URL",
      "Saves form data",
      "Parses cookies from the request"
    ]
  },
  {
    "q": "Which Flask method is used to receive JSON data in a request?",
    "c": "\ndata = request.get_json()\n",
    "o": [
      "request.get_json()",
      "request.json_data()",
      "request.load_json()",
      "request.json()"
    ]
  },
  {
    "q": "Which of the following is a valid HTTP method used in Flask?",
    "c": null,
    "o": [
      "DELETE",
      "SEND",
      "TRANSFER",
      "MOVE"
    ]
  },
  {
    "q": "What is the function of `app.config['DEBUG'] = True` in Flask?",
    "c": null,
    "o": [
      "Enables debug mode with auto-reload and error messages",
      "Turns off all logging",
      "Runs app in production mode",
      "Starts the app silently"
    ]
  },
  {
    "q": "What is Flask-WTF mainly used for?",
    "c": null,
    "o": [
      "Form validation and rendering",
      "Connecting to databases",
      "Creating REST APIs",
      "Managing user roles"
    ]
  },
  {
    "q": "Which Flask object is used to store data across user sessions?",
    "c": "\nsession['username'] = 'admin'\n",
    "o": [
      "session",
      "request",
      "context",
      "cookie"
    ]
  },
  {
    "q": "What kind of value does `request.args.get('name')` return?",
    "c": null,
    "o": [
      "A query string value from the URL",
      "A file from form upload",
      "An environment variable",
      "The body of a POST request"
    ]
  },
  {
    "q": "Which keyword starts a conditional statement in a Jinja2 template?",
    "c": null,
    "o": [
      "{% if %}",
      "{{ if }}",
      "<% if %>",
      "[[ if ]]"
    ]
  },
  {
    "q": "Which tool is often used to containerize Flask applications?",
    "c": null,
    "o": [
      "Docker",
      "Nginx",
      "Apache",
      "Postman"
    ]
  },
  {
    "q": "What does `@login_required` do in a Flask app using Flask-Login?",
    "c": null,
    "o": [
      "Restricts route access to authenticated users",
      "Creates a login form",
      "Starts the server in secure mode",
      "Logs out the user"
    ]
  },
  {
    "q": "Which extension helps in organizing routes using classes in Flask?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-Login",
      "Flask-Mail",
      "Flask-Caching"
    ]
  },
  {
    "q": "How do you pass a variable from Flask to a Jinja2 template?",
    "c": "\nreturn render_template('profile.html', name='John')\n",
    "o": [
      "By passing it as an argument in render_template()",
      "Using Flask's session only",
      "Embedding directly in HTML",
      "Sending through app.config"
    ]
  },
  {
    "q": "Which keyword is used to import the Flask class?",
    "c": "\nfrom flask import Flask\n",
    "o": [
      "from flask import Flask",
      "import Flask",
      "from Flask import flask",
      "require('flask')"
    ]
  },
  {
    "q": "Which folder is typically used for static files like CSS and JS in Flask?",
    "c": null,
    "o": [
      "static",
      "templates",
      "assets",
      "public"
    ]
  },
  {
    "q": "Which method is used to redirect users to another route in Flask?",
    "c": "\nreturn redirect(url_for('home'))\n",
    "o": [
      "redirect()",
      "reroute()",
      "navigate()",
      "forward()"
    ]
  },
  {
    "q": "What is the default host when running a Flask app?",
    "c": null,
    "o": [
      "127.0.0.1",
      "localhost",
      "0.0.0.0",
      "192.168.0.1"
    ]
  },
  {
    "q": "Which of these is used to create database models in Flask?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-WTF",
      "Flask-RESTful",
      "Flask-Mail"
    ]
  },
  {
    "q": "Which of the following can be used to handle forms in Flask?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Jinja2",
      "Flask-Forms",
      "Flask-FormsLib"
    ]
  },
  {
    "q": "What is the main use of `request.method` in a Flask view?",
    "c": null,
    "o": [
      "To check if the request is GET or POST",
      "To define a new route",
      "To send data to the client",
      "To initialize the Flask app"
    ]
  },
  {
    "q": "What does the following route return?",
    "c": "\n@app.route('/')\ndef index():\n    return 'Welcome'\n",
    "o": [
      "Welcome",
      "index",
      "Flask App",
      "None"
    ]
  },
  {
    "q": "Which of the following will extract a value from form data?",
    "c": "\nusername = request.form.get('username')\n",
    "o": [
      "request.form.get('username')",
      "request.get('username')",
      "request.username",
      "form.username"
    ]
  },
  {
    "q": "Which of the following extensions is used for user authentication in Flask?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Security",
      "Flask-OAuth",
      "Flask-Access"
    ]
  },
  {
    "q": "How do you run a Flask app using Gunicorn?",
    "c": null,
    "o": [
      "gunicorn app:app",
      "flask gunicorn app.py",
      "gunicorn run app.py",
      "python gunicorn app"
    ]
  },
  {
    "q": "Which parameter is passed to Flask to help locate static files and templates?",
    "c": "\napp = Flask(__name__)\n",
    "o": [
      "__name__",
      "__file__",
      "__path__",
      "static_url"
    ]
  },
  {
    "q": "In Flask, how are query parameters accessed?",
    "c": "\nsearch = request.args.get('query')\n",
    "o": [
      "request.args.get()",
      "request.query()",
      "request.params()",
      "request.search()"
    ]
  },
  {
    "q": "Which Flask command will enable debug mode?",
    "c": "\nexport FLASK_DEBUG=1\nflask run\n",
    "o": [
      "FLASK_DEBUG=1",
      "DEBUG_MODE=true",
      "flask debug",
      "debug=True"
    ]
  },
  {
    "q": "Which Flask object is used to define a new RESTful resource in Flask-RESTful?",
    "c": null,
    "o": [
      "Resource",
      "Api",
      "Service",
      "Endpoint"
    ]
  },
  {
    "q": "Which HTTP method is typically used for submitting form data?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "Which function is used to render an HTML template in Flask?",
    "c": "\nrender_template('index.html')\n",
    "o": [
      "render_template()",
      "load_html()",
      "view_template()",
      "display_html()"
    ]
  },
  {
    "q": "Which extension helps in handling CSRF protection in Flask forms?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-CSRF",
      "Flask-Forms",
      "Flask-Token"
    ]
  },
  {
    "q": "Which command runs a Flask app from the terminal?",
    "c": null,
    "o": [
      "flask run",
      "python flask.py",
      "run flask",
      "flask start"
    ]
  },
  {
    "q": "What does `@app.route('/hello')` do in Flask?",
    "c": null,
    "o": [
      "Registers a URL route",
      "Starts a new app",
      "Loads an HTML file",
      "Connects to database"
    ]
  },
  {
    "q": "Which Flask module is used to manage user login sessions?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-SQLAlchemy",
      "Flask-Mail",
      "Flask-WTF"
    ]
  },
  {
    "q": "In Flask, what does `request.form['username']` do?",
    "c": null,
    "o": [
      "Gets value from submitted form field named 'username'",
      "Retrieves a session variable",
      "Renders a form",
      "Creates a new form field"
    ]
  },
  {
    "q": "What kind of data does `request.json` hold?",
    "c": null,
    "o": [
      "Parsed JSON payload from the request body",
      "All cookies in the request",
      "Query string parameters",
      "Form-encoded data"
    ]
  },
  {
    "q": "Which HTTP method is used to retrieve data without modifying it?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PATCH",
      "DELETE"
    ]
  },
  {
    "q": "In Jinja2, what does `{% for item in list %}` do?",
    "c": null,
    "o": [
      "Loops through a list",
      "Creates a dictionary",
      "Checks a condition",
      "Declares a variable"
    ]
  },
  {
    "q": "What is the purpose of `app.run(debug=True)`?",
    "c": null,
    "o": [
      "Runs Flask in debug mode for auto-reload and detailed errors",
      "Deploys app on a cloud server",
      "Disables routes",
      "Encrypts data transfer"
    ]
  },
  {
    "q": "Which of the following is a correct route with a dynamic parameter?",
    "c": "\n@app.route('/user/<name>')\ndef user(name):\n    return f\"Hello {name}\"\n",
    "o": [
      "/user/<name>",
      "/user/name",
      "/user/[name]",
      "/user{ name }"
    ]
  },
  {
    "q": "What does `@app.route('/api')` mean?",
    "c": null,
    "o": [
      "Defines the route '/api' for a view function",
      "Creates an API key",
      "Sends JSON data",
      "Generates an HTML file"
    ]
  },
  {
    "q": "Which of these can help deploy Flask using Docker?",
    "c": null,
    "o": [
      "Dockerfile",
      "PostgreSQL",
      "sqlite3",
      "ApacheConf"
    ]
  },
  {
    "q": "Which function is used to flash a message in Flask?",
    "c": null,
    "o": [
      "flash()",
      "message()",
      "notify()",
      "alert()"
    ]
  },
  {
    "q": "Which argument of `app.run()` specifies the port number?",
    "c": "\napp.run(port=5001)\n",
    "o": [
      "port",
      "host",
      "debug",
      "server"
    ]
  },
  {
    "q": "What is the default HTTP method if not specified in a route?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "Which object in Flask holds the incoming request data?",
    "c": null,
    "o": [
      "request",
      "session",
      "app",
      "response"
    ]
  },
  {
    "q": "Which directive in Jinja2 is used for conditional rendering?",
    "c": null,
    "o": [
      "{% if %}",
      "{{ }}",
      "{% for %}",
      "{# #}"
    ]
  },
  {
    "q": "How do you access route parameters in a Flask view?",
    "c": "\n@app.route('/user/<username>')\ndef profile(username):\n    return username\n",
    "o": [
      "By passing them as function arguments",
      "Using request.form",
      "Using session variables",
      "Using cookies"
    ]
  },
  {
    "q": "Which of the following libraries can be used to build RESTful APIs with Flask?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-Mail",
      "Flask-WTF",
      "Flask-Login"
    ]
  },
  {
    "q": "Which of the following is used to validate forms in Flask-WTF?",
    "c": null,
    "o": [
      "validators",
      "checkers",
      "guards",
      "matchers"
    ]
  },
  {
    "q": "Where are Jinja2 template files typically stored in a Flask project?",
    "c": null,
    "o": [
      "templates/",
      "static/",
      "views/",
      "html/"
    ]
  },
  {
    "q": "Which command is used to install Flask?",
    "c": null,
    "o": [
      "pip install Flask",
      "flask install",
      "python install flask",
      "install Flask"
    ]
  },
  {
    "q": "What does the following Flask code return?",
    "c": "\n@app.route('/test')\ndef test():\n    return {'result': 'ok'}\n",
    "o": [
      "A JSON response",
      "An HTML file",
      "A text response",
      "A 404 page"
    ]
  },
  {
    "q": "What will `request.args.get('q')` return if 'q' is not passed in the URL?",
    "c": null,
    "o": [
      "None",
      "False",
      "'' (empty string)",
      "Error"
    ]
  },
  {
    "q": "Which of these helps protect against CSRF attacks in Flask?",
    "c": null,
    "o": [
      "CSRF token",
      "Password hash",
      "Session ID",
      "API key"
    ]
  },
  {
    "q": "Which command creates a virtual environment for a Flask app?",
    "c": null,
    "o": [
      "python -m venv venv",
      "flask create venv",
      "venv flask",
      "python flask venv"
    ]
  },
  {
    "q": "Which statement is true about `@login_required` in Flask-Login?",
    "c": null,
    "o": [
      "It protects a view from unauthorized users",
      "It logs in the user automatically",
      "It creates a login page",
      "It hashes the password"
    ]
  },
  {
    "q": "Which tool can be used to serve a Flask app in production?",
    "c": null,
    "o": [
      "Gunicorn",
      "Flask CLI",
      "sqlite",
      "Postman"
    ]
  },
  {
    "q": "Which folder is typically used to store static files like CSS and JavaScript in a Flask project?",
    "c": null,
    "o": [
      "static/",
      "assets/",
      "templates/",
      "public/"
    ]
  },
  {
    "q": "Which method in Flask is used to redirect the user to another route?",
    "c": "\nreturn redirect(url_for('home'))\n",
    "o": [
      "redirect()",
      "reroute()",
      "forward()",
      "transfer()"
    ]
  },
  {
    "q": "How can you retrieve a value from the URL query string in Flask?",
    "c": "\nsearch_term = request.args.get('q')\n",
    "o": [
      "request.args.get()",
      "request.query()",
      "request.url.get()",
      "request.params()"
    ]
  },
  {
    "q": "Which function is used to access the current user when using Flask-Login?",
    "c": null,
    "o": [
      "current_user",
      "user_session",
      "logged_user",
      "user_info"
    ]
  },
  {
    "q": "Which object is used in Flask to store data across requests for a user?",
    "c": null,
    "o": [
      "session",
      "cache",
      "store",
      "memory"
    ]
  },
  {
    "q": "What will this route return?",
    "c": "\n@app.route('/')\ndef index():\n    return 'Welcome to Flask!'\n",
    "o": [
      "A plain text response",
      "An HTML file",
      "A JSON object",
      "A redirect"
    ]
  },
  {
    "q": "Which method is used to define a class-based resource in Flask-RESTful?",
    "c": null,
    "o": [
      "Resource",
      "ApiView",
      "ViewSet",
      "Blueprint"
    ]
  },
  {
    "q": "What is the purpose of Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "Database integration",
      "User authentication",
      "Form validation",
      "Template rendering"
    ]
  },
  {
    "q": "Which of the following is the correct way to bind multiple HTTP methods to a route?",
    "c": "\n@app.route('/submit', methods=['GET', 'POST'])\n",
    "o": [
      "methods=['GET', 'POST']",
      "type=['GET', 'POST']",
      "mode=['GET', 'POST']",
      "http=['GET', 'POST']"
    ]
  },
  {
    "q": "What does `request.method` return?",
    "c": null,
    "o": [
      "The HTTP method used in the request",
      "The route name",
      "The status code",
      "The response headers"
    ]
  },
  {
    "q": "What does the `url_for()` function do?",
    "c": "\nurl_for('profile', username='john')\n",
    "o": [
      "Generates a URL for the given endpoint",
      "Redirects to a new page",
      "Returns a template",
      "Saves data in the session"
    ]
  },
  {
    "q": "Which of the following returns an HTML response using a template?",
    "c": "\nreturn render_template('home.html', name='Alice')\n",
    "o": [
      "render_template()",
      "send_html()",
      "load_template()",
      "view_html()"
    ]
  },
  {
    "q": "What is the use of `@app.route()` decorator in Flask?",
    "c": null,
    "o": [
      "To map a URL to a Python function",
      "To define HTML templates",
      "To run the app",
      "To connect to a database"
    ]
  },
  {
    "q": "How can a Flask app be run in production using WSGI?",
    "c": null,
    "o": [
      "Using a WSGI server like Gunicorn",
      "Using flask run",
      "Using Jupyter Notebook",
      "Using sqlite directly"
    ]
  },
  {
    "q": "Which extension is used to simplify handling of web forms in Flask?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Forms",
      "Flask-Input",
      "Flask-Data"
    ]
  },
  {
    "q": "What does the `flash()` function in Flask do?",
    "c": null,
    "o": [
      "Sends a message to the next request",
      "Prints a message to the console",
      "Resets the session",
      "Reloads the page"
    ]
  },
  {
    "q": "Which HTTP method is typically used to submit form data in Flask?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "Which Flask object lets you access incoming JSON data?",
    "c": null,
    "o": [
      "request.json",
      "request.data.json",
      "request.get_json()",
      "request.body"
    ]
  },
  {
    "q": "What will this Flask route respond to?",
    "c": "\n@app.route('/about', methods=['GET'])\ndef about():\n    return 'About Page'\n",
    "o": [
      "Only GET requests to /about",
      "Only POST requests to /about",
      "All methods to /about",
      "None of the above"
    ]
  },
  {
    "q": "Which parameter in `Flask()` specifies the import name?",
    "c": "\napp = Flask(__name__)\n",
    "o": [
      "__name__",
      "app",
      "__main__",
      "flask"
    ]
  },
  {
    "q": "What is the purpose of `form.hidden_tag()` in a Flask-WTF form?",
    "c": null,
    "o": [
      "To add CSRF protection",
      "To hide the form",
      "To style the form",
      "To skip validation"
    ]
  },
  {
    "q": "How do you define a model class with Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "By subclassing `db.Model`",
      "By subclassing `FlaskModel`",
      "By using `FlaskSchema`",
      "By extending `BaseModel`"
    ]
  },
  {
    "q": "What is required in a Dockerfile to expose the Flask app port?",
    "c": null,
    "o": [
      "EXPOSE 5000",
      "PORT 5000",
      "LISTEN 5000",
      "OPEN 5000"
    ]
  },
  {
    "q": "What does `@app.route('/user/<int:id>')` mean?",
    "c": null,
    "o": [
      "It captures an integer from the URL and passes it to the function",
      "It returns the user ID as a string",
      "It redirects to /user/id",
      "It defines a static route"
    ]
  },
  {
    "q": "Which keyword is used in Jinja2 to include another HTML template?",
    "c": null,
    "o": [
      "{% include %}",
      "{% load %}",
      "{% insert %}",
      "{% import %}"
    ]
  },
  {
    "q": "What does `session['user'] = 'admin'` do in Flask?",
    "c": null,
    "o": [
      "Stores 'admin' in the session under 'user'",
      "Creates a new route",
      "Logs in the user",
      "Sets an environment variable"
    ]
  },
  {
    "q": "How is a Flask app typically run in development mode?",
    "c": "\nexport FLASK_ENV=development\nflask run\n",
    "o": [
      "Using FLASK_ENV=development",
      "Using flask debug on",
      "Using app.debug = True only",
      "Using flask dev"
    ]
  },
  {
    "q": "Which function from Flask is used to render templates with variables?",
    "c": null,
    "o": [
      "render_template()",
      "display_template()",
      "inject_html()",
      "load_view()"
    ]
  },
  {
    "q": "What will the following code return?",
    "c": "\n@app.route('/hello/<name>')\ndef greet(name):\n    return f'Hello, {name}'\n",
    "o": [
      "A personalized greeting using the URL parameter",
      "A JSON object",
      "A 404 page",
      "An error due to wrong syntax"
    ]
  },
  {
    "q": "Which Flask extension is used to manage user sessions and logins?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Auth",
      "Flask-Sessions",
      "Flask-Users"
    ]
  },
  {
    "q": "Which Flask extension provides tools for building REST APIs?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-REST",
      "Flask-API",
      "Flask-Resource"
    ]
  },
  {
    "q": "Which method is used to validate a Flask-WTF form?",
    "c": null,
    "o": [
      "form.validate_on_submit()",
      "form.submit()",
      "form.check()",
      "form.validate()"
    ]
  },
  {
    "q": "Which of these tools can be used to deploy a Flask app using WSGI?",
    "c": null,
    "o": [
      "Gunicorn",
      "Nginx",
      "Docker",
      "PostgreSQL"
    ]
  },
  {
    "q": "In Flask, how do you retrieve a query parameter named 'page'?",
    "c": null,
    "o": [
      "request.args.get('page')",
      "request.query('page')",
      "request.get('page')",
      "request.page"
    ]
  },
  {
    "q": "Which method is typically used for deleting a resource in a RESTful API?",
    "c": null,
    "o": [
      "DELETE",
      "POST",
      "GET",
      "PUT"
    ]
  },
  {
    "q": "What does the following Dockerfile instruction do?",
    "c": "EXPOSE 5000",
    "o": [
      "Informs Docker the container listens on port 5000",
      "Starts the server on port 5000",
      "Blocks port 5000",
      "Assigns a static IP to port 5000"
    ]
  },
  {
    "q": "What is a benefit of using Flask Blueprints?",
    "c": null,
    "o": [
      "Organizes code into reusable components",
      "Increases server performance",
      "Automatically generates documentation",
      "Creates database schemas"
    ]
  },
  {
    "q": "How do you redirect a user to another route in Flask?",
    "c": null,
    "o": [
      "redirect(url_for('route_name'))",
      "go_to('route_name')",
      "navigate('route_name')",
      "app.redirect('route_name')"
    ]
  },
  {
    "q": "What is required to use session variables in Flask?",
    "c": null,
    "o": [
      "A secret key must be set",
      "Flask-SQLAlchemy must be installed",
      "A form must be submitted",
      "Only for GET requests"
    ]
  },
  {
    "q": "What does `jsonify()` do in Flask?",
    "c": null,
    "o": [
      "Converts data to a JSON response",
      "Parses a JSON request body",
      "Encodes form data",
      "Converts an object to XML"
    ]
  },
  {
    "q": "What is the default HTTP method supported by Flask routes?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "Which Flask extension helps with user authentication?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-WTF",
      "Flask-API",
      "Flask-JWT"
    ]
  },
  {
    "q": "How can you apply CSRF protection in Flask forms?",
    "c": null,
    "o": [
      "Using Flask-WTF with a secret key",
      "Using Flask-Login",
      "By encrypting session cookies manually",
      "Adding an HTML meta tag"
    ]
  },
  {
    "q": "Which keyword in Jinja2 is used to loop through a list?",
    "c": null,
    "o": [
      "{% for %}",
      "{% loop %}",
      "{% each %}",
      "{% iterate %}"
    ]
  },
  {
    "q": "What does `url_for('home')` return?",
    "c": null,
    "o": [
      "The URL path for the route named 'home'",
      "The IP address of the server",
      "The name of the homepage function",
      "The rendered HTML content"
    ]
  },
  {
    "q": "Which HTTP method is commonly used to submit form data?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "Which Flask object allows you to handle file uploads?",
    "c": null,
    "o": [
      "request.files",
      "request.uploads",
      "request.form",
      "request.docs"
    ]
  },
  {
    "q": "What is the main purpose of Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "To interact with databases using ORM",
      "To send email notifications",
      "To create REST APIs",
      "To manage server sessions"
    ]
  },
  {
    "q": "Which Jinja2 syntax is used for printing variables in HTML templates?",
    "c": null,
    "o": [
      "{{ variable }}",
      "{% variable %}",
      "[[ variable ]]",
      "( variable )"
    ]
  },
  {
    "q": "How do you start a basic Flask app named `app`?",
    "c": null,
    "o": [
      "app.run()",
      "run(app)",
      "app.execute()",
      "flask(app)"
    ]
  },
  {
    "q": "What does `request.json` return in Flask?",
    "c": null,
    "o": [
      "Parsed JSON body from a request",
      "HTML content",
      "Query parameters",
      "File uploads"
    ]
  },
  {
    "q": "Which decorator is used to define a route in Flask?",
    "c": null,
    "o": [
      "@app.route",
      "@flask.route",
      "@route",
      "@app.url"
    ]
  },
  {
    "q": "What is the purpose of Flask-WTF?",
    "c": null,
    "o": [
      "To simplify form creation and validation",
      "To create APIs",
      "To manage user sessions",
      "To run background tasks"
    ]
  },
  {
    "q": "Which Flask extension helps with managing user sessions and login state?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Form",
      "Flask-Session",
      "Flask-Auth"
    ]
  },
  {
    "q": "Which command can be used to run a Flask app using Gunicorn?",
    "c": null,
    "o": [
      "gunicorn app:app",
      "flask start gunicorn",
      "run gunicorn app",
      "python gunicorn app"
    ]
  },
  {
    "q": "What does `@app.route('/hello', methods=['POST'])` mean?",
    "c": null,
    "o": [
      "The route accepts only POST requests",
      "The route accepts only GET requests",
      "It accepts all HTTP methods",
      "It will redirect to another page"
    ]
  },
  {
    "q": "What should be included in a Flask app for sessions to work?",
    "c": null,
    "o": [
      "A secret key",
      "A database",
      "Flask-WTF",
      "Gunicorn"
    ]
  },
  {
    "q": "What does `url_for('login')` do in Flask?",
    "c": null,
    "o": [
      "Generates the URL for the 'login' route",
      "Returns the HTML for login page",
      "Redirects to the login view",
      "Returns the function name"
    ]
  },
  {
    "q": "Which command sets the environment variable for Flask app before running?",
    "c": null,
    "o": [
      "export FLASK_APP=app.py",
      "set flask_app app.py",
      "run flask app.py",
      "python flask app"
    ]
  },
  {
    "q": "Which data format is returned when using `jsonify({'msg': 'hello'})`?",
    "c": null,
    "o": [
      "JSON",
      "Plain text",
      "HTML",
      "XML"
    ]
  },
  {
    "q": "Which file is commonly used to define environment variables for Dockerized Flask apps?",
    "c": null,
    "o": [
      ".env",
      "settings.py",
      "config.txt",
      "flask.cfg"
    ]
  },
  {
    "q": "What is the default port used by Flask when running with `app.run()`?",
    "c": null,
    "o": [
      "5000",
      "8080",
      "8000",
      "3000"
    ]
  },
  {
    "q": "Which Flask extension is typically used to work with web forms and CSRF protection?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Form",
      "Flask-Input",
      "Flask-Guard"
    ]
  },
  {
    "q": "What does the `methods` parameter in `@app.route` define?",
    "c": null,
    "o": [
      "Allowed HTTP methods for the route",
      "The function name",
      "The template used",
      "The session timeout"
    ]
  },
  {
    "q": "What is the purpose of `render_template()` in Flask?",
    "c": null,
    "o": [
      "To render an HTML template",
      "To send a file",
      "To create a JSON response",
      "To serve static content"
    ]
  },
  {
    "q": "What is the purpose of `@app.before_request` in Flask?",
    "c": null,
    "o": [
      "To run code before each request",
      "To start the Flask server",
      "To handle exceptions",
      "To define database models"
    ]
  },
  {
    "q": "What does `request.form['name']` return?",
    "c": null,
    "o": [
      "The value of the form field with name 'name'",
      "The query string",
      "The entire HTML form",
      "The user session data"
    ]
  },
  {
    "q": "In Flask-Login, what does `login_user(user)` do?",
    "c": null,
    "o": [
      "Logs in a user",
      "Registers a user",
      "Checks user password",
      "Logs out a user"
    ]
  },
  {
    "q": "What is the correct way to define a RESTful resource in Flask-RESTful?",
    "c": null,
    "o": [
      "Create a class that inherits from Resource",
      "Use a function with @api.resource",
      "Call restful() in a route",
      "Inherit from API"
    ]
  },
  {
    "q": "Which command helps run a Docker container in the background?",
    "c": null,
    "o": [
      "docker run -d",
      "docker up -bg",
      "docker start --background",
      "docker flask run"
    ]
  },
  {
    "q": "Where should Flask static files like CSS and JS be stored?",
    "c": null,
    "o": [
      "static/",
      "templates/",
      "assets/",
      "media/"
    ]
  },
  {
    "q": "What is the purpose of the `@app.errorhandler(404)` decorator?",
    "c": null,
    "o": [
      "To handle 404 errors with a custom view",
      "To raise 404 errors",
      "To restart the server on error",
      "To hide errors from logs"
    ]
  },
  {
    "q": "Which function is used to create a JSON response in Flask?",
    "c": null,
    "o": [
      "jsonify()",
      "json()",
      "to_json()",
      "make_json()"
    ]
  },
  {
    "q": "What type of web architecture is commonly built using Flask and REST APIs?",
    "c": null,
    "o": [
      "Single Page Application (SPA)",
      "Desktop App",
      "Monolithic Web App",
      "Static Website"
    ]
  },
  {
    "q": "Which header is automatically set by Flask when using `jsonify()`?",
    "c": null,
    "o": [
      "Content-Type: application/json",
      "Content-Type: text/html",
      "Content-Type: text/plain",
      "Content-Type: application/xml"
    ]
  },
  {
    "q": "Which method is used to retrieve data from a form submitted via POST in Flask?",
    "c": null,
    "o": [
      "request.form.get()",
      "request.args.get()",
      "request.json()",
      "request.input.get()"
    ]
  },
  {
    "q": "What is the purpose of the `redirect()` function in Flask?",
    "c": null,
    "o": [
      "To redirect the client to a different URL",
      "To render a new HTML template",
      "To refresh the current page",
      "To restart the Flask app"
    ]
  },
  {
    "q": "Which function is used to send files in Flask?",
    "c": null,
    "o": [
      "send_file()",
      "render_template()",
      "jsonify()",
      "deliver_file()"
    ]
  },
  {
    "q": "Which keyword is used in Jinja2 to loop over items?",
    "c": null,
    "o": [
      "{% for %}",
      "{% loop %}",
      "{{ for }}",
      "{{ loop }}"
    ]
  },
  {
    "q": "Which of the following tools is commonly used to run Flask in a production WSGI server?",
    "c": null,
    "o": [
      "Gunicorn",
      "Werkzeug",
      "Postman",
      "SQLite"
    ]
  },
  {
    "q": "What is the purpose of the `session` object in Flask?",
    "c": null,
    "o": [
      "To store data across requests for a user",
      "To access HTTP headers",
      "To manage database sessions",
      "To create RESTful endpoints"
    ]
  },
  {
    "q": "Which Flask extension provides integration with SQLAlchemy?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-ORM",
      "Flask-DB",
      "Flask-Model"
    ]
  },
  {
    "q": "What does this Jinja2 template code do?",
    "c": "{% if user.is_authenticated %}Hello, {{ user.name }}{% endif %}",
    "o": [
      "Displays a greeting only if the user is logged in",
      "Always displays 'Hello, user.name'",
      "Displays a form for login",
      "Raises an error if user is None"
    ]
  },
  {
    "q": "Which method is used to return custom status codes in a Flask response?",
    "c": "return 'Success', 201",
    "o": [
      "Include the status code as the second return value",
      "Use jsonify() only",
      "Set it in app.config",
      "Use request.status_code = 201"
    ]
  },
  {
    "q": "What is `url_for()` used for in Flask?",
    "c": null,
    "o": [
      "To generate a URL to a view function",
      "To define a URL route",
      "To redirect to another URL",
      "To parse incoming request URLs"
    ]
  },
  {
    "q": "How does Flask identify a logged-in user using Flask-Login?",
    "c": null,
    "o": [
      "Using session cookies",
      "By checking a token in URL",
      "Using basic auth headers",
      "By IP address"
    ]
  },
  {
    "q": "Which of the following returns JSON from a Flask route?",
    "c": "return jsonify({'status': 'ok'})",
    "o": [
      "jsonify()",
      "json.dumps()",
      "render_template()",
      "make_response()"
    ]
  },
  {
    "q": "Which method retrieves data passed as query parameters in a Flask request?",
    "c": null,
    "o": [
      "request.args.get()",
      "request.form.get()",
      "request.json.get()",
      "request.query.get()"
    ]
  },
  {
    "q": "Which Python statement is used to import the main Flask class?",
    "c": null,
    "o": [
      "from flask import Flask",
      "import flask.core",
      "include flask",
      "import FlaskFramework"
    ]
  },
  {
    "q": "What is the correct way to define multiple methods in a Flask route?",
    "c": "@app.route('/submit', methods=['GET', 'POST'])",
    "o": [
      "Use the `methods` parameter with a list",
      "Separate each method with `or`",
      "Create two separate route functions",
      "Call methods.join()"
    ]
  },
  {
    "q": "Which Flask extension helps with form validation and CSRF protection?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Forms",
      "Flask-Security",
      "Flask-Guard"
    ]
  },
  {
    "q": "What does the `@login_required` decorator do in Flask-Login?",
    "c": null,
    "o": [
      "It restricts access to the route for only logged-in users",
      "It logs in the user automatically",
      "It creates a login form",
      "It checks password strength"
    ]
  },
  {
    "q": "Which file is typically used to define Docker configuration for Flask deployment?",
    "c": null,
    "o": [
      "Dockerfile",
      "docker-compose.yml",
      "flask_config.py",
      "requirements.txt"
    ]
  },
  {
    "q": "How can you access JSON data sent in a POST request in Flask?",
    "c": null,
    "o": [
      "request.get_json()",
      "request.form.json()",
      "request.json.get()",
      "request.data.json()"
    ]
  },
  {
    "q": "Which Jinja2 syntax is used to include another template?",
    "c": null,
    "o": [
      "{% include 'header.html' %}",
      "{% load 'header.html' %}",
      "{{ include('header.html') }}",
      "{{ import 'header.html' }}"
    ]
  },
  {
    "q": "Which command is used to install Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "pip install flask-sqlalchemy",
      "pip install FlaskSQL",
      "pip install sqlalchemy-flask",
      "pip install flask-db"
    ]
  },
  {
    "q": "What is returned by `url_for('home')` in Flask?",
    "c": null,
    "o": [
      "The URL path for the route named 'home'",
      "A full HTML page",
      "The current request object",
      "The HTML template for 'home'"
    ]
  },
  {
    "q": "Which configuration is commonly set for CSRF protection in Flask-WTF?",
    "c": null,
    "o": [
      "SECRET_KEY",
      "CSRF_ENABLE",
      "WTF_ENABLE",
      "WTF_KEY"
    ]
  },
  {
    "q": "What does Flask use to maintain user session data across requests?",
    "c": null,
    "o": [
      "Signed cookies",
      "HTTP headers",
      "Local storage",
      "Environment variables"
    ]
  },
  {
    "q": "In Flask-RESTful, which class is used to define a REST resource?",
    "c": null,
    "o": [
      "Resource",
      "View",
      "APIView",
      "Controller"
    ]
  },
  {
    "q": "Which Flask method is used to return plain text or HTML in a response?",
    "c": null,
    "o": [
      "return 'Hello World'",
      "render_template()",
      "jsonify()",
      "redirect()"
    ]
  },
  {
    "q": "Which of these is a valid way to initialize the Flask app?",
    "c": "app = Flask(__name__)",
    "o": [
      "app = Flask(__name__)",
      "app = Flask.new()",
      "app = NewFlask()",
      "app = flask()"
    ]
  },
  {
    "q": "In Flask, where should static files like CSS and JS be placed by default?",
    "c": null,
    "o": [
      "static/",
      "templates/",
      "assets/",
      "public/"
    ]
  },
  {
    "q": "Which Flask command can be used to start the development server?",
    "c": null,
    "o": [
      "flask run",
      "python flask start",
      "start flask",
      "flask-server"
    ]
  },
  {
    "q": "Which keyword is used in Jinja2 to display a variable?",
    "c": null,
    "o": [
      "{{ variable }}",
      "[[ variable ]]",
      "## variable ##",
      "<% variable %>"
    ]
  },
  {
    "q": "Which command is used to install Flask-Login?",
    "c": null,
    "o": [
      "pip install flask-login",
      "pip install flaskauth",
      "pip install login",
      "pip install flask-auth"
    ]
  },
  {
    "q": "Which HTTP method is commonly used to submit form data securely?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What does the Flask `redirect()` function do?",
    "c": null,
    "o": [
      "Sends the user to a different URL",
      "Loads a template file",
      "Displays a 404 error",
      "Closes the current session"
    ]
  },
  {
    "q": "In Flask, which function helps retrieve values from the URL query string?",
    "c": null,
    "o": [
      "request.args.get()",
      "request.form.get()",
      "request.get_json()",
      "request.query.get()"
    ]
  },
  {
    "q": "Which tool is used to run Flask apps in production environments?",
    "c": null,
    "o": [
      "Gunicorn",
      "Werkzeug",
      "Uvicorn",
      "Flask-Dev"
    ]
  },
  {
    "q": "Which Flask method helps return JSON data from a view?",
    "c": null,
    "o": [
      "jsonify()",
      "render_template()",
      "json.dump()",
      "response.json()"
    ]
  },
  {
    "q": "In Flask, what is the purpose of a Blueprint?",
    "c": null,
    "o": [
      "To organize the application into components or modules",
      "To connect to a database",
      "To compile SCSS files",
      "To deploy the app"
    ]
  },
  {
    "q": "Which decorator is used to define a route in a Flask Blueprint?",
    "c": null,
    "o": [
      "@blueprint.route()",
      "@app.url()",
      "@route.app()",
      "@flask.route()"
    ]
  },
  {
    "q": "Which variable holds the path of the currently executing script in Flask?",
    "c": null,
    "o": [
      "__name__",
      "__main__",
      "app.root",
      "self"
    ]
  },
  {
    "q": "In Flask-WTF, what does `csrf_token` help prevent?",
    "c": null,
    "o": [
      "Cross-Site Request Forgery (CSRF)",
      "SQL Injection",
      "XSS attacks",
      "Session hijacking"
    ]
  },
  {
    "q": "Which Flask component is used to define the response returned to the browser?",
    "c": null,
    "o": [
      "View function",
      "Blueprint",
      "Jinja template",
      "Session object"
    ]
  },
  {
    "q": "How do you access the current user in Flask-Login?",
    "c": null,
    "o": [
      "current_user",
      "session.user",
      "request.user",
      "get_user()"
    ]
  },
  {
    "q": "Which extension is used to simplify building REST APIs in Flask?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-API",
      "Flask-Endpoint",
      "Flask-Resource"
    ]
  },
  {
    "q": "Where are form POST values stored in Flask?",
    "c": null,
    "o": [
      "request.form",
      "request.args",
      "request.values",
      "request.data"
    ]
  },
  {
    "q": "What is the default HTTP method allowed in Flask routes?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "ALL"
    ]
  },
  {
    "q": "Which HTTP methods can be handled by the following Flask route?",
    "c": "@app.route('/submit', methods=['GET', 'POST'])",
    "o": [
      "GET and POST",
      "Only GET",
      "Only POST",
      "PUT and DELETE"
    ]
  },
  {
    "q": "What will the following Flask snippet render if 'name' is passed as 'Alice'?",
    "c": "{% if name %}Hello {{ name }}{% else %}Hello Stranger{% endif %}",
    "o": [
      "Hello Alice",
      "Hello {{ name }}",
      "Hello Stranger",
      "Hello"
    ]
  },
  {
    "q": "What is the correct way to access form data from a POST request in Flask?",
    "c": null,
    "o": [
      "request.form['key']",
      "request.args['key']",
      "request.data['key']",
      "request.get('key')"
    ]
  },
  {
    "q": "Which of the following statements correctly defines a RESTful resource using Flask-RESTful?",
    "c": "class HelloWorld(Resource):\n    def get(self):\n        return {'hello': 'world'}\n\napi.add_resource(HelloWorld, '/hello')",
    "o": [
      "GET request to /hello returns {'hello': 'world'}",
      "POST request to /hello returns {'hello': 'world'}",
      "GET request to / returns {'hello': 'world'}",
      "GET request to /hello/world returns {'hello': 'world'}"
    ]
  },
  {
    "q": "What is the role of Flask-WTF in a Flask application?",
    "c": null,
    "o": [
      "To simplify form validation and CSRF protection",
      "To manage user authentication",
      "To enable RESTful routing",
      "To interact with databases"
    ]
  },
  {
    "q": "Which is the correct way to run a production Flask app using Gunicorn?",
    "c": null,
    "o": [
      "gunicorn app:app",
      "python app.py",
      "flask run",
      "gunicorn run:flask"
    ]
  },
  {
    "q": "In Flask, how can you retrieve JSON data from a POST request?",
    "c": null,
    "o": [
      "request.get_json()",
      "request.form['json']",
      "json.loads(request)",
      "request.data.json()"
    ]
  },
  {
    "q": "What does the `login_required` decorator do in Flask-Login?",
    "c": null,
    "o": [
      "Restricts access to authenticated users only",
      "Enables database authentication",
      "Registers a new user",
      "Logs the user in automatically"
    ]
  },
  {
    "q": "How do you define a base template in Jinja2 for reuse in other templates?",
    "c": "{% block content %}{% endblock %}",
    "o": [
      "Using block and extends keywords",
      "Using include and load keywords",
      "Using yield and section keywords",
      "Using render_template and layout"
    ]
  },
  {
    "q": "Which of the following best describes a Flask Blueprint?",
    "c": null,
    "o": [
      "A way to organize routes and code into reusable modules",
      "A tool for database migration",
      "A middleware to handle security",
      "A debugger for Flask apps"
    ]
  },
  {
    "q": "What will be the result of accessing '/user?name=John' with the following Flask route?",
    "c": "@app.route('/user')\ndef user():\n    name = request.args.get('name')\n    return f\"Hello {name}\"",
    "o": [
      "Hello John",
      "Hello request.args['name']",
      "Hello None",
      "Internal Server Error"
    ]
  },
  {
    "q": "Which of the following is true about Flask-SQLAlchemy's `db.Model`?",
    "c": null,
    "o": [
      "It acts as a base class for defining ORM models",
      "It is used to define Flask Blueprints",
      "It handles form validation",
      "It registers views for routing"
    ]
  },
  {
    "q": "What is the purpose of `@app.before_request` in Flask?",
    "c": null,
    "o": [
      "To run logic before every request, such as authentication checks",
      "To execute code after a request has been processed",
      "To define route handlers",
      "To create background tasks"
    ]
  },
  {
    "q": "Given the following Jinja2 syntax, what is rendered?",
    "c": "{% for item in [1,2,3] %}{{ item * 2 }} {% endfor %}",
    "o": [
      "2 4 6 ",
      "1 2 3 ",
      "item * 2 item * 2 item * 2 ",
      "None"
    ]
  },
  {
    "q": "What does setting `debug=True` in `app.run()` do?",
    "c": null,
    "o": [
      "Enables auto-reloading and provides a debugger",
      "Enables HTTPS",
      "Improves performance in production",
      "Runs multiple worker threads"
    ]
  },
  {
    "q": "What is required for Flask-WTF to protect forms against CSRF?",
    "c": null,
    "o": [
      "A secret key must be set in app config",
      "Forms must be JSON-encoded",
      "Use of Flask-Login is mandatory",
      "Templates must include a token field manually"
    ]
  },
  {
    "q": "How can you serve a Flask app using Docker?",
    "c": null,
    "o": [
      "By defining a Dockerfile and exposing the correct port",
      "Using flask run directly inside Docker",
      "Installing Gunicorn inside a VM",
      "Running the app with sudo python3"
    ]
  },
  {
    "q": "Which of the following will correctly render a variable safely in a Jinja2 template?",
    "c": null,
    "o": [
      "{{ user_input }}",
      "{% user_input %}",
      "{{ safe(user_input) }}",
      "{{= user_input }}"
    ]
  },
  {
    "q": "In Flask-SQLAlchemy, what does `db.session.commit()` do?",
    "c": null,
    "o": [
      "Saves changes made to the session permanently to the database",
      "Starts a new transaction",
      "Rolls back the last change",
      "Deletes all records from the session"
    ]
  },
  {
    "q": "Which component must be implemented for a custom Flask-Login user class?",
    "c": null,
    "o": [
      "is_authenticated property",
      "validate_user() method",
      "csrf_protected attribute",
      "get_password() method"
    ]
  },
  {
    "q": "What will the following route return when accessed with a JSON payload {\"x\": 10}?",
    "c": "@app.route('/data', methods=['POST'])\ndef data():\n    content = request.get_json()\n    return str(content['x'] * 2)",
    "o": [
      "20",
      "x * 2",
      "content['x'] * 2",
      "Error 400"
    ]
  },
  {
    "q": "What is the correct way to create a one-to-many relationship using Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "Use `db.relationship()` and `db.ForeignKey()` in respective models",
      "Use `db.connect()` on both models",
      "Create two tables with the same primary key",
      "Use Flask-Migrate with db.sync()"
    ]
  },
  {
    "q": "How do you define a Blueprint for an admin panel in Flask?",
    "c": "admin = Blueprint('admin', __name__, url_prefix='/admin')",
    "o": [
      "It defines a modular admin route group with '/admin' prefix",
      "It creates a new WSGI app",
      "It replaces the app.route decorator",
      "It serves static files"
    ]
  },
  {
    "q": "What will happen if you try to access `request.form['email']` when the form field is missing?",
    "c": null,
    "o": [
      "It raises a KeyError",
      "It returns an empty string",
      "It raises a ValueError",
      "It returns None"
    ]
  },
  {
    "q": "How can you manually hash a password using Flask-Bcrypt?",
    "c": null,
    "o": [
      "bcrypt.generate_password_hash(password)",
      "bcrypt.hash(password)",
      "hashlib.bcrypt(password)",
      "generate_hash(password)"
    ]
  },
  {
    "q": "In Flask, how can you return a custom status code with your response?",
    "c": "return {'message': 'Created'}, 201",
    "o": [
      "Returns JSON response with HTTP 201 status",
      "Only returns 201 with no content",
      "Raises a 201 error",
      "Returns plain text response"
    ]
  },
  {
    "q": "What is the default file name Flask looks for to auto-load templates?",
    "c": null,
    "o": [
      "templates/index.html",
      "static/app.html",
      "views/main.html",
      "layout/base.html"
    ]
  },
  {
    "q": "How does Flask-Login know which user is currently logged in?",
    "c": null,
    "o": [
      "It uses session cookies to track the authenticated user",
      "It stores credentials in localStorage",
      "It uses a JWT passed in headers",
      "It checks environment variables"
    ]
  },
  {
    "q": "Which of the following can be used to load a user in Flask-Login?",
    "c": "@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(user_id)",
    "o": [
      "Correct way to reload the user from session data",
      "Incorrect because query.get is deprecated",
      "It logs in the user automatically",
      "It returns all users"
    ]
  },
  {
    "q": "What is the significance of `if __name__ == '__main__':` in a Flask app?",
    "c": null,
    "o": [
      "It ensures the app runs only if the script is executed directly",
      "It prevents Flask from running in debug mode",
      "It allows Flask to be imported in a Jupyter notebook",
      "It registers all routes automatically"
    ]
  },
  {
    "q": "Which parameter is used in `render_template()` to pass data to a Jinja2 template?",
    "c": null,
    "o": [
      "Keyword arguments matching the template variable names",
      "A dictionary called context",
      "request.args",
      "session variables only"
    ]
  },
  {
    "q": "What is the correct way to define a many-to-many relationship in Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "Using a secondary table with `db.Table` and `db.relationship()`",
      "Using two foreign keys in the same table",
      "Using `db.relationship(many=True)`",
      "By nesting one-to-many inside another"
    ]
  },
  {
    "q": "How do you handle file uploads in Flask?",
    "c": "file = request.files['myfile']\nfile.save('/path/to/save/' + file.filename)",
    "o": [
      "By accessing the file from `request.files` and calling `save()`",
      "By using `request.form['myfile']` and reading it",
      "By accessing `request.data['myfile']`",
      "By decoding the request stream manually"
    ]
  },
  {
    "q": "What is required to use Flask with Gunicorn behind a reverse proxy like Nginx?",
    "c": null,
    "o": [
      "Expose a WSGI app using `app:app` and set proper headers",
      "Use flask run with threaded=True",
      "Use app.run() in debug mode",
      "No special configuration is needed"
    ]
  },
  {
    "q": "How can you protect a specific view using Flask-Login?",
    "c": "@app.route('/dashboard')\n@login_required\ndef dashboard():\n    return 'Private Area'",
    "o": [
      "By decorating the view with `@login_required`",
      "By checking session manually in every route",
      "By adding CSRF protection",
      "By encrypting the view"
    ]
  },
  {
    "q": "Which extension allows for secure CSRF-protected form handling in Flask?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Form",
      "Flask-Login",
      "Flask-Session"
    ]
  },
  {
    "q": "Which command initializes the database schema using Flask-Migrate?",
    "c": null,
    "o": [
      "flask db upgrade",
      "flask db create",
      "flask db init",
      "flask sql upgrade"
    ]
  },
  {
    "q": "What happens if `SECRET_KEY` is not set in your Flask app using Flask-WTF?",
    "c": null,
    "o": [
      "CSRF protection will fail, and forms won't validate",
      "The app will switch to debug mode",
      "Flask will generate a key automatically",
      "Forms will be submitted twice"
    ]
  },
  {
    "q": "What does the `Content-Type: application/json` header do in an incoming request?",
    "c": null,
    "o": [
      "It tells Flask that the request body is JSON and can be parsed using `request.get_json()`",
      "It forces Flask to return a JSON response",
      "It sets the status code to 200",
      "It disables form submission"
    ]
  },
  {
    "q": "Which of the following Flask commands is most appropriate for testing API endpoints locally?",
    "c": null,
    "o": [
      "flask run --reload",
      "flask init --api",
      "flask api test",
      "flask debug --http"
    ]
  },
  {
    "q": "In Flask, what is the effect of setting `app.config['JSONIFY_PRETTYPRINT_REGULAR'] = False`?",
    "c": null,
    "o": [
      "Disables pretty-printing of JSON responses",
      "Minifies all HTML templates",
      "Prevents JSON encoding errors",
      "Forces Flask to return XML"
    ]
  },
  {
    "q": "What is the correct purpose of `url_for()` in Flask templates?",
    "c": null,
    "o": [
      "Generates a dynamic URL for a given endpoint name",
      "Validates a URL path before routing",
      "Resolves external URLs",
      "Returns a URL as a plain string from Jinja context"
    ]
  },
  {
    "q": "In Flask, what does the `@app.teardown_request` decorator do?",
    "c": null,
    "o": [
      "Executes code after each request, regardless of exceptions",
      "Executes only when a request fails",
      "Cleans up routing tables",
      "Flushes the session cache"
    ]
  },
  {
    "q": "What will this route return if `x=5` is passed in a query string?",
    "c": "@app.route('/square')\ndef square():\n    val = int(request.args.get('x', 0))\n    return str(val ** 2)",
    "o": [
      "25",
      "5",
      "x * x",
      "0"
    ]
  },
  {
    "q": "How can you programmatically redirect to another route in Flask?",
    "c": "return redirect(url_for('home'))",
    "o": [
      "Using redirect() with url_for() to generate the target URL",
      "Using render_template with the new route",
      "By setting response.headers['Location'] directly",
      "By calling app.route() again"
    ]
  },
  {
    "q": "Which of the following best explains why `request.get_json(force=True)` might be risky?",
    "c": null,
    "o": [
      "It bypasses `Content-Type` check and may cause crashes if data isn't valid JSON",
      "It skips form validation",
      "It encrypts the payload without a key",
      "It changes the request method to POST"
    ]
  },
  {
    "q": "In Flask-SQLAlchemy, which command creates the necessary tables in the database?",
    "c": null,
    "o": [
      "db.create_all()",
      "db.sync()",
      "db.start()",
      "flask db reset"
    ]
  },
  {
    "q": "What will this Jinja2 expression render?",
    "c": "{{ 'Hello' ~ ' World' }}",
    "o": [
      "Hello World",
      "HelloWorld",
      "~Hello World",
      "Error"
    ]
  },
  {
    "q": "What will be the output if the following Flask template is rendered with no `items` in context?",
    "c": "{% for i in items %}{{ i }}{% else %}Empty{% endfor %}",
    "o": [
      "Empty",
      "None",
      "Error",
      "{{ i }}"
    ]
  },
  {
    "q": "Which Flask feature allows for storing values across requests for a user session?",
    "c": null,
    "o": [
      "session object",
      "request.form",
      "g object",
      "app.config"
    ]
  },
  {
    "q": "Which of the following correctly registers a Flask Blueprint from a module named `blog`?",
    "c": null,
    "o": [
      "from blog import blog_bp\napp.register_blueprint(blog_bp)",
      "import blog as blueprint\napp.include(blueprint)",
      "blog_bp = Blueprint('blog')\napp.use(blog_bp)",
      "app.mount('/blog', blueprint='blog')"
    ]
  },
  {
    "q": "What is the correct way to define a custom error handler for 404 errors in Flask?",
    "c": "@app.errorhandler(404)\ndef not_found(error):\n    return 'Page Not Found', 404",
    "o": [
      "Defines a view function that is called when a 404 occurs",
      "Redirects to the home page on 404",
      "Automatically logs out the user",
      "Catches and logs 500 errors"
    ]
  },
  {
    "q": "What does `app.wsgi_app` represent in Flask?",
    "c": null,
    "o": [
      "The actual WSGI application object used by servers like Gunicorn",
      "The global app configuration context",
      "The function used to render templates",
      "A proxy object to the running thread"
    ]
  },
  {
    "q": "How does Flask determine the correct view function to call for an incoming request?",
    "c": null,
    "o": [
      "By matching the request URL and method against the registered routes",
      "By checking the template name first",
      "By parsing the response body",
      "By resolving from Blueprint context only"
    ]
  },
  {
    "q": "What is the output of this Flask-Jinja code?",
    "c": "{% set count = 3 %}{{ count * 2 }}",
    "o": [
      "6",
      "count * 2",
      "3",
      "Error"
    ]
  },
  {
    "q": "Which method should be implemented to customize serialization in Flask-RESTful?",
    "c": null,
    "o": [
      "marshal_with or custom jsonify logic",
      "render_template",
      "as_view() in Resource",
      "__str__() in the model"
    ]
  },
  {
    "q": "Why is it necessary to use `with app.app_context():` when interacting with the database outside a request?",
    "c": null,
    "o": [
      "To push the application context manually for database access",
      "To prevent CSRF attacks",
      "To run async operations",
      "To register error handlers"
    ]
  },
  {
    "q": "What does `@app.after_request` allow you to do in Flask?",
    "c": null,
    "o": [
      "Modify or log the response before it’s sent to the client",
      "Handle background tasks",
      "Set up routing",
      "Modify incoming requests"
    ]
  },
  {
    "q": "Which Flask feature allows storing temporary request-specific data accessible during a request?",
    "c": null,
    "o": [
      "flask.g",
      "session",
      "app.config",
      "url_for"
    ]
  },
  {
    "q": "How does Flask-Login persist the user’s authentication state across requests?",
    "c": null,
    "o": [
      "By storing user ID in session",
      "By using a signed cookie with credentials",
      "Via an auth token in localStorage",
      "Using OAuth callbacks"
    ]
  },
  {
    "q": "Which header must be set in a JavaScript frontend to allow sending cookies to a Flask backend with CORS?",
    "c": null,
    "o": [
      "Access-Control-Allow-Credentials: true",
      "Content-Type: application/cookie",
      "X-CSRF-Token: auto",
      "Allow-Credentials: cookies"
    ]
  },
  {
    "q": "What will happen if you call `db.session.commit()` after modifying a model without adding it to the session?",
    "c": null,
    "o": [
      "Changes will not persist unless `db.session.add(model)` was called first",
      "The model will be auto-committed",
      "An error will be raised",
      "All models will be flushed"
    ]
  },
  {
    "q": "How does `@app.before_first_request` behave in Flask?",
    "c": null,
    "o": [
      "It runs only once before the first request is handled",
      "It runs before every request",
      "It executes before app initialization",
      "It prevents the first request from executing"
    ]
  },
  {
    "q": "Which Flask extension can be used to auto-generate RESTful endpoints from a SQLAlchemy model?",
    "c": null,
    "o": [
      "Flask-Restless",
      "Flask-Session",
      "Flask-SocketIO",
      "Flask-CORS"
    ]
  },
  {
    "q": "How can you define a dynamic path in a Flask route that accepts integers?",
    "c": "@app.route('/item/<int:item_id>')\ndef get_item(item_id):\n    return str(item_id * 10)",
    "o": [
      "Defines a route accepting integer item_id and returns item_id * 10",
      "This throws a type error unless cast explicitly",
      "It matches only string values",
      "It allows both strings and integers by default"
    ]
  },
  {
    "q": "What is the most secure way to store configuration secrets in a Flask production app?",
    "c": null,
    "o": [
      "Using environment variables and loading with `os.environ`",
      "Hardcoding values in `app.config`",
      "Keeping secrets in templates",
      "Passing them as query parameters"
    ]
  },
  {
    "q": "Which WSGI server is known for async worker support and is often used with Flask in production?",
    "c": null,
    "o": [
      "Gunicorn with gevent or uvicorn workers",
      "Flask’s built-in dev server",
      "Werkzeug in threaded mode",
      "Apache using mod_wsgi"
    ]
  },
  {
    "q": "What would be the result of accessing a Flask route defined as `/user/<username>` with `/user/admin`?",
    "c": "@app.route('/user/<username>')\ndef profile(username):\n    return f\"User: {username}\"",
    "o": [
      "User: admin",
      "username",
      "<username>",
      "404 Not Found"
    ]
  },
  {
    "q": "Which function in Flask is used to register CLI commands programmatically?",
    "c": null,
    "o": [
      "app.cli.command()",
      "flask.register_cli()",
      "flask.run()",
      "app.cli.add_subcommand()"
    ]
  },
  {
    "q": "What does the `static_url_path` parameter in `Flask(__name__, static_url_path='/assets')` do?",
    "c": null,
    "o": [
      "Changes the URL prefix for accessing static files",
      "Changes the file system location of static files",
      "Prevents static file serving",
      "Caches all templates under /assets"
    ]
  },
  {
    "q": "What will the following code return if accessed at `/api` with a `Content-Type` of `text/plain`?",
    "c": "@app.route('/api', methods=['POST'])\ndef api():\n    data = request.get_json()\n    return {'value': data}",
    "o": [
      "None as `request.get_json()` returns None for non-JSON Content-Type",
      "It raises a 500 error",
      "It parses the data anyway",
      "It always returns an empty dict"
    ]
  },
  {
    "q": "What is a recommended way to structure a large Flask application?",
    "c": null,
    "o": [
      "Using an application factory pattern with Blueprints",
      "Defining all routes in a single file",
      "Combining templates and views in one folder",
      "Disabling context separation for performance"
    ]
  },
  {
    "q": "What will `request.is_json` return if `Content-Type` is not `application/json`?",
    "c": null,
    "o": [
      "False",
      "True",
      "None",
      "It raises a warning"
    ]
  },
  {
    "q": "What will happen if you forget to set a `SECRET_KEY` while using sessions in Flask?",
    "c": null,
    "o": [
      "Flask will raise a runtime error when using sessions",
      "Session data will be saved in plaintext",
      "CSRF protection still works but sessions don’t",
      "It silently generates a temporary one"
    ]
  },
  {
    "q": "What is the purpose of the `@wraps` decorator from `functools` when writing a custom Flask decorator?",
    "c": null,
    "o": [
      "Preserves the original function’s metadata",
      "Improves decorator performance",
      "Registers the view function in app.routes",
      "Ensures thread safety"
    ]
  },
  {
    "q": "Which of the following commands builds a production-ready Docker image for a Flask app?",
    "c": null,
    "o": [
      "docker build -t flaskapp .",
      "flask run --docker",
      "python app.py --image",
      "docker start flask"
    ]
  },
  {
    "q": "What Flask object holds data that is unique to each request and is discarded after?",
    "c": null,
    "o": [
      "g",
      "request",
      "session",
      "current_app"
    ]
  },
  {
    "q": "What will this Flask route return when accessed at `/sum?a=2&b=3`?",
    "c": "@app.route('/sum')\ndef total():\n    a = int(request.args.get('a', 0))\n    b = int(request.args.get('b', 0))\n    return str(a + b)",
    "o": [
      "5",
      "23",
      "a + b",
      "None"
    ]
  },
  {
    "q": "Which feature of Flask enables sharing data across different parts of the application such as views and templates?",
    "c": null,
    "o": [
      "context processors",
      "route decorators",
      "Jinja macros",
      "session cookies"
    ]
  },
  {
    "q": "Which parameter can you pass to `Flask()` to disable static file serving?",
    "c": null,
    "o": [
      "static_folder=None",
      "static_url_path='/'",
      "debug=False",
      "template_folder=None"
    ]
  },
  {
    "q": "What is the effect of calling `flask.abort(403)` in a route handler?",
    "c": null,
    "o": [
      "Immediately returns an HTTP 403 Forbidden response",
      "Redirects the user to login",
      "Returns a 500 Internal Server Error",
      "Silently logs the error"
    ]
  },
  {
    "q": "Which Flask component allows you to inject custom logic into every request and response?",
    "c": null,
    "o": [
      "Middleware using `@app.before_request` and `@app.after_request`",
      "A Blueprint object",
      "Jinja context processors",
      "The CLI interface"
    ]
  },
  {
    "q": "What will happen if two routes in a Flask app are defined with the same URL pattern and method?",
    "c": null,
    "o": [
      "The second one will override the first silently",
      "Flask raises a runtime exception",
      "Both are executed in order",
      "They are merged into a single handler"
    ]
  },
  {
    "q": "Which of the following is true about Flask's `current_app`?",
    "c": null,
    "o": [
      "It proxies the app object in the current request context",
      "It returns the global app regardless of context",
      "It is available only in CLI commands",
      "It is static and shared across all threads"
    ]
  },
  {
    "q": "What does the `flask.testing.FlaskClient` allow you to do?",
    "c": null,
    "o": [
      "Simulate HTTP requests to test routes without running a server",
      "Start a new server thread for integration testing",
      "Compile templates for validation",
      "Simulate WebSocket connections"
    ]
  },
  {
    "q": "Which Flask extension allows asynchronous WebSocket support?",
    "c": null,
    "o": [
      "Flask-SocketIO",
      "Flask-Async",
      "Flask-WSGI",
      "Flask-AIO"
    ]
  },
  {
    "q": "Which method can be used to roll back a failed database transaction in Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "db.session.rollback()",
      "db.rollback_all()",
      "db.session.clear()",
      "db.session.reset()"
    ]
  },
  {
    "q": "What’s the main difference between `@app.route('/path', methods=['POST'])` and `@app.post('/path')`?",
    "c": null,
    "o": [
      "`@app.post` is a shorthand introduced in Flask 2.0+",
      "`@app.route(..., methods=[...])` is deprecated",
      "`@app.post` is less secure",
      "There is no difference at all"
    ]
  },
  {
    "q": "How do you safely escape user input in Jinja2 templates by default?",
    "c": null,
    "o": [
      "It is auto-escaped unless using `|safe`",
      "You must manually use `escape()`",
      "Use the `escape_input()` filter",
      "Set `autoescape=True` in Flask config"
    ]
  },
  {
    "q": "Which tool is best suited for running multiple Flask apps behind a reverse proxy in production?",
    "c": null,
    "o": [
      "Gunicorn with Nginx",
      "flask run",
      "Werkzeug server in threaded mode",
      "Apache Benchmark"
    ]
  },
  {
    "q": "Which Flask feature is used to store data specific to a request, such as user session or DB connection?",
    "c": null,
    "o": [
      "Flask's `g` object",
      "`request.environ` dictionary",
      "`session` dictionary",
      "`current_app` context"
    ]
  },
  {
    "q": "What will happen if a Flask app handles a request without a return value in a route function?",
    "c": null,
    "o": [
      "Flask will raise a TypeError",
      "Flask returns a 204 No Content response",
      "Flask crashes the server",
      "It silently returns an empty string"
    ]
  },
  {
    "q": "Which response status code is appropriate when a Flask route returns data that hasn't changed since the last request?",
    "c": null,
    "o": [
      "304 Not Modified",
      "204 No Content",
      "200 OK",
      "403 Forbidden"
    ]
  },
  {
    "q": "What Flask feature helps detect circular imports and deferred initialization?",
    "c": null,
    "o": [
      "Application factory pattern",
      "Blueprints",
      "Context locals",
      "Signals"
    ]
  },
  {
    "q": "Which of the following statements about Flask signals is correct?",
    "c": null,
    "o": [
      "They allow decoupled components to react to events like `request_started`",
      "They block request processing until all listeners complete",
      "They are only available in development mode",
      "They are used only for testing purposes"
    ]
  },
  {
    "q": "In Flask, which method is used to handle teardown logic after each request, regardless of exceptions?",
    "c": null,
    "o": [
      "`@app.teardown_request`",
      "`@app.after_request`",
      "`@app.cleanup_request`",
      "`@app.on_request_finish`"
    ]
  },
  {
    "q": "Which configuration flag enables Flask debug mode and automatic reloading?",
    "c": null,
    "o": [
      "`DEBUG = True`",
      "`TESTING = True`",
      "`DEV_MODE = True`",
      "`RELOAD = True`"
    ]
  },
  {
    "q": "What is the purpose of `app.config.from_object()` in Flask?",
    "c": null,
    "o": [
      "To load configuration from a Python class or module",
      "To import configuration from an environment variable",
      "To load configuration from a .json file",
      "To generate default config at runtime"
    ]
  },
  {
    "q": "When using Flask-Caching with `@cache.cached(timeout=50)`, what does `timeout=50` indicate?",
    "c": null,
    "o": [
      "The cached response is valid for 50 seconds",
      "The request will time out after 50 seconds",
      "The function will sleep for 50 seconds",
      "The cache will reset every 50 requests"
    ]
  },
  {
    "q": "Which HTTP method is not idempotent and changes server state with each call in Flask?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "HEAD",
      "OPTIONS"
    ]
  },
  {
    "q": "What is the main purpose of Flask's `before_request` decorator?",
    "c": null,
    "o": [
      "To execute a function before each request is processed",
      "To define a response handler for error codes",
      "To log all responses sent from the server",
      "To execute cleanup code after every request"
    ]
  },
  {
    "q": "Which Flask object should be used to handle user-defined context data that persists for a single request?",
    "c": null,
    "o": [
      "g",
      "session",
      "app",
      "request"
    ]
  },
  {
    "q": "What is the result of calling `url_for('index', _external=True)` in Flask?",
    "c": null,
    "o": [
      "It returns an absolute URL for the 'index' endpoint",
      "It returns a relative path to the 'index' route",
      "It triggers a redirect to the 'index' endpoint",
      "It raises a TypeError due to invalid arguments"
    ]
  },
  {
    "q": "In Flask, what is the correct way to register multiple blueprints to a single app?",
    "c": null,
    "o": [
      "Call `app.register_blueprint()` multiple times",
      "Use a list of blueprints in `app.blueprints`",
      "Pass blueprints into `Flask()` constructor",
      "Use `app.mount_blueprints()`"
    ]
  },
  {
    "q": "Which command runs the Flask application in development mode using the terminal?",
    "c": null,
    "o": [
      "`flask run`",
      "`python app.py runserver`",
      "`flask start-dev`",
      "`run_flask`"
    ]
  },
  {
    "q": "Which statement is true about Flask sessions?",
    "c": null,
    "o": [
      "They are client-side and signed using the secret key",
      "They are always stored in server memory",
      "They are not encrypted by default",
      "They require Flask-Login to function"
    ]
  },
  {
    "q": "What does Flask's `abort(404)` function do?",
    "c": null,
    "o": [
      "Immediately stops execution and returns a 404 response",
      "Logs the error but lets the request continue",
      "Redirects to the error handler view",
      "Returns 200 OK with a 404 message in content"
    ]
  },
  {
    "q": "Which argument allows you to bind a Blueprint to a specific URL prefix?",
    "c": null,
    "o": [
      "`url_prefix`",
      "`url_path`",
      "`mount_point`",
      "`bind_to`"
    ]
  },
  {
    "q": "What is the role of the `__init__.py` file in a Flask application package?",
    "c": null,
    "o": [
      "It defines the app factory and makes the package importable",
      "It contains only static content",
      "It is required only when using Jinja templates",
      "It stores all routing logic"
    ]
  },
  {
    "q": "What does `@app.after_request` modify in Flask?",
    "c": null,
    "o": [
      "The response object after the view returns it",
      "The request object before routing",
      "The internal app configuration",
      "The context of the running thread"
    ]
  },
  {
    "q": "What happens if you return a dictionary from a Flask view function in Flask 2.0+?",
    "c": null,
    "o": [
      "It is automatically converted to JSON with a 200 OK response",
      "It raises a TypeError unless jsonify() is used",
      "It is sent as plain text in the response",
      "It triggers a 500 Internal Server Error"
    ]
  },
  {
    "q": "Which Flask extension provides support for handling WebSockets?",
    "c": null,
    "o": [
      "Flask-SocketIO",
      "Flask-WebSocket",
      "Flask-Stream",
      "Flask-WsHandler"
    ]
  },
  {
    "q": "In Flask, what does the `request.environ` object contain?",
    "c": null,
    "o": [
      "WSGI environment variables and request metadata",
      "Only HTTP headers",
      "Only the request body",
      "Only session information"
    ]
  },
  {
    "q": "Which Flask extension simplifies building RESTful APIs?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-RESTify",
      "Flask-API",
      "Flask-Serialize"
    ]
  },
  {
    "q": "How can you handle cross-origin requests in a Flask app?",
    "c": null,
    "o": [
      "Use the `flask_cors` extension",
      "Manually set `Access-Control-Allow-Origin` headers",
      "Use `request.set_cors()`",
      "CORS is not supported in Flask"
    ]
  },
  {
    "q": "Which statement about Flask `g` object is TRUE?",
    "c": null,
    "o": [
      "It is used to store request-level global variables",
      "It persists across multiple requests from the same user",
      "It automatically clears at server shutdown",
      "It shares data between threads"
    ]
  },
  {
    "q": "In Flask, how is thread safety typically ensured for database sessions?",
    "c": null,
    "o": [
      "By using scoped_session from SQLAlchemy",
      "By sharing the same session object globally",
      "By locking database operations manually",
      "Flask automatically ensures DB thread safety"
    ]
  },
  {
    "q": "What is the purpose of Flask's `teardown_request` decorator?",
    "c": null,
    "o": [
      "To execute cleanup code after the request, even on errors",
      "To run functions before any request is handled",
      "To initialize the request context",
      "To abort requests under specific conditions"
    ]
  },
  {
    "q": "Which file in a Flask project typically contains the app initialization and configuration?",
    "c": null,
    "o": [
      "`__init__.py`",
      "`views.py`",
      "`routes.py`",
      "`wsgi.py`"
    ]
  },
  {
    "q": "Which of the following is TRUE about Flask blueprints?",
    "c": null,
    "o": [
      "They allow modular application design and route grouping",
      "They are used to define database models",
      "They replace the main Flask app object",
      "They must be registered using a context manager"
    ]
  },
  {
    "q": "Which method is used to register an error handler for a specific HTTP status code in Flask?",
    "c": null,
    "o": [
      "@app.errorhandler(404)",
      "@app.error(404)",
      "@app.handle_error(404)",
      "@app.catch(404)"
    ]
  },
  {
    "q": "What is the main benefit of the Flask app factory pattern?",
    "c": null,
    "o": [
      "It allows configuration and extension registration before creating the app instance",
      "It speeds up server startup time",
      "It avoids the need for blueprints",
      "It supports only synchronous views"
    ]
  },
  {
    "q": "What is a common reason for using `Flask-Migrate`?",
    "c": null,
    "o": [
      "To manage SQLAlchemy database schema changes using Alembic",
      "To transfer data between databases",
      "To backup Flask project files",
      "To deploy Flask apps to multiple servers"
    ]
  },
  {
    "q": "What does `request.get_json()` return in Flask?",
    "c": null,
    "o": [
      "A parsed JSON dictionary from the request body",
      "The raw request body as a string",
      "Form data as a dictionary",
      "URL parameters"
    ]
  },
  {
    "q": "How can you serve static files from a different folder in Flask?",
    "c": null,
    "o": [
      "Set `static_folder` parameter when creating the Flask app",
      "Modify `app.static_url_path` directly",
      "Serve them using a Jinja filter",
      "Use a WSGI middleware"
    ]
  },
  {
    "q": "Which of the following can be used to limit request methods on a Flask route?",
    "c": null,
    "o": [
      "Using the `methods` parameter in the `@app.route()` decorator",
      "Using `request.limit_methods()` inside the view",
      "Declaring allowed methods in the app config",
      "Setting HTTP headers in the request"
    ]
  },
  {
    "q": "What will happen if a Flask view function does not return a response?",
    "c": null,
    "o": [
      "Flask will raise a TypeError",
      "A 204 No Content response is automatically returned",
      "The server will timeout",
      "Flask returns a default HTML template"
    ]
  },
  {
    "q": "How can you share a Jinja2 macro across multiple templates in Flask?",
    "c": null,
    "o": [
      "Put it in a separate file and import it using `{% import 'macros.html' as macros %}`",
      "Use `render_macro()` in your Python code",
      "Define it in `config.py`",
      "Share it via global context processors only"
    ]
  },
  {
    "q": "Which Flask extension allows password hashing and user login management?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-User",
      "Flask-OAuth",
      "Flask-Auth0"
    ]
  },
  {
    "q": "In Flask, what is the purpose of `app.test_client()`?",
    "c": null,
    "o": [
      "To simulate HTTP requests for testing Flask apps",
      "To connect to a test database",
      "To validate Python unit tests",
      "To start a local development server"
    ]
  },
  {
    "q": "What does the `Flask.g` object provide?",
    "c": null,
    "o": [
      "A namespace for storing data during an application context",
      "A global variable shared across requests",
      "The application configuration object",
      "A logging instance"
    ]
  },
  {
    "q": "Which HTTP status code should be returned for a successful POST request that created a resource?",
    "c": null,
    "o": [
      "201",
      "200",
      "204",
      "302"
    ]
  },
  {
    "q": "In Flask, what does `@app.teardown_appcontext` do?",
    "c": null,
    "o": [
      "Registers a function to run after the app context is torn down",
      "Registers a function to tear down the database",
      "Defines cleanup behavior before a request",
      "Terminates all active sessions"
    ]
  },
  {
    "q": "How do you inject a variable into all Jinja templates in Flask?",
    "c": null,
    "o": [
      "Using `@app.context_processor`",
      "Declaring it in `app.config`",
      "Using `render_template_global()`",
      "Setting it in the request object"
    ]
  },
  {
    "q": "Which of the following is true about Flask Blueprints?",
    "c": null,
    "o": [
      "They help modularize large Flask applications",
      "They prevent route collisions",
      "They replace Flask routes",
      "They only work with API routes"
    ]
  },
  {
    "q": "What’s the correct way to create a Flask application with an application factory?",
    "c": null,
    "o": [
      "Define a function that creates and returns the Flask app instance",
      "Use the `flask new` CLI command",
      "Create a global Flask app instance and import it",
      "Register the app instance in the environment variable"
    ]
  },
  {
    "q": "What will `abort(403)` do in a Flask route?",
    "c": null,
    "o": [
      "Immediately return a 403 Forbidden response",
      "Log the user out",
      "Redirect the user to the login page",
      "Raise a server error"
    ]
  },
  {
    "q": "In Flask, which function can be used to redirect a user to a different route?",
    "c": null,
    "o": [
      "`redirect()`",
      "`goto()`",
      "`route_to()`",
      "`navigate()`"
    ]
  },
  {
    "q": "What is the main reason for using `url_for()` in Flask templates or views?",
    "c": null,
    "o": [
      "To generate URLs dynamically and avoid hardcoding",
      "To shorten the route URL",
      "To hide routes from users",
      "To register view functions"
    ]
  },
  {
    "q": "What type of data does `request.args` provide in Flask?",
    "c": null,
    "o": [
      "Query string parameters from the URL",
      "JSON data from the body",
      "Form data from POST",
      "Header values"
    ]
  },
  {
    "q": "Which method is used to serve static files in Flask?",
    "c": null,
    "o": [
      "Using the `/static/` URL path by default",
      "Calling `send_file()` inside a route",
      "Adding the static folder to `app.config['ROUTES']`",
      "Using `@app.static` decorator"
    ]
  },
  {
    "q": "How does Flask handle thread-safety for request-specific data?",
    "c": null,
    "o": [
      "It uses thread-local objects like `request`, `g`, and `session`",
      "It blocks concurrent requests using a lock",
      "It spawns a new process for each request",
      "It serializes request data to JSON automatically"
    ]
  },
  {
    "q": "What is the purpose of the `flask run --reload` flag?",
    "c": null,
    "o": [
      "It automatically restarts the server on code changes",
      "It enables HTTPS during development",
      "It flushes the session data",
      "It runs Flask in production mode"
    ]
  },
  {
    "q": "Which tool helps generate RESTful APIs from Flask classes?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-Admin",
      "Flask-Caching",
      "Flask-Login"
    ]
  },
  {
    "q": "Which Flask extension can you use for CSRF protection?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Guard",
      "Flask-Security",
      "Flask-CORS"
    ]
  },
  {
    "q": "In a Flask app, what does the `@login_required` decorator from Flask-Login do?",
    "c": null,
    "o": [
      "Prevents access to routes without an authenticated user",
      "Hashes the user's password before login",
      "Logs the user out after timeout",
      "Registers a user in the system"
    ]
  },
  {
    "q": "When using Flask-SQLAlchemy, what does `db.create_all()` do?",
    "c": null,
    "o": [
      "Creates all tables based on model definitions",
      "Starts a new Flask server instance",
      "Initializes a new user session",
      "Commits all pending transactions"
    ]
  },
  {
    "q": "How does Flask determine which function to call for a specific route?",
    "c": null,
    "o": [
      "It matches the URL path and HTTP method to the route's decorator",
      "It uses the alphabetical order of functions",
      "It uses the order of route registration in the file",
      "It checks the return type of each function"
    ]
  },
  {
    "q": "Which of the following best describes `Flask-Migrate`?",
    "c": null,
    "o": [
      "A database schema migration tool using Alembic",
      "A tool for migrating Flask apps to Django",
      "A plugin to deploy Flask to Heroku",
      "A static file compression utility"
    ]
  },
  {
    "q": "What will `url_for('index', _external=True)` return?",
    "c": null,
    "o": [
      "An absolute URL including the domain",
      "The relative path to the 'index' route",
      "The HTML content of the index page",
      "A redirect response to the index route"
    ]
  },
  {
    "q": "What is the default behavior when a Flask route function returns a dictionary?",
    "c": null,
    "o": [
      "Flask automatically converts it to a JSON response",
      "Flask returns a 500 error",
      "The dictionary is rendered as HTML",
      "Flask stores it in the session"
    ]
  },
  {
    "q": "Which HTTP status code is returned by Flask when a route handler raises `abort(403)`?",
    "c": null,
    "o": [
      "403",
      "401",
      "404",
      "500"
    ]
  },
  {
    "q": "How can you define a command-line interface command in a Flask app?",
    "c": null,
    "o": [
      "Using the `@app.cli.command()` decorator",
      "By adding commands in `app.config['CLI']`",
      "By creating a shell script in the `/cli/` folder",
      "Flask does not support CLI commands"
    ]
  },
  {
    "q": "Which of the following allows for content negotiation in a Flask API?",
    "c": null,
    "o": [
      "Inspecting the `Accept` header in the request",
      "Using the `@accepts_json` decorator",
      "Specifying MIME types in route URLs",
      "Using Flask's `g` object to store MIME"
    ]
  },
  {
    "q": "What is the role of the `Blueprint` class in Flask?",
    "c": null,
    "o": [
      "It allows modular application structure and reusable route groups",
      "It manages SQLAlchemy models automatically",
      "It enforces route security and permissions",
      "It creates static site assets"
    ]
  },
  {
    "q": "What happens if two routes in Flask are defined with the same URL and method?",
    "c": null,
    "o": [
      "The second one overrides the first",
      "Flask merges both handlers",
      "Both are triggered in parallel",
      "Flask raises a configuration error"
    ]
  },
  {
    "q": "How do you attach middleware in Flask to run before every request?",
    "c": null,
    "o": [
      "Using the `@app.before_request` decorator",
      "Using `app.add_middleware()`",
      "Using `@app.on_request_start()`",
      "Inserting logic into `app.run()`"
    ]
  },
  {
    "q": "Which Flask extension allows automatic input validation using schemas?",
    "c": null,
    "o": [
      "Flask-Marshmallow",
      "Flask-Uploads",
      "Flask-SocketIO",
      "Flask-Caching"
    ]
  },
  {
    "q": "In Flask, which object holds temporary data during a request and resets after?",
    "c": null,
    "o": [
      "`g`",
      "`session`",
      "`current_app`",
      "`request.args`"
    ]
  },
  {
    "q": "What is the function of `Flask-CORS`?",
    "c": null,
    "o": [
      "Enables cross-origin resource sharing for Flask APIs",
      "Encrypts user sessions for security",
      "Caches static files for faster access",
      "Manages object-relational mapping for SQL"
    ]
  },
  {
    "q": "What does `@app.teardown_appcontext` do in a Flask application?",
    "c": null,
    "o": [
      "It defines a function to run after each request regardless of exception",
      "It is used to register a function to clean up resources at app shutdown",
      "It applies middleware during app setup",
      "It is used to run a function before the first request"
    ]
  },
  {
    "q": "How can you serve static files from a custom directory in Flask?",
    "c": null,
    "o": [
      "By setting the `static_folder` argument when creating the Flask app",
      "By calling `serve_static()`",
      "By using the `@app.static()` decorator",
      "By placing files in a folder named `/webroot`"
    ]
  },
  {
    "q": "Which Flask extension allows for automatic admin interfaces for models?",
    "c": null,
    "o": [
      "Flask-Admin",
      "Flask-Auth",
      "Flask-Debug",
      "Flask-Scaffold"
    ]
  },
  {
    "q": "Which method is used to register a `Blueprint` object in a Flask app?",
    "c": null,
    "o": [
      "`app.register_blueprint()`",
      "`app.include()`",
      "`app.add_module()`",
      "`app.use()`"
    ]
  },
  {
    "q": "How can Flask automatically reload the server when code changes?",
    "c": null,
    "o": [
      "By setting `debug=True`",
      "By running with `--reload` CLI flag only",
      "Only with Flask-Cli extension",
      "Not possible without Docker"
    ]
  },
  {
    "q": "Which Flask global object provides access to the request context?",
    "c": null,
    "o": [
      "`request`",
      "`current_app`",
      "`session`",
      "`g`"
    ]
  },
  {
    "q": "Which of these is true about the `session` object in Flask?",
    "c": null,
    "o": [
      "It is signed with a secret key to prevent tampering",
      "It is stored on the server in memory",
      "It is cleared on every request",
      "It cannot be accessed in templates"
    ]
  },
  {
    "q": "How can you make a Flask route respond to both GET and POST methods?",
    "c": null,
    "o": [
      "Using `@app.route('/path', methods=['GET', 'POST'])`",
      "Using `@app.dual('/path')`",
      "By creating separate functions for each method",
      "Flask doesn't allow multiple methods"
    ]
  },
  {
    "q": "Which function returns a Flask response with a specific MIME type?",
    "c": null,
    "o": [
      "`make_response()`",
      "`render_template()`",
      "`redirect()`",
      "`url_for()`"
    ]
  },
  {
    "q": "What does `url_for('index', _external=True)` return?",
    "c": null,
    "o": [
      "An absolute URL to the `index` route",
      "A relative path to the `index` route",
      "The full HTML of the index page",
      "The rendered response of the index function"
    ]
  },
  {
    "q": "In Flask, what is the purpose of the `g` object?",
    "c": null,
    "o": [
      "It stores data during a request which can be shared across functions",
      "It stores global configuration data",
      "It is used for generating responses",
      "It is the same as the session object"
    ]
  },
  {
    "q": "What is the correct way to define a custom CLI command using Flask?",
    "c": null,
    "o": [
      "Using the `@app.cli.command()` decorator",
      "Creating a script with argparse",
      "By adding commands to the `.flaskenv` file",
      "Using `flask_custom` module"
    ]
  },
  {
    "q": "Which HTTP status code is used in Flask's `abort(403)`?",
    "c": null,
    "o": [
      "403 Forbidden",
      "401 Unauthorized",
      "404 Not Found",
      "400 Bad Request"
    ]
  },
  {
    "q": "How can you limit request methods globally for a Flask route?",
    "c": null,
    "o": [
      "By passing `methods` in the `@app.route()` decorator",
      "By using `@app.methods_only()`",
      "Flask uses GET by default and cannot change it",
      "By modifying the `flask.json` file"
    ]
  },
  {
    "q": "What happens if you return a dictionary from a Flask route?",
    "c": null,
    "o": [
      "It is converted to a JSON response automatically",
      "An error will be raised",
      "It is treated as a string",
      "It is stored in the session"
    ]
  },
  {
    "q": "What is the best way to return a custom HTTP response code in Flask?",
    "c": null,
    "o": [
      "`return response_data, 201`",
      "`return jsonify(response_data, status=201)`",
      "`set_status(201)`",
      "`raise HTTPResponse(201)`"
    ]
  },
  {
    "q": "Which module is used to securely hash passwords in Flask apps?",
    "c": null,
    "o": [
      "werkzeug.security",
      "flask.utils",
      "hashlib",
      "flask.auth"
    ]
  },
  {
    "q": "How can you run a Flask app with multiple worker processes?",
    "c": null,
    "o": [
      "Use a WSGI server like Gunicorn",
      "Set `app.workers = 5`",
      "Use Flask’s built-in server with threads=True",
      "Use `flask run --multi`"
    ]
  },
  {
    "q": "How do you define a Flask route prefix for all views in a blueprint?",
    "c": null,
    "o": [
      "Using `url_prefix` when registering the blueprint",
      "By adding a prefix to each route manually",
      "Using a global config setting",
      "Using `@route_prefix()` decorator"
    ]
  },
  {
    "q": "Which tool is commonly used with Flask for managing database migrations?",
    "c": null,
    "o": [
      "Flask-Migrate",
      "Flask-DB",
      "Flask-Backup",
      "Flask-ORM"
    ]
  },
  {
    "q": "What does the `@app.before_request` decorator do in Flask?",
    "c": null,
    "o": [
      "Registers a function to run before each request",
      "Registers a route",
      "Handles errors before they occur",
      "Ensures session data is cleared"
    ]
  },
  {
    "q": "In Flask, how do you register a custom error handler for 404 errors?",
    "c": null,
    "o": [
      "Using `@app.errorhandler(404)`",
      "Using `@app.on_error(404)`",
      "Using `@app.catch(404)`",
      "Using `@app.route('/404')`"
    ]
  },
  {
    "q": "What is the purpose of Flask's `make_response()` function?",
    "c": null,
    "o": [
      "To create a response object with headers, status code, and data",
      "To log a response to the console",
      "To redirect users to another route",
      "To create an error response"
    ]
  },
  {
    "q": "Which configuration key in Flask enables debug mode?",
    "c": null,
    "o": [
      "DEBUG",
      "DEVELOPMENT",
      "FLASK_DEBUG",
      "LOG_LEVEL"
    ]
  },
  {
    "q": "Which Flask extension would you use to build RESTful APIs?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-API",
      "Flask-HTTP",
      "Flask-Connect"
    ]
  },
  {
    "q": "How can you redirect a user to another URL in Flask?",
    "c": null,
    "o": [
      "Using `redirect(url_for(...))`",
      "Using `goto(url)`",
      "Using `request.redirect()`",
      "Using `change_route()`"
    ]
  },
  {
    "q": "Which Flask component is used for one-time alert messages?",
    "c": null,
    "o": [
      "Flashing system (`flash`)",
      "MessageManager",
      "AlertMixin",
      "session.flash"
    ]
  },
  {
    "q": "Which Flask function helps generate URLs for routes?",
    "c": null,
    "o": [
      "url_for",
      "generate_url",
      "make_url",
      "create_link"
    ]
  },
  {
    "q": "What does the `Flask-SQLAlchemy` extension provide?",
    "c": null,
    "o": [
      "Object Relational Mapping (ORM)",
      "Form rendering",
      "User authentication",
      "REST API generation"
    ]
  },
  {
    "q": "What is the role of `app.teardown_appcontext`?",
    "c": null,
    "o": [
      "It defines a function to be called after each request, regardless of exception",
      "It handles app shutdown",
      "It is used for logging context",
      "It handles route teardown"
    ]
  },
  {
    "q": "Which of the following methods in Flask is used to register a blueprint?",
    "c": null,
    "o": [
      "app.register_blueprint()",
      "app.include_blueprint()",
      "app.add_blueprint()",
      "app.mount_blueprint()"
    ]
  },
  {
    "q": "What is the default HTTP method allowed by Flask routes?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "ALL"
    ]
  },
  {
    "q": "How does Flask determine the view function to execute for a request?",
    "c": null,
    "o": [
      "Based on the URL rule and HTTP method",
      "Based on view name",
      "Based on function signature",
      "Based on return type"
    ]
  },
  {
    "q": "Which of these is used to create a custom CLI command in Flask?",
    "c": null,
    "o": [
      "@app.cli.command()",
      "@app.route('/cli')",
      "flask.cli.add_command()",
      "@flask.command()"
    ]
  },
  {
    "q": "In Flask, what is the function of `g`?",
    "c": null,
    "o": [
      "To store data during a single request cycle",
      "To globally store session values",
      "To configure the app",
      "To serve static files"
    ]
  },
  {
    "q": "Which command starts a Flask development server?",
    "c": null,
    "o": [
      "flask run",
      "python run.py",
      "flask start",
      "flask app"
    ]
  },
  {
    "q": "What type of object is returned from a Flask route function?",
    "c": null,
    "o": [
      "A Response object or string",
      "An HTML file",
      "A JSON object only",
      "A URL rule"
    ]
  },
  {
    "q": "Which of the following Flask extensions supports CSRF protection?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Security",
      "Flask-Auth",
      "Flask-Forms"
    ]
  },
  {
    "q": "What happens if no route matches the incoming request in Flask?",
    "c": null,
    "o": [
      "A 404 error is returned",
      "The request is redirected",
      "A 500 error is raised",
      "Nothing; the request is ignored"
    ]
  },
  {
    "q": "Which object provides access to the current request context?",
    "c": null,
    "o": [
      "request",
      "g",
      "app",
      "context"
    ]
  },
  {
    "q": "What is the purpose of `url_for()` in Flask?",
    "c": null,
    "o": [
      "To generate a URL to a given endpoint",
      "To redirect users to external URLs",
      "To get the current request URL",
      "To bind a view function to a URL"
    ]
  },
  {
    "q": "Which of the following decorators allows you to define a route in Flask?",
    "c": null,
    "o": [
      "@app.route()",
      "@app.url()",
      "@app.view()",
      "@route.view()"
    ]
  },
  {
    "q": "What does `Flask(__name__)` signify?",
    "c": null,
    "o": [
      "It helps Flask locate resources relative to the app location",
      "It starts the Flask debugger",
      "It sets the app name as 'Flask'",
      "It binds the app to port 5000"
    ]
  },
  {
    "q": "Which status code does Flask return by default if not specified?",
    "c": null,
    "o": [
      "200",
      "302",
      "404",
      "500"
    ]
  },
  {
    "q": "How do you specify multiple methods for a Flask route?",
    "c": null,
    "o": [
      "Using the `methods` parameter in `@app.route()`",
      "Using multiple `@app.route()` decorators",
      "By registering the route multiple times",
      "By chaining route definitions"
    ]
  },
  {
    "q": "Which Flask object allows you to send HTTP responses with custom status codes?",
    "c": null,
    "o": [
      "make_response()",
      "render_response()",
      "response_builder()",
      "set_response()"
    ]
  },
  {
    "q": "Which Flask extension is commonly used for object-relational mapping (ORM)?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-ORM",
      "Flask-Model",
      "Flask-DB"
    ]
  },
  {
    "q": "How do you enable debug mode in Flask?",
    "c": null,
    "o": [
      "app.run(debug=True)",
      "app.start(debug=True)",
      "flask --debug",
      "app.enable_debug()"
    ]
  },
  {
    "q": "What does the `@app.before_request` decorator do?",
    "c": null,
    "o": [
      "Registers a function to run before each request",
      "Registers a route before others",
      "Enables request blocking",
      "Sets request headers globally"
    ]
  },
  {
    "q": "How can you return a JSON response from a Flask route?",
    "c": null,
    "o": [
      "Using `jsonify()` function",
      "Using `render_template()`",
      "Returning a dict directly",
      "Using `json.dumps()` only"
    ]
  },
  {
    "q": "What is the use of Flask’s `g` object?",
    "c": null,
    "o": [
      "To store information during a request for global access",
      "To manage global application configuration",
      "To define global routes",
      "To access static files"
    ]
  },
  {
    "q": "Which Flask tool is recommended to secure forms against CSRF?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Security",
      "Flask-Guard",
      "Flask-Login"
    ]
  },
  {
    "q": "In Flask, what does `request.form` access?",
    "c": null,
    "o": [
      "Form data submitted via POST",
      "Query parameters in the URL",
      "File uploads",
      "JSON payload in the body"
    ]
  },
  {
    "q": "Which of the following allows Flask to handle multiple threads safely?",
    "c": null,
    "o": [
      "Context locals",
      "Thread locks",
      "Session cookies",
      "Task queues"
    ]
  },
  {
    "q": "What is the purpose of `Blueprint` in Flask?",
    "c": null,
    "o": [
      "To organize the app into reusable components",
      "To create a backup of the app",
      "To secure app routes",
      "To apply a template engine"
    ]
  },
  {
    "q": "Which module helps in unit testing Flask applications?",
    "c": null,
    "o": [
      "Flask's built-in `test_client()`",
      "pytest-flask only",
      "Unittest.mock",
      "requests"
    ]
  },
  {
    "q": "What is the default HTTP method if none is specified in `@app.route()`?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "HEAD"
    ]
  },
  {
    "q": "Which method in Flask is used to redirect a user to a different endpoint?",
    "c": null,
    "o": [
      "redirect()",
      "url_for()",
      "go_to()",
      "forward()"
    ]
  },
  {
    "q": "Where can static files like CSS and JS be placed in a Flask app?",
    "c": null,
    "o": [
      "Inside the `static/` folder",
      "Inside the `templates/` folder",
      "Inside the `config/` folder",
      "Anywhere, Flask doesn't manage static files"
    ]
  },
  {
    "q": "How can you structure a large Flask app?",
    "c": null,
    "o": [
      "Using application factory pattern and blueprints",
      "Putting all code in `app.py`",
      "By using a single large route file",
      "By subclassing Flask"
    ]
  },
  {
    "q": "Which method in Flask retrieves values from the URL parameters?",
    "c": null,
    "o": [
      "request.args",
      "request.form",
      "request.data",
      "request.json"
    ]
  },
  {
    "q": "What is the main purpose of the `url_for()` function in Flask?",
    "c": null,
    "o": [
      "It generates URLs for routes dynamically",
      "It parses external URLs",
      "It protects against CSRF",
      "It connects database queries"
    ]
  },
  {
    "q": "In Flask, which decorator is used to define a route?",
    "c": null,
    "o": [
      "@app.route()",
      "@app.path()",
      "@route.app()",
      "@flask.route()"
    ]
  },
  {
    "q": "What is the correct way to serve a file for download in Flask?",
    "c": null,
    "o": [
      "Using `send_file()`",
      "Using `render_template()`",
      "Using `send_static_file()`",
      "Using `make_response()`"
    ]
  },
  {
    "q": "Which attribute in Flask helps differentiate between development and production environments?",
    "c": null,
    "o": [
      "FLASK_ENV",
      "FLASK_DEBUG",
      "APP_MODE",
      "ENV_STATE"
    ]
  },
  {
    "q": "How do you define route variables in Flask?",
    "c": null,
    "o": [
      "By using angle brackets like `/user/<username>`",
      "By defining global variables",
      "By appending them as GET parameters",
      "By using route.query_params"
    ]
  },
  {
    "q": "What happens when `debug=True` is set in Flask?",
    "c": null,
    "o": [
      "The server auto-restarts on code change and shows detailed errors",
      "The app becomes faster",
      "The server uses multiple threads",
      "Static files are cached"
    ]
  },
  {
    "q": "Which Flask extension can be used for RESTful APIs?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-SQLAlchemy",
      "Flask-Login",
      "Flask-Migrate"
    ]
  },
  {
    "q": "How do you abort a request with a specific HTTP status code in Flask?",
    "c": null,
    "o": [
      "Using `abort(code)`",
      "Using `return error(code)`",
      "Using `raise Exception(code)`",
      "Using `exit(code)`"
    ]
  },
  {
    "q": "What is the result of `request.is_json` when the content type is `application/json`?",
    "c": null,
    "o": [
      "True",
      "False",
      "Error is thrown",
      "None"
    ]
  },
  {
    "q": "What is the use of Flask's `g` object?",
    "c": null,
    "o": [
      "To store data during a single request cycle",
      "To store global variables across requests",
      "To define global configurations",
      "To define routes dynamically"
    ]
  },
  {
    "q": "What does the `before_request` decorator do in Flask?",
    "c": null,
    "o": [
      "Registers a function to run before each request",
      "Initializes the database",
      "Validates form data",
      "Renders the template before the request"
    ]
  },
  {
    "q": "Which function is used to register a Flask Blueprint?",
    "c": null,
    "o": [
      "app.register_blueprint()",
      "app.add_blueprint()",
      "app.use_blueprint()",
      "app.include_blueprint()"
    ]
  },
  {
    "q": "How can you create a custom error handler for 404 errors in Flask?",
    "c": null,
    "o": [
      "@app.errorhandler(404)",
      "@app.route('/404')",
      "@app.error(404)",
      "@app.handler(404)"
    ]
  },
  {
    "q": "What is the default port Flask uses when running the development server?",
    "c": null,
    "o": [
      "5000",
      "8000",
      "8080",
      "3000"
    ]
  },
  {
    "q": "Which object holds information about the current session in Flask?",
    "c": null,
    "o": [
      "session",
      "request",
      "g",
      "config"
    ]
  },
  {
    "q": "What does `request.get_json()` do in Flask?",
    "c": null,
    "o": [
      "Parses and returns JSON data from the request body",
      "Returns form data",
      "Returns URL arguments",
      "Converts response to JSON"
    ]
  },
  {
    "q": "What is Flask's `current_app` used for?",
    "c": null,
    "o": [
      "Accessing the app context from anywhere",
      "Creating new Flask apps",
      "Logging requests",
      "Storing templates"
    ]
  },
  {
    "q": "In Flask, static files are served from which folder by default?",
    "c": null,
    "o": [
      "static",
      "public",
      "assets",
      "static_files"
    ]
  },
  {
    "q": "How can you redirect a user to a different route in Flask?",
    "c": null,
    "o": [
      "Using `redirect(url_for(...))`",
      "Using `render_template(...)`",
      "Using `goto(url)`",
      "Using `request.redirect()`"
    ]
  },
  {
    "q": "What is the purpose of Flask's `app.teardown_appcontext` decorator?",
    "c": null,
    "o": [
      "It registers a function to be called when the application context ends",
      "It handles teardown of requests after they complete",
      "It logs errors before they are raised",
      "It sets up application-wide configurations"
    ]
  },
  {
    "q": "In Flask, what is the role of `url_for()`?",
    "c": null,
    "o": [
      "It generates URLs to avoid hardcoding paths",
      "It parses query strings from requests",
      "It redirects the user to a new route",
      "It validates incoming request data"
    ]
  },
  {
    "q": "Which HTTP method would you typically use with `@app.route('/delete', methods=['DELETE'])`?",
    "c": null,
    "o": [
      "DELETE",
      "POST",
      "GET",
      "PUT"
    ]
  },
  {
    "q": "What does the `flash()` function in Flask do?",
    "c": null,
    "o": [
      "Stores a message to be rendered in the next request",
      "Logs a message to the console",
      "Sends a push notification",
      "Triggers a server reload"
    ]
  },
  {
    "q": "How do you enable debugging in Flask via code?",
    "c": null,
    "o": [
      "app.debug = True",
      "app.set_debug(True)",
      "app.enable_debug()",
      "debug(app)"
    ]
  },
  {
    "q": "What will `@app.route('/<username>')` capture in the route?",
    "c": null,
    "o": [
      "A dynamic string segment from the URL",
      "A POST parameter",
      "A file upload",
      "A form field"
    ]
  },
  {
    "q": "Which environment variable should you set to run Flask with debug mode?",
    "c": null,
    "o": [
      "FLASK_ENV=development",
      "FLASK_DEBUG=0",
      "DEBUG=True",
      "ENV=debug"
    ]
  },
  {
    "q": "How do you define a custom command using Flask CLI?",
    "c": null,
    "o": [
      "@app.cli.command()",
      "@app.route('/cli')",
      "@cli.command()",
      "@app.command()"
    ]
  },
  {
    "q": "What is the purpose of `with app.app_context():` in Flask?",
    "c": null,
    "o": [
      "To push the application context for using `current_app`, etc.",
      "To create a new WSGI server",
      "To enable request context globally",
      "To deploy the app asynchronously"
    ]
  },
  {
    "q": "Which object gives you access to the current request data in Flask?",
    "c": null,
    "o": [
      "request",
      "session",
      "g",
      "app"
    ]
  },
  {
    "q": "What does the `g` object in Flask do?",
    "c": null,
    "o": [
      "Stores data during the application context for each request",
      "Global configuration values across requests",
      "User authentication object",
      "Generic logger for all errors"
    ]
  },
  {
    "q": "What is the default session type used by Flask?",
    "c": null,
    "o": [
      "Client-side signed cookies",
      "Redis-based session store",
      "In-memory dictionary",
      "File-based session storage"
    ]
  },
  {
    "q": "What does `request.args` contain in a Flask app?",
    "c": null,
    "o": [
      "The parsed URL query parameters as a MultiDict",
      "The request body from POST requests",
      "Uploaded files",
      "Route variables"
    ]
  },
  {
    "q": "How does Flask support method overriding (e.g., PUT, DELETE) in HTML forms?",
    "c": null,
    "o": [
      "Using a hidden input `_method` and enabling method override middleware",
      "It’s not supported at all",
      "Through `request.override_method()`",
      "Using special request headers only"
    ]
  },
  {
    "q": "Which Flask extension provides integration with SQLAlchemy?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-Database",
      "Flask-ORM",
      "Flask-Storage"
    ]
  },
  {
    "q": "What happens if you don’t return a response object or string in a Flask view?",
    "c": null,
    "o": [
      "Flask throws a TypeError",
      "Flask returns 204 No Content automatically",
      "The server crashes",
      "The request silently fails"
    ]
  },
  {
    "q": "Which decorator would you use to run code only before the first request?",
    "c": null,
    "o": [
      "@app.before_first_request",
      "@app.before_request",
      "@app.pre_request",
      "@app.setup"
    ]
  },
  {
    "q": "How can you register Blueprints in a Flask app?",
    "c": null,
    "o": [
      "app.register_blueprint(blueprint)",
      "app.include(blueprint)",
      "app.mount(blueprint)",
      "app.attach(blueprint)"
    ]
  },
  {
    "q": "Which of these status codes indicates a successful POST that created a resource?",
    "c": null,
    "o": [
      "201",
      "200",
      "204",
      "302"
    ]
  },
  {
    "q": "In Flask, which object is used for storing session data?",
    "c": null,
    "o": [
      "session",
      "request.data",
      "app.config",
      "g"
    ]
  },
  {
    "q": "What does `url_for()` do in Flask?",
    "c": null,
    "o": [
      "Generates the URL for a given view function name",
      "Redirects the user to another URL",
      "Returns the current request URL",
      "Parses query strings from URLs"
    ]
  },
  {
    "q": "How can you limit a route to only accept GET and POST methods?",
    "c": null,
    "o": [
      "@app.route('/path', methods=['GET', 'POST'])",
      "@app.get_or_post('/path')",
      "@app.route('/path', only=['GET', 'POST'])",
      "@route('/path', allow=['GET', 'POST'])"
    ]
  },
  {
    "q": "Which environment variable is used to enable Flask's debug mode?",
    "c": null,
    "o": [
      "FLASK_DEBUG",
      "FLASK_DEV",
      "DEBUG_MODE",
      "FLASK_ENV_DEBUG"
    ]
  },
  {
    "q": "What is the purpose of Flask’s `abort()` function?",
    "c": null,
    "o": [
      "To stop a request and return an error response",
      "To close a Flask app",
      "To abort a long-running task",
      "To terminate the server thread"
    ]
  },
  {
    "q": "How can you serve static files like CSS in a Flask app?",
    "c": null,
    "o": [
      "By placing them in the `static` directory",
      "By registering a StaticBlueprint",
      "By placing them in a `public_html` folder",
      "By adding them to the `templates` folder"
    ]
  },
  {
    "q": "What is the default folder Flask uses to load HTML templates?",
    "c": null,
    "o": [
      "templates",
      "static",
      "html",
      "views"
    ]
  },
  {
    "q": "What type of data does `request.get_json()` return?",
    "c": null,
    "o": [
      "A Python dictionary",
      "A raw JSON string",
      "A JSON object",
      "A tuple"
    ]
  },
  {
    "q": "Which HTTP status code should be used for unauthorized access?",
    "c": null,
    "o": [
      "401",
      "403",
      "404",
      "500"
    ]
  },
  {
    "q": "How do you handle errors globally in a Flask application?",
    "c": null,
    "o": [
      "Using `@app.errorhandler(code)` decorator",
      "Using `@app.error(code)`",
      "Using `@errorhandler(app)`",
      "Using `app.on_error()`"
    ]
  },
  {
    "q": "How can you create custom CLI commands in a Flask app?",
    "c": null,
    "o": [
      "Using `@app.cli.command()`",
      "Using `@app.shell.command()`",
      "Using `@cli.command(app)`",
      "Using `@flask.cli.custom()`"
    ]
  },
  {
    "q": "What does `Flask(__name__)` use `__name__` for?",
    "c": null,
    "o": [
      "To determine the root path for the application",
      "To display the app name in debug logs",
      "To set the default database name",
      "To generate a session token"
    ]
  },
  {
    "q": "Which method is used to register a blueprint in a Flask app?",
    "c": null,
    "o": [
      "app.register_blueprint()",
      "app.add_blueprint()",
      "app.mount_blueprint()",
      "app.use_blueprint()"
    ]
  },
  {
    "q": "What is the purpose of `g` in Flask?",
    "c": null,
    "o": [
      "It stores data during a single request lifecycle",
      "It provides global access to environment variables",
      "It handles garbage collection",
      "It manages application-wide configuration"
    ]
  },
  {
    "q": "What does the `after_request` decorator in Flask do?",
    "c": null,
    "o": [
      "Modifies the response before it’s sent to the client",
      "Handles tasks after the app shuts down",
      "Logs user requests",
      "Executes functions after server startup"
    ]
  },
  {
    "q": "Which command initializes a Flask app using CLI?",
    "c": null,
    "o": [
      "flask run",
      "python flask start",
      "flask startapp",
      "python app.py run"
    ]
  },
  {
    "q": "Which object provides access to form data in Flask?",
    "c": null,
    "o": [
      "request.form",
      "request.data",
      "request.input",
      "form.request"
    ]
  },
  {
    "q": "What does `session` store in Flask by default?",
    "c": null,
    "o": [
      "Client-side encrypted cookies",
      "Server-side database entries",
      "Temporary in-memory storage",
      "Plain text cookies"
    ]
  },
  {
    "q": "What is `Flask-WTF` commonly used for?",
    "c": null,
    "o": [
      "Handling forms and CSRF protection",
      "Creating WebSocket connections",
      "Managing static file caching",
      "Serving images and files"
    ]
  },
  {
    "q": "What is the effect of setting `app.config['DEBUG'] = True`?",
    "c": null,
    "o": [
      "Enables auto-reloading and detailed error messages",
      "Enables production mode",
      "Disables logging",
      "Caches the templates"
    ]
  },
  {
    "q": "Which Flask extension allows easy integration with SQL databases?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-Database",
      "Flask-SQL",
      "Flask-DBManager"
    ]
  },
  {
    "q": "Which method is used in Flask to create a RESTful resource using Flask-RESTful?",
    "c": null,
    "o": [
      "add_resource()",
      "register_resource()",
      "create_resource()",
      "init_resource()"
    ]
  },
  {
    "q": "What does the `@app.errorhandler` decorator do in Flask?",
    "c": null,
    "o": [
      "Handles specific HTTP error codes with custom responses",
      "Logs all server errors automatically",
      "Ignores all HTTP errors",
      "Restarts the server on exceptions"
    ]
  },
  {
    "q": "In Flask, what does the `request.args` attribute access?",
    "c": null,
    "o": [
      "The query parameters of the URL",
      "The form data sent via POST",
      "The JSON payload",
      "The headers of the request"
    ]
  },
  {
    "q": "Which status code represents a redirect in Flask?",
    "c": null,
    "o": [
      "302",
      "200",
      "404",
      "500"
    ]
  },
  {
    "q": "What does `url_for('index')` return in Flask?",
    "c": null,
    "o": [
      "The URL path to the `index` view function",
      "The base URL of the server",
      "A redirect to the home page",
      "A rendered HTML template"
    ]
  },
  {
    "q": "Which HTTP methods are allowed by default in a Flask route?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "How can you protect a Flask form from CSRF attacks?",
    "c": null,
    "o": [
      "Using Flask-WTF with CSRF protection enabled",
      "Manually escaping all inputs",
      "Running the app in HTTPS only",
      "Disabling form caching"
    ]
  },
  {
    "q": "Which Flask extension helps in structuring large applications?",
    "c": null,
    "o": [
      "Blueprints",
      "Flask-Struct",
      "Flask-Schema",
      "Flask-Build"
    ]
  },
  {
    "q": "How does Flask determine the content type of a response?",
    "c": null,
    "o": [
      "Based on the return type and headers set",
      "Based on the file extension",
      "Using the HTTP method",
      "By reading the first line of the response"
    ]
  },
  {
    "q": "Which object in Flask contains the current application context?",
    "c": null,
    "o": [
      "current_app",
      "g",
      "session",
      "request"
    ]
  },
  {
    "q": "Which Flask extension is used for managing user authentication and sessions?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-User",
      "Flask-Security",
      "Flask-Sessions"
    ]
  },
  {
    "q": "What is the role of the Flask `g` object?",
    "c": null,
    "o": [
      "Stores data during a request for temporary global use",
      "Stores app configurations",
      "Holds global variables for the entire app lifecycle",
      "Provides a way to manage environment variables"
    ]
  },
  {
    "q": "Which Flask function is used to send JSON data in a response?",
    "c": null,
    "o": [
      "jsonify()",
      "render_json()",
      "send_json()",
      "json_response()"
    ]
  },
  {
    "q": "What will `request.form` return in Flask?",
    "c": null,
    "o": [
      "An ImmutableMultiDict containing form parameters",
      "A JSON object with the form data",
      "A dictionary of URL parameters",
      "A string with encoded form values"
    ]
  },
  {
    "q": "Which tool can be used to debug Flask apps in development mode?",
    "c": null,
    "o": [
      "Werkzeug Debugger",
      "Flask-Debug",
      "PyTest Debugger",
      "GDB Flask Plugin"
    ]
  },
  {
    "q": "How can you group related routes and logic in Flask?",
    "c": null,
    "o": [
      "Using Blueprints",
      "Using Route Groups",
      "Using Flask Scopes",
      "Using Modules"
    ]
  },
  {
    "q": "Which command initializes a new database migration repository in Flask-Migrate?",
    "c": null,
    "o": [
      "flask db init",
      "flask db migrate",
      "flask db create",
      "flask migrate init"
    ]
  },
  {
    "q": "In Flask, what happens if you return a dictionary from a route without using `jsonify()`?",
    "c": null,
    "o": [
      "Flask automatically converts it to a JSON response",
      "It raises a TypeError",
      "It renders the dictionary as plain text",
      "It gets rendered as HTML"
    ]
  },
  {
    "q": "Which method is used to shut down a Flask development server programmatically?",
    "c": null,
    "o": [
      "request.environ.get('werkzeug.server.shutdown')()",
      "app.stop()",
      "app.shutdown()",
      "request.shutdown()"
    ]
  },
  {
    "q": "Which command is used to apply database migrations in Flask-Migrate?",
    "c": null,
    "o": [
      "flask db upgrade",
      "flask db apply",
      "flask migrate upgrade",
      "flask db sync"
    ]
  },
  {
    "q": "What is the purpose of `@app.before_request` in Flask?",
    "c": null,
    "o": [
      "To register a function that runs before each request",
      "To initialize the Flask app",
      "To log errors after a request",
      "To serve static files"
    ]
  },
  {
    "q": "Which statement about Flask Blueprints is TRUE?",
    "c": null,
    "o": [
      "They allow modular application design",
      "They replace Flask apps entirely",
      "They only work with REST APIs",
      "They are used for testing only"
    ]
  },
  {
    "q": "What does `Flask-SQLAlchemy`'s `db.Model` provide?",
    "c": null,
    "o": [
      "A base class for ORM models",
      "A connection to MongoDB",
      "A class for session management",
      "A form rendering utility"
    ]
  },
  {
    "q": "How does Flask handle file uploads?",
    "c": null,
    "o": [
      "Using `request.files` and `werkzeug.FileStorage`",
      "Using `request.upload`",
      "By default with no configuration",
      "Through `request.body` parsing"
    ]
  },
  {
    "q": "Which is NOT a valid method to define a Flask route?",
    "c": null,
    "o": [
      "Using `@app.api`",
      "Using `@app.route()`",
      "Using `Blueprint.route()`",
      "Using `add_url_rule()`"
    ]
  },
  {
    "q": "How can you enable CORS in a Flask app?",
    "c": null,
    "o": [
      "Using `flask_cors.CORS(app)`",
      "Using `app.enable_cors()`",
      "By importing `flask_cors` and calling `allow_all()`",
      "Setting `Access-Control-Allow-Origin` in `app.config`"
    ]
  },
  {
    "q": "What does `url_for('static', filename='style.css')` return?",
    "c": null,
    "o": [
      "The URL to the static file `style.css`",
      "The content of the file",
      "A path to the templates folder",
      "A 404 error"
    ]
  },
  {
    "q": "Which Flask decorator lets you register functions after a request is processed?",
    "c": null,
    "o": [
      "@app.teardown_request",
      "@app.route",
      "@app.after_static",
      "@app.view_register"
    ]
  },
  {
    "q": "What environment variable enables Flask debug mode?",
    "c": null,
    "o": [
      "FLASK_DEBUG=1",
      "DEBUG_FLASK=TRUE",
      "APP_DEBUG=True",
      "FLASK_RUN_DEBUG=True"
    ]
  },
  {
    "q": "What does `flask shell` provide?",
    "c": null,
    "o": [
      "An interactive Python shell with app context",
      "A shell to deploy the app",
      "A bash shell inside the Flask app folder",
      "A tool for creating new Flask projects"
    ]
  },
  {
    "q": "Which statement is true about Flask's request context?",
    "c": null,
    "o": [
      "It allows global objects like `request` and `g` to work correctly per request",
      "It persists between requests for the same user",
      "It only exists in debug mode",
      "It is created only during POST requests"
    ]
  },
  {
    "q": "What is the primary use of `g` in Flask?",
    "c": null,
    "o": [
      "To store data temporarily during a request",
      "To get global variables from config",
      "To define application-wide constants",
      "To generate CSRF tokens"
    ]
  },
  {
    "q": "In Flask, what is the use of `@app.errorhandler(404)`?",
    "c": null,
    "o": [
      "To customize the response when a route is not found",
      "To handle form validation errors",
      "To register routes that use GET only",
      "To log all errors to a file"
    ]
  },
  {
    "q": "What does the `session` object in Flask do?",
    "c": null,
    "o": [
      "Stores data for a user between requests using cookies",
      "Saves user preferences permanently",
      "Stores server-side data only",
      "Manages Flask blueprints"
    ]
  },
  {
    "q": "What is the purpose of `flask_migrate`?",
    "c": null,
    "o": [
      "To manage database schema migrations",
      "To deploy the app to production",
      "To move Flask apps between machines",
      "To migrate static files"
    ]
  },
  {
    "q": "Which function in Flask returns a JSON response?",
    "c": null,
    "o": [
      "jsonify()",
      "response.json()",
      "render_json()",
      "send_json()"
    ]
  },
  {
    "q": "What does `app.config['SECRET_KEY']` do?",
    "c": null,
    "o": [
      "Enables secure sessions and CSRF protection",
      "Encrypts passwords automatically",
      "Logs users in",
      "Connects to a remote database"
    ]
  },
  {
    "q": "Which method is used to redirect in Flask?",
    "c": null,
    "o": [
      "redirect()",
      "move_to()",
      "go_to()",
      "forward()"
    ]
  },
  {
    "q": "How does Flask handle different HTTP methods like GET and POST?",
    "c": null,
    "o": [
      "By specifying `methods=['GET', 'POST']` in the route decorator",
      "Flask does not support POST",
      "Only one method is allowed per route",
      "Separate routes must be defined for each method"
    ]
  },
  {
    "q": "Which of the following will start the Flask development server?",
    "c": null,
    "o": [
      "`flask run`",
      "`flask start-server`",
      "`python flask.py`",
      "`run flask`"
    ]
  },
  {
    "q": "What is the purpose of `Flask-Script`?",
    "c": null,
    "o": [
      "To provide support for running external scripts in Flask",
      "To add JavaScript to Flask templates",
      "To manage database queries",
      "To generate RESTful APIs"
    ]
  },
  {
    "q": "Which Flask extension is commonly used for user authentication?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Auth",
      "Flask-Security",
      "Flask-User"
    ]
  },
  {
    "q": "How does Flask detect file uploads from a form?",
    "c": null,
    "o": [
      "Using `request.files['file']`",
      "Using `request.data['file']`",
      "Using `request.json['file']`",
      "Using `request.upload['file']`"
    ]
  },
  {
    "q": "What is the purpose of Flask’s `before_request` decorator?",
    "c": null,
    "o": [
      "To execute a function before every request",
      "To validate form data",
      "To catch exceptions globally",
      "To log errors before routing"
    ]
  },
  {
    "q": "Which file extension is typically used for Flask templates?",
    "c": null,
    "o": [
      ".html",
      ".tpl",
      ".flask",
      ".jinja"
    ]
  },
  {
    "q": "Which of the following commands sets the environment variable for Flask to run in development mode?",
    "c": null,
    "o": [
      "`export FLASK_ENV=development`",
      "`flask set env=development`",
      "`flask dev-mode`",
      "`export FLASK_DEBUG=True`"
    ]
  },
  {
    "q": "What does the `url_for()` function do in Flask?",
    "c": null,
    "o": [
      "Generates a URL to a given endpoint",
      "Returns the current request URL",
      "Resolves the client’s IP address",
      "Encrypts the session cookie"
    ]
  },
  {
    "q": "Which decorator allows you to define a route in a Flask Blueprint?",
    "c": null,
    "o": [
      "`@blueprint.route()`",
      "`@route()`",
      "`@app.route()`",
      "`@bp.route()`"
    ]
  },
  {
    "q": "How do you create a custom CLI command using Flask?",
    "c": null,
    "o": [
      "Use the `@app.cli.command()` decorator",
      "Define it in the config file",
      "Call `flask add-command`",
      "Use `FlaskCommand` class"
    ]
  },
  {
    "q": "In Flask, how do you register a Blueprint to the main app?",
    "c": null,
    "o": [
      "`app.register_blueprint(blueprint)`",
      "`app.attach(blueprint)`",
      "`app.use(blueprint)`",
      "`app.add_route(blueprint)`"
    ]
  },
  {
    "q": "Which HTTP method is used in Flask to update an existing resource?",
    "c": null,
    "o": [
      "PUT",
      "GET",
      "POST",
      "PATCH"
    ]
  },
  {
    "q": "What is the purpose of `Flask-Migrate`?",
    "c": null,
    "o": [
      "To handle SQLAlchemy database migrations using Alembic",
      "To migrate Flask apps between servers",
      "To convert HTML templates into JSON",
      "To synchronize form data with models"
    ]
  },
  {
    "q": "What will `request.get_json()` return if the request does not have JSON content?",
    "c": null,
    "o": [
      "None",
      "An empty dictionary",
      "Throws an exception",
      "An empty string"
    ]
  },
  {
    "q": "How do you define a custom error handler for 404 errors in Flask?",
    "c": null,
    "o": [
      "@app.errorhandler(404)",
      "@app.route('/404')",
      "@app.error(404)",
      "@app.route_error(404)"
    ]
  },
  {
    "q": "What does `session` in Flask store data as?",
    "c": null,
    "o": [
      "Signed cookies",
      "Plain cookies",
      "Server-side files",
      "Memory cache"
    ]
  },
  {
    "q": "How do you access query parameters in a Flask view function?",
    "c": null,
    "o": [
      "request.args.get('param')",
      "request.form.get('param')",
      "request.query.get('param')",
      "request.param('param')"
    ]
  },
  {
    "q": "Which environment variable must be set to tell Flask where the application is located?",
    "c": null,
    "o": [
      "FLASK_APP",
      "APP_PATH",
      "PYTHONPATH",
      "FLASK_PATH"
    ]
  },
  {
    "q": "What is the default port on which a Flask development server runs?",
    "c": null,
    "o": [
      "5000",
      "8000",
      "8080",
      "3000"
    ]
  },
  {
    "q": "Which of the following is true about Flask’s `g` object?",
    "c": null,
    "o": [
      "It stores data during a single request lifecycle",
      "It holds global configuration values",
      "It persists data across sessions",
      "It caches views for fast access"
    ]
  },
  {
    "q": "In Flask, which HTTP status code indicates a successful resource creation?",
    "c": null,
    "o": [
      "201",
      "200",
      "204",
      "202"
    ]
  },
  {
    "q": "Which decorator is used to define a CLI command using Flask’s built-in CLI support?",
    "c": null,
    "o": [
      "@app.cli.command()",
      "@flask.cli.command()",
      "@app.command()",
      "@cli.app_command()"
    ]
  },
  {
    "q": "What does the `url_for()` function do in Flask?",
    "c": null,
    "o": [
      "Generates a URL to the given endpoint",
      "Returns the full request path",
      "Creates a redirect",
      "Generates a new route dynamically"
    ]
  },
  {
    "q": "Which method is used in Flask to abort a request with a specific HTTP status code?",
    "c": null,
    "o": [
      "abort(code)",
      "fail(code)",
      "raise(code)",
      "throw(code)"
    ]
  },
  {
    "q": "What does Flask’s `after_request` decorator do?",
    "c": null,
    "o": [
      "Modifies the response after a request is processed",
      "Runs after the app is fully initialized",
      "Executes a function only on error responses",
      "Executes before a view function"
    ]
  },
  {
    "q": "How can you enable debug mode in a Flask app?",
    "c": null,
    "o": [
      "Set `app.debug = True`",
      "Set `app.env = 'debug'`",
      "Use `flask --debug` in terminal only",
      "Set `app.run(debug=False)`"
    ]
  },
  {
    "q": "In Flask, what does `Blueprint` help you with?",
    "c": null,
    "o": [
      "Modularizing the application into components",
      "Creating REST APIs",
      "Managing database schema",
      "Rendering templates efficiently"
    ]
  },
  {
    "q": "Which Flask extension is used to simplify forms and CSRF protection?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Forms",
      "Flask-CSRF",
      "Flask-SafeForm"
    ]
  },
  {
    "q": "What HTTP status code is typically returned after a successful DELETE request?",
    "c": null,
    "o": [
      "204 No Content",
      "200 OK",
      "202 Accepted",
      "201 Created"
    ]
  },
  {
    "q": "What is the default session lifetime in Flask?",
    "c": null,
    "o": [
      "31 days",
      "7 days",
      "24 hours",
      "1 hour"
    ]
  },
  {
    "q": "Which object is used to store temporary data that can be accessed across multiple functions during a request?",
    "c": null,
    "o": [
      "g",
      "session",
      "current_app",
      "request"
    ]
  },
  {
    "q": "What is the purpose of `app.config['SECRET_KEY']` in a Flask application?",
    "c": null,
    "o": [
      "It secures session cookies and is used for cryptographic components",
      "It defines the admin login password",
      "It stores the database URI",
      "It sets the debug mode"
    ]
  },
  {
    "q": "Which Flask context allows access to `current_app` and `g`?",
    "c": null,
    "o": [
      "Application context",
      "Request context",
      "Session context",
      "Thread context"
    ]
  },
  {
    "q": "What does `@app.before_first_request` do in Flask?",
    "c": null,
    "o": [
      "Registers a function to run only once, before the first request",
      "Registers a function to run before every request",
      "Runs a function before the server starts",
      "Runs a function after every request"
    ]
  },
  {
    "q": "How do you define a custom error handler for a 404 error in Flask?",
    "c": null,
    "o": [
      "@app.errorhandler(404)",
      "@app.route('/404')",
      "@app.exceptionhandler(404)",
      "@app.route_error(404)"
    ]
  },
  {
    "q": "Which Flask object gives you access to HTTP headers and form data?",
    "c": null,
    "o": [
      "request",
      "session",
      "g",
      "response"
    ]
  },
  {
    "q": "How can you enable Cross-Origin Resource Sharing (CORS) in a Flask app?",
    "c": null,
    "o": [
      "Using `flask_cors.CORS(app)`",
      "Setting `app.config['CORS'] = True`",
      "Using `from flask.cors import corsify`",
      "Calling `app.enable_cors()`"
    ]
  },
  {
    "q": "Which method sends a redirect response to a different URL in Flask?",
    "c": null,
    "o": [
      "redirect()",
      "url_for()",
      "abort()",
      "send_file()"
    ]
  },
  {
    "q": "What will `request.args.get('name')` retrieve in a Flask app?",
    "c": null,
    "o": [
      "The value of the 'name' query parameter from the URL",
      "A form field named 'name'",
      "The POST data sent in body",
      "A file uploaded with the name 'name'"
    ]
  },
  {
    "q": "What is the difference between `session` and `g` in Flask?",
    "c": null,
    "o": [
      "`session` persists across requests; `g` is request-scoped only",
      "`session` is global; `g` is thread-local",
      "`g` stores cookies; `session` stores headers",
      "`g` is for global config; `session` is for app settings"
    ]
  },
  {
    "q": "How do you define a dynamic URL parameter in Flask?",
    "c": null,
    "o": [
      "Using angle brackets like `/user/<username>`",
      "Using square brackets like `/user/[username]`",
      "Using curly braces like `/user/{username}`",
      "Using percent signs like `/user/%username%`"
    ]
  },
  {
    "q": "Which command initializes a basic Flask app using the command line?",
    "c": null,
    "o": [
      "export FLASK_APP=app.py",
      "flask create app.py",
      "flask start app.py",
      "python -m flask.app"
    ]
  },
  {
    "q": "What does the `flask run` command do by default?",
    "c": null,
    "o": [
      "Starts a development server on http://127.0.0.1:5000",
      "Compiles and deploys Flask to production",
      "Starts a server on port 8080",
      "Runs the app with debugging disabled"
    ]
  },
  {
    "q": "What is the purpose of `url_for()` in Flask?",
    "c": null,
    "o": [
      "Generates a URL to the given endpoint and arguments",
      "Validates URLs against the routing table",
      "Renders a template using a URL",
      "Forwards request to another route"
    ]
  },
  {
    "q": "In Flask, how can you return a JSON response manually?",
    "c": null,
    "o": [
      "return jsonify(data)",
      "return json(data)",
      "return Response(data, type='json')",
      "return render_json(data)"
    ]
  },
  {
    "q": "Which Flask extension can be used for form handling and CSRF protection?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Forms",
      "Flask-Security",
      "Flask-Captcha"
    ]
  },
  {
    "q": "What happens if you define multiple routes for the same function?",
    "c": null,
    "o": [
      "The function will respond to all defined routes",
      "Only the last route will work",
      "Flask raises an error",
      "Only the first route will be valid"
    ]
  },
  {
    "q": "Which decorator runs a function after each request, regardless of exceptions?",
    "c": null,
    "o": [
      "@app.teardown_request",
      "@app.after_request",
      "@app.teardown_appcontext",
      "@app.post_request"
    ]
  },
  {
    "q": "How do you serve static files in Flask by default?",
    "c": null,
    "o": [
      "By placing them in the `static/` directory",
      "By enabling the static_files config",
      "Through the `/files` endpoint",
      "Using `flask_serve()` method"
    ]
  },
  {
    "q": "What does the `abort(403)` function do in Flask?",
    "c": null,
    "o": [
      "Terminates the request and returns a 403 Forbidden error",
      "Shuts down the server",
      "Restarts the current route",
      "Redirects to the login page"
    ]
  },
  {
    "q": "What is the purpose of `Blueprint` in Flask?",
    "c": null,
    "o": [
      "To organize a Flask app into modular components",
      "To define color schemes for the frontend",
      "To test app routes without starting the server",
      "To override Flask's default routing behavior"
    ]
  },
  {
    "q": "Which method is used to handle form data in Flask?",
    "c": null,
    "o": [
      "request.form",
      "form.data",
      "request.body",
      "input.form"
    ]
  },
  {
    "q": "What is the default HTTP method supported by Flask routes if not specified?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "How do you set a session variable in Flask?",
    "c": null,
    "o": [
      "session['key'] = 'value'",
      "request.session('key', 'value')",
      "app.session.set('key', 'value')",
      "set_session('key', 'value')"
    ]
  },
  {
    "q": "Which object provides information about the current HTTP request in Flask?",
    "c": null,
    "o": [
      "request",
      "response",
      "session",
      "g"
    ]
  },
  {
    "q": "What is the role of `@app.errorhandler(Exception)` in Flask?",
    "c": null,
    "o": [
      "It allows custom error handling for exceptions",
      "It restarts the server on exceptions",
      "It logs errors to the database",
      "It retries failed requests"
    ]
  },
  {
    "q": "How can you redirect a user to another URL in Flask?",
    "c": null,
    "o": [
      "return redirect('/new-url')",
      "return goto('/new-url')",
      "return forward('/new-url')",
      "redirect_to('/new-url')"
    ]
  },
  {
    "q": "Which of the following is used to store flash messages in Flask?",
    "c": null,
    "o": [
      "flash()",
      "alert()",
      "session.flash()",
      "message()"
    ]
  },
  {
    "q": "What is the purpose of the `g` object in Flask?",
    "c": null,
    "o": [
      "Stores data during the request lifecycle",
      "Global app configuration",
      "Database handler",
      "User authentication"
    ]
  },
  {
    "q": "Which HTTP method should be used for updating existing resources in a RESTful Flask API?",
    "c": null,
    "o": [
      "PUT",
      "POST",
      "GET",
      "PATCH"
    ]
  },
  {
    "q": "In Flask, what does `request.args` provide?",
    "c": null,
    "o": [
      "Query parameters from the URL",
      "Form data from POST requests",
      "Uploaded file objects",
      "JSON body content"
    ]
  },
  {
    "q": "Which of the following decorators is used to create a route in Flask?",
    "c": null,
    "o": [
      "@app.route",
      "@app.url",
      "@route.app",
      "@flask.route"
    ]
  },
  {
    "q": "What is the correct way to serve static files in Flask?",
    "c": null,
    "o": [
      "Place them in the 'static' folder and access via '/static/filename'",
      "Place them in 'assets' folder and access via '/files/filename'",
      "Use render_template to load them",
      "Use send_data() to serve them manually"
    ]
  },
  {
    "q": "How do you return JSON data from a Flask route?",
    "c": null,
    "o": [
      "return jsonify({'key': 'value'})",
      "return json({'key': 'value'})",
      "return render_json({'key': 'value'})",
      "return Response({'key': 'value'})"
    ]
  },
  {
    "q": "What is the purpose of Flask Blueprints?",
    "c": null,
    "o": [
      "To organize application components into reusable modules",
      "To generate HTML templates",
      "To define application configuration",
      "To run the Flask development server"
    ]
  },
  {
    "q": "How do you define a route that accepts both GET and POST methods in Flask?",
    "c": null,
    "o": [
      "@app.route('/path', methods=['GET', 'POST'])",
      "@app.route('/path', types=['GET', 'POST'])",
      "@route('/path', method='GET,POST')",
      "@route('/path', actions=['GET', 'POST'])"
    ]
  },
  {
    "q": "Which command is used to run a Flask app with debug mode enabled?",
    "c": null,
    "o": [
      "FLASK_ENV=development flask run",
      "python run.py debug",
      "flask --debug start",
      "flask start --mode=debug"
    ]
  },
  {
    "q": "Which method is used to get JSON data from an incoming POST request in Flask?",
    "c": null,
    "o": [
      "request.get_json()",
      "request.json()",
      "request.post_data()",
      "request.get_json_data()"
    ]
  },
  {
    "q": "What does `url_for('home')` return in Flask?",
    "c": null,
    "o": [
      "The URL path for the 'home' endpoint",
      "A rendered template called 'home.html'",
      "The filename of the view function",
      "A redirect response to the homepage"
    ]
  },
  {
    "q": "What is the Flask extension used for handling forms?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Forms",
      "Flask-Input",
      "WTForms-Flask"
    ]
  },
  {
    "q": "What is the correct way to access cookies in Flask?",
    "c": null,
    "o": [
      "request.cookies.get('name')",
      "session.get_cookie('name')",
      "cookies['name']",
      "request.get_cookie('name')"
    ]
  },
  {
    "q": "Which HTTP status code is returned by default when a Flask route executes successfully without specifying a status?",
    "c": null,
    "o": [
      "200",
      "201",
      "204",
      "302"
    ]
  },
  {
    "q": "What does `app.config['SECRET_KEY']` do in a Flask application?",
    "c": null,
    "o": [
      "It is used for securely signing session cookies",
      "It defines the encryption method for HTTPS",
      "It connects the app to a database",
      "It controls the debug mode"
    ]
  },
  {
    "q": "Which Flask extension is used to interact with databases using ORM?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-DB",
      "Flask-ORM",
      "Flask-Connector"
    ]
  },
  {
    "q": "What is the correct way to create a custom CLI command in Flask?",
    "c": null,
    "o": [
      "@app.cli.command()",
      "@flask.cli.add_command",
      "@app.add_cli()",
      "@cli.custom()"
    ]
  },
  {
    "q": "Which of the following is true about Flask `before_request`?",
    "c": null,
    "o": [
      "It runs before every request, regardless of route",
      "It runs only if the request is a POST",
      "It runs only if the request is successful",
      "It modifies the response before it is sent"
    ]
  },
  {
    "q": "How do you create a RESTful API in Flask?",
    "c": null,
    "o": [
      "By using Flask-RESTful or manually defining route methods like GET, POST",
      "By importing Flask-API module",
      "Using only GET methods in Flask routes",
      "By converting all views to class-based views"
    ]
  },
  {
    "q": "What does `request.args` contain in a Flask app?",
    "c": null,
    "o": [
      "Query parameters from the URL",
      "Form data from POST requests",
      "JSON payloads",
      "Cookies"
    ]
  },
  {
    "q": "In Flask, how do you redirect a user to another route?",
    "c": null,
    "o": [
      "return redirect(url_for('route_name'))",
      "return render_template('route_name')",
      "return redirect('route_name.html')",
      "return go_to('route_name')"
    ]
  },
  {
    "q": "Which method is used to handle 404 errors in Flask?",
    "c": null,
    "o": [
      "@app.errorhandler(404)",
      "@app.route('/404')",
      "@app.handle_404",
      "@errorhandler(404)"
    ]
  },
  {
    "q": "How do you pass dynamic values in Flask route URLs?",
    "c": null,
    "o": [
      "@app.route('/user/<username>')",
      "@app.route('/user?name=<username>')",
      "@app.route('/user/#{username}')",
      "@app.route('/user/<string:username>')"
    ]
  },
  {
    "q": "What will `url_for('index', _external=True)` return in Flask?",
    "c": null,
    "o": [
      "An absolute URL including the scheme and domain",
      "A relative URL path only",
      "The name of the view function",
      "A redirect response"
    ]
  },
  {
    "q": "Which Flask extension allows real-time bi-directional communication between the client and server?",
    "c": null,
    "o": [
      "Flask-SocketIO",
      "Flask-SSE",
      "Flask-Babel",
      "Flask-Celery"
    ]
  },
  {
    "q": "What does `request.get_json()` return if the request content-type is not application/json?",
    "c": null,
    "o": [
      "None",
      "An empty dictionary",
      "A JSON string",
      "Raises a ValueError"
    ]
  },
  {
    "q": "In Flask, which function helps avoid hardcoding URLs in templates?",
    "c": null,
    "o": [
      "url_for()",
      "redirect()",
      "render_template()",
      "link_to()"
    ]
  },
  {
    "q": "What does the `Flask.g` object represent?",
    "c": null,
    "o": [
      "A global object used for storing data during a request",
      "The application configuration settings",
      "The global HTTP headers",
      "A logger instance"
    ]
  },
  {
    "q": "Which of the following statements about Flask's `@app.after_request` is true?",
    "c": null,
    "o": [
      "It is called after the response is constructed and can modify it",
      "It is used to catch application errors",
      "It defines headers for incoming requests",
      "It runs before every request"
    ]
  },
  {
    "q": "What is the default session backend used by Flask?",
    "c": null,
    "o": [
      "Client-side, cookie-based session",
      "Server-side database session",
      "Redis-based session",
      "In-memory cache session"
    ]
  },
  {
    "q": "Which statement about Flask blueprints is correct?",
    "c": null,
    "o": [
      "They allow modularizing the application into reusable components",
      "They replace Flask routes entirely",
      "They are used only for static files",
      "They are required to use Flask extensions"
    ]
  },
  {
    "q": "How do you register a Flask blueprint to the main application?",
    "c": null,
    "o": [
      "app.register_blueprint(blueprint)",
      "app.attach(blueprint)",
      "blueprint.bind(app)",
      "app.mount(blueprint)"
    ]
  },
  {
    "q": "Which command initializes the Flask development server in debug mode?",
    "c": null,
    "o": [
      "FLASK_ENV=development flask run",
      "python app.py",
      "flask run --release",
      "flask --debug app.py"
    ]
  },
  {
    "q": "Which method in Flask-SQLAlchemy is used to create all tables defined by models?",
    "c": null,
    "o": [
      "db.create_all()",
      "db.build_all()",
      "db.init_all()",
      "db.generate_all()"
    ]
  },
  {
    "q": "In Flask, what is the purpose of the `@app.teardown_appcontext` decorator?",
    "c": null,
    "o": [
      "To release resources after a request ends",
      "To run background tasks after the app starts",
      "To render a response after routing",
      "To handle errors during application context loading"
    ]
  },
  {
    "q": "Which environment variable defines the Flask application to run?",
    "c": null,
    "o": [
      "FLASK_APP",
      "FLASK_FILE",
      "APP_NAME",
      "FLASK_MAIN"
    ]
  },
  {
    "q": "What is the main benefit of using Flask-RESTful?",
    "c": null,
    "o": [
      "It simplifies the creation of RESTful APIs",
      "It enhances WebSocket support",
      "It adds ORM capabilities to Flask",
      "It provides built-in templates for APIs"
    ]
  },
  {
    "q": "Which command in Flask CLI is used to open a shell context with app and database?",
    "c": null,
    "o": [
      "flask shell",
      "flask open",
      "flask console",
      "flask terminal"
    ]
  },
  {
    "q": "Which of the following is NOT true about Flask `abort()`?",
    "c": null,
    "o": [
      "It can only raise HTTP 404 errors",
      "It stops request processing",
      "It can be used to raise HTTP 401, 403, etc.",
      "It generates an HTTPException"
    ]
  },
  {
    "q": "What does Flask's `request.view_args` contain?",
    "c": null,
    "o": [
      "Arguments passed from the URL route",
      "Query parameters",
      "Form fields",
      "Uploaded files"
    ]
  },
  {
    "q": "How can you store a secret key for Flask securely?",
    "c": null,
    "o": [
      "Using environment variables",
      "Hardcoding it in the app",
      "Storing in plain text in the template",
      "Sending it from the client"
    ]
  },
  {
    "q": "What does setting `SESSION_PERMANENT = False` do in Flask?",
    "c": null,
    "o": [
      "The session expires when the browser is closed",
      "The session lasts for 31 days",
      "The session requires manual deletion",
      "The session is stored in a database"
    ]
  },
  {
    "q": "Which decorator is used to define a route in a Flask blueprint?",
    "c": null,
    "o": [
      "@blueprint.route",
      "@app.route",
      "@flask.route",
      "@route.blueprint"
    ]
  },
  {
    "q": "What does the `url_for()` function do in Flask?",
    "c": null,
    "o": [
      "Generates a URL to a given endpoint with arguments",
      "Redirects to a specific view function",
      "Fetches a URL from an external API",
      "Validates the URL structure"
    ]
  },
  {
    "q": "How does Flask differentiate between GET and POST in a route function?",
    "c": null,
    "o": [
      "By checking `request.method`",
      "By using `request.type`",
      "By matching different route paths",
      "By default, it only supports POST"
    ]
  },
  {
    "q": "Which Flask extension is used for handling user sessions and logins?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Security",
      "Flask-OAuth",
      "Flask-Session"
    ]
  },
  {
    "q": "What is the purpose of `g` in Flask?",
    "c": null,
    "o": [
      "Stores and shares data during a single request",
      "Acts as a global variable for all users",
      "Contains application-wide configuration",
      "Used for template rendering only"
    ]
  },
  {
    "q": "In Flask, what is the correct way to register a blueprint?",
    "c": null,
    "o": [
      "app.register_blueprint(my_blueprint)",
      "app.use(my_blueprint)",
      "my_blueprint.register(app)",
      "app.blueprint(my_blueprint)"
    ]
  },
  {
    "q": "How can you limit the rate of requests to a route in Flask?",
    "c": null,
    "o": [
      "Use Flask-Limiter extension",
      "Set request.timeout in the config",
      "Use Flask-Block",
      "Override `request.max_rate`"
    ]
  },
  {
    "q": "What is the use of `@app.before_request` decorator in Flask?",
    "c": null,
    "o": [
      "Runs a function before every request",
      "Runs after the request is processed",
      "Handles internal server errors",
      "Executes only during application startup"
    ]
  },
  {
    "q": "Which method is used to make a redirect in Flask?",
    "c": null,
    "o": [
      "redirect()",
      "re_route()",
      "url_redirect()",
      "make_redirect()"
    ]
  },
  {
    "q": "Which of the following Flask extensions provides RESTful API features?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-Routes",
      "Flask-API",
      "Flask-Resource"
    ]
  },
  {
    "q": "Which method should you override to customize JSON responses in Flask?",
    "c": null,
    "o": [
      "Flask.json_encoder",
      "Flask.response_generator",
      "Flask.to_json",
      "Flask.data_dumper"
    ]
  },
  {
    "q": "How do you enable Cross-Origin Resource Sharing (CORS) in a Flask app?",
    "c": null,
    "o": [
      "Using the Flask-CORS extension",
      "By setting CORS headers manually in the HTML",
      "CORS is enabled by default in Flask",
      "Adding `Access-Control` in app.config"
    ]
  },
  {
    "q": "Which environment variable is commonly used to set the Flask app for running?",
    "c": null,
    "o": [
      "FLASK_APP",
      "FLASK_ENV",
      "APP_FLASK",
      "RUN_FLASK"
    ]
  },
  {
    "q": "What is the role of `@app.teardown_appcontext` in Flask?",
    "c": null,
    "o": [
      "Executes code after each request context is torn down",
      "Cleans up memory leaks in the system",
      "Handles HTTP teardown errors",
      "Executes only when the server shuts down"
    ]
  },
  {
    "q": "Which status code is returned when `abort(404)` is called in Flask?",
    "c": null,
    "o": [
      "404",
      "400",
      "403",
      "500"
    ]
  },
  {
    "q": "What is the purpose of Flask’s `@app.after_request` decorator?",
    "c": null,
    "o": [
      "To modify the response before it is sent",
      "To log incoming requests",
      "To add CORS headers",
      "To prevent a route from executing"
    ]
  },
  {
    "q": "Which Flask extension supports JSON Web Token (JWT) authentication?",
    "c": null,
    "o": [
      "Flask-JWT-Extended",
      "Flask-Security",
      "Flask-OAuthlib",
      "Flask-Login"
    ]
  },
  {
    "q": "How do you run a Flask app in production?",
    "c": null,
    "o": [
      "Using a WSGI server like Gunicorn or uWSGI",
      "Using Flask's built-in server with debug=False",
      "Using the `flask run` command directly",
      "By packaging it as a Windows executable"
    ]
  },
  {
    "q": "In Flask, how do you handle 404 errors with a custom page?",
    "c": null,
    "o": [
      "Use `@app.errorhandler(404)`",
      "Override the `abort` function",
      "Create a `404.html` in root directory",
      "Set `app.config['ERROR_404'] = True`"
    ]
  },
  {
    "q": "What does the `request.get_json()` method do?",
    "c": null,
    "o": [
      "Parses and returns JSON data from the request body",
      "Returns query parameters",
      "Retrieves session JSON data",
      "Returns form data encoded as JSON"
    ]
  },
  {
    "q": "How do you make a Flask route accept both GET and POST methods?",
    "c": null,
    "o": [
      "@app.route('/path', methods=['GET', 'POST'])",
      "@app.route('/path', method='GET,POST')",
      "@app.route('/path', allow='all')",
      "@app.route('/path', accept_methods='both')"
    ]
  },
  {
    "q": "What is the purpose of Flask’s `g` object?",
    "c": null,
    "o": [
      "To store and share data during a single request",
      "To store global variables across all requests",
      "To hold configuration variables",
      "To manage user session data"
    ]
  },
  {
    "q": "How can you restrict access to a route to only logged-in users using Flask-Login?",
    "c": null,
    "o": [
      "By using the `@login_required` decorator",
      "By manually checking `current_user.is_authenticated` in every route",
      "By using `@authenticated_only`",
      "By setting `require_login=True` in route"
    ]
  },
  {
    "q": "Which method is used to serve static files in Flask by default?",
    "c": null,
    "o": [
      "Flask automatically serves from the `static/` folder",
      "Using `send_file` for each file",
      "By adding routes manually for static content",
      "Flask does not support static files"
    ]
  },
  {
    "q": "What is the correct way to implement a custom CLI command in Flask?",
    "c": null,
    "o": [
      "Using the `@app.cli.command()` decorator",
      "Editing the `flask` command directly",
      "Using `flask_script` and `manage.py`",
      "Calling `os.system('command')` in the app"
    ]
  },
  {
    "q": "What does `Flask(__name__)` do?",
    "c": null,
    "o": [
      "Creates a Flask application using the current module name",
      "Initializes the database",
      "Starts the development server",
      "Registers all routes automatically"
    ]
  },
  {
    "q": "Which HTTP method is not allowed by default for Flask routes?",
    "c": null,
    "o": [
      "PUT",
      "GET",
      "POST",
      "HEAD"
    ]
  },
  {
    "q": "How do you access the current session in Flask?",
    "c": null,
    "o": [
      "Using the `session` dictionary",
      "Through `request.session`",
      "Using `g.session`",
      "Calling `get_session()`"
    ]
  },
  {
    "q": "Which file does Flask look for as the entry point when using `flask run`?",
    "c": null,
    "o": [
      "The file set in the FLASK_APP environment variable",
      "Any file named `flask_app.py`",
      "`app.py` by default, no matter what",
      "The main file inside the templates directory"
    ]
  },
  {
    "q": "Which of the following is true about Flask blueprints?",
    "c": null,
    "o": [
      "They help organize related routes and functionality into reusable modules",
      "They automatically register routes globally",
      "They are used only for testing",
      "They store app configuration"
    ]
  },
  {
    "q": "Which Flask extension would you use to validate form inputs easily?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Form",
      "Flask-Validator",
      "WTForms-Plus"
    ]
  },
  {
    "q": "What is the purpose of `@app.before_request` in Flask?",
    "c": null,
    "o": [
      "To run a function before each request is processed",
      "To register a route",
      "To run a function after a request is processed",
      "To define middleware for static files"
    ]
  },
  {
    "q": "How can you create a custom error page for a 404 error in Flask?",
    "c": null,
    "o": [
      "Use `@app.errorhandler(404)` to define a custom response",
      "Set `app.config['404_PAGE']` to a template",
      "Use `@app.route('/404')`",
      "Override the `request.abort(404)` function"
    ]
  },
  {
    "q": "What is the purpose of the `url_for()` function in Flask?",
    "c": null,
    "o": [
      "To build a URL to a specific function or route",
      "To parse URL parameters",
      "To handle external redirects",
      "To verify session tokens"
    ]
  },
  {
    "q": "What does the `request.args` object in Flask contain?",
    "c": null,
    "o": [
      "The parsed URL query parameters (GET data)",
      "The parsed form data (POST data)",
      "The request headers",
      "The JSON payload of the request"
    ]
  },
  {
    "q": "Which Flask component helps prevent CSRF attacks in forms?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Login",
      "Flask-SQLAlchemy",
      "Flask-Session"
    ]
  },
  {
    "q": "How can you return a JSON response in Flask?",
    "c": null,
    "o": [
      "Using `flask.jsonify()`",
      "Using `str(dict)`",
      "Returning a Python dictionary directly",
      "Using `render_template()`"
    ]
  },
  {
    "q": "What happens if a Flask route returns a dictionary instead of a response object or string?",
    "c": null,
    "o": [
      "Flask converts it into a JSON response automatically",
      "It raises a TypeError",
      "It sends the dictionary as plain text",
      "It is ignored"
    ]
  },
  {
    "q": "In Flask, how can you define route variables like `<int:id>`?",
    "c": null,
    "o": [
      "To capture and convert URL parts to a specific type like int",
      "To indicate optional parameters",
      "To restrict access to the route",
      "To bind function names with routes"
    ]
  },
  {
    "q": "How do you enable debug mode in Flask for development?",
    "c": null,
    "o": [
      "Set `FLASK_ENV=development` and `FLASK_DEBUG=1`",
      "Set `FLASK_MODE=debug`",
      "Set `app.config['DEBUG_MODE'] = True`",
      "Use `@app.debug(True)`"
    ]
  },
  {
    "q": "Which environment variable is used to specify the entry point of a Flask app?",
    "c": null,
    "o": [
      "FLASK_APP",
      "FLASK_ENTRY",
      "APP_START",
      "FLASK_RUN"
    ]
  },
  {
    "q": "What does Flask's `g` object provide?",
    "c": null,
    "o": [
      "A place to store and share data during a single request",
      "A global variable for templates",
      "A general-purpose cache",
      "A built-in database session"
    ]
  },
  {
    "q": "How can you handle file uploads in Flask?",
    "c": null,
    "o": [
      "Use `request.files` and save the file using `.save()`",
      "Use `request.body` and write to a file manually",
      "Use `request.get_json()` to decode the file",
      "Files must be uploaded using sockets, not HTTP"
    ]
  },
  {
    "q": "Which method in Flask is used to redirect the user to another route?",
    "c": null,
    "o": [
      "redirect()",
      "forward()",
      "transfer()",
      "reroute()"
    ]
  },
  {
    "q": "Which tool can be used to manage Flask database migrations?",
    "c": null,
    "o": [
      "Flask-Migrate",
      "Flask-SQLTools",
      "Alembic-Core",
      "Flask-Migration"
    ]
  },
  {
    "q": "What is the function of `@app.teardown_appcontext`?",
    "c": null,
    "o": [
      "To clean up resources after each request context ends",
      "To log errors on app shutdown",
      "To define 404 pages",
      "To handle static file cleanup"
    ]
  },
  {
    "q": "What type of sessions does Flask use by default?",
    "c": null,
    "o": [
      "Client-side (signed cookies)",
      "Server-side (in memory)",
      "Database-backed",
      "JWT tokens"
    ]
  },
  {
    "q": "How does Flask differentiate between GET and POST methods for the same route?",
    "c": null,
    "o": [
      "By specifying `methods=['GET', 'POST']` in the route decorator",
      "It creates different routes automatically",
      "It inspects the template used",
      "It uses different port numbers"
    ]
  },
  {
    "q": "What is the use of `flask.abort()` function?",
    "c": null,
    "o": [
      "To raise an HTTPException with a specific status code",
      "To terminate the server",
      "To stop rendering a template midway",
      "To clear the request queue"
    ]
  },
  {
    "q": "Which of the following is true about `request.form`?",
    "c": null,
    "o": [
      "It is used to access data submitted in POST requests using form fields",
      "It parses URL parameters",
      "It contains JSON data",
      "It returns the raw request body"
    ]
  },
  {
    "q": "What is the purpose of the Flask `Blueprint` feature?",
    "c": null,
    "o": [
      "To organize routes and views into reusable components",
      "To enable database indexing",
      "To apply styles to Jinja templates",
      "To manage environment variables"
    ]
  },
  {
    "q": "What happens if you don’t set a secret key in a Flask application using sessions?",
    "c": null,
    "o": [
      "Session data cannot be securely signed and will raise an error",
      "The session will be stored in plain text in memory",
      "Flask will auto-generate a secure key",
      "Sessions will use server-side storage by default"
    ]
  },
  {
    "q": "Which method is used to register a `Blueprint` in a Flask app?",
    "c": null,
    "o": [
      "app.register_blueprint()",
      "app.include_blueprint()",
      "blueprint.add_to_app()",
      "app.mount()"
    ]
  },
  {
    "q": "How can you access query parameters in a Flask route?",
    "c": null,
    "o": [
      "Using `request.args.get('param')`",
      "Using `request.query('param')`",
      "Using `request.input('param')`",
      "Using `request.get('param')`"
    ]
  },
  {
    "q": "Which Flask extension would you use for form handling and validation?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Validator",
      "Flask-Forms",
      "Flask-Check"
    ]
  },
  {
    "q": "What does setting `debug=True` in Flask do?",
    "c": null,
    "o": [
      "Enables live reloading and shows detailed error pages",
      "Improves performance for production",
      "Disables error logging",
      "Disables static files"
    ]
  },
  {
    "q": "Which attribute lets Flask know a form was submitted via POST?",
    "c": null,
    "o": [
      "`request.method == 'POST'`",
      "`request.is_post`",
      "`form.submitted()`",
      "`request.submit == True`"
    ]
  },
  {
    "q": "How does Flask handle multiple requests in development mode?",
    "c": null,
    "o": [
      "Single-threaded, one request at a time",
      "Multithreaded, using Gunicorn",
      "Uses async/await internally",
      "Delegates to Apache by default"
    ]
  },
  {
    "q": "Which Flask extension would you typically use to protect routes with login?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Security",
      "Flask-Session",
      "Flask-Credentials"
    ]
  },
  {
    "q": "What type of response does Flask’s `jsonify()` return?",
    "c": null,
    "o": [
      "A `Response` object with `application/json` MIME type",
      "A plain dictionary",
      "A `render_template` wrapper",
      "An HTTP redirect"
    ]
  },
  {
    "q": "How do you add a custom error handler in Flask (e.g. for 404 errors)?",
    "c": null,
    "o": [
      "@app.errorhandler(404)",
      "@app.catch(404)",
      "@app.handle_error(404)",
      "@app.route_error(404)"
    ]
  },
  {
    "q": "Which command adds a new custom command to the Flask CLI?",
    "c": null,
    "o": [
      "@app.cli.command()",
      "@app.command()",
      "flask.add_command()",
      "app.cli.add_custom()"
    ]
  },
  {
    "q": "What does `flask shell` do by default?",
    "c": null,
    "o": [
      "Opens an interactive Python shell with app context loaded",
      "Runs the Flask server in debug mode",
      "Launches a Bash terminal inside the project directory",
      "Starts the Flask app in production mode"
    ]
  },
  {
    "q": "How can you stream a large response in Flask without loading it all into memory?",
    "c": null,
    "o": [
      "Use `Response` with a generator",
      "Use `render_template()`",
      "Use `jsonify()`",
      "Set `stream=True` in route decorator"
    ]
  },
  {
    "q": "Which of the following best explains Flask's application context?",
    "c": null,
    "o": [
      "A temporary environment to store `g`, `current_app`, etc.",
      "A session object for user data",
      "A separate thread pool for handling requests",
      "The global scope of all Flask apps"
    ]
  },
  {
    "q": "What does `flask run --reload` do?",
    "c": null,
    "o": [
      "Automatically restarts the server on code changes",
      "Enables multi-threading in the server",
      "Starts the app in production mode",
      "Clears all application caches"
    ]
  },
  {
    "q": "What Flask feature is used to execute code when a signal like `template_rendered` is triggered?",
    "c": null,
    "o": [
      "Flask signals",
      "Flask hooks",
      "Flask events",
      "Flask bindings"
    ]
  },
  {
    "q": "How can you test a Flask app without starting the server?",
    "c": null,
    "o": [
      "Use Flask’s `test_client()`",
      "Run with `flask test-mode`",
      "Start with `app.run(test=True)`",
      "Call `app.testing()`"
    ]
  },
  {
    "q": "Which Flask signal is emitted after a request is finished?",
    "c": null,
    "o": [
      "request_finished",
      "after_request",
      "teardown_request",
      "response_closed"
    ]
  },
  {
    "q": "How do you share data globally within a single request in Flask?",
    "c": null,
    "o": [
      "Using `flask.g`",
      "Using `session`",
      "Using `current_app.config`",
      "Using `request.global_data`"
    ]
  },
  {
    "q": "How can you register multiple Flask applications in the same WSGI server?",
    "c": null,
    "o": [
      "Use `DispatcherMiddleware` from `werkzeug.middleware.dispatcher`",
      "Flask does not support this feature",
      "Use `app.mount()`",
      "Use multiple ports for each app"
    ]
  },
  {
    "q": "What is the correct way to define an async route in Flask 2.0+?",
    "c": null,
    "o": [
      "Use `async def` in the view function",
      "Enable async mode in `app.config`",
      "Use `@app.async_route()` decorator",
      "Flask does not support async routes"
    ]
  },
  {
    "q": "What is the main purpose of using Flask Blueprints?",
    "c": null,
    "o": [
      "To organize an application into reusable components",
      "To define CSS and static files",
      "To automatically generate database schemas",
      "To speed up template rendering"
    ]
  },
  {
    "q": "Which of the following is true about `before_first_request()`?",
    "c": null,
    "o": [
      "It runs once per server process before the first request",
      "It runs before every request",
      "It runs only during testing",
      "It runs before the app starts"
    ]
  },
  {
    "q": "Which key in `app.config` sets the folder for static files?",
    "c": null,
    "o": [
      "STATIC_FOLDER",
      "STATIC_PATH",
      "APP_STATIC",
      "FLASK_STATIC_ROOT"
    ]
  },
  {
    "q": "Which method allows cleaning up resources after each request, even on exceptions?",
    "c": null,
    "o": [
      "@app.teardown_request",
      "@app.cleanup",
      "@app.after_response",
      "@app.before_teardown"
    ]
  },
  {
    "q": "What Flask feature lets you intercept and modify incoming requests?",
    "c": null,
    "o": [
      "Middleware",
      "Preprocessors",
      "Hooks",
      "Static proxies"
    ]
  },
  {
    "q": "Which Flask object holds temporary data for the active request?",
    "c": null,
    "o": [
      "flask.g",
      "session",
      "request.cache",
      "flask.temp"
    ]
  },
  {
    "q": "Which Flask extension helps manage large file uploads efficiently?",
    "c": null,
    "o": [
      "Flask-Uploads",
      "Flask-SQLAlchemy",
      "Flask-Resumable",
      "Flask-SocketIO"
    ]
  },
  {
    "q": "What is the default maximum size of uploaded files in Flask?",
    "c": null,
    "o": [
      "16MB",
      "4MB",
      "1MB",
      "No limit"
    ]
  },
  {
    "q": "Which of the following is the proper way to mount a Blueprint?",
    "c": null,
    "o": [
      "app.register_blueprint(bp, url_prefix='/api')",
      "app.mount(bp)",
      "bp.init_app(app)",
      "app.attach(bp, path='/api')"
    ]
  },
  {
    "q": "Which decorator in Flask is used to register a function that runs when the application context is popped?",
    "c": null,
    "o": [
      "@app.teardown_appcontext",
      "@app.before_first_request",
      "@app.before_request",
      "@app.teardown_request"
    ]
  },
  {
    "q": "In Flask, which of the following best describes the role of the `current_app` proxy?",
    "c": null,
    "o": [
      "It refers to the active Flask application instance during a request",
      "It manages user sessions",
      "It holds global configuration variables",
      "It stores data for background tasks"
    ]
  },
  {
    "q": "How can you ensure Flask loads environment variables from a `.env` file automatically?",
    "c": null,
    "o": [
      "By installing `python-dotenv` and setting `FLASK_ENV`",
      "By adding `.env` to `app.config`",
      "By importing `.env` directly in your app",
      "By calling `load_env()` inside the app"
    ]
  },
  {
    "q": "What is the purpose of the `@app.after_request` decorator in Flask?",
    "c": null,
    "o": [
      "To modify the response before it is sent to the client",
      "To execute code before the request",
      "To handle exceptions",
      "To configure the application"
    ]
  },
  {
    "q": "Which Flask feature allows delayed evaluation of URL generation until runtime in templates?",
    "c": null,
    "o": [
      "The `url_for` function used inside Jinja2 templates",
      "Static file serving",
      "The `redirect` function",
      "Session cookies"
    ]
  },
  {
    "q": "How do you protect a Flask route against Cross-Site Request Forgery (CSRF)?",
    "c": null,
    "o": [
      "Using Flask-WTF’s CSRF protection",
      "Using Flask-Login",
      "By setting secure cookies",
      "By enabling HTTPS only"
    ]
  },
  {
    "q": "What is the main purpose of the `Flask-Login` extension?",
    "c": null,
    "o": [
      "To manage user session and authentication",
      "To provide database ORM",
      "To handle form validation",
      "To create RESTful APIs"
    ]
  },
  {
    "q": "How can you test Flask routes in a unit test without running the server?",
    "c": null,
    "o": [
      "Using the Flask test client (`app.test_client()`) to simulate requests",
      "By running the server in a separate thread",
      "Using Selenium for browser automation",
      "Mocking the HTTP requests externally"
    ]
  },
  {
    "q": "What Flask object is used to store configuration values?",
    "c": null,
    "o": [
      "app.config",
      "app.settings",
      "flask.configs",
      "app.environment"
    ]
  },
  {
    "q": "Which method do you use to manually push the application context in Flask?",
    "c": null,
    "o": [
      "app.app_context().push()",
      "app.push_context()",
      "app.context_push()",
      "flask.push_app_context()"
    ]
  },
  {
    "q": "What is the primary use of Blueprints in Flask?",
    "c": null,
    "o": [
      "To organize related views and code into reusable components",
      "To manage database migrations",
      "To deploy multiple apps on a server",
      "To monitor background tasks"
    ]
  },
  {
    "q": "Which method is used to register a Flask Blueprint with an application?",
    "c": null,
    "o": [
      "app.register_blueprint()",
      "app.attach_blueprint()",
      "app.add_blueprint()",
      "app.include()"
    ]
  },
  {
    "q": "In an application factory pattern, which of the following is typically avoided?",
    "c": null,
    "o": [
      "Creating a global Flask app instance",
      "Deferring app creation to a function",
      "Registering blueprints inside a factory",
      "Configuring app via environment variables"
    ]
  },
  {
    "q": "Which Flask extension provides built-in support for signals?",
    "c": null,
    "o": [
      "Blender",
      "Flask-SQLAlchemy",
      "Flask-Mail",
      "Flask-SocketIO"
    ]
  },
  {
    "q": "What is the purpose of `flask.g`?",
    "c": null,
    "o": [
      "To store request-level global variables",
      "To hold app configuration",
      "To register routes",
      "To define environment variables"
    ]
  },
  {
    "q": "What does the `request.is_json` property in Flask do?",
    "c": null,
    "o": [
      "Checks if the request’s `Content-Type` is JSON",
      "Parses the request body to JSON",
      "Validates JSON schema",
      "Returns True if response is JSON"
    ]
  },
  {
    "q": "In Flask, what does `abort(404)` do?",
    "c": null,
    "o": [
      "Immediately stops request handling and returns a 404 error",
      "Redirects to 404.html",
      "Logs the error but continues processing",
      "Returns a JSON response with status 404"
    ]
  },
  {
    "q": "Which of the following decorators would best apply to register a custom error handler for 500 errors?",
    "c": null,
    "o": [
      "@app.errorhandler(500)",
      "@app.route_error(500)",
      "@app.on_error(500)",
      "@app.catch(500)"
    ]
  },
  {
    "q": "How do you enable debug mode in Flask programmatically?",
    "c": null,
    "o": [
      "app.debug = True",
      "app.set_debug(True)",
      "app.run(debug=True, port=5000)",
      "app.start(debug_mode=True)"
    ]
  },
  {
    "q": "Which HTTP method is used by HTML forms by default if not specified?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "PATCH"
    ]
  },
  {
    "q": "What is the purpose of `@app.before_request` in Flask?",
    "c": null,
    "o": [
      "To run a function before each request is processed",
      "To register a route",
      "To serve static files",
      "To initialize the database"
    ]
  },
  {
    "q": "Which of the following is used to create a streaming response in Flask?",
    "c": null,
    "o": [
      "Response(generator_function())",
      "stream_response()",
      "Flask.send_stream()",
      "render_template_stream()"
    ]
  },
  {
    "q": "In Flask, what does `@app.teardown_appcontext` handle?",
    "c": null,
    "o": [
      "Runs after the response is returned and context is torn down",
      "Initializes app context",
      "Validates routes after startup",
      "Triggers before server shutdown"
    ]
  },
  {
    "q": "Which Jinja2 syntax is used to include another template within a base template?",
    "c": null,
    "o": [
      "{% include 'header.html' %}",
      "{{ import 'header.html' }}",
      "{% import 'header.html' %}",
      "{% attach 'header.html' %}"
    ]
  },
  {
    "q": "What does `secure_filename(filename)` from `werkzeug.utils` do?",
    "c": null,
    "o": [
      "Sanitizes filenames for safe storage on a server",
      "Encrypts the file before saving",
      "Uploads file to the cloud",
      "Creates a hashed name for the file"
    ]
  },
  {
    "q": "How does Flask detect whether the request came from a secure HTTPS connection?",
    "c": null,
    "o": [
      "`request.is_secure` returns True",
      "`request.url.startswith('https')`",
      "`request.protocol == 'https'`",
      "`request.secure()`"
    ]
  },
  {
    "q": "In Flask, which object allows storing user-specific data during a request?",
    "c": null,
    "o": [
      "`g`",
      "`session`",
      "`request`",
      "`config`"
    ]
  },
  {
    "q": "What is the primary use of Flask’s `flash()` function?",
    "c": null,
    "o": [
      "To send temporary messages to the user",
      "To store cookies",
      "To redirect users after login",
      "To terminate sessions"
    ]
  },
  {
    "q": "What is the effect of setting `SESSION_COOKIE_HTTPONLY = True` in Flask?",
    "c": null,
    "o": [
      "Prevents JavaScript access to session cookies",
      "Encrypts the session cookies",
      "Forces session to expire after 5 minutes",
      "Logs out users on browser close"
    ]
  },
  {
    "q": "Which of the following ensures the user is redirected to a secure HTTPS URL?",
    "c": null,
    "o": [
      "Using `Flask-Talisman` extension",
      "Setting `SECURE_REDIRECTS = True`",
      "Adding SSL middleware manually",
      "Enabling debug mode"
    ]
  },
  {
    "q": "Which command initializes a Flask application using the Flask CLI?",
    "c": null,
    "o": [
      "flask run",
      "flask init",
      "python app.py",
      "flask start"
    ]
  },
  {
    "q": "What is the purpose of the Flask `config.from_pyfile()` method?",
    "c": null,
    "o": [
      "Loads configuration variables from a Python file",
      "Parses YAML configuration",
      "Connects to the database",
      "Sets environment variables"
    ]
  },
  {
    "q": "What is returned when `url_for('index')` is called in Flask?",
    "c": null,
    "o": [
      "The URL path for the `index` endpoint",
      "The full HTTP response",
      "The function object of index",
      "None"
    ]
  },
  {
    "q": "Which method is used to test a Flask route without starting the server?",
    "c": null,
    "o": [
      "app.test_client()",
      "app.run(debug=True)",
      "request.send()",
      "test_request_context()"
    ]
  },
  {
    "q": "What is the main purpose of Flask Blueprints?",
    "c": null,
    "o": [
      "To organize a Flask app into reusable components",
      "To secure routes",
      "To handle HTTP methods",
      "To define error handlers"
    ]
  },
  {
    "q": "Which HTTP status code represents 'Created' in a Flask response?",
    "c": null,
    "o": [
      "201",
      "200",
      "202",
      "204"
    ]
  },
  {
    "q": "Which Flask decorator restricts a route to only POST requests?",
    "c": null,
    "o": [
      "@app.route('/path', methods=['POST'])",
      "@app.post_only",
      "@app.methods('POST')",
      "@app.route_post('/path')"
    ]
  },
  {
    "q": "Which Flask extension provides CSRF protection?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-CSRF",
      "Flask-Security",
      "Flask-Login"
    ]
  },
  {
    "q": "How are secret keys typically used in Flask?",
    "c": null,
    "o": [
      "For securely signing session cookies",
      "To store database passwords",
      "To encrypt HTML responses",
      "To log server requests"
    ]
  },
  {
    "q": "What does the `abort(404)` function do in Flask?",
    "c": null,
    "o": [
      "Immediately raises a 404 Not Found error",
      "Logs out the current user",
      "Stops the Flask server",
      "Redirects to homepage"
    ]
  },
  {
    "q": "Which Flask extension simplifies building RESTful APIs?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-SQLAlchemy",
      "Flask-Mail",
      "Flask-Migrate"
    ]
  },
  {
    "q": "What does `request.get_json()` do in Flask?",
    "c": null,
    "o": [
      "Parses incoming JSON data from the request body",
      "Returns query parameters as a dictionary",
      "Reads form data",
      "Returns raw request bytes"
    ]
  },
  {
    "q": "What is the correct way to return JSON data in a Flask route?",
    "c": null,
    "o": [
      "return jsonify(data)",
      "return json.dumps(data)",
      "return data.to_json()",
      "return str(data)"
    ]
  },
  {
    "q": "Which object is used in Flask to store user-specific data across requests?",
    "c": null,
    "o": [
      "session",
      "g",
      "request",
      "flash"
    ]
  },
  {
    "q": "What does `app.config['DEBUG'] = True` do?",
    "c": null,
    "o": [
      "Enables auto-reloading and debug error pages",
      "Starts a production server",
      "Logs all user input",
      "Disables error handling"
    ]
  },
  {
    "q": "Which method should be used in Flask to send email?",
    "c": null,
    "o": [
      "Using Flask-Mail’s `Message` and `mail.send()`",
      "Using `print()` function",
      "Using `requests.post()`",
      "Flask has no email functionality"
    ]
  },
  {
    "q": "What is the function of `@app.before_request`?",
    "c": null,
    "o": [
      "Runs a function before every request",
      "Validates user login",
      "Logs error messages",
      "Registers a blueprint"
    ]
  },
  {
    "q": "What does `flask db migrate` do when using Flask-Migrate?",
    "c": null,
    "o": [
      "Generates a new migration script based on model changes",
      "Applies pending migrations to the database",
      "Creates a new database",
      "Rolls back the database to a previous state"
    ]
  },
  {
    "q": "What does `make_response()` do in Flask?",
    "c": null,
    "o": [
      "Allows manual construction of a response object",
      "Creates a form object",
      "Initializes the app context",
      "Builds the database schema"
    ]
  },
  {
    "q": "What is the default port Flask uses when running with `flask run`?",
    "c": null,
    "o": [
      "5000",
      "8080",
      "80",
      "3000"
    ]
  },
  {
    "q": "Which command is used to run Flask in production with Gunicorn?",
    "c": null,
    "o": [
      "gunicorn app:app",
      "flask run",
      "python app.py",
      "runserver app"
    ]
  },
  {
    "q": "What does the `@app.teardown_appcontext` decorator do?",
    "c": null,
    "o": [
      "Registers a function to run when the application context ends",
      "Cleans up user session data",
      "Logs out the user",
      "Initializes the app context"
    ]
  },
  {
    "q": "How do you enable Cross-Origin Resource Sharing (CORS) in Flask?",
    "c": null,
    "o": [
      "Using the `flask_cors` extension",
      "Using the `flask_mail` extension",
      "Using the `flask_security` extension",
      "CORS is enabled by default"
    ]
  },
  {
    "q": "Which testing client does Flask provide for unit testing routes?",
    "c": null,
    "o": [
      "app.test_client()",
      "app.run_test()",
      "client.run()",
      "test.runner()"
    ]
  },
  {
    "q": "How can you protect a Flask route with a login requirement?",
    "c": null,
    "o": [
      "Using `@login_required` from Flask-Login",
      "Using `@authenticated` from Flask-Security",
      "Using `@secure_route`",
      "Adding a password parameter to the route"
    ]
  },
  {
    "q": "Which WSGI server is commonly used to deploy Flask apps?",
    "c": null,
    "o": [
      "Gunicorn",
      "Nodemon",
      "Apache Ant",
      "Webpack"
    ]
  },
  {
    "q": "How can you rate-limit requests in a Flask app?",
    "c": null,
    "o": [
      "Using `Flask-Limiter` extension",
      "Using `Flask-RateControl`",
      "Adding time.sleep() in route",
      "Requests are rate-limited by default"
    ]
  },
  {
    "q": "What does Flask’s `abort(404)` function do?",
    "c": null,
    "o": [
      "Immediately stops processing and returns a 404 error response",
      "Logs the error",
      "Redirects the user to the homepage",
      "Raises a Python exception"
    ]
  },
  {
    "q": "How can you serve static files (like CSS/JS) in Flask?",
    "c": null,
    "o": [
      "Place them in the `static` folder and access via `/static/filename`",
      "Put them in the `templates` folder",
      "Serve them via a separate Python route",
      "Use `flask_static_serve` extension"
    ]
  },
  {
    "q": "Which header is used to set a secure cookie in Flask?",
    "c": null,
    "o": [
      "Set-Cookie: Secure",
      "Authorization",
      "X-Forwarded-Proto",
      "X-CSRF-Token"
    ]
  },
  {
    "q": "What is the primary purpose of using Blueprints in Flask?",
    "c": null,
    "o": [
      "To organize application components into reusable modules",
      "To define database schemas",
      "To serve static files",
      "To handle user authentication"
    ]
  },
  {
    "q": "Which symbol is used in Jinja2 to denote template expressions?",
    "c": null,
    "o": [
      "{{ ... }}",
      "<% ... %>",
      "[[ ... ]]",
      "${ ... }"
    ]
  },
  {
    "q": "How do you register a Blueprint in your Flask app?",
    "c": null,
    "o": [
      "app.register_blueprint(my_blueprint)",
      "app.use(my_blueprint)",
      "my_blueprint.attach(app)",
      "blueprint.register(app)"
    ]
  },
  {
    "q": "Which extension is commonly used to add WebSocket support in Flask?",
    "c": null,
    "o": [
      "Flask-SocketIO",
      "Flask-WSGI",
      "Flask-Realtime",
      "Flask-WebConnect"
    ]
  },
  {
    "q": "What does `db.create_all()` do in Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "Creates all tables defined by SQLAlchemy models",
      "Starts a database connection",
      "Creates a new Flask app",
      "Drops existing database tables"
    ]
  },
  {
    "q": "In Jinja2, how do you include another template?",
    "c": null,
    "o": [
      "{% include 'header.html' %}",
      "{% load 'header.html' %}",
      "{{ import 'header.html' }}",
      "{% use 'header.html' %}"
    ]
  },
  {
    "q": "What is the default folder for Jinja2 templates in a Flask app?",
    "c": null,
    "o": [
      "templates/",
      "static/",
      "views/",
      "html/"
    ]
  },
  {
    "q": "Which method is used to query all records of a model in Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "Model.query.all()",
      "Model.get_all()",
      "Model.fetch()",
      "Model.query.fetch_all()"
    ]
  },
  {
    "q": "How do you define a route inside a Flask Blueprint?",
    "c": null,
    "o": [
      "@blueprint.route('/path')",
      "@app.route('/path')",
      "@route('/path')",
      "@flask.route('/path')"
    ]
  },
  {
    "q": "What is the main benefit of using Jinja2's `extends` keyword?",
    "c": null,
    "o": [
      "To reuse a base layout and override content blocks",
      "To import static files",
      "To fetch database content",
      "To define SQL schemas"
    ]
  },
  {
    "q": "Which Flask extension is commonly used to build RESTful APIs?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-API",
      "Flask-RESTX",
      "Flask-JSON"
    ]
  },
  {
    "q": "In Flask, which object provides access to incoming request data?",
    "c": null,
    "o": [
      "request",
      "response",
      "app",
      "session"
    ]
  },
  {
    "q": "What is the purpose of a JWT token in a Flask app?",
    "c": null,
    "o": [
      "To securely transmit user identity between client and server",
      "To encrypt database content",
      "To validate HTML forms",
      "To handle route redirection"
    ]
  },
  {
    "q": "Which method retrieves query parameters from the URL in Flask?",
    "c": null,
    "o": [
      "request.args.get('param')",
      "request.form['param']",
      "request.json['param']",
      "request.data['param']"
    ]
  },
  {
    "q": "What is typically stored in the payload of a JWT token?",
    "c": null,
    "o": [
      "User claims and expiration time",
      "User password",
      "Request headers",
      "Flask route path"
    ]
  },
  {
    "q": "What HTTP method is typically used to update existing data via a REST API?",
    "c": null,
    "o": [
      "PUT",
      "GET",
      "POST",
      "PATCH"
    ]
  },
  {
    "q": "How do you return a JSON response in Flask?",
    "c": null,
    "o": [
      "return jsonify(data)",
      "return json(data)",
      "return response(data)",
      "return data.jsonify()"
    ]
  },
  {
    "q": "Which library is commonly used for encoding and decoding JWTs in Flask?",
    "c": null,
    "o": [
      "PyJWT",
      "JsonWeb",
      "Flask-Auth",
      "Flask-Session"
    ]
  },
  {
    "q": "In a REST API, which status code represents 'Created'?",
    "c": null,
    "o": [
      "201",
      "200",
      "204",
      "400"
    ]
  },
  {
    "q": "How can you protect a Flask route so that only authenticated users with JWT can access it?",
    "c": null,
    "o": [
      "Use @jwt_required decorator",
      "Use @auth.login_required",
      "Use @login_required",
      "Use @secure_token"
    ]
  },
  {
    "q": "What is the purpose of Blueprints in Flask?",
    "c": null,
    "o": [
      "To organize application routes and logic into reusable components",
      "To speed up the server performance",
      "To define SQL schemas",
      "To manage configuration settings"
    ]
  },
  {
    "q": "How do you register a Blueprint in a Flask app?",
    "c": null,
    "o": [
      "app.register_blueprint(my_blueprint)",
      "app.use(my_blueprint)",
      "app.include(my_blueprint)",
      "app.attach(my_blueprint)"
    ]
  },
  {
    "q": "In Flask, what is the `before_request` decorator used for?",
    "c": null,
    "o": [
      "To execute code before every request",
      "To log user activity after a request",
      "To define route URL rules",
      "To modify response headers"
    ]
  },
  {
    "q": "Which object in Flask allows setting response headers globally after a request?",
    "c": null,
    "o": [
      "after_request",
      "before_request",
      "context_processor",
      "request_hook"
    ]
  },
  {
    "q": "How do you test a Flask route without running the server?",
    "c": null,
    "o": [
      "Use Flask’s test client",
      "Use unittest.main() directly",
      "Use curl command line tool",
      "You can't test without running the server"
    ]
  },
  {
    "q": "What does `app.testing = True` do in a Flask app?",
    "c": null,
    "o": [
      "Enables exceptions to bubble up for testing",
      "Starts the app in debug mode",
      "Runs Flask on port 8080",
      "Adds logging support"
    ]
  },
  {
    "q": "Which HTTP status code indicates that a PUT request was successful with no content returned?",
    "c": null,
    "o": [
      "204",
      "200",
      "201",
      "400"
    ]
  },
  {
    "q": "How can you modularize a large Flask application?",
    "c": null,
    "o": [
      "By using Blueprints",
      "By using Jinja2 templates",
      "By installing Flask-Admin",
      "By declaring all routes in app.py"
    ]
  },
  {
    "q": "What does the `@app.errorhandler(404)` decorator do?",
    "c": null,
    "o": [
      "Handles 404 errors with a custom response",
      "Redirects to the home page",
      "Registers a new route",
      "Logs errors in the database"
    ]
  },
  {
    "q": "Which Flask object can you use to simulate requests in test cases?",
    "c": null,
    "o": [
      "app.test_client()",
      "request.simulate()",
      "app.fake_request()",
      "test_case.request()"
    ]
  },
  {
    "q": "What does `db.create_all()` do in Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "Creates all tables defined by models if they don't exist",
      "Drops all existing tables and creates new ones",
      "Adds sample data to the database",
      "Syncs models with a remote database"
    ]
  },
  {
    "q": "How do you define a one-to-many relationship in Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "Using `db.relationship` and `db.ForeignKey`",
      "Using `db.connect` and `db.link`",
      "Using `db.one_to_many` method",
      "Using nested model classes"
    ]
  },
  {
    "q": "What Jinja2 syntax is used to display a variable?",
    "c": null,
    "o": [
      "{{ variable }}",
      "{% variable %}",
      "%% variable %%", 
      "<< variable >>"
    ]
  },
  {
    "q": "Which Jinja2 syntax is used for control structures like if statements?",
    "c": null,
    "o": [
      "{% if condition %}",
      "{{ if condition }}",
      "{# if condition #}",
      "(( if condition ))"
    ]
  },
  {
    "q": "In Flask, where should your HTML template files be placed by default?",
    "c": null,
    "o": [
      "In the `templates/` directory",
      "In the `static/` directory",
      "In the `views/` directory",
      "In the `html/` directory"
    ]
  },
  {
    "q": "What is the purpose of the `async def` syntax in Flask 2.0+ views?",
    "c": null,
    "o": [
      "To define asynchronous routes for better concurrency",
      "To make the view execute at startup",
      "To call external APIs without any response",
      "To auto-refresh the route every second"
    ]
  },
  {
    "q": "Which Flask function is used to render Jinja2 templates?",
    "c": null,
    "o": [
      "render_template()",
      "send_template()",
      "render_html()",
      "template_response()"
    ]
  },
  {
    "q": "Which SQLAlchemy field type would best represent a large block of text?",
    "c": null,
    "o": [
      "db.Text",
      "db.String(255)",
      "db.Integer",
      "db.Boolean"
    ]
  },
  {
    "q": "How can you include another template inside a Jinja2 template?",
    "c": null,
    "o": [
      "{% include 'file.html' %}",
      "{{ include 'file.html' }}",
      "{% embed 'file.html' %}",
      "{{ render 'file.html' }}"
    ]
  },
  {
    "q": "What happens if a template variable is not defined in the context?",
    "c": null,
    "o": [
      "Jinja2 raises an `UndefinedError`",
      "Flask crashes with a 500 error",
      "An empty string is silently rendered",
      "A warning is logged, but the app runs"
    ]
  },
  {
    "q": "What does `session` in Flask allow you to do?",
    "c": null,
    "o": [
      "Store user data between requests using cookies",
      "Execute background tasks",
      "Create new tables in the database",
      "Render templates conditionally"
    ]
  },
  {
    "q": "Which secret key is required to securely sign session cookies?",
    "c": null,
    "o": [
      "app.secret_key",
      "session.key",
      "flask.session_secret",
      "cookies.secret"
    ]
  },
  {
    "q": "How do you protect a Flask route so only logged-in users can access it?",
    "c": null,
    "o": [
      "Use the `@login_required` decorator",
      "Use `@secure_route` decorator",
      "Set `private=True` on the route",
      "Use `require_login()` inside the route"
    ]
  },
  {
    "q": "Which HTTP method is typically used to retrieve a resource in a REST API?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What does the `@app.route('/api/data', methods=['POST'])` decorator specify?",
    "c": null,
    "o": [
      "The endpoint only accepts POST requests",
      "The endpoint returns a POST method object",
      "Only internal requests can call this endpoint",
      "The endpoint executes during POST requests only if CSRF is disabled"
    ]
  },
  {
    "q": "Which module is commonly used to build RESTful APIs in Flask?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-JWT",
      "Flask-APIView",
      "Flask-Login"
    ]
  },
  {
    "q": "What is the correct way to return a JSON response in Flask?",
    "c": null,
    "o": [
      "return jsonify({'key': 'value'})",
      "return json.dumps({'key': 'value'})",
      "return Response({'key': 'value'})",
      "return render_template('data.json')"
    ]
  },
  {
    "q": "What HTTP status code typically represents 'Resource Created'?",
    "c": null,
    "o": [
      "201",
      "200",
      "400",
      "204"
    ]
  },
  {
    "q": "Which method is used to update an entire resource in REST API design?",
    "c": null,
    "o": [
      "PUT",
      "PATCH",
      "UPDATE",
      "MODIFY"
    ]
  },
  {
    "q": "What is the role of a token in Flask token-based authentication?",
    "c": null,
    "o": [
      "It verifies the identity of the user without storing sessions",
      "It encrypts the database schema",
      "It renders the template with dynamic content",
      "It authorizes file uploads"
    ]
  },
  {
    "q": "What is the main purpose of using Blueprints in a Flask application?",
    "c": null,
    "o": [
      "To organize application code into reusable components",
      "To create database migrations",
      "To style the frontend using CSS",
      "To manage sessions across users"
    ]
  },
  {
    "q": "How do you register a Blueprint in your main Flask app?",
    "c": null,
    "o": [
      "app.register_blueprint(my_blueprint)",
      "app.use_blueprint(my_blueprint)",
      "app.include(my_blueprint)",
      "my_blueprint.register(app)"
    ]
  },
  {
    "q": "Which of the following is a good practice when structuring a large Flask application?",
    "c": null,
    "o": [
      "Use Blueprints for separate features or modules",
      "Write all routes in a single `app.py` file",
      "Avoid using templates to reduce complexity",
      "Place HTML and Python files in the same directory"
    ]
  },
  {
    "q": "Where are static files typically stored in a Flask project?",
    "c": null,
    "o": [
      "In the `static/` directory",
      "In the `assets/` directory",
      "In the `public/` directory",
      "In the `templates/` directory"
    ]
  },
  {
    "q": "What command is used to run a Flask application using the Flask CLI?",
    "c": null,
    "o": [
      "flask run",
      "python app.py",
      "run flask",
      "python -m flask"
    ]
  },
  {
    "q": "Which server is recommended for deploying Flask apps in production?",
    "c": null,
    "o": [
      "Gunicorn",
      "Werkzeug (built-in)",
      "PyDev",
      "Jupyter"
    ]
  },
  {
    "q": "Which file typically stores the environment variables for Flask configuration?",
    "c": null,
    "o": [
      ".env",
      "config.py",
      "settings.ini",
      "flask.cfg"
    ]
  },
  {
    "q": "What is the purpose of setting `FLASK_ENV=production`?",
    "c": null,
    "o": [
      "To disable the debugger and enable production settings",
      "To enable automatic code reloading",
      "To expose debugging errors",
      "To disable static file serving"
    ]
  },
  {
    "q": "What is `__init__.py` used for in a Flask project package?",
    "c": null,
    "o": [
      "To mark the folder as a Python package",
      "To initialize the database connection",
      "To define URL routes",
      "To run background jobs"
    ]
  },
  {
    "q": "Which tool can be used to serve Flask apps behind Nginx in production?",
    "c": null,
    "o": [
      "uWSGI",
      "Flask-Dev",
      "SQLite",
      "Postman"
    ]
  },
  {
    "q": "Which Flask extension is commonly used for user authentication?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-Auth",
      "Flask-Session",
      "Flask-OAuth"
    ]
  },
  {
    "q": "What function in Flask-Login is used to protect a route that requires login?",
    "c": null,
    "o": [
      "@login_required",
      "@require_login",
      "@authenticated",
      "@secure_route"
    ]
  },
  {
    "q": "How can passwords be securely stored in a Flask application?",
    "c": null,
    "o": [
      "By hashing them using Werkzeug or bcrypt",
      "By encoding them in base64",
      "By saving them in plaintext in the database",
      "By encrypting them with a symmetric key and saving the key in the code"
    ]
  },
  {
    "q": "What does the `current_user` object in Flask-Login represent?",
    "c": null,
    "o": [
      "The currently logged-in user",
      "A list of all users in the session",
      "The session start time",
      "The default user in the system"
    ]
  },
  {
    "q": "What is CSRF protection used for in web applications?",
    "c": null,
    "o": [
      "To prevent malicious cross-site form submissions",
      "To secure user passwords from being leaked",
      "To encrypt HTTP requests",
      "To prevent SQL injection attacks"
    ]
  },
  {
    "q": "Which Flask extension can be used to implement CSRF protection?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Login",
      "Flask-OAuth",
      "Flask-Session"
    ]
  },
  {
    "q": "In Flask-WTF, what does `{{ form.hidden_tag() }}` do?",
    "c": null,
    "o": [
      "It includes CSRF tokens and hidden fields in a form",
      "It renders a hidden submit button",
      "It encrypts the form data",
      "It hides the form from unauthorized users"
    ]
  },
  {
    "q": "Which HTTP method should be used when handling form submissions with sensitive data?",
    "c": null,
    "o": [
      "POST",
      "GET",
      "PUT",
      "OPTIONS"
    ]
  },
  {
    "q": "How can you set a secure cookie in Flask?",
    "c": null,
    "o": [
      "By setting `session.cookie_secure = True` in config",
      "By using the `secure_cookie()` function",
      "By hashing the cookie manually",
      "By enabling HTTPS in the browser"
    ]
  },
  {
    "q": "What is the main reason for using HTTPS with Flask in production?",
    "c": null,
    "o": [
      "To encrypt communication between the client and server",
      "To speed up page loads",
      "To allow cross-origin requests",
      "To enable background jobs"
    ]
  },
  {
    "q": "Which HTTP method is typically used to update a resource in REST APIs?",
    "c": null,
    "o": [
      "PUT",
      "GET",
      "DELETE",
      "OPTIONS"
    ]
  },
  {
    "q": "In Flask, what does `request.get_json()` do?",
    "c": null,
    "o": [
      "Parses incoming JSON data from the request body",
      "Returns the JSON response object",
      "Fetches data from a remote JSON API",
      "Sends JSON data to the client"
    ]
  },
  {
    "q": "What status code is commonly returned after successfully creating a resource?",
    "c": null,
    "o": [
      "201",
      "200",
      "404",
      "302"
    ]
  },
  {
    "q": "Which Flask extension is commonly used for building RESTful APIs?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-WTF",
      "Flask-OAuth",
      "Flask-Login"
    ]
  },
  {
    "q": "What is the use of `@app.route('/item/<int:id>')` in Flask?",
    "c": null,
    "o": [
      "It captures an integer value from the URL and passes it to the view function",
      "It returns an item based on a string name",
      "It defines a POST endpoint",
      "It sets up a redirect route"
    ]
  },
  {
    "q": "Which HTTP method is considered safe and idempotent?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PATCH",
      "CONNECT"
    ]
  },
  {
    "q": "How do you send a JSON response from a Flask route?",
    "c": null,
    "o": [
      "Using `return jsonify(data)`",
      "Using `return json(data)`",
      "Using `return render_template(data)`",
      "Using `response.send_json(data)`"
    ]
  },
  {
    "q": "Which status code indicates a client-side error?",
    "c": null,
    "o": [
      "400",
      "200",
      "500",
      "301"
    ]
  },
  {
    "q": "What is the purpose of the PATCH method in REST?",
    "c": null,
    "o": [
      "To partially update a resource",
      "To delete a resource",
      "To replace a resource entirely",
      "To create a new resource"
    ]
  },
  {
    "q": "What does `abort(404)` do in Flask?",
    "c": null,
    "o": [
      "Stops request handling and returns a 404 error response",
      "Redirects the user to the 404 page",
      "Logs an error and continues execution",
      "Returns the home page"
    ]
  },
  {
    "q": "What is the main purpose of using Blueprints in a Flask application?",
    "c": null,
    "o": [
      "To organize the application into reusable modules",
      "To define routes for API documentation",
      "To improve database performance",
      "To style the frontend templates"
    ]
  },
  {
    "q": "Which command is used to run unit tests in a Flask project using unittest?",
    "c": null,
    "o": [
      "python -m unittest",
      "flask test",
      "pytest start",
      "flask run --test"
    ]
  },
  {
    "q": "What HTTP status code is typically returned for 'Unauthorized' access?",
    "c": null,
    "o": [
      "401",
      "403",
      "404",
      "500"
    ]
  },
  {
    "q": "In Flask, what does the `@app.errorhandler(404)` decorator do?",
    "c": null,
    "o": [
      "Registers a custom handler for 404 errors",
      "Logs all 404 errors to the console",
      "Redirects 404 errors to the index page",
      "Ignores the 404 error and continues execution"
    ]
  },
  {
    "q": "Where should you register Blueprints in a Flask project?",
    "c": null,
    "o": [
      "In the application factory or main file",
      "Inside each route function",
      "In the HTML template",
      "In the database configuration"
    ]
  },
  {
    "q": "What does Flask's `before_request` decorator do?",
    "c": null,
    "o": [
      "Runs a function before every request",
      "Triggers after sending a response",
      "Logs errors during database access",
      "Clears the session"
    ]
  },
  {
    "q": "Which Flask method is used to send a redirect response?",
    "c": null,
    "o": [
      "redirect()",
      "abort()",
      "url_for()",
      "send_response()"
    ]
  },
  {
    "q": "Which file is conventionally used to store tests in a Flask app?",
    "c": null,
    "o": [
      "test_app.py",
      "flask_test.py",
      "run_tests.py",
      "check_flask.py"
    ]
  },
  {
    "q": "In testing Flask apps, what does `app.test_client()` return?",
    "c": null,
    "o": [
      "A test client for simulating HTTP requests",
      "A database session",
      "The main app instance",
      "A template engine"
    ]
  },
  {
    "q": "Which of the following is NOT a benefit of using Blueprints?",
    "c": null,
    "o": [
      "Increased frontend rendering speed",
      "Separation of concerns",
      "Reusability across projects",
      "Cleaner application structure"
    ]
  },
  {
    "q": "What is the primary purpose of JWT in a Flask application?",
    "c": null,
    "o": [
      "To securely transmit information between parties as a JSON object",
      "To style frontend HTML templates",
      "To compress static files",
      "To prevent SQL injection"
    ]
  },
  {
    "q": "Which library is commonly used in Flask for working with JWTs?",
    "c": null,
    "o": [
      "Flask-JWT-Extended",
      "Flask-Login",
      "Flask-Security",
      "Flask-OAuthlib"
    ]
  },
  {
    "q": "What header is typically used to pass a JWT token in an HTTP request?",
    "c": null,
    "o": [
      "Authorization",
      "Token",
      "X-JWT-Token",
      "Bearer"
    ]
  },
  {
    "q": "Which Flask extension is used to send emails?",
    "c": null,
    "o": [
      "Flask-Mail",
      "Flask-Email",
      "Flask-Send",
      "Flask-SMTP"
    ]
  },
  {
    "q": "What protocol does Flask-Mail use to send emails by default?",
    "c": null,
    "o": [
      "SMTP",
      "IMAP",
      "POP3",
      "XMPP"
    ]
  },
  {
    "q": "Which of these is required to configure Flask-Mail?",
    "c": null,
    "o": [
      "MAIL_SERVER",
      "JWT_SECRET_KEY",
      "MAIL_SUBJECT_PREFIX",
      "OAUTH_CLIENT_ID"
    ]
  },
  {
    "q": "Which command is commonly used to deploy a Flask app with Gunicorn?",
    "c": null,
    "o": [
      "gunicorn app:app",
      "python app.py run",
      "flask deploy",
      "flask run --host"
    ]
  },
  {
    "q": "What file is typically used to list Python dependencies for deployment?",
    "c": null,
    "o": [
      "requirements.txt",
      "dependencies.json",
      "Pipfile.lock",
      "env.config"
    ]
  },
  {
    "q": "What is the purpose of the Procfile in Heroku deployment?",
    "c": null,
    "o": [
      "To tell Heroku how to run the application",
      "To list static assets",
      "To configure database settings",
      "To install system dependencies"
    ]
  },
  {
    "q": "Which environment variable is commonly used to access the port in Heroku?",
    "c": null,
    "o": [
      "PORT",
      "SERVER_PORT",
      "APP_PORT",
      "HEROKU_PORT"
    ]
  },
  {
    "q": "In SQLAlchemy, what does `db.relationship()` help define?",
    "c": null,
    "o": [
      "Relationships between database tables",
      "Custom API routes",
      "Form validations",
      "Flask blueprints"
    ]
  },
  {
    "q": "Which function is used to define a model in SQLAlchemy?",
    "c": null,
    "o": [
      "class ModelName(db.Model)",
      "def model(ModelName):",
      "with db.create():",
      "db.make_model(ModelName)"
    ]
  },
  {
    "q": "What is the primary purpose of Flask-Migrate?",
    "c": null,
    "o": [
      "Database schema migrations",
      "API rate limiting",
      "Form validation",
      "Email sending"
    ]
  },
  {
    "q": "Which command initializes Flask-Migrate?",
    "c": null,
    "o": [
      "flask db init",
      "flask migrate start",
      "flask db start",
      "flask migrate init"
    ]
  },
  {
    "q": "What does the `flask db upgrade` command do?",
    "c": null,
    "o": [
      "Applies the latest migration scripts to the database",
      "Rolls back the last migration",
      "Creates a new migration",
      "Drops the entire database"
    ]
  },
  {
    "q": "Which method in SQLAlchemy is used to add a record to the database session?",
    "c": null,
    "o": [
      "db.session.add()",
      "db.add()",
      "db.insert()",
      "db.save()"
    ]
  },
  {
    "q": "What is a typical use case for WebSockets in Flask?",
    "c": null,
    "o": [
      "Real-time chat applications",
      "Sending emails",
      "Serving static files",
      "Database migrations"
    ]
  },
  {
    "q": "Which Flask extension is commonly used to support WebSockets?",
    "c": null,
    "o": [
      "Flask-SocketIO",
      "Flask-WSGI",
      "Flask-Websockets",
      "Flask-RealTime"
    ]
  },
  {
    "q": "In Flask-SocketIO, what is the decorator used to listen for events?",
    "c": null,
    "o": [
      "@socketio.on('event')",
      "@app.websocket('event')",
      "@flask.event('event')",
      "@websocket.route('event')"
    ]
  },
  {
    "q": "Which method is used to send messages to clients in Flask-SocketIO?",
    "c": null,
    "o": [
      "emit()",
      "broadcast()",
      "send_message()",
      "deliver()"
    ]
  },
  {
    "q": "What is the purpose of Blueprints in Flask?",
    "c": null,
    "o": [
      "To organize a Flask application into modular components",
      "To configure Flask environment variables",
      "To define a database schema",
      "To secure API endpoints"
    ]
  },
  {
    "q": "How do you register a Blueprint in a Flask app?",
    "c": null,
    "o": [
      "app.register_blueprint(my_blueprint)",
      "app.use(my_blueprint)",
      "app.load(my_blueprint)",
      "app.init_blueprint(my_blueprint)"
    ]
  },
  {
    "q": "Which Flask extension is commonly used for writing unit tests?",
    "c": null,
    "o": [
      "pytest",
      "flask-testing",
      "nose",
      "unittest2"
    ]
  },
  {
    "q": "What HTTP status code does Flask return for a successful POST request by default?",
    "c": null,
    "o": [
      "200",
      "201",
      "204",
      "302"
    ]
  },
  {
    "q": "What is the recommended way to test Flask routes?",
    "c": null,
    "o": [
      "Using Flask's test_client()",
      "Using requests.get() directly",
      "Using Postman only",
      "Using curl commands"
    ]
  },
  {
    "q": "Which module is used for handling JSON Web Tokens in Flask?",
    "c": null,
    "o": [
      "Flask-JWT-Extended",
      "Flask-Login",
      "Flask-Security",
      "Flask-Auth"
    ]
  },
  {
    "q": "Which decorator is used to protect a route with JWT in Flask?",
    "c": null,
    "o": [
      "@jwt_required()",
      "@login_required",
      "@auth_token",
      "@secure_route"
    ]
  },
  {
    "q": "Which method sets a secret key in a Flask application?",
    "c": null,
    "o": [
      "app.config['SECRET_KEY'] = 'your_key'",
      "app.secret('your_key')",
      "app.set_key('your_key')",
      "app.env.secret = 'your_key'"
    ]
  },
  {
    "q": "In Flask-Login, what does `login_user()` do?",
    "c": null,
    "o": [
      "Logs in a user and updates the session",
      "Registers a new user",
      "Deletes the user session",
      "Validates JWT token"
    ]
  },
  {
    "q": "Which object in Flask provides access to session data?",
    "c": null,
    "o": [
      "session",
      "request",
      "g",
      "config"
    ]
  },
  {
    "q": "Which HTTP method is used to update an entire resource in RESTful APIs?",
    "c": null,
    "o": [
      "PUT",
      "POST",
      "PATCH",
      "GET"
    ]
  },
  {
    "q": "What is the role of Flask-RESTful's `Resource` class?",
    "c": null,
    "o": [
      "It defines a RESTful resource with methods like get(), post(), etc.",
      "It connects Flask to the database",
      "It handles HTTP errors",
      "It creates a Flask Blueprint"
    ]
  },
  {
    "q": "How do you define a route for a RESTful resource using Flask-RESTful?",
    "c": null,
    "o": [
      "api.add_resource(MyResource, '/endpoint')",
      "app.route('/endpoint')(MyResource)",
      "api.resource('/endpoint')(MyResource)",
      "app.resource_add(MyResource, '/endpoint')"
    ]
  },
  {
    "q": "What is a middleware in Flask?",
    "c": null,
    "o": [
      "A function that runs before or after a request is processed",
      "A decorator for authenticating users",
      "A built-in extension for security",
      "A class to define custom serializers"
    ]
  },
  {
    "q": "Which hook is used in Flask to execute code before each request?",
    "c": null,
    "o": [
      "@app.before_request",
      "@app.on_request",
      "@app.pre_request",
      "@app.first_request"
    ]
  },
  {
    "q": "What does Flask’s `@app.after_request` decorator do?",
    "c": null,
    "o": [
      "Modifies the response before it's sent to the client",
      "Logs incoming request data",
      "Modifies the request object",
      "Authenticates the user"
    ]
  },
  {
    "q": "Which header is crucial to prevent cross-site scripting (XSS) in Flask responses?",
    "c": null,
    "o": [
      "Content-Security-Policy",
      "Authorization",
      "Cache-Control",
      "Access-Control-Allow-Origin"
    ]
  },
  {
    "q": "How can you enforce HTTPS in a Flask app?",
    "c": null,
    "o": [
      "Using `Flask-Talisman`",
      "Using `Flask-SSLify` only",
      "Setting DEBUG=True",
      "Using `flask.secure()`"
    ]
  },
  {
    "q": "Which module can be used to limit API request rates in Flask?",
    "c": null,
    "o": [
      "Flask-Limiter",
      "Flask-Quota",
      "Flask-Rater",
      "Flask-RequestLimit"
    ]
  },
  {
    "q": "What is the default response format of Flask-RESTful?",
    "c": null,
    "o": [
      "JSON",
      "XML",
      "HTML",
      "YAML"
    ]
  },
  {
    "q": "Which command is used to create the database tables from SQLAlchemy models in Flask?",
    "c": null,
    "o": [
      "db.create_all()",
      "db.generate()",
      "db.build_tables()",
      "db.sync()"
    ]
  },
  {
    "q": "In SQLAlchemy, what does `nullable=False` enforce?",
    "c": null,
    "o": [
      "The column cannot contain NULL values",
      "The column must be indexed",
      "The column will have a unique constraint",
      "The column must be auto-incremented"
    ]
  },
  {
    "q": "Which method is used to add a new record in a SQLAlchemy session?",
    "c": null,
    "o": [
      "session.add(instance)",
      "session.insert(instance)",
      "session.save(instance)",
      "session.append(instance)"
    ]
  },
  {
    "q": "What does `db.session.commit()` do in Flask SQLAlchemy?",
    "c": null,
    "o": [
      "It saves all changes to the database",
      "It rolls back the last operation",
      "It clears the session",
      "It deletes a record"
    ]
  },
  {
    "q": "Which of the following represents a one-to-many relationship in SQLAlchemy?",
    "c": null,
    "o": [
      "db.relationship('Child', backref='parent')",
      "db.bind('Parent', 'Child')",
      "db.link(Parent, Child)",
      "db.connect('Child', foreign_key=True)"
    ]
  },
  {
    "q": "How can you enforce a unique constraint on a column using SQLAlchemy?",
    "c": null,
    "o": [
      "unique=True",
      "primary=True",
      "index=True",
      "nullable=False"
    ]
  },
  {
    "q": "Which SQLAlchemy function is used to rollback a transaction?",
    "c": null,
    "o": [
      "session.rollback()",
      "session.reset()",
      "session.undo()",
      "session.delete_all()"
    ]
  },
  {
    "q": "Which Flask extension allows you to perform schema migrations?",
    "c": null,
    "o": [
      "Flask-Migrate",
      "Flask-Upgrade",
      "Flask-Versioner",
      "Flask-DBSync"
    ]
  },
  {
    "q": "What does `lazy='dynamic'` do in SQLAlchemy relationships?",
    "c": null,
    "o": [
      "Returns a query object instead of a list",
      "Eager loads related data",
      "Automatically commits related changes",
      "Disables relationship loading"
    ]
  },
  {
    "q": "Which method is used to delete a record from the SQLAlchemy session?",
    "c": null,
    "o": [
      "session.delete(instance)",
      "session.remove(instance)",
      "session.drop(instance)",
      "session.destroy(instance)"
    ]
  },
  {
    "q": "Which Flask config value enables debug mode?",
    "c": null,
    "o": [
      "DEBUG = True",
      "TESTING = True",
      "DEVELOPMENT = True",
      "LOGGING = True"
    ]
  },
  {
    "q": "What is the default port Flask runs on when using `app.run()`?",
    "c": null,
    "o": [
      "5000",
      "8080",
      "8000",
      "3000"
    ]
  },
  {
    "q": "Which method is used to create a test client in Flask?",
    "c": null,
    "o": [
      "app.test_client()",
      "app.create_test()",
      "app.testing_mode()",
      "app.unit_client()"
    ]
  },
  {
    "q": "In a Flask test case, what does `client.get('/')` do?",
    "c": null,
    "o": [
      "Sends a GET request to the root URL",
      "Starts the Flask server",
      "Redirects to the root endpoint",
      "Returns 404 by default"
    ]
  },
  {
    "q": "Which WSGI server is commonly used to deploy Flask apps in production?",
    "c": null,
    "o": [
      "Gunicorn",
      "Werkzeug",
      "Flask-Bootstrap",
      "uWSGI"
    ]
  },
  {
    "q": "What is the purpose of `@app.errorhandler(404)`?",
    "c": null,
    "o": [
      "To customize the response when a page is not found",
      "To log all server errors",
      "To stop the server when an error occurs",
      "To enable HTTPS"
    ]
  },
  {
    "q": "What command is used to set the Flask app before running it?",
    "c": null,
    "o": [
      "export FLASK_APP=app.py",
      "set FLASK_RUN=app.py",
      "run FLASK=app",
      "flask set app=app.py"
    ]
  },
  {
    "q": "Which of these is a correct way to install Gunicorn?",
    "c": null,
    "o": [
      "pip install gunicorn",
      "flask install gunicorn",
      "apt-get flask gunicorn",
      "python run gunicorn"
    ]
  },
  {
    "q": "In Flask, which status code indicates 'Unauthorized'?",
    "c": null,
    "o": [
      "401",
      "403",
      "500",
      "301"
    ]
  },
  {
    "q": "What does `app.run(debug=True)` do?",
    "c": null,
    "o": [
      "Enables hot reloading and detailed error messages",
      "Disables error handling",
      "Switches Flask to production mode",
      "Forces SSL"
    ]
  },
  {
    "q": "Which extension is commonly used to build RESTful APIs in Flask?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-WTF",
      "Flask-SQLAlchemy",
      "Flask-Mail"
    ]
  },
  {
    "q": "Which HTTP method is typically used to update an existing resource in REST?",
    "c": null,
    "o": [
      "PUT",
      "GET",
      "DELETE",
      "OPTIONS"
    ]
  },
  {
    "q": "What decorator is used in Flask-RESTful to create a resource class endpoint?",
    "c": null,
    "o": [
      "@api.resource",
      "@app.route",
      "@rest.route",
      "@endpoint.resource"
    ]
  },
  {
    "q": "Which status code usually represents a successful POST request that created a resource?",
    "c": null,
    "o": [
      "201",
      "200",
      "204",
      "400"
    ]
  },
  {
    "q": "What does a Flask Blueprint help with?",
    "c": null,
    "o": [
      "Organizing application components",
      "Starting the app faster",
      "Generating HTML templates",
      "Creating virtual environments"
    ]
  },
  {
    "q": "How do you register a blueprint with a Flask app?",
    "c": null,
    "o": [
      "app.register_blueprint(bp)",
      "bp.connect(app)",
      "app.attach(bp)",
      "bp.bind_to(app)"
    ]
  },
  {
    "q": "Which extension helps implement login functionality in Flask?",
    "c": null,
    "o": [
      "Flask-Login",
      "Flask-RESTful",
      "Flask-Security",
      "Flask-Bcrypt"
    ]
  },
  {
    "q": "Which function checks if a user is authenticated in Flask-Login?",
    "c": null,
    "o": [
      "current_user.is_authenticated",
      "is_user_logged_in()",
      "auth.check_login()",
      "session.user()"
    ]
  },
  {
    "q": "What HTTP status code represents 'Forbidden'?",
    "c": null,
    "o": [
      "403",
      "401",
      "404",
      "500"
    ]
  },
  {
    "q": "In Flask, what type of token is commonly used in API authentication?",
    "c": null,
    "o": [
      "Bearer Token",
      "Session ID",
      "Password Hash",
      "Access Code"
    ]
  },
  {
    "q": "Which Flask extension is used for ORM support?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-WTF",
      "Flask-RESTful",
      "Flask-Admin"
    ]
  },
  {
    "q": "What does ORM stand for?",
    "c": null,
    "o": [
      "Object Relational Mapping",
      "Online Relational Model",
      "Object Rendering Model",
      "Original Resource Mapper"
    ]
  },
  {
    "q": "Which command initializes a new migration environment using Flask-Migrate?",
    "c": null,
    "o": [
      "flask db init",
      "flask migrate start",
      "flask migrate init",
      "flask db create"
    ]
  },
  {
    "q": "Which command creates a new migration file after model changes?",
    "c": null,
    "o": [
      "flask db migrate",
      "flask db create",
      "flask db build",
      "flask migrate update"
    ]
  },
  {
    "q": "Which command applies the migration to the database?",
    "c": null,
    "o": [
      "flask db upgrade",
      "flask db run",
      "flask migrate apply",
      "flask db apply"
    ]
  },
  {
    "q": "Which class should a model inherit from when using Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "db.Model",
      "Model.Base",
      "Base.Model",
      "SQLAlchemy.Model"
    ]
  },
  {
    "q": "What is the default primary key type in SQLAlchemy models?",
    "c": null,
    "o": [
      "Integer",
      "UUID",
      "String",
      "Serial"
    ]
  },
  {
    "q": "Which parameter makes a column the primary key in SQLAlchemy?",
    "c": null,
    "o": [
      "primary_key=True",
      "pk=True",
      "is_primary=True",
      "key=True"
    ]
  },
  {
    "q": "What does the 'nullable=False' argument do in a SQLAlchemy column?",
    "c": null,
    "o": [
      "Prevents NULL values in that column",
      "Makes the field optional",
      "Automatically generates a value",
      "Enables indexing"
    ]
  },
  {
    "q": "What does 'db.relationship()' do in SQLAlchemy models?",
    "c": null,
    "o": [
      "Defines a relationship between tables",
      "Creates a new table",
      "Inserts foreign key values",
      "Commits the session"
    ]
  },
  {
    "q": "What is the primary purpose of Blueprints in Flask?",
    "c": null,
    "o": [
      "To organize routes and views into reusable components",
      "To deploy Flask apps to production",
      "To manage database schemas",
      "To define app configuration settings"
    ]
  },
  {
    "q": "How do you register a blueprint in a Flask app?",
    "c": null,
    "o": [
      "app.register_blueprint(my_blueprint)",
      "app.add_route(my_blueprint)",
      "app.use(my_blueprint)",
      "app.load(my_blueprint)"
    ]
  },
  {
    "q": "Which file is commonly used to store environment-specific settings in a Flask app?",
    "c": null,
    "o": [
      ".env",
      "config.py",
      "settings.json",
      ".flaskrc"
    ]
  },
  {
    "q": "Which Python package is commonly used to load `.env` files in Flask?",
    "c": null,
    "o": [
      "python-dotenv",
      "flask-environment",
      "dotenv-loader",
      "envmanager"
    ]
  },
  {
    "q": "Which of the following is a valid way to define a configuration variable in Flask?",
    "c": null,
    "o": [
      "app.config['DEBUG'] = True",
      "app.set('DEBUG', True)",
      "app.debug = True",
      "config.DEBUG = True"
    ]
  },
  {
    "q": "What does the `url_prefix` argument do when registering a blueprint?",
    "c": null,
    "o": [
      "Adds a prefix to all routes defined in the blueprint",
      "Changes the domain of the blueprint",
      "Redirects all blueprint routes",
      "It disables routes under the blueprint"
    ]
  },
  {
    "q": "In a modular Flask app, where are Blueprints usually imported and registered?",
    "c": null,
    "o": [
      "In the app factory function",
      "Inside each route",
      "At the top of models.py",
      "In the database configuration file"
    ]
  },
  {
    "q": "Which environment variable is used to set the Flask app entry point?",
    "c": null,
    "o": [
      "FLASK_APP",
      "APP_NAME",
      "ENTRY_POINT",
      "RUN_APP"
    ]
  },
  {
    "q": "What does the `instance_relative_config=True` argument in Flask constructor allow?",
    "c": null,
    "o": [
      "Loading config from instance folder",
      "Creating database instances",
      "Registering routes dynamically",
      "Making config settings global"
    ]
  },
  {
    "q": "Which Flask command runs the app in development mode with auto-reload?",
    "c": null,
    "o": [
      "flask run --debug",
      "flask dev run",
      "python -m flask serve",
      "flask start --dev"
    ]
  },
  {
    "q": "Which Flask method is used to handle JSON data from a client request?",
    "c": null,
    "o": [
      "request.get_json()",
      "request.read_json()",
      "request.json_data()",
      "request.get_data()"
    ]
  },
  {
    "q": "How can you specify that a route should accept both GET and POST requests?",
    "c": null,
    "o": [
      "@app.route('/example', methods=['GET', 'POST'])",
      "@app.route('/example', type=['GET', 'POST'])",
      "@app.route('/example', allowed=['GET', 'POST'])",
      "@app.route('/example', mode=['GET', 'POST'])"
    ]
  },
  {
    "q": "What is returned when you call `jsonify()` in Flask?",
    "c": null,
    "o": [
      "A Response object with JSON data and proper MIME type",
      "A raw JSON string",
      "A plain text response",
      "An HTML template with embedded JSON"
    ]
  },
  {
    "q": "Which module must be imported to use `request` and `jsonify`?",
    "c": null,
    "o": [
      "from flask import request, jsonify",
      "import flask.request, flask.jsonify",
      "from flask.api import request, jsonify",
      "import flask.api.request as req"
    ]
  },
  {
    "q": "What is the default HTTP method for a Flask route?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "How can you get URL query parameters in a Flask view function?",
    "c": null,
    "o": [
      "request.args.get('param')",
      "request.form.get('param')",
      "request.query.get('param')",
      "request.url_param('param')"
    ]
  },
  {
    "q": "Which Flask method sends a custom status code along with a JSON response?",
    "c": null,
    "o": [
      "return jsonify(data), 201",
      "return json(data), status=201",
      "jsonify(data).status_code = 201",
      "return Response(data, status=201)"
    ]
  },
  {
    "q": "What is the purpose of `@app.before_request` in Flask?",
    "c": null,
    "o": [
      "To execute code before every request",
      "To log errors after a request fails",
      "To serve static files",
      "To define default headers"
    ]
  },
  {
    "q": "How do you check if a request was made using POST method?",
    "c": null,
    "o": [
      "request.method == 'POST'",
      "request.type == 'POST'",
      "request.is_post()",
      "request.form['method'] == 'POST'"
    ]
  },
  {
    "q": "Which of these MIME types is commonly used for JSON responses?",
    "c": null,
    "o": [
      "application/json",
      "text/json",
      "application/text",
      "text/html"
    ]
  },
  {
    "q": "What is the purpose of Flask Blueprints?",
    "c": null,
    "o": [
      "To organize a Flask app into reusable components",
      "To define a CSS theme for the Flask app",
      "To enforce API security rules",
      "To generate HTML templates automatically"
    ]
  },
  {
    "q": "How do you register a Blueprint in a Flask application?",
    "c": null,
    "o": [
      "app.register_blueprint(my_blueprint)",
      "app.use_blueprint(my_blueprint)",
      "app.include(my_blueprint)",
      "app.attach(my_blueprint)"
    ]
  },
  {
    "q": "In the app factory pattern, how is the Flask app typically created?",
    "c": null,
    "o": [
      "Inside a function like create_app()",
      "Directly in the global scope",
      "Via the command line",
      "With a static class method"
    ]
  },
  {
    "q": "Which of the following is a common use of `current_app` in Flask?",
    "c": null,
    "o": [
      "Access the app instance from outside the main file",
      "Define global routes",
      "Import blueprints",
      "Initialize Jinja templates"
    ]
  },
  {
    "q": "How do you load configuration from a Python file into a Flask app?",
    "c": null,
    "o": [
      "app.config.from_pyfile('config.py')",
      "app.config.read('config.py')",
      "app.settings.load('config.py')",
      "app.use_config('config.py')"
    ]
  },
  {
    "q": "What is the benefit of using an app factory function?",
    "c": null,
    "o": [
      "Supports multiple instances of the app with different configs",
      "Automatically connects to databases",
      "Reduces code reuse",
      "Improves HTML rendering speed"
    ]
  },
  {
    "q": "Which Flask object is used to store configuration variables?",
    "c": null,
    "o": [
      "app.config",
      "app.settings",
      "app.options",
      "flask.env"
    ]
  },
  {
    "q": "How do you define a route inside a blueprint?",
    "c": null,
    "o": [
      "@blueprint.route('/path')",
      "@app.route('/blueprint/path')",
      "@route('/path')",
      "@blueprint.bind('/path')"
    ]
  },
  {
    "q": "Where do you typically import and register blueprints in the app factory?",
    "c": null,
    "o": [
      "Inside the create_app() function",
      "Inside __init__.py only",
      "In main.py before app.run()",
      "In config.py"
    ]
  },
  {
    "q": "Which file structure promotes scalable Flask application development?",
    "c": null,
    "o": [
      "Application factory with blueprints and separate config files",
      "All logic in a single app.py file",
      "HTML templates in static/ folder",
      "Environment variables hardcoded into routes"
    ]
  },
  {
    "q": "Which extension is commonly used to integrate SQLAlchemy with Flask?",
    "c": null,
    "o": [
      "Flask-SQLAlchemy",
      "Flask-ORM",
      "Flask-Database",
      "Flask-Connector"
    ]
  },
  {
    "q": "What does `db.Model` represent in Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "A base class for all models",
      "A database session",
      "A SQL table",
      "An HTTP model"
    ]
  },
  {
    "q": "Which method creates the database tables from your models?",
    "c": null,
    "o": [
      "db.create_all()",
      "db.generate()",
      "db.sync()",
      "db.build_tables()"
    ]
  },
  {
    "q": "How do you define a one-to-many relationship in Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "Using `db.relationship()` and `db.ForeignKey()`",
      "Using `db.connect()`",
      "With `db.join()`",
      "Using `db.one_to_many()`"
    ]
  },
  {
    "q": "Which method adds an object to the database session?",
    "c": null,
    "o": [
      "db.session.add(obj)",
      "db.insert(obj)",
      "db.save(obj)",
      "db.write(obj)"
    ]
  },
  {
    "q": "How do you commit changes to the database in Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "db.session.commit()",
      "db.commit()",
      "db.session.save()",
      "db.flush()"
    ]
  },
  {
    "q": "What happens if you forget to call `db.session.commit()`?",
    "c": null,
    "o": [
      "Changes won’t be saved to the database",
      "Tables will be dropped",
      "Flask will crash",
      "An index will be rebuilt"
    ]
  },
  {
    "q": "How do you query all items from a table in Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "Model.query.all()",
      "Model.all()",
      "db.select_all(Model)",
      "Model.fetch_all()"
    ]
  },
  {
    "q": "How do you filter records in a SQLAlchemy query?",
    "c": null,
    "o": [
      "Model.query.filter_by(attribute=value)",
      "Model.where(attribute=value)",
      "Model.query.get(attribute=value)",
      "Model.filter(attribute=value)"
    ]
  },
  {
    "q": "What does `nullable=False` do in a column definition?",
    "c": null,
    "o": [
      "Prevents the column from being null",
      "Makes column unique",
      "Creates a default index",
      "Encrypts the column"
    ]
  },
  {
    "q": "Which Flask extension is commonly used for database migrations?",
    "c": null,
    "o": [
      "Flask-Migrate",
      "Flask-Migration",
      "Flask-DBManager",
      "Flask-Schema"
    ]
  },
  {
    "q": "What command initializes Alembic migrations in a Flask app?",
    "c": null,
    "o": [
      "flask db init",
      "flask db migrate",
      "flask migrate init",
      "flask db setup"
    ]
  },
  {
    "q": "What is the purpose of `flask db migrate`?",
    "c": null,
    "o": [
      "Generates migration scripts based on model changes",
      "Applies migrations to the database",
      "Deletes old migrations",
      "Rolls back database transactions"
    ]
  },
  {
    "q": "How do you define a many-to-many relationship in SQLAlchemy?",
    "c": null,
    "o": [
      "Using a secondary association table",
      "Using `db.ForeignKey` twice in one model",
      "With multiple `relationship()` calls",
      "SQLAlchemy does not support many-to-many"
    ]
  },
  {
    "q": "What parameter is used in `db.relationship()` to link the foreign key?",
    "c": null,
    "o": [
      "backref",
      "foreign_key",
      "join_key",
      "reference"
    ]
  },
  {
    "q": "Which method rolls back an uncommitted session in Flask-SQLAlchemy?",
    "c": null,
    "o": [
      "db.session.rollback()",
      "db.rollback()",
      "db.session.undo()",
      "db.clear()"
    ]
  },
  {
    "q": "What is the output type of `Model.query.first()`?",
    "c": null,
    "o": [
      "Single instance or None",
      "List of model objects",
      "Query object",
      "JSON response"
    ]
  },
  {
    "q": "Which method is used to delete a record from the database?",
    "c": null,
    "o": [
      "db.session.delete(obj)",
      "obj.remove()",
      "Model.query.delete(obj)",
      "db.delete(obj)"
    ]
  },
  {
    "q": "In a one-to-many relationship, which table has the foreign key?",
    "c": null,
    "o": [
      "The 'many' side",
      "The 'one' side",
      "Both tables",
      "Neither"
    ]
  },
  {
    "q": "Which of the following will update a column value in SQLAlchemy?",
    "c": null,
    "o": [
      "Set the attribute and commit: `obj.column = value; db.session.commit()`",
      "Call `update()` on the object",
      "Pass a dictionary to the model class",
      "SQLAlchemy automatically detects changes and saves them"
    ]
  },
  {
    "q": "Which HTTP status code is appropriate for unauthorized access in Flask APIs?",
    "c": null,
    "o": [
      "401",
      "403",
      "404",
      "400"
    ]
  },
  {
    "q": "What does JWT stand for in the context of Flask authentication?",
    "c": null,
    "o": [
      "JSON Web Token",
      "Java Web Token",
      "JavaScript Web Token",
      "Joint Web Token"
    ]
  },
  {
    "q": "Which header is used to pass a JWT token in API requests?",
    "c": null,
    "o": [
      "Authorization",
      "Token",
      "Authentication",
      "X-Token"
    ]
  },
  {
    "q": "In Flask-Login, what does the `@login_required` decorator do?",
    "c": null,
    "o": [
      "Restricts route access to authenticated users only",
      "Validates form inputs",
      "Encrypts the response",
      "Checks if a user has admin role"
    ]
  },
  {
    "q": "What command runs all tests in a Flask project using unittest?",
    "c": null,
    "o": [
      "python -m unittest discover",
      "flask test run",
      "pytest",
      "python test.py"
    ]
  },
  {
    "q": "What is a benefit of using Blueprints in a Flask REST API?",
    "c": null,
    "o": [
      "Modular route organization",
      "Increased response speed",
      "Automatic JWT generation",
      "Built-in login functionality"
    ]
  },
  {
    "q": "What Flask extension simplifies handling JWT tokens?",
    "c": null,
    "o": [
      "Flask-JWT-Extended",
      "Flask-Token",
      "Flask-Authlib",
      "Flask-Encrypted"
    ]
  },
  {
    "q": "Which of the following is **not** a valid HTTP method used in REST APIs?",
    "c": null,
    "o": [
      "FETCH",
      "GET",
      "POST",
      "PUT"
    ]
  },
  {
    "q": "How do you test a route in Flask without starting the server?",
    "c": null,
    "o": [
      "Using Flask’s test client",
      "Mocking the WSGI app",
      "Deploying to localhost",
      "Running through Postman"
    ]
  },
  {
    "q": "In a Flask REST API, which method is ideal for updating part of a resource?",
    "c": null,
    "o": [
      "PATCH",
      "PUT",
      "POST",
      "GET"
    ]
  },
  {
    "q": "Which extension is commonly used for caching in Flask applications?",
    "c": null,
    "o": [
      "Flask-Caching",
      "Flask-Memcache",
      "Flask-Speedup",
      "Flask-Boost"
    ]
  },
  {
    "q": "Which of the following is a valid backend for Flask-Caching?",
    "c": null,
    "o": [
      "Redis",
      "RabbitMQ",
      "MongoDB",
      "SQLite"
    ]
  },
  {
    "q": "Which server is commonly used to deploy Flask apps in production?",
    "c": null,
    "o": [
      "Gunicorn",
      "Werkzeug",
      "Uvicorn",
      "IDLE"
    ]
  },
  {
    "q": "What file is typically used to define dependencies for Docker in a Flask app?",
    "c": null,
    "o": [
      "requirements.txt",
      "setup.cfg",
      "Dockerfile",
      "Procfile"
    ]
  },
  {
    "q": "Which HTTP header helps prevent cross-site request forgery (CSRF)?",
    "c": null,
    "o": [
      "X-CSRF-Token",
      "Content-Type",
      "X-Requested-With",
      "Authorization"
    ]
  },
  {
    "q": "Which Flask extension helps protect against CSRF attacks?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Security",
      "Flask-OAuth",
      "Flask-Crypt"
    ]
  },
  {
    "q": "What is the recommended way to serve static files in a production Flask app?",
    "c": null,
    "o": [
      "Use a web server like Nginx",
      "Use Flask’s built-in server",
      "Serve them through Gunicorn",
      "Compress them in a zip file"
    ]
  },
  {
    "q": "Which protocol is essential for enabling WebSocket support in Flask?",
    "c": null,
    "o": [
      "WS",
      "HTTP/2",
      "TCP",
      "gRPC"
    ]
  },
  {
    "q": "Which Flask extension allows real-time WebSocket communication?",
    "c": null,
    "o": [
      "Flask-SocketIO",
      "Flask-Realtime",
      "Flask-Websockets",
      "Flask-Events"
    ]
  },
  {
    "q": "What is the primary purpose of using environment variables in Flask deployment?",
    "c": null,
    "o": [
      "To store configuration secrets",
      "To compile Python code",
      "To schedule cron jobs",
      "To improve performance"
    ]
  },
  {
    "q": "Which Flask extension is commonly used to handle database migrations?",
    "c": null,
    "o": [
      "Flask-Migrate",
      "Flask-DB",
      "Flask-Upgrade",
      "Flask-Alchemy"
    ]
  },
  {
    "q": "What command initializes the migration repository in a Flask app using Flask-Migrate?",
    "c": null,
    "o": [
      "flask db init",
      "flask db start",
      "flask migrate init",
      "flask db create"
    ]
  },
  {
    "q": "Which method in SQLAlchemy is used to create all database tables defined in models?",
    "c": null,
    "o": [
      "db.create_all()",
      "db.make_tables()",
      "db.setup()",
      "db.sync()"
    ]
  },
  {
    "q": "Which of the following is NOT a valid relationship type in SQLAlchemy?",
    "c": null,
    "o": [
      "one-to-many",
      "many-to-one",
      "one-to-self",
      "many-to-many"
    ]
  },
  {
    "q": "What does `nullable=False` do in a SQLAlchemy column definition?",
    "c": null,
    "o": [
      "Prevents null values in the column",
      "Sets the default value to False",
      "Creates an index on the column",
      "Makes the column a primary key"
    ]
  },
  {
    "q": "Which method should you call to apply new migrations to the database in Flask-Migrate?",
    "c": null,
    "o": [
      "flask db upgrade",
      "flask db apply",
      "flask migrate",
      "flask db sync"
    ]
  },
  {
    "q": "Which async-compatible web server is commonly used with Flask to support asynchronous views?",
    "c": null,
    "o": [
      "Hypercorn",
      "Gunicorn",
      "uWSGI",
      "mod_wsgi"
    ]
  },
  {
    "q": "Which of the following decorators allows defining asynchronous routes in Flask?",
    "c": null,
    "o": [
      "@app.route async def",
      "@app.async_route",
      "@app.route (async=True)",
      "@app.route"
    ]
  },
  {
    "q": "In SQLAlchemy, which function is used to define a many-to-many relationship via an association table?",
    "c": null,
    "o": [
      "db.Table",
      "db.Association",
      "db.Link",
      "db.JoinTable"
    ]
  },
  {
    "q": "What command generates a new migration file after model changes using Flask-Migrate?",
    "c": null,
    "o": [
      "flask db migrate",
      "flask db update",
      "flask db revise",
      "flask migrate make"
    ]
  },
  {
    "q": "Which Flask extension helps build REST APIs more easily with class-based views?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-API",
      "Flask-Classes",
      "Flask-Views"
    ]
  },
  {
    "q": "In Flask, what does `@app.before_request` decorator do?",
    "c": null,
    "o": [
      "Registers a function to run before each request",
      "Registers a route before another one",
      "Prevents duplicate requests",
      "Registers a middleware globally"
    ]
  },
  {
    "q": "What is the default content type returned by `Flask.jsonify()`?",
    "c": null,
    "o": [
      "application/json",
      "text/plain",
      "application/xml",
      "text/html"
    ]
  },
  {
    "q": "Which HTTP method is used by default when using a route like `@app.route('/submit')`?",
    "c": null,
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What does the `@app.errorhandler(404)` decorator do?",
    "c": null,
    "o": [
      "Registers a function to handle 404 errors",
      "Catches all HTTP errors",
      "Redirects invalid URLs",
      "Forces Flask to always return 404"
    ]
  },
  {
    "q": "Which function in Flask retrieves JSON data from a request?",
    "c": null,
    "o": [
      "request.get_json()",
      "request.json()",
      "request.fetch_json()",
      "request.JSON()"
    ]
  },
  {
    "q": "What is the correct way to define multiple HTTP methods for a route in Flask?",
    "c": null,
    "o": [
      "@app.route('/item', methods=['GET', 'POST'])",
      "@app.route('/item', type=['GET', 'POST'])",
      "@app.methods('/item', ['GET', 'POST'])",
      "@app.route('/item', method='GET|POST')"
    ]
  },
  {
    "q": "How do you make a Flask route return a custom HTTP status code?",
    "c": null,
    "o": [
      "return jsonify(data), 201",
      "return 201, jsonify(data)",
      "jsonify(data, 201)",
      "return make_response(data, status=201)"
    ]
  },
  {
    "q": "Which of these is used to handle cross-origin requests in Flask?",
    "c": null,
    "o": [
      "Flask-CORS",
      "Flask-Origin",
      "Flask-XHR",
      "Flask-Proxy"
    ]
  },
  {
    "q": "In Flask, how can you define a URL with a dynamic integer parameter named 'id'?",
    "c": null,
    "o": [
      "@app.route('/user/<int:id>')",
      "@app.route('/user/<id:int>')",
      "@app.route('/user/?id=<int>')",
      "@app.route('/user/{id}')"
    ]
  },
  {
    "q": "What is the purpose of Flask Blueprints?",
    "c": null,
    "o": [
      "To organize application code into reusable components",
      "To compile Python into bytecode",
      "To store static files",
      "To run Flask in debug mode"
    ]
  },
  {
    "q": "Which file extension is typically used to store Flask configuration settings?",
    "c": null,
    "o": [
      ".py",
      ".cfg",
      ".conf",
      ".ini"
    ]
  },
  {
    "q": "What does `@app.after_request` decorator do?",
    "c": null,
    "o": [
      "Executes a function after each request is processed",
      "Logs the app shutdown event",
      "Modifies the app configuration after boot",
      "Prevents server errors"
    ]
  },
  {
    "q": "How do you register a blueprint in a Flask app?",
    "c": null,
    "o": [
      "app.register_blueprint(my_blueprint)",
      "app.include(my_blueprint)",
      "app.add_blueprint(my_blueprint)",
      "blueprint.register(app)"
    ]
  },
  {
    "q": "Which Flask component is used to implement reusable code for different apps?",
    "c": null,
    "o": [
      "Blueprint",
      "Module",
      "Subroute",
      "Redirect"
    ]
  },
  {
    "q": "What is the correct way to apply middleware in Flask?",
    "c": null,
    "o": [
      "Wrap the WSGI app with a middleware class",
      "Use @middleware decorator",
      "Place it in config.py",
      "Add it as a Flask plugin"
    ]
  },
  {
    "q": "Which environment variable sets the Flask application entry point?",
    "c": null,
    "o": [
      "FLASK_APP",
      "FLASK_MAIN",
      "APP_FLASK",
      "RUN_FLASK"
    ]
  },
  {
    "q": "What does `app.config.from_object()` do?",
    "c": null,
    "o": [
      "Loads configuration values from a Python class",
      "Initializes an object in the app context",
      "Runs Flask in object-oriented mode",
      "Imports routes from another app"
    ]
  },
  {
    "q": "Which tool is commonly used to run production-ready Flask applications?",
    "c": null,
    "o": [
      "Gunicorn",
      "Werkzeug",
      "Uvicorn",
      "Manage.py"
    ]
  },
  {
    "q": "How can Flask help prevent CSRF attacks?",
    "c": null,
    "o": [
      "Using Flask-WTF with CSRFProtect",
      "By disabling form validation",
      "With JSON-only APIs",
      "Using `eval()` to sanitize data"
    ]
  },
  {
    "q": "What is the correct way to handle 404 errors in Flask?",
    "c": null,
    "o": [
      "@app.errorhandler(404)",
      "@app.route('/404')",
      "@app.catch(404)",
      "@app.handle_error(404)"
    ]
  },
  {
    "q": "Which Flask object provides access to the current request data?",
    "c": null,
    "o": [
      "request",
      "g",
      "session",
      "current_app"
    ]
  },
  {
    "q": "What is the purpose of Flask’s `g` object?",
    "c": null,
    "o": [
      "To store global variables during a request lifecycle",
      "To define global constants",
      "To handle static file routing",
      "To maintain application configurations"
    ]
  },
  {
    "q": "What does `app.teardown_appcontext` decorator do?",
    "c": null,
    "o": [
      "Registers a function to be called when the app context tears down",
      "Shuts down the server manually",
      "Restarts the app after a crash",
      "Unloads all modules during runtime"
    ]
  },
  {
    "q": "Which function is used to push an application context manually?",
    "c": null,
    "o": [
      "app.app_context().push()",
      "app.push_context()",
      "app.run_context()",
      "app.start_app_context()"
    ]
  },
  {
    "q": "What is the correct way to test a Flask app using the built-in test client?",
    "c": null,
    "o": [
      "client = app.test_client()",
      "client = FlaskClient(app)",
      "client = test_flask(app)",
      "client = flask.testing(app)"
    ]
  },
  {
    "q": "Which object holds data for a user session in Flask?",
    "c": null,
    "o": [
      "session",
      "g",
      "request",
      "flash"
    ]
  },
  {
    "q": "How does Flask implement secure sessions by default?",
    "c": null,
    "o": [
      "Using signed cookies",
      "By storing session in a database",
      "Through OAuth2 integration",
      "Using JWT tokens"
    ]
  },
  {
    "q": "Which method is used to flash a message to the next request?",
    "c": null,
    "o": [
      "flash('Message')",
      "g.flash('Message')",
      "request.flash('Message')",
      "app.flash('Message')"
    ]
  },
  {
    "q": "How can you restrict access to a Flask route to logged-in users only?",
    "c": null,
    "o": [
      "Using @login_required decorator",
      "Using @authenticated",
      "By checking session manually before request",
      "Using @secure_route"
    ]
  },
  {
    "q": "Which Flask extension is commonly used for form handling and CSRF protection?",
    "c": null,
    "o": [
      "Flask-WTF",
      "Flask-Form",
      "Flask-CSRF",
      "Flask-Forms"
    ]
  },
  {
    "q": "What does Flask’s Blueprint help you achieve?",
    "c": null,
    "o": [
      "Organizing routes into modular components",
      "Automatically deploy the app",
      "Create new templates dynamically",
      "Handle exceptions globally"
    ]
  },
  {
    "q": "Which Flask extension is ideal for building REST APIs with class-based views?",
    "c": null,
    "o": [
      "Flask-RESTful",
      "Flask-API",
      "Flask-RESTx",
      "Flask-Resource"
    ]
  },
  {
    "q": "What is the use of `before_request` in Flask?",
    "c": null,
    "o": [
      "To run code before every request",
      "To configure URL routes",
      "To respond to API requests",
      "To validate incoming JSON payloads"
    ]
  },
  {
    "q": "Which method in Flask is used to register error logging?",
    "c": null,
    "o": [
      "app.logger.error('message')",
      "app.log.error('message')",
      "log.error('message')",
      "flask.error('message')"
    ]
  },
  {
    "q": "What is the advantage of using `url_for()` in Flask templates?",
    "c": null,
    "o": [
      "It dynamically generates URLs for endpoints",
      "It statically links to URLs",
      "It validates query parameters",
      "It encodes route responses"
    ]
  },
  {
    "q": "What does `@app.after_request` do in Flask?",
    "c": null,
    "o": [
      "Modifies or logs the response before sending it",
      "Runs only if the request fails",
      "Aborts the request flow",
      "Validates cookies after login"
    ]
  },
  {
    "q": "How do you group multiple routes under a common URL prefix?",
    "c": null,
    "o": [
      "By using Flask Blueprints",
      "By creating route groups",
      "By subclassing Flask",
      "Using @app.route_group"
    ]
  },
  {
    "q": "What is the purpose of `app.config['JSONIFY_PRETTYPRINT_REGULAR'] = True`?",
    "c": null,
    "o": [
      "To format JSON responses with indentation",
      "To validate incoming JSON",
      "To enable security on JSON endpoints",
      "To store all responses in JSON format"
    ]
  },
  {
    "q": "How can you integrate asynchronous task processing in Flask?",
    "c": null,
    "o": [
      "Using Celery with a message broker like Redis",
      "Using Flask’s internal threading",
      "Using async/await in views",
      "With Flask-Waitress"
    ]
  }
]