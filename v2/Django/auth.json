[
    {
        "q": "What class is used to handle user authentication in Django?",
        "c": null,
        "o": [
            "AuthenticationForm",
            "LoginForm",
            "UserForm",
            "AuthForm"
        ]
    },
    {
        "q": "Which method is used to check if a user is authenticated?",
        "c": null,
        "o": [
            "is_authenticated",
            "authenticate_user",
            "check_auth",
            "validate_user"
        ]
    },
    {
        "q": "Which function logs in a user in Django?",
        "c": null,
        "o": [
            "login()",
            "authenticate()",
            "user_login()",
            "user_authenticate()"
        ]
    },
    {
        "q": "Which function is used to log out a user?",
        "c": null,
        "o": [
            "logout()",
            "end_session()",
            "user_logout()",
            "terminate_session()"
        ]
    },
    {
        "q": "What decorator is used to restrict view access to authenticated users?",
        "c": null,
        "o": [
            "@login_required",
            "@authenticated_only",
            "@require_user",
            "@auth_required"
        ]
    },
    {
        "q": "Which backend is used by default for authentication in Django?",
        "c": null,
        "o": [
            "ModelBackend",
            "AuthBackend",
            "DefaultBackend",
            "UserBackend"
        ]
    },
    {
        "q": "Which of the following is used to store password securely in Django?",
        "c": null,
        "o": [
            "make_password()",
            "encrypt_password()",
            "hash_password()",
            "store_password()"
        ]
    },
    {
        "q": "Which setting enables custom authentication backends in Django?",
        "c": null,
        "o": [
            "AUTHENTICATION_BACKENDS",
            "AUTH_BACKENDS",
            "AUTH_SETTINGS",
            "AUTH_PROVIDERS"
        ]
    },
    {
        "q": "What method is called to authenticate a user with credentials?",
        "c": null,
        "o": [
            "authenticate()",
            "validate_credentials()",
            "auth_user()",
            "login_user()"
        ]
    },
    {
        "q": "Which Django app provides authentication-related functionality?",
        "c": null,
        "o": [
            "django.contrib.auth",
            "django.contrib.admin",
            "django.contrib.sessions",
            "django.contrib.security"
        ]
    },
    {
        "q": "What class is used to handle user authentication in Django?",
        "c": null,
        "o": [
            "AuthenticationForm",
            "LoginForm",
            "UserForm",
            "AuthForm"
        ]
    },
    {
        "q": "Which method is used to check if a user is authenticated?",
        "c": null,
        "o": [
            "is_authenticated",
            "authenticate_user",
            "check_auth",
            "validate_user"
        ]
    },
    {
        "q": "Which function logs in a user in Django?",
        "c": null,
        "o": [
            "login()",
            "authenticate()",
            "user_login()",
            "user_authenticate()"
        ]
    },
    {
        "q": "Which function is used to log out a user?",
        "c": null,
        "o": [
            "logout()",
            "end_session()",
            "user_logout()",
            "terminate_session()"
        ]
    },
    {
        "q": "What decorator is used to restrict view access to authenticated users?",
        "c": null,
        "o": [
            "@login_required",
            "@authenticated_only",
            "@require_user",
            "@auth_required"
        ]
    },
    {
        "q": "Which backend is used by default for authentication in Django?",
        "c": null,
        "o": [
            "ModelBackend",
            "AuthBackend",
            "DefaultBackend",
            "UserBackend"
        ]
    },
    {
        "q": "Which of the following is used to store password securely in Django?",
        "c": null,
        "o": [
            "make_password()",
            "encrypt_password()",
            "hash_password()",
            "store_password()"
        ]
    },
    {
        "q": "Which setting enables custom authentication backends in Django?",
        "c": null,
        "o": [
            "AUTHENTICATION_BACKENDS",
            "AUTH_BACKENDS",
            "AUTH_SETTINGS",
            "AUTH_PROVIDERS"
        ]
    },
    {
        "q": "What method is called to authenticate a user with credentials?",
        "c": null,
        "o": [
            "authenticate()",
            "validate_credentials()",
            "auth_user()",
            "login_user()"
        ]
    },
    {
        "q": "Which Django app provides authentication-related functionality?",
        "c": null,
        "o": [
            "django.contrib.auth",
            "django.contrib.admin",
            "django.contrib.sessions",
            "django.contrib.security"
        ]
    },
    {
        "q": "What field is used to store a user's password in the User model?",
        "c": null,
        "o": [
            "password",
            "user_password",
            "pass_hash",
            "hash"
        ]
    },
    {
        "q": "Which method checks a user's password against a hashed password?",
        "c": null,
        "o": [
            "check_password()",
            "validate_password()",
            "verify_password()",
            "authenticate_password()"
        ]
    },
    {
        "q": "What is the default user model in Django?",
        "c": null,
        "o": [
            "User",
            "BaseUser",
            "Account",
            "Profile"
        ]
    },
    {
        "q": "Which method is used to create a new user in Django?",
        "c": null,
        "o": [
            "create_user()",
            "add_user()",
            "register_user()",
            "new_user()"
        ]
    },
    {
        "q": "Which of the following is NOT a built-in authentication backend?",
        "c": null,
        "o": [
            "RemoteUserBackend",
            "LDAPBackend",
            "OAuthBackend",
            "ModelBackend"
        ]
    },
    {
        "q": "What method is called to log out a user from a session?",
        "c": null,
        "o": [
            "logout()",
            "end_session()",
            "user_logout()",
            "terminate_session()"
        ]
    },
    {
        "q": "What property returns the username of the currently logged-in user?",
        "c": null,
        "o": [
            "request.user.username",
            "request.username",
            "current_user.username",
            "user.username"
        ]
    },
    {
        "q": "What is the primary purpose of the UserCreationForm?",
        "c": null,
        "o": [
            "Create new users",
            "Log in users",
            "Update user information",
            "Delete users"
        ]
    },
    {
        "q": "What method is used to generate a password reset token?",
        "c": null,
        "o": [
            "make_token()",
            "generate_token()",
            "create_token()",
            "reset_token()"
        ]
    },
    {
        "q": "Which view is used for password reset in Django?",
        "c": null,
        "o": [
            "PasswordResetView",
            "ResetPasswordView",
            "ChangePasswordView",
            "UserResetView"
        ]
    },
    {
        "q": "What is the use of password_reset_confirm template?",
        "c": null,
        "o": [
            "Confirm password reset",
            "Change password",
            "User registration",
            "Login page"
        ]
    },
    {
        "q": "What is the method to send password reset email?",
        "c": null,
        "o": [
            "send_mail()",
            "send_reset_email()",
            "mail_user()",
            "notify_user()"
        ]
    },
    {
        "q": "What is the use of the @login_required decorator?",
        "c": null,
        "o": [
            "Restrict access to views",
            "Authenticate users",
            "Create user sessions",
            "Log out users"
        ]
    },
    {
        "q": "What class is used to handle user registration?",
        "c": null,
        "o": [
            "UserCreationForm",
            "RegisterForm",
            "UserRegistration",
            "SignupForm"
        ]
    },
    {
        "q": "Which method is called to change a user's password?",
        "c": null,
        "o": [
            "set_password()",
            "update_password()",
            "change_password()",
            "modify_password()"
        ]
    },
    {
        "q": "Which attribute allows user to set a new password?",
        "c": null,
        "o": [
            "password1 and password2",
            "new_password and confirm_password",
            "user_password and confirm_user_password",
            "pass1 and pass2"
        ]
    },
    {
        "q": "What does the `@user_passes_test` decorator do?",
        "c": null,
        "o": [
            "Restricts access based on a custom condition",
            "Authenticates users",
            "Logs out users",
            "Validates user credentials"
        ]
    },
    {
        "q": "Which method can be used to logout a user?",
        "c": null,
        "o": [
            "logout()",
            "exit()",
            "end_session()",
            "remove_user()"
        ]
    },
    {
        "q": "Which method is used to create a superuser in Django?",
        "c": null,
        "o": [
            "createsuperuser",
            "create_superuser",
            "add_superuser",
            "superuser_create"
        ]
    },
    {
        "q": "Which setting defines the user model in Django?",
        "c": null,
        "o": [
            "AUTH_USER_MODEL",
            "USER_MODEL",
            "CUSTOM_USER_MODEL",
            "USER_SETTINGS"
        ]
    },
    {
        "q": "What is the purpose of the `get_user_model()` function?",
        "c": null,
        "o": [
            "Retrieve the user model",
            "Authenticate users",
            "Create user instances",
            "Return user list"
        ]
    },
    {
        "q": "What class is used for password change functionality?",
        "c": null,
        "o": [
            "PasswordChangeView",
            "ChangePasswordView",
            "UserChangeView",
            "PasswordUpdateView"
        ]
    },
    {
        "q": "What field must be unique in the User model?",
        "c": null,
        "o": [
            "username",
            "email",
            "password",
            "first_name"
        ]
    },
    {
        "q": "Which field stores the last login time of a user?",
        "c": null,
        "o": [
            "last_login",
            "last_access",
            "login_time",
            "last_seen"
        ]
    },
    {
        "q": "Which view is used for login in Django?",
        "c": null,
        "o": [
            "LoginView",
            "AuthView",
            "UserLoginView",
            "SessionLoginView"
        ]
    },
    {
        "q": "What is the use of the `username_field` attribute?",
        "c": null,
        "o": [
            "Specify the username field in custom user model",
            "Define email as username",
            "Set user permissions",
            "Create user groups"
        ]
    },
    {
        "q": "Which method is called to reset a user's password?",
        "c": null,
        "o": [
            "password_reset()",
            "reset_user_password()",
            "change_user_password()",
            "recover_password()"
        ]
    },
    {
        "q": "What is required to enable email authentication?",
        "c": null,
        "o": [
            "Email backend",
            "SMTP server",
            "Email API",
            "Mail service"
        ]
    },
    {
        "q": "What does the `is_staff` field indicate?",
        "c": null,
        "o": [
            "User can log in to admin site",
            "User has superuser privileges",
            "User is a regular user",
            "User has a verified email"
        ]
    },
    {
        "q": "What class can be subclassed for custom authentication?",
        "c": null,
        "o": [
            "BaseAuthentication",
            "AuthBackend",
            "ModelBackend",
            "CustomBackend"
        ]
    },
    {
        "q": "What type of authentication does Django support out of the box?",
        "c": null,
        "o": [
            "Session authentication",
            "Token authentication",
            "OAuth2 authentication",
            "Basic authentication"
        ]
    },
    {
        "q": "What is the default permission class in Django?",
        "c": null,
        "o": [
            "IsAuthenticated",
            "IsAdminUser",
            "AllowAny",
            "IsAuthenticatedOrReadOnly"
        ]
    },
    {
        "q": "What is the purpose of the `permission_required` decorator?",
        "c": null,
        "o": [
            "Check user permissions for views",
            "Log users out",
            "Authenticate users",
            "Redirect to login page"
        ]
    },
    {
        "q": "What method is used to send a verification email?",
        "c": null,
        "o": [
            "send_mail()",
            "send_verification_email()",
            "mail_user()",
            "notify_user()"
        ]
    },
    {
        "q": "What does the `is_superuser` field indicate?",
        "c": null,
        "o": [
            "User has all permissions",
            "User can change password",
            "User can create other users",
            "User can view logs"
        ]
    },
    {
        "q": "What is the purpose of `UserChangeForm`?",
        "c": null,
        "o": [
            "Update user information",
            "Create new users",
            "Reset passwords",
            "Login users"
        ]
    },
    {
        "q": "Which attribute can be used for user profile customization?",
        "c": null,
        "o": [
            "profile",
            "user_profile",
            "extra_data",
            "settings"
        ]
    },
    {
        "q": "What type of views are used to handle authentication?",
        "c": null,
        "o": [
            "Class-based views",
            "Function-based views",
            "Generic views",
            "All of the above"
        ]
    },
    {
        "q": "Which method is used to set a user's session on login?",
        "c": null,
        "o": [
            "set_session()",
            "login()",
            "create_session()",
            "initialize_session()"
        ]
    },
    {
        "q": "What should be done to use custom user model?",
        "c": null,
        "o": [
            "Set AUTH_USER_MODEL",
            "Use Default User",
            "Extend User model",
            "No special setup needed"
        ]
    },
    {
        "q": "What view should be used for confirming email?",
        "c": null,
        "o": [
            "EmailConfirmView",
            "VerifyEmailView",
            "ConfirmEmailView",
            "UserConfirmView"
        ]
    },
    {
        "q": "What method is called to check if a user is active?",
        "c": null,
        "o": [
            "is_active",
            "check_active",
            "is_user_active",
            "validate_active"
        ]
    },
    {
        "q": "What is the default error message for invalid credentials?",
        "c": null,
        "o": [
            "Incorrect username or password",
            "Authentication failed",
            "Invalid login",
            "Access denied"
        ]
    },
    {
        "q": "Which setting configures the email backend in Django?",
        "c": null,
        "o": [
            "EMAIL_BACKEND",
            "EMAIL_CONFIG",
            "EMAIL_SERVICE",
            "EMAIL_SETTINGS"
        ]
    },
    {
        "q": "What command creates the database tables for user model?",
        "c": null,
        "o": [
            "migrate",
            "makemigrations",
            "syncdb",
            "migrate_user"
        ]
    },
    {
        "q": "What does the `set_unusable_password()` method do?",
        "c": null,
        "o": [
            "Marks password as unusable",
            "Sets password to None",
            "Generates a random password",
            "Removes password"
        ]
    },
    {
        "q": "What decorator is used for user authorization?",
        "c": null,
        "o": [
            "@permission_required",
            "@login_required",
            "@user_passes_test",
            "@require_permission"
        ]
    },
    {
        "q": "Which method is used to create a password reset link?",
        "c": null,
        "o": [
            "make_password_reset_link()",
            "generate_reset_link()",
            "password_reset_link()",
            "create_reset_link()"
        ]
    },
    {
        "q": "What attribute checks if a user is anonymous?",
        "c": null,
        "o": [
            "is_anonymous",
            "is_guest",
            "is_visitor",
            "guest_user"
        ]
    },
    {
        "q": "Which class is used for verifying email addresses?",
        "c": null,
        "o": [
            "EmailVerificationView",
            "VerifyEmailView",
            "EmailConfirmView",
            "EmailCheckView"
        ]
    },
    {
        "q": "What view should be used to change user passwords?",
        "c": null,
        "o": [
            "PasswordChangeView",
            "ChangePasswordView",
            "UpdatePasswordView",
            "UserPasswordView"
        ]
    },
    {
        "q": "What setting is used to configure email subject prefix?",
        "c": null,
        "o": [
            "EMAIL_SUBJECT_PREFIX",
            "SUBJECT_PREFIX",
            "EMAIL_TITLE_PREFIX",
            "EMAIL_HEADER_PREFIX"
        ]
    },
    {
        "q": "Which method is called to change a user's email?",
        "c": null,
        "o": [
            "update_email()",
            "change_email()",
            "set_email()",
            "modify_email()"
        ]
    },
    {
        "q": "What class provides a form for user authentication?",
        "c": null,
        "o": [
            "AuthenticationForm",
            "UserAuthForm",
            "LoginForm",
            "AuthUserForm"
        ]
    },
    {
        "q": "What method is used to check user permissions?",
        "c": null,
        "o": [
            "has_perm()",
            "check_perm()",
            "validate_perm()",
            "user_has_perm()"
        ]
    },
    {
        "q": "Which signal is sent when a user logs in?",
        "c": null,
        "o": [
            "user_logged_in",
            "user_authenticated",
            "user_signed_in",
            "user_login"
        ]
    },
    {
        "q": "What is the purpose of the `login_url` parameter?",
        "c": null,
        "o": [
            "Redirect to login page",
            "Specify login view",
            "Authenticate users",
            "Create user session"
        ]
    },
    {
        "q": "Which of the following is a password validation option?",
        "c": null,
        "o": [
            "Minimum length",
            "Email requirement",
            "Username requirement",
            "Capital letter requirement"
        ]
    },
    {
        "q": "What class can be used for JWT authentication?",
        "c": null,
        "o": [
            "JWTAuthentication",
            "TokenAuth",
            "JWTAuth",
            "TokenAuthentication"
        ]
    },
    {
        "q": "What setting controls whether user registration is allowed?",
        "c": null,
        "o": [
            "ALLOW_USER_REGISTRATION",
            "USER_REGISTRATION",
            "REGISTRATION_ENABLED",
            "ENABLE_REGISTRATION"
        ]
    },
    {
        "q": "What is the default password hash algorithm in Django?",
        "c": null,
        "o": [
            "PBKDF2",
            "SHA256",
            "BCRYPT",
            "SHA1"
        ]
    },
    {
        "q": "Which class is used for managing user sessions?",
        "c": null,
        "o": [
            "SessionMiddleware",
            "UserSession",
            "SessionManager",
            "UserSessionMiddleware"
        ]
    },
    {
        "q": "What function retrieves the user object by username?",
        "c": null,
        "o": [
            "get_user()",
            "get_user_by_username()",
            "fetch_user()",
            "retrieve_user()"
        ]
    },
    {
        "q": "Which field is used to store user's email in the User model?",
        "c": null,
        "o": [
            "email",
            "user_email",
            "contact_email",
            "email_address"
        ]
    },
    {
        "q": "What method generates a password reset token for a user?",
        "c": null,
        "o": [
            "make_password_reset_token()",
            "generate_password_reset_token()",
            "create_reset_token()",
            "token_for_password_reset()"
        ]
    },
    {
        "q": "What class is used to handle account activation?",
        "c": null,
        "o": [
            "ActivationView",
            "AccountActivationView",
            "VerifyAccountView",
            "UserActivationView"
        ]
    },
    {
        "q": "Which signal is sent when a user logs out?",
        "c": null,
        "o": [
            "user_logged_out",
            "user_sign_out",
            "user_logout",
            "user_session_ended"
        ]
    },
    {
        "q": "What class is used for managing user permissions?",
        "c": null,
        "o": [
            "Permission",
            "UserPermissions",
            "UserAuth",
            "UserAccess"
        ]
    },
    {
        "q": "What decorator allows access to views for superusers only?",
        "c": null,
        "o": [
            "@user_passes_test(lambda u: u.is_superuser)",
            "@permission_required('admin')",
            "@login_required",
            "@require_superuser"
        ]
    },
    {
        "q": "What method allows to reset the password using token?",
        "c": null,
        "o": [
            "reset_password()",
            "change_password_using_token()",
            "reset_user_password()",
            "update_password_with_token()"
        ]
    },
    {
        "q": "What class is used for password reset emails?",
        "c": null,
        "o": [
            "PasswordResetEmail",
            "ResetEmailView",
            "UserPasswordResetEmail",
            "PasswordRecoveryEmail"
        ]
    },
    {
        "q": "What should be done to enable third-party authentication providers?",
        "c": null,
        "o": [
            "Install third-party package",
            "Modify User model",
            "Configure backend settings",
            "Add middleware"
        ]
    },
    {
        "q": "Which view allows for account activation after registration?",
        "c": null,
        "o": [
            "AccountActivationView",
            "UserActivationView",
            "VerifyUserView",
            "ActivateUserView"
        ]
    },
    {
        "q": "What is required to create a custom user model?",
        "c": null,
        "o": [
            "Define a new model and set AUTH_USER_MODEL",
            "Extend existing User model",
            "No custom user model allowed",
            "Change User model fields"
        ]
    },
    {
        "q": "What class is used for handling API token authentication?",
        "c": null,
        "o": [
            "TokenAuthentication",
            "ApiTokenAuth",
            "TokenAuth",
            "APITokenAuthentication"
        ]
    },
    {
        "q": "Which method is used to activate user accounts?",
        "c": null,
        "o": [
            "activate_account()",
            "confirm_user()",
            "user_activation()",
            "set_active()"
        ]
    },
    {
        "q": "What is the purpose of the `UserAdmin` class?",
        "c": null,
        "o": [
            "Manage users in admin site",
            "Create user accounts",
            "Handle user permissions",
            "Authenticate users"
        ]
    },
    {
        "q": "What does the `AUTHENTICATION_BACKENDS` setting do?",
        "c": null,
        "o": [
            "Defines authentication backends to use",
            "Sets up permissions",
            "Configures user model",
            "Enables third-party providers"
        ]
    },
    {
        "q": "Which signal is triggered before a user is deleted?",
        "c": null,
        "o": [
            "pre_delete",
            "user_pre_delete",
            "pre_user_delete",
            "user_deleted"
        ]
    },
    {
        "q": "Which field allows users to reset their passwords?",
        "c": null,
        "o": [
            "password_reset_token",
            "reset_token",
            "token_for_password_reset",
            "password_change_token"
        ]
    },
    {
        "q": "What class provides a form for changing user passwords?",
        "c": null,
        "o": [
            "PasswordChangeForm",
            "ChangePasswordForm",
            "UserPasswordChangeForm",
            "UpdatePasswordForm"
        ]
    },
    {
        "q": "What does the `has_perm()` method return?",
        "c": null,
        "o": [
            "True if user has permission",
            "User role",
            "User level",
            "Access rights"
        ]
    },
    {
        "q": "What field determines if a user can log in?",
        "c": null,
        "o": [
            "is_active",
            "active_status",
            "login_enabled",
            "can_login"
        ]
    },
    {
        "q": "What type of backend is required for LDAP authentication?",
        "c": null,
        "o": [
            "LDAPBackend",
            "AuthBackend",
            "ModelBackend",
            "UserBackend"
        ]
    },
    {
        "q": "What does the `request.user` object represent?",
        "c": null,
        "o": [
            "Currently logged-in user",
            "All users",
            "Anonymous user",
            "User permissions"
        ]
    },
    {
        "q": "What view is used for user registration?",
        "c": null,
        "o": [
            "RegistrationView",
            "UserRegistrationView",
            "SignupView",
            "UserSignupView"
        ]
    },
    {
        "q": "What is the purpose of `AUTH_PASSWORD_VALIDATORS`?",
        "c": null,
        "o": [
            "Set rules for password strength",
            "Configure password reset options",
            "Define user roles",
            "Handle session management"
        ]
    },
    {
        "q": "Which class is used for handling OAuth2 authentication?",
        "c": null,
        "o": [
            "OAuth2Authentication",
            "OAuthBackend",
            "OAuthProvider",
            "OAuthView"
        ]
    },
    {
        "q": "What method is called to generate a password reset link?",
        "c": null,
        "o": [
            "generate_password_reset_link()",
            "create_password_reset_url()",
            "password_reset_url()",
            "make_reset_link()"
        ]
    },
    {
        "q": "What does the `is_staff` field control?",
        "c": null,
        "o": [
            "Access to admin site",
            "Login permissions",
            "View permissions",
            "Create users"
        ]
    },
    {
        "q": "What method is called to send a password reset email?",
        "c": null,
        "o": [
            "send_password_reset_email()",
            "send_mail()",
            "mail_password_reset()",
            "notify_reset_email()"
        ]
    },
    {
        "q": "What is the main purpose of Django's built-in authentication?",
        "c": null,
        "o": [
            "Manage user accounts and permissions",
            "Handle user sessions",
            "Secure APIs",
            "Control database access"
        ]
    },
    {
        "q": "What is the use of `get_user()` method?",
        "c": null,
        "o": [
            "Retrieve the current user",
            "Get user by ID",
            "Find user by email",
            "Search user in database"
        ]
    },
    {
        "q": "Which field is used to store the user's date of last login?",
        "c": null,
        "o": [
            "last_login",
            "login_date",
            "last_accessed",
            "last_session"
        ]
    },
    {
        "q": "What method is used to verify a password against the stored hash?",
        "c": null,
        "o": [
            "check_password()",
            "verify_password()",
            "validate_password()",
            "compare_passwords()"
        ]
    },
    {
        "q": "Which command is used to start a new Django project?",
        "c": null,
        "o": [
            "django-admin startproject",
            "django start project",
            "manage.py startproject",
            "django-admin newproject"
        ]
    },
    {
        "q": "What is the default user model manager in Django?",
        "c": null,
        "o": [
            "UserManager",
            "BaseUserManager",
            "CustomUserManager",
            "DefaultUserManager"
        ]
    },
    {
        "q": "Which method is called to log a user in with credentials?",
        "c": null,
        "o": [
            "login()",
            "authenticate()",
            "validate()",
            "user_login()"
        ]
    },
    {
        "q": "What does the `UserCreationForm` allow you to do?",
        "c": null,
        "o": [
            "Create new users",
            "Change existing users",
            "Delete users",
            "Update user profiles"
        ]
    },
    {
        "q": "What is required to use Django's sessions framework?",
        "c": null,
        "o": [
            "Session middleware",
            "Session database",
            "Session storage",
            "Session management"
        ]
    },
    {
        "q": "What is the purpose of `is_authenticated` field?",
        "c": null,
        "o": [
            "Check if a user is logged in",
            "Verify user identity",
            "Authenticate user credentials",
            "Manage user sessions"
        ]
    },
    {
        "q": "What method is used to set a user's password?",
        "c": null,
        "o": [
            "set_password()",
            "update_password()",
            "change_password()",
            "modify_password()"
        ]
    },
    {
        "q": "What command initializes the database for a Django project?",
        "c": null,
        "o": [
            "migrate",
            "syncdb",
            "makemigrations",
            "initialize_db"
        ]
    },
    {
        "q": "What is the purpose of `UserAdmin` class?",
        "c": null,
        "o": [
            "Manage users in the Django admin interface",
            "Create new user instances",
            "Handle user password changes",
            "Control user permissions"
        ]
    },
    {
        "q": "What does the `get_user_model()` function do?",
        "c": null,
        "o": [
            "Returns the current user model",
            "Creates a new user model",
            "Fetches user details",
            "Validates user model"
        ]
    }
]